<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leveldb学习</title>
      <link href="2022/07/21/leveldb-xue-xi/"/>
      <url>2022/07/21/leveldb-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Google开发的一个高性能的KV数据库，提供自定义key排序。</p><h3 id="1-1、功能"><a href="#1-1、功能" class="headerlink" title="1.1、功能"></a>1.1、功能</h3><ul><li>key和value是任意的字节数组</li><li>数据根据key排序进行存储，用户可以自定义排序</li><li>有<code>Put(key, value), Get(key), Delete(key)</code>三个基本操作</li><li>支持原子修改、数据快照、数据压缩</li><li>支持正向和逆向遍历数据</li></ul><h3 id="1-2、基本操作"><a href="#1-2、基本操作" class="headerlink" title="1.2、基本操作"></a>1.2、基本操作</h3><ul><li><p>打开数据库</p><p>每个leveldb数据库都有一个相关的文件系统目录，所有数据存放在该目录下。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"leveldb/db.h"</span></span>leveldb<span class="token operator">::</span>DB<span class="token operator">*</span> db<span class="token punctuation">;</span>leveldb<span class="token operator">::</span>Options options<span class="token punctuation">;</span>options<span class="token punctuation">.</span>create_if_missing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>error_if_exists <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//捕捉数据库存在error</span>leveldb<span class="token operator">::</span>Status status <span class="token operator">=</span> leveldb<span class="token operator">::</span>DB<span class="token operator">::</span><span class="token function">Open</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token string">"/tmp/testdb"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Status</p><p> 可以打印函数调用返回的错误信息</p><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>Status s <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关闭数据库</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> open the db as described above <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">do</span> something with db <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">delete</span> db<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>基本读写操作</p><p> 比如移动key1的值到key2</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string value<span class="token punctuation">;</span>leveldb<span class="token operator">::</span>Status s <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">Get</span><span class="token punctuation">(</span>leveldb<span class="token operator">::</span><span class="token function">ReadOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> s <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">Put</span><span class="token punctuation">(</span>leveldb<span class="token operator">::</span><span class="token function">WriteOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key2<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> s <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">Delete</span><span class="token punctuation">(</span>leveldb<span class="token operator">::</span><span class="token function">WriteOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>原子更新</p><p>比如上面第二步未完成，进程挂掉了，这样数据就会在两个key里面都丢失了。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"leveldb/write_batch.h"</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>std<span class="token operator">::</span>string value<span class="token punctuation">;</span>leveldb<span class="token operator">::</span>Status s <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">Get</span><span class="token punctuation">(</span>leveldb<span class="token operator">::</span><span class="token function">ReadOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  leveldb<span class="token operator">::</span>WriteBatch batch<span class="token punctuation">;</span>  batch<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>  batch<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>key2<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">Write</span><span class="token punctuation">(</span>leveldb<span class="token operator">::</span><span class="token function">WriteOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>batch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同步写</p><p>默认leveldb写是异步的，但是leveldb也是支持同步写的。</p><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>WriteOptions write_options<span class="token punctuation">;</span>write_options<span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>db<span class="token operator">-</span><span class="token operator">></span><span class="token function">Put</span><span class="token punctuation">(</span>write_options<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一般来说，异步写性能要比同步写高出几千倍，但是异步写缺点是当进程挂掉时，最后几次update会丢失，但是同步写不会。这并不能说异步写不安全，因为有崩溃恢复机制（同步写来维护checkpoint）来保证安全。</p></li><li><p>并发</p><p>在一个进程里，同一个leveldb::DB对象可以被多个线程安全并发地共享，Iterator对象、WriteBatch对象用户必须自己同步。</p></li><li><p>迭代器</p><p>遍历数据库里所有数据</p><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>Iterator<span class="token operator">*</span> it <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewIterator</span><span class="token punctuation">(</span>leveldb<span class="token operator">::</span><span class="token function">ReadOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span><span class="token function">SeekToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span>  <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">assert</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Check for any errors found during the scan</span><span class="token keyword">delete</span> it<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历在[start, limit)范围内的数据</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Seek</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>   it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span>   it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逆向遍历数据</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span><span class="token function">SeekToLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>数据快照</p><p>​    对数据库的某个状态进行快照，使用ReadOptions::snapshot来维护，非空表示存在快照，读操作则作用于该快照，为空的话，作用于当前状态。</p><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>ReadOptions options<span class="token punctuation">;</span>options<span class="token punctuation">.</span>snapshot <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> apply some updates to db <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>leveldb<span class="token operator">::</span>Iterator<span class="token operator">*</span> iter <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewIterator</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> read <span class="token keyword">using</span> iter to view the state when the snapshot was created <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">delete</span> iter<span class="token punctuation">;</span>db<span class="token operator">-</span><span class="token operator">></span><span class="token function">ReleaseSnapshot</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Slice</p><p>Slice是一个包含length和指向字节数组指针的数据结构，返回Slice数据结构比std::string更节省空间，上面的it-&gt;key()和it-&gt;value()都是Slice数据类型。</p><p>字符串可以很容易转为Slice类型。</p><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>Slice s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>std<span class="token operator">::</span>string <span class="token function">str</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>leveldb<span class="token operator">::</span>Slice s2 <span class="token operator">=</span> str<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Slice转为c++字符串</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string str <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>str <span class="token operator">==</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>比较器</p><p>默认根据key按字典序排列，也可定义自己的比较器，需要继承 leveldb::Comparator    </p></li><li><p>Block Size</p><p>默认是4096字节，可以更改。</p></li><li><p>数据压缩</p><p>默认开启，因为默认压缩算法非常快；同时也可以禁用压缩</p><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>Options options<span class="token punctuation">;</span>options<span class="token punctuation">.</span>compression <span class="token operator">=</span> leveldb<span class="token operator">::</span>kNoCompression<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> leveldb<span class="token operator">::</span>DB<span class="token operator">::</span><span class="token function">Open</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Cache</p><p>主要用来缓存非压缩数据，压缩数据缓存由操作系统缓存或者客户端负责</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"leveldb/cache.h"</span></span>leveldb<span class="token operator">::</span>Options options<span class="token punctuation">;</span>options<span class="token punctuation">.</span>block_cache <span class="token operator">=</span> leveldb<span class="token operator">::</span><span class="token function">NewLRUCache</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1048576</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 100MB cache</span>leveldb<span class="token operator">::</span>DB<span class="token operator">*</span> db<span class="token punctuation">;</span>leveldb<span class="token operator">::</span>DB<span class="token operator">::</span><span class="token function">Open</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> use the db <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">delete</span> db<span class="token keyword">delete</span> options<span class="token punctuation">.</span>block_cache<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行批量读取时，需要关闭缓存，可以这样实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>ReadOptions options<span class="token punctuation">;</span>options<span class="token punctuation">.</span>fill_cache <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>leveldb<span class="token operator">::</span>Iterator<span class="token operator">*</span> it <span class="token operator">=</span> db<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewIterator</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span><span class="token function">SeekToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">-</span><span class="token operator">></span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">delete</span> it<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Key Layout</p><p>因为相邻的keys会被放在同一个block里，可以将经常一起访问的数据块key放置相邻，不常访问的数据块放在一个独立的region里。</p><p>假如在leveldb里实现一个简单的文件系统，可能要存储以下数据</p><pre class="line-numbers language-cpp"><code class="language-cpp">filename <span class="token operator">-</span><span class="token operator">></span> permission<span class="token operator">-</span>bits<span class="token punctuation">,</span> length<span class="token punctuation">,</span> list of file_block_idsfile_block_id <span class="token operator">-</span><span class="token operator">></span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>过滤器</p><p>可以减少Get()方法获取数据实际访问磁盘的数量。</p><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>Options options<span class="token punctuation">;</span>options<span class="token punctuation">.</span>filter_policy <span class="token operator">=</span> <span class="token function">NewBloomFilterPolicy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>leveldb<span class="token operator">::</span>DB<span class="token operator">*</span> db<span class="token punctuation">;</span>leveldb<span class="token operator">::</span>DB<span class="token operator">::</span><span class="token function">Open</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token string">"/tmp/testdb"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> use the database <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">delete</span> db<span class="token punctuation">;</span><span class="token keyword">delete</span> options<span class="token punctuation">.</span>filter_policy<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐使用布隆过滤器，那些不适合放在内存中或者随机读比较频繁的推荐使用过滤器。</p><p>如果自定义了比较器，过滤器也需要自定义。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CustomFilterPolicy</span> <span class="token operator">:</span> <span class="token keyword">public</span> leveldb<span class="token operator">::</span>FilterPolicy <span class="token punctuation">{</span> <span class="token keyword">private</span><span class="token operator">:</span>  leveldb<span class="token operator">::</span>FilterPolicy<span class="token operator">*</span> builtin_policy_<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">CustomFilterPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">builtin_policy_</span><span class="token punctuation">(</span>leveldb<span class="token operator">::</span><span class="token function">NewBloomFilterPolicy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token operator">~</span><span class="token function">CustomFilterPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> builtin_policy_<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"IgnoreTrailingSpacesFilter"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">CreateFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> leveldb<span class="token operator">::</span>Slice<span class="token operator">*</span> keys<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Use builtin bloom filter code after removing trailing spaces</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>leveldb<span class="token operator">::</span>Slice<span class="token operator">></span> <span class="token function">trimmed</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      trimmed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">RemoveTrailingSpaces</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    builtin_policy_<span class="token operator">-</span><span class="token operator">></span><span class="token function">CreateFilter</span><span class="token punctuation">(</span>trimmed<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Checksums</p><p>leveldb给所有存储在文件系统里的数据关联Checksums，有以下两个控件来控制Checksums的验证。</p><p><code>ReadOptions::verify_checksums</code>：当进行特殊读时，verify_checksums`设置为true来对所有读取的数据进行校验；默认情况下设为false。</p><p><code>Options::paranoid_checks</code>：一旦检测到内部崩溃，设置为true，让数据库捕捉error</p><p>如果数据库崩溃了，<code>leveldb::RepairDB</code>函数用来尽可能恢复数据。</p></li><li><p>Approximate Size</p><p><code>GetApproximateSizes</code>方法可以用来估算某几个key range占用文件系统空间大小。</p></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">leveldb<span class="token operator">::</span>Range ranges<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ranges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leveldb<span class="token operator">::</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ranges<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> leveldb<span class="token operator">::</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint64_t sizes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>db<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetApproximateSizes</span><span class="token punctuation">(</span>ranges<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> sizes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Environment</p><p>leveldb实现的所有文件操作（系统调用）都在leveldb::Env对象里进行了定义，也可以继承该对象进行功能扩展。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SlowEnv</span> <span class="token operator">:</span> <span class="token keyword">public</span> leveldb<span class="token operator">::</span>Env <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> implementation of the Env interface <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>SlowEnv env<span class="token punctuation">;</span>leveldb<span class="token operator">::</span>Options options<span class="token punctuation">;</span>options<span class="token punctuation">.</span>env <span class="token operator">=</span> <span class="token operator">&amp;</span>env<span class="token punctuation">;</span>Status s <span class="token operator">=</span> leveldb<span class="token operator">::</span>DB<span class="token operator">::</span><span class="token function">Open</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移植</p><p>可以参考<code>leveldb/port/port.h</code>、<code>leveldb/port/port_example.h</code>和<code>leveldb/util/env_posix.h</code></p></li></ul><h3 id="1-3-、实现"><a href="#1-3-、实现" class="headerlink" title="1.3 、实现"></a>1.3 、实现</h3><p>和BigTable类似，但是文件组织方式不同，有以下几种不同的文件类型。</p><ul><li><p>Log files(.log)</p><p>存储对数据库最近的更新操作，在内存中以memtable形式存在，每次读取数据都要将磁盘中数据更新到memtable，确保读到最新数据。当log数据超过4MB时，将其转化为Sorted tables，创建一个新的log文件。</p></li><li><p>Sorted tables(.ldb)</p><p>包括level-0， level-N（N&gt;=1)，其中level-0包含重复的key，level-N不包含。</p></li><li><p>Manifest</p><p>该文件列出了所有level的Sorted tables，相应的key range，其他元数据</p></li><li><p>Current</p><p>包含最新的Manifest文件的名字</p></li><li><p>Info logs</p></li></ul><h4 id="Compactions"><a href="#Compactions" class="headerlink" title="Compactions"></a>Compactions</h4><p>​    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20211207</title>
      <link href="2021/12/07/20211207/"/>
      <url>2021/12/07/20211207/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：</p><p>1、解决了上周独立镜像制作的问题</p><p>2、解决k8s集群的问题</p><p>下一步：</p><p>1、做sysbench压测</p><p>2、编写实现Pod，StatefulSet，Deployment等组件，完成在k8s集群上的部署，接着编写自动化脚本</p><p>3、编写实现资源监控模块</p><p>原先基础镜像cmake和gcc版本不对，从而导致make出现问题，考虑从ubuntu基础镜像开始构建，自己安装cmake更高版本，Dockerfile代码：</p><pre><code>FROM ubuntu:16.04WORKDIR /usr/srcADD cmake-3.18.4.tar.gz ./WORKDIR /usr/src/cmake-3.18.4RUN apt update &amp;&amp; apt install -y libssl-dev &amp;&amp; apt install -y gcc g++ \&amp;&amp; apt install -y make &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install \&amp;&amp; apt install -y libncurses5-dev \&amp;&amp; apt install -y vim-gtk &amp;&amp; apt install -y net-tools \&amp;&amp; mkdir -p /usr/ma/ma-cseWORKDIR /usr/ma/ma-cseCOPY data.tar.gz \     rt \     MA-MA_CSE \     ./RUN tar -zxvf data.tar.gz &amp;&amp; mkdir -p /usr/ma/ma-cse/bldWORKDIR /usr/ma/ma-cse/bldRUN cmake .. -DWITH_BOOST=../boost &amp;&amp; make -j 8 -k \# WORKDIR /usr/ma/ma-cse/bld/sql# ENTRYPOINT [&quot;nohup&quot;, &quot;./mysqld&quot;, &quot;--datadir=/usr/ma/ma-cse/data&quot;,&quot;--innodb_use_native_aio=0&quot;,&quot;--seuser=root&quot;, \# &quot;--sepassword=root&quot;, &quot;&gt; tmp.txt&quot;, &quot;--user=root&quot;, &quot;&amp;&quot;]</code></pre><p>最终构建成功</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20211207133852247.png" alt="image-20211207133852247"></p><p>构建Docker子网cse-net，运行一个CE，三个SE</p><pre><code>docker run --name=ma-se1 -p 20008:20008 --net cse-net --ip 172.18.0.2 -itd ma-cse:v2docker run --name=ma-se2 -p 20009:20009 --net cse-net --ip 172.18.0.3 -itd ma-cse:v2docker run --name=ma-se3 -p 20010:20010 --net cse-net --ip 172.18.0.4 -itd ma-cse:v2docker run --name=ma-ce -p 20011:20011 --net cse-net --ip 172.18.0.5 -itd ma-cse:v2</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20211207134525538.png" alt="image-20211207134525538"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20211207134328826.png" alt="image-20211207134328826"></p><p>进入各个容器，SE和CE分别运行</p><pre><code>nohup ./mysqld --datadir=/usr/ma/ma-cse/data --innodb_use_native_aio=0 --sehost=172.18.0.5 --seuser=root --sepassword=root --se=on &gt; tmp.txt --user=root &amp;</code></pre><pre><code>nohup ./mysqld --datadir=/usr/ma/ma-cse/data --innodb_use_native_aio=0 --sehost=172.18.0.2 --seuser=root --sepassword=root --ce=on &gt; tmp.txt --user=root &amp;</code></pre><p>正确性测试：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20211207141132252.png" alt="image-20211207141132252"></p><p>k8s集群在上次虚拟机强制重启后出现了问题，后面排查是镜像丢失，因网络原因，需编写脚本重新拉取</p><pre><code>et -o errexitset -o nounsetset -o pipefail##定义版本KUBE_VERSION=v1.22.4KUBE_PAUSE_VERSION=3.5ETCD_VERSION=3.5.0-0DNS_VERSION=1.8.4##原始仓库名GCR_URL=k8s.gcr.io##要使用的Dockerhub仓库DOCKERHUB_URL=gotok8s##镜像列表images=(kube-proxy:$&#123;KUBE_VERSION&#125;kube-scheduler:$&#123;KUBE_VERSION&#125;kube-controller-manager:$&#123;KUBE_VERSION&#125;kube-apiserver:$&#123;KUBE_VERSION&#125;pause:$&#123;KUBE_PAUSE_VERSION&#125;etcd:$&#123;ETCD_VERSION&#125;coredns/coredns:$&#123;DNS_VERSION&#125;)##循环拉取for imageName in $&#123;images[@]&#125; ; do  docker pull $DOCKERHUB_URL/$imageName  docker tag $DOCKERHUB_URL/$imageName $GCR_URL/$imageName  docker rmi $DOCKERHUB_URL/$imageNamedone</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20211207142004901.png" alt="image-20211207142004901"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20211102</title>
      <link href="2021/11/02/20211102/"/>
      <url>2021/11/02/20211102/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：</p><p>成功搭建Kubernetes主从集群环境</p><p>下一步：运行多SE版本代码，并编写脚本完成自动化部署</p><p>1、安装Kubelet, kubeadm, kubectl </p><p>用国外Google源需要配置代理，较麻烦，这里换成国内阿里镜像源进行安装</p><pre><code>cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.listdeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOFapt-get updateapt-get install -y kubelet kubeadm kubectl</code></pre><p>关闭防火墙、selinux，swap</p><pre><code>systemctl stop firewalld &amp;&amp; systemctl disable firewalldsetenforce 0swapoff -a</code></pre><p>对集群信息进行配置</p><pre><code>cat &gt;&gt;/etc/hosts&lt;&lt;EOF 192.168.100.142 k8s-master 192.168.100.139 k8s-node1 192.168.100.140 k8s-node2 EOF</code></pre><p>并修改主机名，方便查找</p><pre><code>hostnamectl set-hostname k8s-masterhostnamectl set-hostname k8s-node1hostnamectl set-hostname k8s-node2</code></pre><p>Master节点：</p><p>1）初始化</p><pre><code>kubeadm init --kubernetes-version=1.22.3 --apiserver-advertise-address=192.168.100.142  //Master IP地址--image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 //Service网络的IP地址范围--pod-network-cidr=10.244.0.0/16 //Pod网络的IP地址范围</code></pre><pre><code>kubeadm init \--apiserver-advertise-address=192.168.100.142 \--service-cidr=10.1.0.0/16 \--pod-network-cidr=10.244.0.0/16</code></pre><p>2）启动kubectl</p><pre><code>systemctl restart kubelet</code></pre><p>3）配置kubectl工具</p><pre><code>mkdir -p $HOME/.kubecp -i /etc/kubernetes/admin.conf $HOME/.kube/configchown $(id -u):$(id -g) $HOME/.kube/config</code></pre><p>4）安装网络管理工具Calico</p><pre><code>wget https://docs.projectcalico.org/v3.10/manifests/calico.yaml#修改IPV4POOL_CIDR地址 sed -i &#39;s/192.168.0.0/10.244.0.0/g&#39; calico.yaml #安装calico kubectl apply -f calico.yaml</code></pre><p>让所有slave节点加入集群</p><pre><code>kubeadm join 192.168.100.142:6443 --token mn8id6.n0ye1jbt6gamgvcz \        --discovery-token-ca-cert-hash sha256:c987f56a5681ed641301bbd2643554282fc1a142bafbf326d099227b74c1310a </code></pre><p>重启kubelet，Kubernetes集群初步搭建成功</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20211122170740097.png" alt="image-20211122170740097"></p><p>2、安装NFS用作存储</p><pre><code>apt install -y nfs-utilssystemctl enable nfs #开机启动 systemctl start nfs #启动</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20211026</title>
      <link href="2021/10/25/20211026/"/>
      <url>2021/10/25/20211026/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：</p><p>在docker里运行多SE版本代码，并建立通信</p><p>下一步：搭建Kubernetes主从集群环境，并将多SE版本代码在上面成功部署。</p><p>成功在docker内运行一个CE，三个SE</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20211026135233319.png" alt="image-20211026135233319"></p><p>接着创建一个该容器集群的通信网络</p><pre><code>sudo docker network create -d bridge cse-net</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20211026135723926.png" alt="image-20211026135723926"></p><p>然后将SE和CE容器添加到cse-net网络中, docker network connect 网络id/网络名  容器id/容器名</p><pre class="line-numbers language-shell"><code class="language-shell">sudo docker network connect 4ef4cbc245f4 aa5f764740bdsudo docker network connect 4ef4cbc245f4 83e37cf710acsudo docker network connect 4ef4cbc245f4 06e9b2beaeeasudo sdocker network connect 4ef4cbc245f4 feb86f16c817<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在bld/sql目录下</p><pre class="line-numbers language-shell"><code class="language-shell">nohup ./mysqld --datadir=/usr/ma/ma-cse/data --innodb_use_native_aio=0 --sehost=172.18.0.5 --seuser=root --sepassword=root --se=on > tmp.txt --user=root &<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">nohup ./mysqld --datadir=/usr/ma/ma-cse/data --innodb_use_native_aio=0 --sehost=172.18.0.2 --seuser=root --sepassword=root --ce=on > tmp.txt --user=root &<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">docker run --name=ma-se1 -p 20008:20008 --net cse-net --ip 172.18.0.2 -itd ma-cse:v2docker run --name=ma-se2 -p 20009:20009 --net cse-net --ip 172.18.0.3 -itd ma-cse:v2docker run --name=ma-se3 -p 20010:20010 --net cse-net --ip 172.18.0.4 -itd ma-cse:v2docker run --name=ma-ce -p 20011:20011 --net cse-net --ip 172.18.0.5 -itd ma-cse:v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>docker save ma-cse:v2 &gt; ./ma-cse.tar</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20210804</title>
      <link href="2021/08/03/20210804/"/>
      <url>2021/08/03/20210804/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：</p><p>基本确定技术方案，为下一步实践做准备。</p><h1 id="1、关键技术方案确定"><a href="#1、关键技术方案确定" class="headerlink" title="1、关键技术方案确定"></a>1、关键技术方案确定</h1><h2 id="1-1、OpenStack"><a href="#1-1、OpenStack" class="headerlink" title="1.1、OpenStack"></a>1.1、OpenStack</h2><p>OpenStack是一个开源软件项目，企业或者服务供应商可以用它来创建、运行、管理自己的云计算和存储基础设施。OpenStack也被称作是云计算的操作系统。</p><p>OpenStack开源组件介绍：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210804133648617.png" alt="image-20210804133648617"></p><p>各组件之间的数据流走向：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210804133740874.png" alt="image-20210804133740874"></p><p>目前打算使用OpenStack搭建私有云平台，允许用户注册使用云数据库服务</p><p>大致服务内容：</p><ul><li>系统用户角色分为云管理员和云数据库用户两类，允许管理员批量注册用户或者用户自己注册。</li><li>普通用户注册后可以添加物理服务器池，创建和管理数据库实例，数据库，备份恢复管理，集群管理，日志管理，阈值告警等</li><li>云管理员可以添加物理服务器池，创建和管理数据库实例，数据库，备份恢复，日志，计费等</li></ul><h2 id="1-2、运维工具SaltStack"><a href="#1-2、运维工具SaltStack" class="headerlink" title="1.2、运维工具SaltStack"></a>1.2、运维工具SaltStack</h2><p>SaltStack是一款开源的自动化运维管理框架，它采用Python作为开发语言，内部采用ZeroMQ作为消息队列实现更快的消息传输，底层有丰富的API接口。 SaltStack是针对基础设施管理的一个革命性的方法，其操作简单、能够对成千上万台服务器实现弹性伸缩管理、能够在在几秒钟内完成不同系统的通信。<br>SaltStack是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，其两大主要功能是<strong>远程命令执行</strong>和<strong>配置管理</strong>。在远程执行过程中，SaltStack利用Python的功能调用来完成复杂的任务。配置管理，也称为状态管理，是对服务器的最终状态的管理，主要是通过对状态文件的配置来管理服务器。系统的配置文件统一采用YAML格式编写，能够支持Windows, Linux以及MacOS等多种操作系统，系统内部设计高度模块化并且容易扩展。SaltStack的简单架构图如图所示。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210804140725318.png" alt="image-20210804140725318"></p><p>主要模块：</p><ul><li>执行模块：可以在minion节点上执行任何操作，包括软件包的安装，状态信息监测等</li><li>状态模块：将Master上的状态信息推送到minion上</li><li>Grains模块：获取minion上的基本静态信息</li><li>Pillar模块：传递可变的敏感数据给指定minion</li><li>Cp模块：拷贝文件</li><li>Status模块：一般用来获取Minion状态信息如磁盘使用情况，内存，CPU。一般用来做监控</li></ul><h2 id="1-3、消息中间件"><a href="#1-3、消息中间件" class="headerlink" title="1.3、消息中间件"></a>1.3、消息中间件</h2><h3 id="1-3-1、RabbitMQ"><a href="#1-3-1、RabbitMQ" class="headerlink" title="1.3.1、RabbitMQ"></a>1.3.1、RabbitMQ</h3><p>RabbitMQ是一个开源的AMQP ( Advanced Message Queuing Protocol)实现，它是一个面向消息设计的中间件，服务器端采用Erlang语言编写，主要用于各组件见的消息通信，消息的发送者或者使用者只需要关注消息本身而不需要知道对方的存在。RabbitMQ支持多种客户端，如:Python, Ruby, Java等，支持AJAX。在分布式系统中，RabbitMQ在存储转发消息，在易用性、可扩展性、高可用性等方面具有出色的表现。</p><p>在OpenStack中RabbitMQ交互过程如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210804143013663.png" alt="image-20210804143013663"></p><h3 id="1-3-2、ZeroMQ"><a href="#1-3-2、ZeroMQ" class="headerlink" title="1.3.2、ZeroMQ"></a>1.3.2、ZeroMQ</h3><p>ZeroMQ是一个简单好用的高性能异步消息库，它虽然像一个socket library，但却担任一个框架的角色。ZeroMQ提供了类似Socket的API接口，使Socket编程变得更加的具有高性能和简洁性。ZMQ提供了三个基本的通信模型，主要包括请求应答模型(ROUTER/REQ ) ,发布订阅模型(PUB/SUB)和管道模型。</p><p>SaltStack的底层网络架构采用的是ZeroMQ,  Salt利用ZeroMQ灵活高效的patterns，使Salt网络拓扑变得非常灵活高效。利用PUB/SUB实现了高效的远程执行指令下发机制，利用ROUTER/REQ实现认证及异步的远程执行结果返回，利用DEALER/REP实现多进程任务处理机制，利用PULL/PUB实现Event BUS，使其他或第三方应用可以快速的使用PUB/SUB接收到Event BUS上的消息，SaltStack中Master和Minion与ZeroMQ的关系如图:</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210804143428120.png" alt="image-20210804143428120"></p><h2 id="1-4、高可用方案"><a href="#1-4、高可用方案" class="headerlink" title="1.4、高可用方案"></a>1.4、高可用方案</h2><h3 id="1-4-1、双机热备"><a href="#1-4-1、双机热备" class="headerlink" title="1.4.1、双机热备"></a>1.4.1、双机热备</h3><p>​      双机热备是一种常用的高可用方案，双机热备是将中心服务器通过一定的方法成为互为备份的两台服务器，并且在正常运行的情况下只能有一台服务器是保持Active，另外一台处于Standby。如果正在运行的服务器出现故障导致无法正常启动时，另一台处于Standby的备份服务器会快速自动启动变为Active状态，双机之间的切换时间一般为2分钟左右，通过这种方式保证整个服务器系统的正常运行。双机热备的工作机制实际上就是为系统提供了一种故障自动恢复的能力，大大降低了故障恢复时间，从而保证系统的高可用性。双机热备可以借助集群工具实现，如PaceMaker,  heardbeat等。</p><h3 id="1-4-2、集群工具"><a href="#1-4-2、集群工具" class="headerlink" title="1.4.2、集群工具"></a>1.4.2、集群工具</h3><ul><li>集群心跳管理工具：Corosync</li><li>集群资源管理工具：Pacemaker</li></ul><h2 id="1-5、多租户的数据存储策略"><a href="#1-5、多租户的数据存储策略" class="headerlink" title="1.5、多租户的数据存储策略"></a>1.5、多租户的数据存储策略</h2><ul><li>独立数据库</li><li>共享数据库独立模式</li><li>共享数据库独立模式</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210804144635221.png" alt="image-20210804144635221"></p><h2 id="1-6、其他技术选型"><a href="#1-6、其他技术选型" class="headerlink" title="1.6、其他技术选型"></a>1.6、其他技术选型</h2><p>前台：Vue.js</p><p>中间控制层：SpringBoot、Maven</p><p>交互：REST API</p><p>镜像：Docker</p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ma上云方案</title>
      <link href="2021/07/30/ma-shang-yun-fang-an/"/>
      <url>2021/07/30/ma-shang-yun-fang-an/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 开题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20210728</title>
      <link href="2021/07/27/20210728/"/>
      <url>2021/07/27/20210728/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：</p><ul><li>阅读《基于Docker的云数据库服务系统的设计与实现》和《基于PaaS平台和云编排引擎的云数据库服务设计与实现》，总结难点</li></ul><h3 id="《基于Docker的云数据库服务系统的设计与实现》"><a href="#《基于Docker的云数据库服务系统的设计与实现》" class="headerlink" title="《基于Docker的云数据库服务系统的设计与实现》"></a>《基于Docker的云数据库服务系统的设计与实现》</h3><p>本文主要研究了云数据库服务的部署与实现，并基于此，对MySQL云数据库服务系统进行了设计与实现。</p><p>主要技术栈：Docker（容器） + SaltStack（自动化部署工具） + RabbitMQ（通信） + Percona（数据库备份）</p><p>展望：</p><ul><li><p>存在单点故障问题。后续可以考虑设计主从集群部署方案，实现快速故障转移，同时可以提高系统后台处理并发消息的能力。</p></li><li><p>监控参数的扩展。目前仅支持CPU使用率，磁盘空间，连接数、IOPS的监控，后续可以加入InnoDB缓冲池，InnoDB读写次数，日志，网络流量等参数</p></li></ul><p>私有云平台架构图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728132847229.png" alt="image-20210728132847229"></p><p>私有云平台前台架构：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728132916433.png" alt="image-20210728132916433"></p><p>私有云平台后台架构：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728132939238.png" alt="image-20210728132939238"></p><p>云数据库服务后台物理架构图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728133106603.png" alt="image-20210728133106603"></p><p>云数据库服务后台逻辑架构图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728133133169.png" alt="image-20210728133133169"></p><p>系统组件交互图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728133246349.png" alt="image-20210728133246349"></p><p>系统功能模块分解图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728133342694.png" alt="image-20210728133342694"></p><h3 id="《基于PaaS平台和云编排引擎的云数据库服务设计与实现》"><a href="#《基于PaaS平台和云编排引擎的云数据库服务设计与实现》" class="headerlink" title="《基于PaaS平台和云编排引擎的云数据库服务设计与实现》"></a>《基于PaaS平台和云编排引擎的云数据库服务设计与实现》</h3><p>H3 Cloud是某公司的私有云平台，该云平台中现有的云数据库服务是基于OpenStack数据服务组件Trove实现的，对OpenStack和IaaS平台依赖严重，影响了<br>PaaS平台的独立部署。为了达到自主研发的目的，基于项目需求提出了一种基于PaaS平台和云编排引擎的云数据库服务方案。本文研究了基于PaaS平台和云编排引擎部署和管理数据库的优势，在此基础上进行了云数据库服务的需求分析和详细设计，最后完成了云数据库服务的实现。</p><p>主要技术栈：Pecan + OpenStack（后台） + Vue.js（前台） +  RabbitMQ（通信） +  K8S+Docker（容器）+ Cloudify（Paas云编排引擎）</p><p>Paas整体架构图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728140403244.png" alt="image-20210728140403244"></p><p>云数据库服务总用例图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728140606320.png" alt="image-20210728140606320"></p><p>云数据库服务架构图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728140955954.png" alt="image-20210728140955954"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728141059011.png" alt="image-20210728141059011"></p><p>云数据库模块交互时序图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728141152900.png" alt="image-20210728141152900"></p><p>功能结构图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728141240050.png" alt="image-20210728141240050"></p><p>新建一个MySQL数据库实例前台界面：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728141422605.png" alt="image-20210728141422605"></p><p>数据库实例基础信息界面：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210728141638067.png"></p><p>​    展望：</p><ul><li>本文着重在云数据库的方案设计和后端服务模块的设计实现了云数据库的基本功能，但对于云数据库中较复杂的功能还有待完善，例如数据库集群管理、数据库备份、资源监控等功能。</li><li>文中主要实现了MySQL数据库的各种功能，其他数据库的实现虽然逻辑上相同但还需进行详细的设计。</li></ul><p>难点总结：</p><ul><li><p>后台架构设计</p></li><li><p>模块之间的通信</p></li><li><p>高可用</p><ul><li>故障转移</li><li>集群扩展，弹性扩容</li></ul></li><li><p>智能运维</p><ul><li>数据库集群部署和管理</li><li>资源监控</li><li>数据备份</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shopee</title>
      <link href="2021/07/24/shopee/"/>
      <url>2021/07/24/shopee/</url>
      
        <content type="html"><![CDATA[<h1 id="北京后端"><a href="#北京后端" class="headerlink" title="北京后端"></a>北京后端</h1><h2 id="进程线程协程（问得很深）"><a href="#进程线程协程（问得很深）" class="headerlink" title="进程线程协程（问得很深）"></a>进程线程协程（问得很深）</h2><h2 id="线程切换（背的忘记了没答上来）"><a href="#线程切换（背的忘记了没答上来）" class="headerlink" title="线程切换（背的忘记了没答上来）"></a>线程切换（背的忘记了没答上来）</h2><h2 id="计网五层的作用和对应的协议"><a href="#计网五层的作用和对应的协议" class="headerlink" title="计网五层的作用和对应的协议"></a>计网五层的作用和对应的协议</h2><h2 id="ping原理"><a href="#ping原理" class="headerlink" title="ping原理"></a>ping原理</h2><h2 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a>三次握手四次挥手</h2><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h2 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h2><h2 id="acid以及MySQL怎么保证"><a href="#acid以及MySQL怎么保证" class="headerlink" title="acid以及MySQL怎么保证"></a>acid以及MySQL怎么保证</h2><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h2 id="乐观锁悲观锁"><a href="#乐观锁悲观锁" class="headerlink" title="乐观锁悲观锁"></a>乐观锁悲观锁</h2><h2 id="hashmap（这个也很深啊，红黑树之后问，如果很大很大呢，求大佬解答）"><a href="#hashmap（这个也很深啊，红黑树之后问，如果很大很大呢，求大佬解答）" class="headerlink" title="hashmap（这个也很深啊，红黑树之后问，如果很大很大呢，求大佬解答）"></a>hashmap（这个也很深啊，<a href="">红黑树</a>之后问，如果很大很大呢，求大佬解答）</h2><h2 id="算法（字符串a和字符串b是否对应那个题）"><a href="#算法（字符串a和字符串b是否对应那个题）" class="headerlink" title="算法（字符串a和字符串b是否对应那个题）"></a><a href="">算法</a>（字符串a和字符串b是否对应那个题）</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gossip讲稿</title>
      <link href="2021/07/21/gossip-jiang-gao/"/>
      <url>2021/07/21/gossip-jiang-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="Gossip协议概述"><a href="#Gossip协议概述" class="headerlink" title="Gossip协议概述"></a>Gossip协议概述</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>在MA多SE节点设计中，日志的一致性同步问题直接影响系统的一致性和可用性。由于在网络传输过程中可能会发生redo日志的缺失，从而导致某些SE节点的日志不完整，因此我们需要考虑如何来补全缺失的日志。</li><li>由Gossip协议，在一个有界网络中，每个节点都可以与其他任何节点进行通信，最终一定能达到一致性状态。并且当节点扩展时，理论上达到一致性状态的时间是对数级别增速，因此具有良好的可扩展性。因此本版本MA系统采用了Gossip来补全日志。</li></ul><h2 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h2><ul><li>当SE收到CE节点的redo日志时，如果检测到有日志缺失，则会向其他所有SE节点发送缺失日志的RPC请求。</li><li>当本地SE节点收到来自其他SE的缺失日志请求时，从本地获取对应的日志并发送给请求SE节点。</li><li>请求的SE节点在收到缺失日志响应包之后，填充本地缺失。</li></ul><h2 id="应用模块"><a href="#应用模块" class="headerlink" title="应用模块"></a>应用模块</h2><p>因为Gossip协议是用来补全缺失日志的，所以其仅在SE层使用，CE层不使用Gossip，整体模型图如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210721144722085.png" alt="image-20210721144722085"></p><p>绿色箭头代表是Quorum的日志写过程，必须要有超过半数的SE节点返回成功，代表本次日志写成功。</p><p>黄色箭头代表是Gossip的日志补全过程，比如第一个SE节点检测到有缺失日志时，就会向另外两个SE发送缺失日志的RPC请求</p><h2 id="模块对接关系"><a href="#模块对接关系" class="headerlink" title="模块对接关系"></a>模块对接关系</h2><h3 id="Gossip模块调用的模块"><a href="#Gossip模块调用的模块" class="headerlink" title="Gossip模块调用的模块"></a>Gossip模块调用的模块</h3><ul><li>日志模块</li></ul><p>主要是通过gossip_passive_thread里的get_log_for_filled函数</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727084801311.png" alt="image-20210727084801311"></p><p>和gossip_active_thread里的lost_log_filled函数来调用的</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727084832256.png" alt="image-20210727084832256"></p><h3 id="调用Gossip模块的其他模块"><a href="#调用Gossip模块的其他模块" class="headerlink" title="调用Gossip模块的其他模块"></a>调用Gossip模块的其他模块</h3><ul><li>Quorum模块</li></ul><p>这个是在CE往SE里写redo日志，调用write_from_log方法时，里面第五步会通过hot_log_check_log_segment_gap函数判断是否有缺失日志，如果有，就会调用Gossip模块</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727084855155.png" alt="image-20210727084855155"></p><h2 id="核心技术点"><a href="#核心技术点" class="headerlink" title="核心技术点"></a>核心技术点</h2><ul><li>Socket通信</li><li>缺失日志的收集和补全</li></ul><h1 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h1><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><p>Gossip原始论文有pull，push，pull&amp;push三种通信方式，目前版本考虑到实现的简单性，采用了pull通信方式。<br>这个是在ma_se_config.json配置文件里进行配置的，默认通信端口是33307</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727084912901.png" alt="image-20210727084912901"></p><h2 id="pull通信方式实现"><a href="#pull通信方式实现" class="headerlink" title="pull通信方式实现"></a>pull通信方式实现</h2><p>当SE收到CE节点的redo日志时，如果检测到有日志缺失，则会唤醒gossip_active_thread</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727084935594.png" alt="image-20210727084935594"></p><p>如果检测到有缺失日志，就向其他所有的SE节点发送缺失日志请求。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727084945259.png" alt="image-20210727084945259"></p><p>当本地SE节点收到来自其他SE的缺失日志请求时，通过get_log_for_filled获取相应的redo，返回给请求的SE节点。<br>整体通信逻辑关键代码如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727084957637.png" alt="image-20210727084957637"></p><p>当本次缺失日志尚未补全时，gossip_active线程就会一直调用get_lost_log_information方法检测缺失日志，如果缺失日志链表里还有缺失日志节点，就会向其他所有SE节点发送缺失日志RPC请求，只要有一台SE返回了结果那么就会调用lost_log_filled方法进行日志填充</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085006917.png" alt="image-20210727085006917"></p><h1 id="缺失日志的收集和补全"><a href="#缺失日志的收集和补全" class="headerlink" title="缺失日志的收集和补全"></a>缺失日志的收集和补全</h1><h2 id="缺失日志的收集"><a href="#缺失日志的收集" class="headerlink" title="缺失日志的收集"></a>缺失日志的收集</h2><p>SE节点在收到CE的redo时，会检查下日志块no的连续性 ，这个是在check_log_segment_integrity函数里检查的。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085030065.png" alt="image-20210727085030065"></p><p>然后通过get_ce_log_range函数，计算收到的redo的lsn范围</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085050656.png" alt="image-20210727085050656"></p><p>接着通过hot_log_check_log_segment_gap函数来判断是否有日志缺失，如果有缺失，则将缺失的那一段日志添加到lost_log_list里</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085101767.png" alt="image-20210727085101767"></p><h2 id="缺失日志的补全"><a href="#缺失日志的补全" class="headerlink" title="缺失日志的补全"></a>缺失日志的补全</h2><ul><li>发送缺失日志RPC请求</li></ul><p>SE通过get_lost_log_information函数，获取当前lost_log_list第一个LOST_LOG_UNPROCESS的缺失日志块</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085118050.png" alt="image-20210727085118050"></p><p>然后通过send_redo_update_request方法write请求让client_thread处理</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085135149.png" alt="image-20210727085135149"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085144053.png" alt="image-20210727085144053"></p><p>client_thread读取request</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085154559.png" alt="image-20210727085154559"></p><p>然后通过process_node_normal方法和其他SE通信</p><ul><li>处理其他SE的缺失日志RPC请求</li></ul><p>收到请求的SE通过get_log_for_filled函数进行处理</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085205768.png" alt="image-20210727085205768"></p><ul><li>接收返回日志填充本地缺失</li></ul><p>发送请求的SE通过lost_log_filled函数来填充缺失日志</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085223451.png" alt="image-20210727085223451"></p><p>如果能完整填充该缺失块，则将其从lost_log_list里删除</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085337089.png" alt="image-20210727085337089"></p><p>从这里的代码逻辑我们也可以看出，只要有一个SE节点能完整返回请求的缺失日志，那么就会调用gossip_lost_log_check_finish方法，该方法最后会调用check_lost_log_reset方法让gossip_active_thread重新进入nonsignal状态，即代表本次缺失日志请求成功了。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085405739.png" alt="image-20210727085405739"></p><h1 id="重要数据结构和函数"><a href="#重要数据结构和函数" class="headerlink" title="重要数据结构和函数"></a>重要数据结构和函数</h1><ul><li>lost_log_t：缺失日志结构体，包含下面三个字段</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210727085427896.png" alt="image-20210727085427896"></p><ul><li><p>redo_update_request_t：请求结构体</p></li><li><p>redo_update_response_t：响应结构体</p></li><li><p>se_gossip_protocol_t：gossip协议核心类</p><ul><li>init方法：gossip客户端的初始化</li><li>gossip_passive_thread方法：响应其他SE的缺失日志RPC请求</li><li>gossip_active_thread方法：检查本地缺失日志，并向其他SE节点发缺失日志RPC请求</li><li>impl_t结构体：组合Gossip的关键数据结构</li></ul></li><li><p>thread_model_server_t：服务端线程模型类</p></li><li><p>thread_model_client_t：客户端线程模型类</p><ul><li>init方法：Gossip客户端的初始化</li><li>create_client_thread方法：创建客户端连接线程</li><li>client_thread方法：这是CE和SE共用的客户端线程代码，对于SE而言，用来与其他SE进行socket通信 </li></ul></li><li><p>get_lost_log_information方法：获取lost_log_list里的第一条缺失日志</p></li><li><p>get_log_for_filled方法：获取本地日志来填充其他SE节点的缺失日志</p></li><li><p>lost_log_filled方法：填充本地缺失日志</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> Task </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20210721</title>
      <link href="2021/07/20/20210721/"/>
      <url>2021/07/20/20210721/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：</p><ul><li>阅读《中国联通容器化大数据云平台的探索和实践》和《达梦云数据库平台》</li><li>调研国内外云数据库解决方案</li></ul><h1 id="1、《中国联通容器化大数据云平台的探索和实践》"><a href="#1、《中国联通容器化大数据云平台的探索和实践》" class="headerlink" title="1、《中国联通容器化大数据云平台的探索和实践》"></a>1、《中国联通容器化大数据云平台的探索和实践》</h1>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>bytedance</title>
      <link href="2021/07/18/bytedance/"/>
      <url>2021/07/18/bytedance/</url>
      
        <content type="html"><![CDATA[<h1 id="1、计算机网络"><a href="#1、计算机网络" class="headerlink" title="1、计算机网络"></a>1、计算机网络</h1><h2 id="ARP协议工作原理？如何解决ARP攻击？"><a href="#ARP协议工作原理？如何解决ARP攻击？" class="headerlink" title="ARP协议工作原理？如何解决ARP攻击？"></a>ARP协议工作原理？如何解决ARP攻击？</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210718110602700.png" alt="image-20210718110602700"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210718111815997.png" alt="image-20210718111815997"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210718114307507.png" alt="image-20210718114307507"></p><h2 id="HTTP-Cookie和Session的区别"><a href="#HTTP-Cookie和Session的区别" class="headerlink" title="HTTP Cookie和Session的区别"></a>HTTP Cookie和Session的区别</h2><ul><li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210718122138770.png" alt="image-20210718122138770"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210718122338492.png" alt="image-20210718122338492"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210718122444617.png" alt="image-20210718122444617"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210718122659456.png" alt="image-20210718122659456"></p><h1 id="2、操作系统"><a href="#2、操作系统" class="headerlink" title="2、操作系统"></a>2、操作系统</h1><h1 id="3、算法"><a href="#3、算法" class="headerlink" title="3、算法"></a>3、算法</h1><h1 id="4、Java"><a href="#4、Java" class="headerlink" title="4、Java"></a>4、Java</h1><h1 id="5、数据库"><a href="#5、数据库" class="headerlink" title="5、数据库"></a>5、数据库</h1><h1 id="6、设计题"><a href="#6、设计题" class="headerlink" title="6、设计题"></a>6、设计题</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo笔记</title>
      <link href="2021/07/15/dubbo-bi-ji/"/>
      <url>2021/07/15/dubbo-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="1、分布式系统相关概念"><a href="#1、分布式系统相关概念" class="headerlink" title="1、分布式系统相关概念"></a>1、分布式系统相关概念</h1><h2 id="1-1、大型互联网公司架构目标"><a href="#1-1、大型互联网公司架构目标" class="headerlink" title="1.1、大型互联网公司架构目标"></a>1.1、大型互联网公司架构目标</h2><ul><li><p>传统项目和互联网项目</p><ul><li>互联网项目：天猫，微信，百度<ul><li>用户群体：网民</li><li>用户零忍耐</li></ul></li><li>传统项目：OA，HR，CRM<ul><li>用户群体：企业员工</li><li>员工忍耐度较高</li></ul></li><li>用户体验：美观、功能、速度、稳定性</li><li>如何衡量一个网站是否速度快：打开新页面0.36秒，页面跳转0.018秒</li></ul></li><li><p>互联网项目特点</p><ul><li>用户多</li><li>流量大，并发高</li><li>海量数据</li><li>易受攻击</li><li>功能繁琐</li><li>变更快</li></ul></li><li><p>高性能</p><ul><li>衡量网站性能指标<ul><li>响应时间：执行一个请求从开始到最后所花费的时间</li><li>并发数<ul><li>并发连接数：每秒服务器连接的TCP数量</li><li>请求数：也称QPS</li><li>并发用户数：单位时间内有多少用户</li></ul></li><li>吞度量：<ul><li>QPS：每秒查询数</li><li>TPS：每秒事务数</li><li>一个事务指：一个客户机向服务器发送请求后服务器做出反应的过程</li></ul></li></ul></li></ul></li><li><p>高可用：网站服务一直可以访问</p></li><li><p>可伸缩：通过硬件增加/减少，提高/降低处理能力</p></li><li><p>高可扩展：系统间耦合低，方便通过新增/移除方式，增加/减少新的功能模块</p></li><li><p>安全性：提供网站安全访问和数据加密，安全存储等策略</p></li><li><p>敏捷性：随需应变，快速响应</p></li><li><p>集群和分布式</p><ul><li>集群：很多人一起，干一样的事</li><li>分布式：很多人一起，干不一样的事，合起来是一件大事</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715105244184.png" alt="image-20210715105244184"></p></li><li><p>架构演进</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715105704949.png" alt="image-20210715105704949"></p><ul><li><p>单体项目</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715110009153.png" alt="image-20210715110009153"></p></li><li><p>垂直架构</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715110214828.png" alt="image-20210715110214828"></p></li><li><p>分布式架构</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715110451426.png" alt="image-20210715110451426"></p></li><li><p>SOA架构</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715110652271.png" alt="image-20210715110652271"></p></li><li><p>微服务架构</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715110834815.png" alt="image-20210715110834815"></p></li></ul></li></ul><h1 id="2、Dubbo概述"><a href="#2、Dubbo概述" class="headerlink" title="2、Dubbo概述"></a>2、Dubbo概述</h1><h2 id="2-1、Dubbo架构"><a href="#2-1、Dubbo架构" class="headerlink" title="2.1、Dubbo架构"></a>2.1、Dubbo架构</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715112242027.png" alt="image-20210715112242027"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715125526407.png" alt="image-20210715125526407"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715125612979.png" alt="image-20210715125612979"></p><h2 id="2-2、Dubbo高级特性"><a href="#2-2、Dubbo高级特性" class="headerlink" title="2.2、Dubbo高级特性"></a>2.2、Dubbo高级特性</h2><h3 id="2-2-1、Dubbo-admin安装和使用"><a href="#2-2-1、Dubbo-admin安装和使用" class="headerlink" title="2.2.1、Dubbo-admin安装和使用"></a>2.2.1、Dubbo-admin安装和使用</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715114946295.png" alt="image-20210715114946295"></p><h3 id="2-2-2、序列化"><a href="#2-2-2、序列化" class="headerlink" title="2.2.2、序列化"></a>2.2.2、序列化</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715114910287.png" alt="image-20210715114910287"></p><h3 id="2-2-3、地址缓存"><a href="#2-2-3、地址缓存" class="headerlink" title="2.2.3、地址缓存"></a>2.2.3、地址缓存</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715115310482.png" alt="image-20210715115310482"></p><h3 id="2-2-4、超时与重试"><a href="#2-2-4、超时与重试" class="headerlink" title="2.2.4、超时与重试"></a>2.2.4、超时与重试</h3><ul><li><p>超时：一般是在服务提供方配置，dubbo timeout调用方配置可以覆盖提供方</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715115937496.png" alt="image-20210715115937496"></p></li><li><p>重试：一般在服务提供方配置retries属性</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715120210122.png" alt="image-20210715120210122"></p><h3 id="2-2-5、多版本"><a href="#2-2-5、多版本" class="headerlink" title="2.2.5、多版本"></a>2.2.5、多版本</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715123807507.png" alt="image-20210715123807507"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715125847691.png" alt="image-20210715125847691"></p><h3 id="2-2-6、负载均衡"><a href="#2-2-6、负载均衡" class="headerlink" title="2.2.6、负载均衡"></a>2.2.6、负载均衡</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715124323598.png" alt="image-20210715124323598"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715125909135.png" alt="image-20210715125909135"></p><h3 id="2-2-7、集群容错"><a href="#2-2-7、集群容错" class="headerlink" title="2.2.7、集群容错"></a>2.2.7、集群容错</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715124820274.png" alt="image-20210715124820274"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715130127096.png" alt="image-20210715130127096"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715130135493.png" alt="image-20210715130135493"></p><h3 id="2-2-8、服务降级"><a href="#2-2-8、服务降级" class="headerlink" title="2.2.8、服务降级"></a>2.2.8、服务降级</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715125139522.png" alt="image-20210715125139522"></p><h2 id="2-3、协议"><a href="#2-3、协议" class="headerlink" title="2.3、协议"></a>2.3、协议</h2><h3 id="2-3-1、dubbo"><a href="#2-3-1、dubbo" class="headerlink" title="2.3.1、dubbo://"></a>2.3.1、dubbo://</h3><ul><li>概述</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715130708902.png" alt="image-20210715130708902"></p><ul><li><p>特性</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715130746244.png" alt="image-20210715130746244"></p></li><li><p>约束</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131156766.png" alt="image-20210715131156766"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131228907.png" alt="image-20210715131228907"></p></li><li><p>常见问题</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715130958166.png" alt="image-20210715130958166"></p></li></ul><h3 id="2-3-2、rmi"><a href="#2-3-2、rmi" class="headerlink" title="2.3.2、rmi://"></a>2.3.2、rmi://</h3><ul><li>概述</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131332082.png" alt="image-20210715131332082"></p><ul><li><p>特性</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131357076.png" alt="image-20210715131357076"></p></li><li><p>约束</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131412612.png" alt="image-20210715131412612"></p></li></ul><h3 id="2-3-3、hessian"><a href="#2-3-3、hessian" class="headerlink" title="2.3.3、hessian://"></a>2.3.3、hessian://</h3><ul><li><p>概述</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131507266.png" alt="image-20210715131507266"></p></li><li><p>特性</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131525029.png" alt="image-20210715131525029"></p></li><li><p>约束</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131537799.png" alt="image-20210715131537799"></p></li></ul><h3 id="2-3-4、http"><a href="#2-3-4、http" class="headerlink" title="2.3.4、http://"></a>2.3.4、http://</h3><ul><li><p>概述</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131621884.png" alt="image-20210715131621884"></p></li><li><p>特性</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131654333.png" alt="image-20210715131654333"></p></li><li><p>约束</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131812807.png" alt="image-20210715131812807"></p></li></ul><h3 id="2-3-5、webservice"><a href="#2-3-5、webservice" class="headerlink" title="2.3.5、webservice://"></a>2.3.5、webservice://</h3><ul><li>概述</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131901660.png" alt="image-20210715131901660"></p><ul><li><p>特性</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131920354.png" alt="image-20210715131920354"></p></li><li><p>约束</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210715131931602.png" alt="image-20210715131931602"></p></li></ul><h1 id="3、Zookeeper"><a href="#3、Zookeeper" class="headerlink" title="3、Zookeeper"></a>3、Zookeeper</h1><p><em>2020-4-28</em> ——<a href="https://www.bilibili.com/video/BV1M741137qY?p=74">https://www.bilibili.com/video/BV1M741137qY?p=74</a></p><p><a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a></p><h2 id="3-1、快速入门"><a href="#3-1、快速入门" class="headerlink" title="3.1、快速入门"></a>3.1、快速入门</h2><pre><code>ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. All of these kinds of services are used in some form or another by distributed applications. Each time they are implemented there is a lot of work that goes into fixing the bugs and race conditions that are inevitable. Because of the difficulty of implementing these kinds of services, applications initially usually skimp on them, which make them brittle in the presence of change and difficult to manage. Even when done correctly, different implementations of these services lead to management complexity when the applications are deployed.</code></pre><p><code>ZooKeeper</code>是一个集中的服务，用于维护配置信息、命名、提供分布式同步和提供组服务。所有这些类型的服务都以某种形式被分布式应用程序使用。每次它们被实现时，都会有大量的工作来修复不可避免的错误和竞争条件。由于实现这些服务的困难，应用程序最初通常会略过这些服务，这使得它们在出现更改时变得脆弱，并且难以管理。即使正确地执行了这些服务，在部署应用程序时，这些服务的不同实现也会导致管理复杂性</p><p><code>zookeeper</code>由雅虎研究院开发,是<code> Google Chubby</code>的开源实现,后来托管到 <code>Apache</code>,于<code>2010年11月</code>正式成为<code>apache</code>的顶级项目</p><p>大数据生态系统里由很多组件的命名都是某些动物或者昆虫，比如<code>hadoop</code>大象，<code>hive</code>就是蜂巢，<code>zookeeper</code>即管理员，顾名思义就算管理大数据生态系统各组件的管理员，如下所示：</p><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-1.png" alt="zookeeper-1"></p><h3 id="3-1-1、应用场景"><a href="#3-1-1、应用场景" class="headerlink" title="3.1.1、应用场景"></a>3.1.1、应用场景</h3><p><code>zookeepepr</code>是一个经典的<strong>分布式</strong>数据一致性解决方案，致力于为分布式应用提供一个高性能、高可用,且具有严格顺序访问控制能力的分布式协调存储服务。</p><ul><li>维护配置信息</li><li>分布式锁服务</li><li>集群管理</li><li>生成分布式唯一ID</li></ul><ol><li><p><strong>维护配置信息</strong></p><ul><li><p><code>java</code>编程经常会遇到配置项，比如数据库的<code>url</code>、 <code>schema</code>、<code>user</code>和 <code>password</code>等。通常这些配置项我们会放置在配置文件中，再将配置文件放置在服务器上当需要更改配置项时，需要去服务器上修改对应的配置文件。</p><p>但是随着分布式系统的兴起,由于许多服务都需要使用到该配置文件,因此有<strong>必须保证该配置服务的高可用性</strong>(<code>highavailability</code>)和各台服务器上配置数据的一致性。</p><p>通常会将配置文件部署在一个集群上，然而一个<strong>集群动辄上千台</strong>服务器，此时如果再一台台服务器逐个修改配置文件那将是非常繁琐且危险的的操作，因此就<strong>需要一种服务</strong>，<strong>能够高效快速且可靠地完成配置项的更改等操作</strong>，并能够保证各配置项在每台服务器上的数据一致性。</p><p><strong><code>zookeeper</code>就可以提供这样一种服务</strong>，其使用<code>Zab</code>这种一致性协议来保证一致性。现在有很多开源项目使用<code>zookeeper</code>来维护配置，如在 <code>hbase</code>中，客户端就是连接一个 <code>zookeeper</code>，获得必要的 <code>hbase</code>集群的配置信息，然后才可以进一步操作。还有在开源的消息队列 <code>kafka</code>中，也便用<code>zookeeper</code>来维护 <code>brokers</code>的信息。在 <code>alibaba</code>开源的<code>soa</code>框架<code>dubbo</code>中也广泛的使用<code>zookeeper</code>管理一些配置来实现服务治理。</p><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-2.png" alt="zookeeper-2"></p></li></ul></li><li><p>分布式锁服务</p><ul><li>一个集群是一个分布式系统，由多台服务器组成。为了提高并发度和可靠性，多台服务器上运行着同一种服务。当多个服务在运行时就需要协调各服务的进度，有时候需要保证当某个服务在进行某个操作时，其他的服务都不能进行该操作，即对该操作进行加锁，如果当前机器挂掉后，释放锁并 <code>fail over</code>到其他的机器继续执行该服务</li></ul></li><li><p>集群管理</p><ul><li><p>一个集群有时会因为各种软硬件故障或者网络故障，出现棊些服务器挂掉而被移除集群，而某些服务器加入到集群中的情况，<code>zookeeper</code>会将这些服务器加入/移出的情况通知给集群中的其他正常工作的服务器，以及时调整存储和计算等任务的分配和执行等。此外<code>zookeeper</code>还会对故障的服务器做出诊断并尝试修复。</p><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-3.png" alt="zookeeper-3"></p></li></ul></li><li><p>生产分布式唯一ID</p><ul><li><p>在过去的单库单表型系统中，通常可以使用数据库字段自带的<code>auto_ increment</code>属性来自动为每条记录生成一个唯一的<code>ID</code>。但是分库分表后，就无法在依靠数据库的<code>auto_ Increment</code>属性来唯一标识一条记录了。此时我们就可以用<code>zookeeper</code>在分布式环境下生成全局唯一<code>ID</code>。</p><p>做法如下:每次要生成一个新<code>id</code>时，创建一个持久顺序节点，创建操作返回的节点序号，即为新<code>id</code>，然后把比自己节点小的删除即可</p></li></ul></li></ol><h3 id="3-1-2、Zookeeper的设计目标"><a href="#3-1-2、Zookeeper的设计目标" class="headerlink" title="3.1.2、Zookeeper的设计目标"></a>3.1.2、Zookeeper的设计目标</h3><p><code>zooKeeper</code>致力于为分布式应用提供一个高性能、高可用，且具有严格顺序访问控制能力的分布式协调服务</p><ol><li>高性能<ul><li><code>zookeeper</code>将全量数据存储在<strong>内存</strong>中，并直接服务于客户端的所有非事务请求，尤其用于以读为主的应用场景</li></ul></li><li>高可用<ul><li><code>zookeeper</code>一般以集群的方式对外提供服务，一般<code>3~5</code>台机器就可以组成一个可用的 <code>Zookeeper</code>集群了，每台机器都会在内存中维护当前的服务器状态，井且每台机器之间都相互保持着通信。只要集群中超过一半的机器都能够正常工作，那么整个集群就能够正常对外服务</li></ul></li><li>严格顺序访问<ul><li>对于来自客户端的每个更新请求，<code>Zookeeper</code>都会分配一个全局唯一的递增编号，这个编号反应了所有事务操作的先后顺序</li></ul></li></ol><h3 id="3-1-3、数据模型"><a href="#3-1-3、数据模型" class="headerlink" title="3.1.3、数据模型"></a>3.1.3、数据模型</h3><p><code>zookeeper</code>的数据结点可以视为树状结构(或目录)，树中的各个结点被称为<code>znode </code>(即<code>zookeeper node</code>)，一个<code>znode</code>可以由多个子结点。<code>zookeeper</code>结点在结构上表现为树状；</p><p>使用路径<code>path</code>来定位某个<code>znode</code>，比如<code>/ns-1/itcast/mysqml/schemal1/table1</code>，此处<code>ns-1，itcast、mysql、schemal1、table1</code>分别是<code>根结点、2级结点、3级结点以及4级结点</code>；其中<code>ns-1</code>是<code>itcast</code>的父结点，<code>itcast</code>是<code>ns-1</code>的子结点，<code>itcast</code>是<code>mysql</code>的父结点….以此类推</p><p><code>znode</code>，间距文件和目录两种特点，即像文件一样维护着数据、元信息、ACL、时间戳等数据结构，又像目录一样可以作为路径标识的一部分</p><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-4.png" alt="zookeeper-4"></p><p>那么如何描述一个<code>znode</code>呢？一个<code>znode</code>大体上分为<code>3</code>个部分：</p><ul><li>结点的数据：即<code>znode data </code>(结点<code>path</code>，结点<code>data</code>)的关系就像是<code>Java map </code>中的 <code>key value </code>关系</li><li>结点的子结点<code>children</code></li><li>结点的状态<code>stat</code>：用来描述当前结点的创建、修改记录，包括<code>cZxid</code>、<code>ctime</code>等</li></ul><h4 id="结点状态stat的属性"><a href="#结点状态stat的属性" class="headerlink" title="结点状态stat的属性"></a>结点状态stat的属性</h4><p>在<code>zookeeper shell </code>中使用 <code>get </code>命令查看指定路径结点的<code>data</code>、<code>stat</code>信息</p><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-5.png" alt="zookeeper-5"></p><p>属性说明：</p><p>结点的各个属性如下。其中重要的概念是<code>Zxid(Zookeeper Transaction ID)</code>，<code>Zookeeper</code>结点的每一次更改都具有唯一的<code>Zxid</code>，如果<code>Zxid-1</code> 小于<code> Zxid-2</code> ，则<code>Zxid-1</code> 的更改发生在 <code>Zxid-2 </code>更改之前</p><p><a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperProgrammers.html#sc_zkDataModel_znodes">https://zookeeper.apache.org/doc/r3.4.14/zookeeperProgrammers.html#sc_zkDataModel_znodes</a></p><ul><li><code>cZxid</code>数据结点创建时的事务ID——针对于<code>zookeeper</code>数据结点的管理：我们对结点数据的一些写操作都会导致<code>zookeeper</code>自动地为我们去开启一个事务，并且自动地去为每一个事务维护一个事务<code>ID</code></li><li><code>ctime</code>数据结点创建时的时间</li><li><code>mZxid</code>数据结点最后一次更新时的事务ID</li><li><code>mtime</code>数据结点最后一次更新时的时间</li><li><code>pZxid</code>数据节点最后一次修改此<code>znode</code>子节点更改的<code>zxid</code></li><li><code>cversion</code>子结点的更改次数</li><li><code>dataVersion</code>结点数据的更改次数</li><li><code>aclVersion</code>结点的ACL更改次数——类似<code>linux</code>的权限列表，维护的是当前结点的权限列表被修改的次数</li><li><code>ephemeralOwner</code>如果结点是临时结点，则表示创建该结点的会话的<code>SessionID</code>；如果是持久结点，该属性值为0</li><li><code>dataLength</code>数据内容的长度</li><li><code>numChildren</code>数据结点当前的子结点个数</li></ul><p><strong>结点类型</strong></p><p><code>zookeeper</code>中的结点有两种，分别为<strong>临时结点</strong>和<strong>永久结点</strong>。结点的类型在创建时被确定，并且不能改变</p><ul><li>临时节点：<ul><li>该节点的生命周期依赖于创建它们的会话。一旦会话( <code>Session</code>）结束，临时节点将被自动删除，当然可以也可以手动删除。虽然每个临时的 <code>Znode</code>都会绑定到一个客户端会话，但他们对所有的客户端还是可见的。另外，<code>Zookeeper</code>的临时节点不允许拥有子节点</li></ul></li><li>持久化结点：<ul><li>该结点的生命周期不依赖于会话，并且只有在客户端显示执行删除操作的时候，它们才能被删除</li></ul></li></ul><h3 id="3-1-4、单机安装"><a href="#3-1-4、单机安装" class="headerlink" title="3.1.4、单机安装"></a>3.1.4、单机安装</h3><p>测试系统环境<code>centos7.3</code></p><p><code>zookeeper:zookeeper-3.4.10.tar.gz</code></p><p><code>jdk:jdk-8u131-linux-x64.tar.gz</code></p><p><a href="http://archive.apache.org/dist/zookeeper/">http://archive.apache.org/dist/zookeeper/</a></p><ol><li><p>在<code>centos </code>中使用 <code>root</code>用户创建 <code>zookeeper</code>用户，用户名:<code>zookeeper </code>密码:<code>zookeeper</code></p><ul><li><pre class="line-numbers language-shell"><code class="language-shell">useradd zookeeperpasswd zookeepersu zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>zookeeper</code>底层依赖于jdk，<code>zookeeper</code>用户登录后，根目录下先进行jdk 的安装，jdk使用 <code>jdk-8u131-linux-x64.tar.gz</code></p><ul><li><pre><code>tar -zxf tar.gz</code></pre></li></ul></li><li><p>配置jdk 环境变量</p><ul><li><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/profileJAVA_HOME=/home/zookeeper/jdk1.8.0_131export JAVA_HOMEPATH=$JAVA_HOME/bin:$PATHexport PATHsouce /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>检测jdk安装</p><ul><li><code>java -version</code> // 如果反馈了Java信息，则成功</li></ul></li><li><p><code>zookeeper</code> 上传解压</p><ul><li><code>tar -zxf tar.gz</code></li></ul></li><li><p>为<code>zookeeper</code>准备配置文件</p><ul><li><pre class="line-numbers language-shell"><code class="language-shell"># 进入conf目录cd /home/zookeeper/zookeeper-3.4.10/conf# 复制配置文件cp zoo_sampe.cfg zoo.cfg# zookeeper 根目录下创建data目录mkdir data# vi 配置文件中的dataDir# 此路径用于存储zookeeper中数据的内存快照、及事务日志文件，虽然zookeeper是使用内存的，但是需要持久化一些数据来保证数据的安全，和redis一样dataDir=/home/zookeeper/zookeeper-3.4.10/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>启动<code>zookeeper</code></p><ul><li><pre class="line-numbers language-shell"><code class="language-shell"># 进入zookeeper的bin目录cd /home/zookeeper/zookeeper-3.4.10/bin# 启动zookeeper./zkServer.sh start# 启动: zkServer.sh start# 停止: zkServer.sh stop# 查看状态：zkServer.sh status# 进入zookeeper 内部./zkCli.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="3-1-5、常用shell命令"><a href="#3-1-5、常用shell命令" class="headerlink" title="3.1.5、常用shell命令"></a>3.1.5、常用shell命令</h3><p><code>zookeeper</code>——<code>getting started</code>——<a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperStarted.html#sc_FileManagement">https://zookeeper.apache.org/doc/r3.4.14/zookeeperStarted.html#sc_FileManagement</a></p><h3 id="3-1-6、操作结点"><a href="#3-1-6、操作结点" class="headerlink" title="3.1.6、操作结点"></a>3.1.6、操作结点</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a><strong>查询</strong></h4><p><code>get /hadoop</code>  查看结点的数据和属性     <code>stat /hadoop</code> 查看结点的属性</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a><strong>创建</strong></h4><p>创建结点并写入数据：</p><p><code>create [-s] [-e] path data</code> # 其中 -s 为有序结点，-e 临时结点（默认是持久结点）</p><pre class="line-numbers language-shell"><code class="language-shell">create /hadoop "123456"  # 此时，如果quit退出后再./ZkCient.sh 登入                         # 再用输入 get /hadoop 获取，结点依然存在(永久结点)                       create -s /a "a"         # 创建一个持久化有序结点，创建的时候可以观察到返回的数据带上了一个id       create -s /b "b"         # 返回的值，id递增了create -s -e /aa "aa"    # 依然还会返回自增的id，quit后再进来，继续创建，id依然是往后推的create /aa/xx            # 继续创建结点，可以看到pZxid变化了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a><strong>更新</strong></h4><p>更新结点的命令是<code>set</code>，可以直接进行修改，如下：</p><p><code>set path [version]</code></p><pre class="line-numbers language-shell"><code class="language-shell">set /hadoop "345"        # 修改结点值set /hadoop "hadoop-x" 1 # 也可以基于版本号进行更改，类似于乐观锁，当传入版本号(dataVersion)                         # 和当前结点的数据版本号不一致时，zookeeper会拒绝本次修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h4><p>删除结点的语法如下：</p><p><code>delete path [version]</code> 和 <code>set</code> 方法相似，也可以传入版本号</p><pre class="line-numbers language-shell"><code class="language-shell">delete /hadoop           # 删除结点delete /hadoop 1         # 乐观锁机制，与set 方法一致<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要想删除某个结点及其所有后代结点，可以使用递归删除，命令为 <code>rmr path</code></p><h4 id="查看结点列表"><a href="#查看结点列表" class="headerlink" title="查看结点列表"></a><strong>查看结点列表</strong></h4><pre class="line-numbers language-shell"><code class="language-shell">ls /hadoop               # 可以查看结点的列表ls2 /hadoop              # 可以查看结点的列表以及目标结点的信息ls /                     # 根节点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="监听器get-path-watch-stat-path-watch"><a href="#监听器get-path-watch-stat-path-watch" class="headerlink" title="监听器get path [watch] | stat path [watch]"></a><strong>监听器get path [watch] | stat path [watch]</strong></h4><p>使用<code>get path [watch]</code> 注册的监听器能够在结点<strong>内容发生改变</strong>的时候，向客户端发出通知。需要注意的是<code>zookeeper</code>的触发器是一次性的(<code>One-time trigger</code>)，即触发一次后就会立即失效</p><pre class="line-numbers language-shell"><code class="language-shell">get /hadoop watch        # get 的时候添加监听器，当值改变的时候，监听器返回消息set /hadoop 45678        # 测试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ls-ls2-path-watch"><a href="#ls-ls2-path-watch" class="headerlink" title="ls\ls2 path [watch]"></a><strong>ls\ls2 path [watch]</strong></h4><p>使用 <code>ls path [watch] 或 ls2 path [watch] </code>注册的监听器能够监听该结点下<strong>所有子节点</strong>的<strong>增加</strong>和<strong>删除</strong>操作</p><pre class="line-numbers language-shell"><code class="language-shell">ls /hadoop watch         # 添加监听器set /hadoop/node "node"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-1-7、zookeeper的Acl权限控制"><a href="#3-1-7、zookeeper的Acl权限控制" class="headerlink" title="3.1.7、zookeeper的Acl权限控制"></a>3.1.7、zookeeper的Acl权限控制</h3><p><a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperProgrammers.html#sc_ZooKeeperAccessControl">https://zookeeper.apache.org/doc/r3.4.14/zookeeperProgrammers.html#sc_ZooKeeperAccessControl</a></p><p><code>zookeeper </code>类似文件系统，<code>client</code>可以创建结点、更新结点、删除结点，那么如何做到结点的权限控制呢？</p><p><code>zookeeper</code>的 <code>access control list</code> 访问控制列表可以做到这一点</p><p><code>acl</code>权限控制，使用<code>scheme：id：permission </code>来标识，主要涵盖3个方面：</p><p><a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperProgrammers.html#sc_BuiltinACLSchemes">https://zookeeper.apache.org/doc/r3.4.14/zookeeperProgrammers.html#sc_BuiltinACLSchemes</a></p><ul><li>权限模式(<code>scheme</code>)：授权的策略</li><li>授权对象(<code>id</code>)：授权的对象</li><li>权限(<code>permission</code>)：授予的权限</li></ul><p>其特性如下：</p><ul><li><p><code>zookeeper</code>的权限控制是基于每个<code>znode</code>结点的，需要对每个结点设置权限</p></li><li><p>每个<code>znode </code>支持多种权限控制方案和多个权限</p></li><li><p>子结点不会继承父结点的权限，客户端无权访问某结点，但可能可以访问它的子结点：</p><p>例如<code>setAcl /test2 ip:192.168.133.133:crwda</code>  // 将结点权限设置为Ip：192.168.133.133 的客户端可以对节点进行<br>增删改查和管理权限</p></li></ul><p><strong>权限模式</strong></p><ul><li><p>采用何种方式授权</p></li><li></li><li><table><thead><tr><th>方案</th><th>描述</th></tr></thead><tbody><tr><td>world</td><td>只有一个用户：<code>anyone</code>，代表登录<code>zookeeper</code>所有人(默认)</td></tr><tr><td>ip</td><td>对客户端使用IP地址认证</td></tr><tr><td>auth</td><td>使用已添加认证的用户认证</td></tr><tr><td>digest</td><td>使用”用户名：密码”方式认证</td></tr></tbody></table></li></ul><p><strong>授权对象</strong></p><ul><li>给谁授予权限</li><li>授权对象ID是指，权限赋予的实体，例如：IP地址或用户</li></ul><p><strong>授权的权限</strong></p><ul><li><p>授予什么权限</p></li><li><p><code>create、delete、read、writer、admin</code>也就是 增、删、查、改、管理权限，这5种权限简写为 c d r w a，注意：<br>这五种权限中，有的权限并不是对结点自身操作的例如：delete是指对<strong>子结点</strong>的删除权限</p><p>可以试图删除父结点，但是子结点必须删除干净，所以<code>delete</code>的权限也是很有用的</p></li><li></li><li><table><thead><tr><th>权限</th><th>ACL简写</th><th>描述</th></tr></thead><tbody><tr><td>create</td><td>c</td><td>可以创建子结点</td></tr><tr><td>delete</td><td>d</td><td>可以删除子结点(仅下一级结点)</td></tr><tr><td>read</td><td>r</td><td>可以读取结点数据以及显示子结点列表</td></tr><tr><td>write</td><td>w</td><td>可以设置结点数据</td></tr><tr><td>admin</td><td>a</td><td>可以设置结点访问控制权限列表</td></tr></tbody></table></li></ul><p><strong>授权的相关命令</strong></p><ul><li></li><li><table><thead><tr><th>命令</th><th>使用方式</th><th>描述</th></tr></thead><tbody><tr><td>getAcl</td><td>getAcl</td><td>读取ACL权限</td></tr><tr><td>setAcl</td><td>setAcl</td><td>设置ACL权限</td></tr><tr><td>addauth</td><td>addauth</td><td>添加认证用户</td></tr></tbody></table></li></ul><h4 id="案例-远程登录"><a href="#案例-远程登录" class="headerlink" title="案例/远程登录"></a>案例/远程登录</h4><p><strong><code>./zkServer.sh -server 192.168.133.133</code></strong> 可以远程登录</p><p><strong>world权限模式</strong></p><ul><li><code>getAcl /node</code> // 读取权限信息</li><li><code>setAcl /node world:anyone:drwa</code> // 设置权限(禁用创建子结点的权限)</li></ul><p><strong>ip模式</strong></p><p><code>./zkServer.sh -server 192.168.133.133</code> 可以远程登录</p><ul><li><code>setAcl /hadoop ip:192.168.133.133:drwa</code></li><li>如果在两台不同的虚拟机中，另一台用远程连接的模式，进行上面这条命令，那么只会有一台被授权</li><li>需要两台虚拟机一起授权的话需要用<strong>逗号</strong>将授权列表隔开：<code>setAcl /hadoop ip:192.168.133.133:cdrwa,ip:192.168.133.132:cdrwa</code></li></ul><p><strong>auth认证用户模式</strong></p><p><strong><code>addauth digest &lt;user&gt;:&lt;password&gt;</code></strong></p><p><strong><code>setAcl &lt;path&gt; auth:&lt;user&gt;:&lt;acl&gt;</code></strong></p><ul><li><pre class="line-numbers language-shell"><code class="language-shell">create /hadoop "hadoop"           # 初始化测试用的结点addauth digest itcast:123456      # 添加认证用户setAcl /hadoop auth:itcast:cdrwa  # 设置认证用户quit                              # 退出后再./zkCli.sh 进入get /hadoop                       # 这个时候就没有权限了，需要再次认证addauth digest itcast:123456      # 认证，密码错了的话 zookeeper 不会报错，但是不能认证get /hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>Digest授权模式</strong></p><p><strong><code>setAcl &lt;path&gt; digest:&lt;user&gt;:&lt;password&gt;:&lt;acl&gt;</code></strong></p><ul><li><p>这里的密码是经过<code>SHA1</code>以及<code>BASE64</code>处理的密文，在shell 中可以通过以下命令计算：</p><ul><li><pre class="line-numbers language-shell"><code class="language-shell">echo -n <user>:<password> | openssl dgst -binary -sha1 | openssl base64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-shell"><code class="language-shell"># 计算密码echo -n itcast:12345 | openssl dgst -binary -sha1 | openssl base64# 获取密码，设置权限列表setAcl /hadoop digest:itcast:qUFSHxJjItUW/93UHFXFVGlvryY=:cdrwa# 现在想要get /hadoop 需要登录了addauth digest itcast:12345get /hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><p><strong>多种授权模式</strong></p><p>仅需逗号隔开</p><ul><li><pre class="line-numbers language-shell"><code class="language-shell">setAcl /hadoop ip:192.168.133.132:cdrwa,auth:hadoop:cdrwa,digest:itcast:673OfZhUE8JEFMcu0l64qI8e5ek=:cdrwa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="acl-超级管理员"><a href="#acl-超级管理员" class="headerlink" title="acl 超级管理员"></a>acl 超级管理员</h4><ul><li><p><code>zookeeper</code>的权限管理模式有一种叫做<code>super</code>，该模式提供一个超管，可以方便的访问任何权限的节点</p><p>假设这个超管是<code>supper:admin</code>，需要为超管生产密码的密文</p><pre class="line-numbers language-shell"><code class="language-shell">echo -n super:admin | openssl dgst -binary -sha1 | openssl base64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>那么打开<code>zookeeper</code>目录下<code>/bin/zkServer.sh</code>服务器脚本文件，找到如下一行：</p><pre class="line-numbers language-shell"><code class="language-shell"> /nohup # 快速查找，可以看到如下 nohup "$JAVA" "-Dzookeeper.log.dir=${ZOO_LOG_DIR}" "-Dzookeeper.root.logger=${ZOO_LOG4J_PROP}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>这个就算脚本中启动<code>zookeeper</code>的命令，默认只有以上两个配置项，我们需要添加一个超管的配置项</p><pre><code>&quot;-Dzookeeper.DigestAuthenticationProvider.superDigest=super:xQJmxLMiHGwaqBvst5y6rkB6HQs=&quot;</code></pre></li><li><p>修改后命令变成如下</p><pre class="line-numbers language-shell"><code class="language-shell">nohup "$JAVA" "-Dzookeeper.log.dir=${ZOO_LOG_DIR}" "-Dzookeeper.root.logger=${ZOO_LOG4J_PROP}" "-Dzookeeper.DigestAuthenticationProvider.superDigest=super:xQJmxLMiHGwaqBvst5y6rkB6HQs="<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-shell"><code class="language-shell"># 重起后，现在随便对任意节点添加权限限制setAcl /hadoop ip:192.168.1.1:cdrwa # 这个ip并非本机# 现在当前用户没有权限了getAcl /hadoop# 登录超管addauth digest super:admin# 强行操作节点get /hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-1-8、zookeeper的-JavaAPI"><a href="#3-1-8、zookeeper的-JavaAPI" class="headerlink" title="3.1.8、zookeeper的 JavaAPI"></a>3.1.8、zookeeper的 JavaAPI</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>zonde </code>是 <code>zookeeper </code>集合的核心组件，<code> zookeeper API</code> 提供了一小组使用 <code>zookeeper </code>集群来操作<code>znode </code>的所有细节</p><p>客户端应该遵循以下步骤，与<code>zookeeper</code>服务器进行清晰和干净的交互</p><ul><li>连接到<code>zookeeper</code>服务器。<code>zookeeper</code>服务器为客户端分配会话<code>ID</code></li><li>定期向服务器发送心跳。否则，<code>zookeeper </code>服务器将过期会话<code>ID</code>，客户端需要重新连接</li><li>只要会话<code>Id</code>处于活动状态，就可以获取/设置<code>znode</code></li><li>所有任务完成后，断开与<code>zookeeper</code>服务器连接，如果客户端长时间不活动，则<code>zookeeper</code>服务器将自动断开客户端</li></ul><h4 id="连接到Zookeeper"><a href="#连接到Zookeeper" class="headerlink" title="连接到Zookeeper"></a>连接到Zookeeper</h4><p>这部分，官网的解释十分稀少<a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperStarted.html#sc_ConnectingToZooKeeper">https://zookeeper.apache.org/doc/r3.4.14/zookeeperStarted.html#sc_ConnectingToZooKeeper</a></p><pre><code>[zkshell: 0] helpZooKeeper host:port cmd args    get path [watch]    ls path [watch]    set path data [version]    delquota [-n|-b] path    quit    printwatches on|off    create path data acl    stat path [watch]    listquota path    history    setAcl path acl    getAcl path    sync path    redo cmdno    addauth scheme auth    delete path [version]    deleteall path    setquota -n|-b val path</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token function">Zookeeper</span><span class="token punctuation">(</span>String connectionString<span class="token punctuation">,</span> <span class="token keyword">int</span> sessionTimeout<span class="token punctuation">,</span> watcher watcher<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>connectionString</code> - <code>zookeeper </code>主机</li><li><code>sessionTimeout </code>- 会话超时</li><li><code>watcher</code> - 实现”监听器” 对象。<code>zookeeper</code>集合通过监视器对象返回连接状态</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZooKeeper zookeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>WatchedEvent x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Watcher<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zookeeper<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zookeeper<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h5><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步create(String path, byte[] data, List&lt;ACL> acl, CreateMode createMode)// 异步create(String path, byte[] data, List&lt;ACL> acl, CreateMode createMode,      AsynCallback.StringCallback callBack, Object ctx)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li><li><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>path</code></td><td><code>znode </code>路径</td></tr><tr><td><code>data</code></td><td>数据</td></tr><tr><td><code>acl</code></td><td>要创建的节点的访问控制列表。<code>zookeeper API </code>提供了一个静态接口 <code>ZooDefs.Ids</code> 来获取一些基本的<code>acl</code>列表。例如，<code>ZooDefs.Ids.OPEN_ACL_UNSAFE</code>返回打开<code>znode</code>的<code>acl</code>列表</td></tr><tr><td><code>createMode</code></td><td>节点的类型，这是一个枚举</td></tr><tr><td><code>callBack</code></td><td>异步回调接口</td></tr><tr><td><code>ctx</code></td><td>传递上下文参数</td></tr></tbody></table></li></ul><p>示例：</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 枚举的方式    public static void createTest1() throws Exception{        String str = "node";        String s = zookeeper.create("/node", str.getBytes(),                ZooDefs.Ids.READ_ACL_UNSAFE, CreateMode.PERSISTENT);        System.out.println(s);    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义的方式    public static void createTest2() throws Exception{        ArrayList&lt;ACL> acls = new ArrayList&lt;>();        Id id = new Id("ip","192.168.133.133");        acls.add(new ACL(ZooDefs.Perms.ALL,id));        zookeeper.create("/create/node4","node4".getBytes(),acls,CreateMode.PERSISTENT);    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// auth    public static void createTest3() throws  Exception{        zookeeper.addAuthInfo("digest","itcast:12345".getBytes());        zookeeper.create("/node5","node5".getBytes(),                ZooDefs.Ids.CREATOR_ALL_ACL,CreateMode.PERSISTENT);    }// 自定义的方式    public static void createTest3() throws  Exception{//        zookeeper.addAuthInfo("digest","itcast:12345".getBytes());//        zookeeper.create("/node5","node5".getBytes(),//                ZooDefs.Ids.CREATOR_ALL_ACL,CreateMode.PERSISTENT);        zookeeper.addAuthInfo("digest","itcast:12345".getBytes());        List&lt;ACL> acls = new ArrayList&lt;>();        Id id = new Id("auth","itcast");        acls.add(new ACL(ZooDefs.Perms.READ,id));        zookeeper.create("/create/node6","node6".getBytes(),                acls,CreateMode.PERSISTENT);    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// digest public static void createTest3() throws  Exception{    List&lt;ACL> acls = new ArrayList&lt;>();    Id id = new Id("digest","itcast:qUFSHxJjItUW/93UHFXFVGlvryY=");    acls.add(new ACL(ZooDefs.Perms.READ,id));    zookeeper.create("/create/node7","node7".getBytes(),                          acls,CreateMode.PERSISTENT);}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 异步    public static void createTest4() throws  Exception{        zookeeper.create("/node12", "node12".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, new AsyncCallback.StringCallback(){            </span><span class="token comment" spellcheck="true">/**             * @param rc 状态，0 则为成功，以下的所有示例都是如此             * @param path 路径             * @param ctx 上下文参数             * @param name 路径             */</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> Object ctx<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rc <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name <span class="token operator">+</span>  <span class="token string">" "</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"I am context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h5><p>同样也有两种修改方式(<code>异步和同步</code>)</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步setData(String path, byte[] data, int version)// 异步setData(String path, byte[] data, int version, StatCallback callBack, Object ctx)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li><li><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>path</code></td><td>节点路径</td></tr><tr><td><code>data</code></td><td>数据</td></tr><tr><td><code>version</code></td><td>数据的版本号， -<code>1</code>代表不使用版本号，乐观锁机制</td></tr><tr><td><code>callBack</code></td><td>异步回调 <code>AsyncCallback.StatCallback</code>，和之前的回调方法参数不同，这个可以获取节点状态</td></tr><tr><td><code>ctx</code></td><td>传递上下文参数</td></tr></tbody></table></li><li><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// arg1:节点的路径        // arg2:修改的数据        // arg3:数据的版本号 -1 代表版本号不参与更新        Stat stat = zookeeper.setData("/hadoop","hadoop-1".getBytes(),-1);    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setData2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        zookeeper<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span> <span class="token string">"hadoop-1"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AsyncCallback<span class="token punctuation">.</span>StatCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> Object ctx<span class="token punctuation">,</span> Stat stat<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 讲道理，要判空                System.out.println(rc + " " + path + " " + stat.getVersion() +  " " + ctx);            }        }, "I am context");    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><p>异步、同步</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步delete(String path, int version)// 异步delete(String path, int version, AsyncCallback.VoidCallback callBack, Object ctx)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li><li><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>path</code></td><td>节点路径</td></tr><tr><td><code>version</code></td><td>版本</td></tr><tr><td><code>callBack</code></td><td>数据的版本号， -<code>1</code>代表不使用版本号，乐观锁机制</td></tr><tr><td><code>ctx</code></td><td>传递上下文参数</td></tr></tbody></table></li><li><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        zookeeper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteData2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        zookeeper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AsyncCallback<span class="token punctuation">.</span>VoidCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> Object ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rc <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"I am context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h5><p>同步、异步</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步getData(String path, boolean watch, Stat stat)getData(String path, Watcher watcher, Stat stat)// 异步getData(String path, boolean watch, DataCallback callBack, Object ctx)getData(String path, Watcher watcher, DataCallback callBack, Object ctx)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li><li><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>path</code></td><td>节点路径</td></tr><tr><td><code>boolean</code></td><td>是否使用连接对象中注册的监听器</td></tr><tr><td><code>stat</code></td><td>元数据</td></tr><tr><td><code>callBack</code></td><td>异步回调接口，可以获得状态和数据</td></tr><tr><td><code>ctx</code></td><td>传递上下文参数</td></tr></tbody></table></li><li><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Stat stat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> zookeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> stat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判空        System.out.println(stat.getCtime());    }    public static void getData2() throws Exception {        zookeeper.getData("/hadoop", false, new AsyncCallback.DataCallback() {            @Override            public void processResult(int rc, String path, Object ctx, byte[] bytes, Stat stat) {                // 判空                System.out.println(rc + " " + path                                   + " " + ctx + " " + new String(bytes) + " " +                                    stat.getCzxid());            }        }, "I am context");        TimeUnit.SECONDS.sleep(3);    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="查看子节点"><a href="#查看子节点" class="headerlink" title="查看子节点"></a>查看子节点</h5><p>同步、异步</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步getChildren(String path, boolean watch)getChildren(String path, Watcher watcher)getChildren(String path, boolean watch, Stat stat)    getChildren(String path, Watcher watcher, Stat stat)// 异步getChildren(String path, boolean watch, ChildrenCallback callBack, Object ctx)    getChildren(String path, Watcher watcher, ChildrenCallback callBack, Object ctx)getChildren(String path, Watcher watcher, Children2Callback callBack, Object ctx)    getChildren(String path, boolean watch, Children2Callback callBack, Object ctx)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li><li><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>path</code></td><td>节点路径</td></tr><tr><td><code>boolean</code></td><td></td></tr><tr><td><code>callBack</code></td><td>异步回调，可以获取节点列表</td></tr><tr><td><code>ctx</code></td><td>传递上下文参数</td></tr></tbody></table></li><li><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getChildren_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> hadoop <span class="token operator">=</span> zookeeper<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hadoop<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getChildren_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        zookeeper<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AsyncCallback<span class="token punctuation">.</span>ChildrenCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> Object ctx<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rc <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"I am children"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="检查节点是否存在"><a href="#检查节点是否存在" class="headerlink" title="检查节点是否存在"></a>检查节点是否存在</h5><p>同步、异步</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 同步exists(String path, boolean watch)exists(String path, Watcher watcher)// 异步exists(String path, boolean watch, StatCallback cb, Object ctx)exists(String path, Watcher watcher, StatCallback cb, Object ctx)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li><li><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>path</code></td><td>节点路径</td></tr><tr><td><code>boolean</code></td><td></td></tr><tr><td><code>callBack</code></td><td>异步回调，可以获取节点列表</td></tr><tr><td><code>ctx</code></td><td>传递上下文参数</td></tr></tbody></table></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exists1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    Stat exists <span class="token operator">=</span> zookeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/hadoopx"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判空    System.out.println(exists.getVersion() + "成功");}public static void exists2() throws Exception{    zookeeper.exists("/hadoopx", false, new AsyncCallback.StatCallback() {        @Override        public void processResult(int rc, String path, Object ctx, Stat stat) {            // 判空            System.out.println(rc + " " + path + " " + ctx +" " + stat.getVersion());        }    }, "I am children");    TimeUnit.SECONDS.sleep(1);}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-1-9、事件监听机制"><a href="#3-1-9、事件监听机制" class="headerlink" title="3.1.9、事件监听机制"></a>3.1.9、事件监听机制</h3><p><strong>watcher概念</strong></p><p><a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperProgrammers.html#sc_WatchRememberThese">https://zookeeper.apache.org/doc/r3.4.14/zookeeperProgrammers.html#sc_WatchRememberThese</a></p><ul><li><code>zookeeper</code>提供了数据的<code>发布/订阅</code>功能，多个订阅者可同时监听某一特定主题对象，当该主题对象的自身状态发生变化时例如节点内容改变、节点下的子节点列表改变等，会实时、主动通知所有订阅者</li><li><code>zookeeper</code>采用了 <code>Watcher</code>机制实现数据的发布订阅功能。该机制在被订阅对象发生变化时会异步通知客户端，因此客户端不必在 <code>Watcher</code>注册后轮询阻塞，从而减轻了客户端压力</li><li><code>watcher</code>机制事件上与观察者模式类似，也可看作是一种观察者模式在分布式场景下的实现方式</li></ul><h4 id="watcher架构"><a href="#watcher架构" class="headerlink" title="watcher架构"></a>watcher架构</h4><p><code>watcher</code>实现由三个部分组成</p><ul><li><code>zookeeper</code>服务端</li><li><code>zookeeper</code>客户端</li><li>客户端的<code>ZKWatchManager对象</code></li></ul><p>客户端<strong>首先将 <code>Watcher</code>注册到服务端</strong>，同时将 <code>Watcher</code>对象<strong>保存到客户端的<code>watch</code>管理器中</strong>。当<code>Zookeeper</code>服务端监听的数据状态发生变化时，服务端会<strong>主动通知客户端</strong>，接着客户端的 <code>Watch</code>管理器会**触发相关 <code>Watcher</code>**来回调相应处理逻辑，从而完成整体的数据 <code>发布/订阅</code>流程</p><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-6.png" alt="zookeeper-6"></p><h4 id="watcher特性"><a href="#watcher特性" class="headerlink" title="watcher特性"></a>watcher特性</h4><ul><li></li><li><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>一次性</td><td><code>watcher</code>是<strong>一次性</strong>的，一旦被触发就会移除，再次使用时需要重新注册</td></tr><tr><td>客户端顺序回调</td><td><code>watcher</code>回调是<strong>顺序串行</strong>执行的，只有回调后客户端才能看到最新的数据状态。一个<code>watcher</code>回调逻辑不应该太多，以免影响别的<code>watcher</code>执行</td></tr><tr><td>轻量级</td><td><code>WatchEvent</code>是最小的通信单位，结构上只包含<strong>通知状态、事件类型和节点路径</strong>，并不会告诉数据节点变化前后的具体内容</td></tr><tr><td>时效性</td><td><code>watcher</code>只有在当前<code>session</code>彻底失效时才会无效，若在<code>session</code>有效期内快速重连成功，则<code>watcher</code>依然存在，仍可接收到通知；</td></tr></tbody></table></li></ul><p><strong>watcher接口设计</strong></p><p><code>Watcher</code>是一个接口，任何实现了<code>Watcher</code>接口的类就算一个新的<code>Watcher</code>。<code>Watcher</code>内部包含了两个枚举类：<code>KeeperState</code>、<code>EventType</code></p><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-7.png" alt="zookeeper-7"></p><h5 id="Watcher通知状态-KeeperState"><a href="#Watcher通知状态-KeeperState" class="headerlink" title="Watcher通知状态(KeeperState)"></a>Watcher通知状态(KeeperState)</h5><p><code>KeeperState</code>是客户端与服务端<strong>连接状态</strong>发生变化时对应的通知类型。路径为<code>org.apache.zookeeper.Watcher.EventKeeperState</code>，是一个枚举类，其枚举属性如下：</p><ul><li></li><li><table><thead><tr><th>枚举属性</th><th>说明</th></tr></thead><tbody><tr><td><code>SyncConnected</code></td><td>客户端与服务器正常连接时</td></tr><tr><td><code>Disconnected</code></td><td>客户端与服务器断开连接时</td></tr><tr><td><code>Expired</code></td><td>会话<code>session</code>失效时</td></tr><tr><td><code>AuthFailed</code></td><td>身份认证失败时</td></tr></tbody></table></li></ul><h5 id="Watcher事件类型-EventType"><a href="#Watcher事件类型-EventType" class="headerlink" title="Watcher事件类型(EventType)"></a>Watcher事件类型(EventType)</h5><p><code>EventType</code>是<strong>数据节点<code>znode</code>发生变化</strong>时对应的通知类型。**<code>EventType</code>变化时<code>KeeperState</code>永远处于<code>SyncConnected</code>通知状态下**；当<code>keeperState</code>发生变化时，<code>EventType</code>永远为<code>None</code>。其路径为<code>org.apache.zookeeper.Watcher.Event.EventType</code>，是一个枚举类，枚举属性如下：</p><ul><li></li><li><table><thead><tr><th>枚举属性</th><th>说明</th></tr></thead><tbody><tr><td><code>None</code></td><td>无</td></tr><tr><td><code>NodeCreated</code></td><td><code>Watcher</code>监听的数据节点被创建时</td></tr><tr><td><code>NodeDeleted</code></td><td><code>Watcher</code>监听的数据节点被删除时</td></tr><tr><td><code>NodeDataChanged</code></td><td><code>Watcher</code>监听的数据节点内容发生更改时(无论数据是否真的变化)</td></tr><tr><td><code>NodeChildrenChanged</code></td><td><code>Watcher</code>监听的数据节点的子节点列表发生变更时</td></tr></tbody></table></li><li><p>注意：客户端接收到的相关事件通知中只包含状态以及类型等信息，不包含节点变化前后的具体内容，变化前的数据需业务自身存储，变化后的数据需要调用<code>get</code>等方法重新获取</p></li></ul><h5 id="捕获相应的事件"><a href="#捕获相应的事件" class="headerlink" title="捕获相应的事件"></a>捕获相应的事件</h5><p>上面讲到<code>zookeeper</code>客户端连接的状态和<code>zookeeper</code>对<code>znode</code>节点监听的事件类型，下面我们来讲解如何建立<code>zookeeper</code>的***<code>watcher</code>监听***。在<code>zookeeper</code>中采用<code>zk.getChildren(path,watch)、zk.exists(path,watch)、zk.getData(path,watcher,stat)</code>这样的方式来为某个<code>znode</code>注册监听 。</p><p>下表以<code>node-x</code>节点为例，说明调用的注册方法和可用监听事件间的关系：</p><table><thead><tr><th>注册方式</th><th>created</th><th>childrenChanged</th><th>Changed</th><th>Deleted</th></tr></thead><tbody><tr><td><code>zk.exists(&quot;/node-x&quot;,watcher)</code></td><td>可监控</td><td></td><td>可监控</td><td>可监控</td></tr><tr><td><code>zk.getData(&quot;/node-x&quot;,watcher)</code></td><td></td><td></td><td>可监控</td><td>可监控</td></tr><tr><td><code>zk.getChildren(&quot;/node-x&quot;,watcher)</code></td><td></td><td>可监控</td><td></td><td>可监控</td></tr></tbody></table><p><strong>注册watcher的方法</strong></p><h5 id="客户端与服务器端的连接状态"><a href="#客户端与服务器端的连接状态" class="headerlink" title="客户端与服务器端的连接状态"></a>客户端与服务器端的连接状态</h5><ul><li><p><code>KeeperState </code>：通知状态</p></li><li><p><code>SyncConnected</code>：客户端与服务器正常连接时</p></li><li><p><code>Disconnected</code>：客户端与服务器断开连接时</p></li><li><p><code>Expired</code>：会话<code>session</code>失效时</p></li><li><p><code>AuthFailed</code>：身份认证失败时</p></li><li><p>事件类型为：<code>None</code></p><ul><li><p>案例</p></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZkConnectionWatcher</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Event<span class="token punctuation">.</span>KeeperState state <span class="token operator">=</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">==</span> Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 正常</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>Disconnected<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 可以用Windows断开虚拟机网卡的方式模拟</span>            <span class="token comment" spellcheck="true">// 当会话断开会出现，断开连接不代表不能重连，在会话超时时间内重连可以恢复正常</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"断开连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>Expired<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 没有在会话超时时间内重新连接，而是当会话超时被移除的时候重连会走进这里</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>AuthFailed<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在操作的时候权限不够会出现</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"授权失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String IP <span class="token operator">=</span> <span class="token string">"192.168.133.133:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 5000为会话超时时间</span>        ZooKeeper zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ZkConnectionWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟授权失败</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">addAuthInfo</span><span class="token punctuation">(</span><span class="token string">"digest1"</span><span class="token punctuation">,</span><span class="token string">"itcast1:123451"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5 id="watcher检查节点"><a href="#watcher检查节点" class="headerlink" title="watcher检查节点"></a>watcher检查节点</h5><p><strong>exists</strong></p><ul><li><p><code>exists(String path, boolean b)</code></p></li><li><p><code>exists(String path, Watcher w)</code></p></li><li><p><code>NodeCreated</code>：<strong>节点</strong>创建</p></li><li><p><code>NodeDeleted</code>：<strong>节点</strong>删除</p></li><li><p><code>NodeDataChanged</code>：<strong>节点</strong>内容</p><ul><li><p>案例</p></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventTypeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String IP <span class="token operator">=</span> <span class="token string">"192.168.133.133:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ZooKeeper zooKeeper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 采用zookeeper连接创建时的监听器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exists1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/watcher1"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 自定义监听器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exists2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/watcher1"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>WatchedEvent w<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义"</span> <span class="token operator">+</span> w<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 演示使用多次的监听器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exists3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/watcher1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义的"</span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/watcher1"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 演示一节点注册多个监听器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exists4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/watcher1"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>WatchedEvent w<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义1"</span> <span class="token operator">+</span> w<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/watcher1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义2"</span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/watcher1"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 测试</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ZKWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exists4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ZKWatcher</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zk的监听器"</span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong>getData</strong></p><ul><li><code>getData(String path, boolean b, Stat stat)</code></li><li><code>getData(String path, Watcher w, Stat stat)</code></li><li><code>NodeDeleted</code>：<strong>节点</strong>删除</li><li><code>NodeDataChange</code>：<strong>节点</strong>内容发生变化</li></ul><p><strong>getChildren</strong></p><ul><li><code>getChildren(String path, boolean b)</code></li><li><code>getChildren(String path, Watcher w)</code></li><li><code>NodeChildrenChanged</code>：<strong>子节点</strong>发生变化</li><li><code>NodeDeleted</code>：<strong>节点删除</strong></li></ul><p><strong>配置中心案例</strong></p><p>工作中有这样的一个场景：数据库用户名和密码信息放在一个配置文件中，应用读取该配置文件，配置文件信息放入缓存</p><p>若数据库的用户名和密码改变时候，还需要重新加载媛存，比较麻烦，通过 <code>Zookeeper</code>可以轻松完成,当数据库发生变化时自动完成缓存同步</p><p>使用事件监听机制可以做出一个简单的配置中心</p><p>设计思路</p><ol><li>连接<code>zookeeper </code>服务器</li><li>读取<code>zookeeper</code>中的配置信息，注册<code>watcher</code>监听器，存入本地变量</li><li>当<code>zookeeper</code>中的配置信息发生变化时，通过<code>watcher</code>的回调方法捕获数据变化事件</li><li>重新获取配置信息</li></ol><h5 id="分布式唯一id案例"><a href="#分布式唯一id案例" class="headerlink" title="分布式唯一id案例"></a>分布式唯一id案例</h5><p>在过去的单库单表型系统中，通常第可以使用数据库字段自带的<code>auto_ increment</code>属性来自动为每条记录生成个唯一的<code>ID</code>。但是分库分表后，就无法在依靠数据库的<code>auto_ increment</code>属性来唯一标识一条记录了。此时我们就可以用<code>zookeeper</code>在分布式环境下生成全局唯一<code>ID</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdGenerate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String IP <span class="token operator">=</span> <span class="token string">"192.168.133.133:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ZooKeeper zooKeeper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">generateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/id"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ZKWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">generateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ZKWatcher</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zk的监听器"</span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a><strong>分布式锁</strong></h5><p>分布式锁有多种实现方式，比如通过数据库、redis都可实现。作为分布式协同工具<code>Zookeeper</code>，当然也有着标准的实现方式。下面介绍在<code>zookeeper</code>中如果实现排他锁</p><p>设计思路</p><ol><li>每个客户端往<code>/Locks</code>下创建临时有序节点<code>/Locks/Lock_</code>，创建成功后<code>/Locks</code>下面会有每个客户端对应的节点，如<code>/Locks/Lock_000000001</code></li><li>客户端取得/Locks下子节点，并进行排序，判断排在前面的是否为自己，如果自己的锁节点在第一位，代表获取锁成功</li><li>如果自己的锁节点不在第一位，则监听自己前一位的锁节点。例如，自己锁节点<code>Lock_000000002</code>，那么则监听<code>Lock_000000001</code></li><li>当前一位锁节点<code>(Lock_000000001)</code>对应的客户端执行完成，释放了锁，将会触发监听客户端<code>(Lock_000000002)</code>的逻辑</li><li>监听客户端重新执行第<code>2</code>步逻辑，判断自己是否获得了锁</li><li><strong>zookeeper是有工具包的(这里采用手写)</strong></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delayOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">Runable</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Runable runable<span class="token punctuation">,</span><span class="token keyword">int</span> threadNum<span class="token punctuation">)</span><span class="token punctuation">{</span>        ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runable<span class="token operator">:</span><span class="token operator">:</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        DistributedLock distributedLock = new DistributedLock();</span><span class="token comment" spellcheck="true">//        distributedLock.acquireLock();</span><span class="token comment" spellcheck="true">//        delayOperation();</span><span class="token comment" spellcheck="true">//        distributedLock.releaseLock();</span>        DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每秒打印信息</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">999999999</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                String format <span class="token operator">=</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程测试</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            DistributedLock distributedLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistributedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            distributedLock<span class="token punctuation">.</span><span class="token function">acquireLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delayOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            distributedLock<span class="token punctuation">.</span><span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String IP <span class="token operator">=</span> <span class="token string">"192.168.133.133:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String ROOT_LOCK <span class="token operator">=</span> <span class="token string">"/Root_Lock"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String LOCK_PREFIX <span class="token operator">=</span> <span class="token string">"/Lock_"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DATA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ZooKeeper zookeeper<span class="token punctuation">;</span>    <span class="token keyword">private</span> String path<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zookeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> <span class="token number">200000</span><span class="token punctuation">,</span> w <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Watcher<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 暴露的外部方法，主逻辑</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquireLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">createLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">attemptLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 暴露的外部方法，主逻辑</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zookeeper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锁释放了"</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> KeeperException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建一个目录节点</span>            Stat root <span class="token operator">=</span> zookeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>ROOT_LOCK<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>                zookeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ROOT_LOCK<span class="token punctuation">,</span> DATA<span class="token punctuation">,</span> ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 目录下创建子节点</span>            path <span class="token operator">=</span> zookeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ROOT_LOCK <span class="token operator">+</span> LOCK_PREFIX<span class="token punctuation">,</span> DATA<span class="token punctuation">,</span> ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeeperException</span> <span class="token operator">|</span> InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Watcher watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>watchedEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Event<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>NodeDeleted<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取正在排队的节点，由于是zookeeper生成的临时节点，不会出错，这里不能加监视器</span>            <span class="token comment" spellcheck="true">// 因为添加了监视器后，任何子节点的变化都会触发监视器</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodes <span class="token operator">=</span> zookeeper<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>ROOT_LOCK<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取自身节点的排名</span>            <span class="token keyword">int</span> ranking <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>ROOT_LOCK<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 已经是最靠前的节点了，获取锁</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ranking <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 并不是靠前的锁，监视自身节点的前一个节点</span>                Stat status <span class="token operator">=</span> zookeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>ROOT_LOCK<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ranking <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> watcher<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 有可能这这个判断的瞬间，0号完成了操作(此时我们应该判断成功自旋才对)，但是上面的status变量已经获取了值并且不为空，1号沉睡</span>                <span class="token comment" spellcheck="true">// 但是，请注意自行测试，虽然1号表面上沉睡了，但是实际上watcher.wait()是瞬间唤醒的</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">attemptLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">{</span>                        watcher<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">attemptLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeeperException</span> <span class="token operator">|</span> InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-10、集群搭建"><a href="#3-1-10、集群搭建" class="headerlink" title="3.1.10、集群搭建"></a>3.1.10、集群搭建</h3><p><code>zookeeper</code>官网——<code>Getting started</code>——<a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperStarted.html#sc_RunningReplicatedZooKeeper">https://zookeeper.apache.org/doc/r3.4.14/zookeeperStarted.html#sc_RunningReplicatedZooKeeper</a></p><p>完全配置——<a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_zkMulitServerSetup">https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_zkMulitServerSetup</a><br><a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_configuration">https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_configuration</a></p><p>运行时复制的<code>zookeeper</code></p><p><strong>说明</strong>：对于复制模式，至少需要三个服务器，并且强烈建议您使用奇数个服务器。如果只有两台服务器，那么您将处于一种情况，如果其中一台服务器发生故障，则没有足够的计算机构成多数仲裁(<code>zk</code>采用的是过半数仲裁。因此，搭建的集群要容忍n个节点的故障，就必须有<code>2n+1</code>台计算机，这是因为宕掉n台后，集群还残余<code>n+1</code>台计算机，<code>n+1</code>台计算机中必定有一个最完整最接近<code>leader</code>的<code>follower</code>，假如宕掉的n台都是有完整信息的，剩下的一台就会出现在残余的<code>zk</code>集群中。也就是说：<code>zk</code>为了安全，必须达到多数仲裁，否则没有<code>leader</code>，集群失败，具体体现在**<code>leader</code>选举-章**)。由于存在两个单点故障，因此两个服务器还<strong>不如</strong>单个服务器稳定。</p><p>——关于<code>2n+1</code>原则，<code>Kafka</code>官网有权威的解释(虽然<code>Kafka</code>不采用)<a href="http://kafka.apache.org/0110/documentation.html#design_replicatedlog">http://kafka.apache.org/0110/documentation.html#design_replicatedlog</a></p><p>多数仲裁的设计是为了<strong>避免脑裂</strong>(zk，已经采用了多数仲裁，所以不会出现)，和数据一致性的问题</p><ul><li><strong>脑裂</strong>：由于网络延迟等各种因素，最终导致集群一分为二，各自独立运行(两个<code>leader</code>)，集群就是坏的</li><li>如果有两台服务器，两台都认为另外的<code>zk</code>宕掉，各自成为<code>leader</code>运行(假设可以，实际上选不出<code>leader</code>，可以实际搭建一个集群，看看一台zk是否能够成功集群，详见**<code>leader</code>选举**)，就会导致数据不一致。</li><li>如果有三台服务器，一台因为网络分区，无法连接，剩下两台网络正常，选举出了<code>leader</code>，集群正常</li><li>以此类推<ul><li><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\脑裂.png" alt="脑裂"></li><li>zk的设计天生就是<code>cap</code>中的<code>cp</code>，所以不会出现上述的脑裂和数据一致性问题，我们搭建<code>zk</code>仅需保证<code>2n+1</code>原则</li></ul></li></ul><p>复制模式所需的<strong>conf / zoo.cfg</strong>文件类似于独立模式下使用的文件，但有一些区别。这是一个例子：</p><pre class="line-numbers language-shell"><code class="language-shell">tickTime=2000dataDir=/var/lib/zookeeperclientPort=2181initLimit=5syncLimit=2server.1=zoo1:2888:3888 # 这是多机部署server.2=zoo2:2888:3888server.3=zoo3:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新的键值**<code>initLimit</code><strong>是<code>zookeeper</code>用于限制选举中<code>zookeeper</code>服务连接到<code>leader</code>的时间，</strong><code>syncLimit</code>**限制服务器与<code>leader</code>的过期时间</li><li>对于这两个超时，您都可以使用<strong>tickTime</strong>指定时间单位。在此示例中，<code>initLimit</code>的超时为5个滴答声，即<code>2000</code>毫秒/滴答声，即<code>10</code>秒</li><li>表格*<code>server.X</code><em>的条目列出了组成<code>ZooKeeper</code>服务的服务器。服务器启动时，它通过在数据目录中查找文件</em><code>myid</code>*来知道它是哪台服务器。该文件包含<code>ASCII</code>的服务器号。</li><li>最后，记下每个服务器名称后面的两个端口号：<code>“ 2888”</code>和<code>“ 3888”</code>。对等方使用前一个端口连接到其他对等方。这种连接是必需的，以便对等方可以进行通信，例如，以商定更新顺序。更具体地说，**<code>ZooKeeper</code>服务器使用此端口将<code>follower</code>连接到<code>leader</code>**。当出现新的<code>leader</code>者时，<code>follower</code>使用此端口打开与<code>leader</code>的<code>TCP</code>连接。因为默认的<code>leader</code>选举也使用<code>TCP</code>，所以我们当前需要另一个端口来进行<code>leader</code>选举。这是第二个端口。</li></ul><p><strong>正文</strong>搭建：单机环境下，<code>jdk</code>、<code>zookeeper</code>安装完毕，基于一台虚拟机，进行<code>zookeeper</code><strong>伪集群搭建</strong>，<code>zookeeper</code>集群中包含3个节点，节点对外提供服务端口号，分别为<code>2181</code>、<code>2182</code>、<code>2183</code></p><ol><li><p>基于<code>zookeeper-3.4.10</code>复制三份<code>zookeeper</code>安装好的服务器文件,目录名称分别为<code>zookeeper2181</code>、<code>zookeeper2182</code>、<code>zookeeper2183</code></p><pre class="line-numbers language-shell"><code class="language-shell">cp -r zookeeper-3.4.10  zookeeper2181cp -r zookeeper-3.4.10  zookeeper2182cp -r zookeeper-3.4.10  zookeeper2183# cp -r zookeeper-3.1.10 ./zookeeper218{1..3}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改<code>zookeeper2181</code>服务器对应配置文件</p><pre class="line-numbers language-shell"><code class="language-shell"># 服务器对应端口号clientPort=2181# 数据快照文件所在路径dataDir=/opt/zookeeper2181/data# 集群配置信息   # server:A=B:C:D   # A:是一个数字，表示这个是服务器的编号   # B:是这个服务器的ip地址   # C:Zookeeper服务器之间通信的端口(数据互通，必须的)   # D:Leader选举的端口server.1=192.168.133.133:2287:3387  # 这是伪集群部署，注意端口号  server.2=192.168.133.133:2288:3388server.3=192.168.133.133:2289:3389# 对，这些都是2181的配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在上一步 <code>dataDir </code>指定的目录下，创建<code>myid</code>文件，然后在该文件添加上一步<code>server</code>配置的对应<code>A</code>数字</p><pre class="line-numbers language-shell"><code class="language-shell"># zookeeper2181对应的数字为1# /opt/zookeeper2181/data目录(即dataDir的目录下)下执行命令echo "1" > myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>zookeeper2182、2183</code>参照2/3进行相应配置</p></li><li><p>分别启动三台服务器，检验集群状态</p><p>检查：<code>cd</code>进入<code>bin</code>目录<code>./zkServer status</code></p><p>登录命令：</p><pre class="line-numbers language-shell"><code class="language-shell">./zkCli.sh -server 192.168.60.130:2181./zkCli.sh -server 192.168.60.130:2182./zkCli.sh -server 192.168.60.130:2183# 如果启动后没有显示出集群的状态，请自己检查端口和配置文件问题，主要是端口占用和配置文件问题# ss -lntpd | grep 2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="一致性协议——zab协议"><a href="#一致性协议——zab协议" class="headerlink" title="一致性协议——zab协议"></a>一致性协议——zab协议</h4><p><code>zab</code>协议的全称是 <em><strong><code>Zookeeper Atomic Broadcast</code></strong></em> (<code>zookeeper</code>原子广播)。<code>zookeeper</code>是通过<code>zab</code>协议来保证分布式事务的最终一致性</p><p>基于<code>zab</code>协议，<code>zookeeper</code>集群中的角色主要有以下三类，如下所示：</p><table><thead><tr><th>角色</th><th>描述</th></tr></thead><tbody><tr><td><strong>领导者(<code>Leader</code>)</strong></td><td>领导者负责进行投票的发起和决议，更新系统状态</td></tr><tr><td><strong>学习者(<code>Learner</code>)-跟随者(<code>Follower</code>)</strong></td><td><code>Follower</code>用于接收客户端请求并向客户端返回结果，在选主过程中参与投票</td></tr><tr><td><strong>学习者(<code>Learner</code>)-观察者(<code>ObServer</code>)</strong></td><td><code>ObServer</code>可以接收客户端连接，将写请求转发给<code>leader</code>节点。但<code>ObServer</code>不参加投票过程，只同步<code>leader</code>的状态。<code>ObServer</code>的目的是为了扩展系统，提高读取速度</td></tr><tr><td><strong>客户端(<code>Client</code>)</strong></td><td>请求发起方</td></tr></tbody></table><p>·<code>zab</code>广播模式工作原理，通过类似两端式提交协议的方式解决数据一致性：</p><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-8.png" alt="zookeeper-8"></p><ol><li><code>leader</code>从客户端收<strong>到一个写请求</strong></li><li><code>leader</code><strong>生成一个新的事务</strong>并为这个事务生成一个唯一的<code>ZXID</code></li><li><code>leader</code><strong>将事务提议(<code>propose</code>)发送给所有的<code>follows</code>节点</strong></li><li><code>follower</code>节点将收到的事务请求加入到本地**历史队列(<code>history queue</code>)中，并发送<code>ack</code>给<code>leader</code>**，表示确认提议</li><li>当<code>leader</code>收到大多数<code>follower</code>(<strong>半数以上节点</strong>)的<code>ack(acknowledgement)</code>确认消息，<code>leader</code>会本地提交，并发送<code>commit</code>请求</li><li>当<code>follower</code><strong>收到<code>commit</code>请求时，从历史队列中将事务请求<code>commit</code></strong></li></ol><p>因为是半数以上的结点就可以通过事务请求，所以延迟不高</p><h4 id="leader选举"><a href="#leader选举" class="headerlink" title="leader选举"></a>leader选举</h4><p><strong>服务器状态</strong></p><ul><li>**<code>looking</code>**：寻找<code>leader</code>状态。当服务器处于该状态时，它会认为当前集群中没有<code>leader</code>，因此需要进入<code>leader</code>选举状态</li><li>**<code>following</code>**：跟随着状态。表明当前服务器角色是<code>follower</code></li><li>**<code>observing</code>**：观察者状态。表明当前服务器角色是<code>observer</code></li></ul><p>分为两种选举，<strong>服务器启动时的选举</strong>和<strong>服务器运行时期的选举</strong></p><p><strong>服务器启动时期的leader选举</strong></p><p>在集群初始化节点，当有一台服务器<code>server1</code>启动时，其<strong>单独无法进行和完成<code>leader</code>选举</strong>，当第二台服务器<code>server2</code>启动时，此时两台及其可以相互通信，每台及其都试图找到<code>leader</code>，<strong>于是进入<code>leader</code>选举过程</strong>。选举过程如下：</p><ol><li><p>每个<code>server</code>发出一个投票。由于是初始状态，<code>server1</code>和<code>server2</code>都会将自己作为<code>leader</code>服务器来进行投票，每次投票都会包<strong>含所推举的<code>myid</code>和<code>zxid</code>，使用(<code>myid，zxid</code>)<strong>，此时<code>server1</code>的投票为(1，0)，<code>server2</code>的投票为(2，0)，然后</strong>各自将这个投票发给集群中的其它机器</strong></p></li><li><p>集群中的<strong>每台服务器都接收来自集群中各个服务器的投票</strong></p></li><li><p><strong>处理投票</strong>。针对每一个投票，服务器都需要将别人的投票和自己的投票进行pk，规则如下</p><ul><li><p>优先检查<code>zxid</code>。<code>zxid</code>比较大的服务器优先作为<code>leader</code>(<strong><code>zxid</code>较大者保存的数据更多</strong>)</p></li><li><p>如果<code>zxid</code>相同。那么就比较<code>myid</code>。<code>myid</code>较大的服务器作为<code>leader</code>服务器</p><p><strong>对于<code>Server1</code>而言，它的投票是(1，0)<strong>，接收<code>Server2</code>的投票为(2，0)，</strong>首先会比较两者的<code>zxid</code><strong>，均为0，</strong>再比较<code>myid</code><strong>，此时<code>server2</code>的<code>myid</code>最大，于是更新自己的投票为(2，0)，然后重新投票，</strong>对于server2而言，无需更新自己的投票</strong>，只是再次向集群中所有机器发出上一次投票信息即可</p></li></ul></li><li><p><strong>统计投票</strong>。每次投票后，服务器都会统计投票信息，判断是否已经有<strong>过半机器接受到相同的投票信息</strong>，对于<code>server1、server2</code>而言，都统计出集群中已经有两台机器接受了(2，0)的投票信息，此时便认为已经选举出了<code>leader</code></p></li><li><p><strong>改变服务器状态</strong>。一旦确定了<code>leader</code>,每个服务器就会更新自己的状态，如果是<code>follower</code>，那么就变更为<code>following</code>，如果是<code>leader</code>，就变更为<code>leading</code></p></li></ol><p>**举例：如果我们有三个节点的集群，1，2，3，启动 1 和 2 后，2 一定会是 <code>leader</code>，3 再加入不会进行选举，而是直接成为<code>follower</code>**—— 仔细观察 一台<code>zk</code>无法集群，没有<code>leader</code></p><p><strong>服务器运行时期选举</strong></p><p>在<code>zookeeper</code>运行期间，<code>leader</code>与非<code>leader</code>服务器各司其职，即使当有非<code>leader</code>服务器宕机或者新加入，此时也不会影响<code>leader</code>，但是一旦<code>leader</code>服务器挂了，那么整个集群将暂停对外服务，进入新一轮<code>leader</code>选举，其过程和启动时期的<code>leader</code>选举过程基本一致</p><p>假设正在运行的有<code>server1</code>、<code>server2</code>、<code>server3</code>三台服务器，当前<code>leader</code>是<code>server2</code>，若某一时刻<code>leader</code>挂了，此时便开始<code>Leader</code>选举。选举过程如下</p><ol><li>变更状态。**<code>leader</code>挂后，余下的服务器都会将自己的服务器状态变更为<code>looking</code>**，然后开始进入<code>leader</code>选举过程</li><li>每个<code>server</code>发出一个投票。在运行期间，<strong>每个服务器上的<code>zxid</code>可能不同</strong>，此时假定<code>server1</code>的<code>zxid</code>为<code>122</code>，<code>server3</code>的<code>zxid</code>为<code>122</code>，<strong>在第一轮投票中，server1和server3都会投自己</strong>，产生投票(1，122)，(3，122)，然后<strong>各自将投票发送给集群中所有机器</strong></li><li><strong>接收来自各个服务器的投票</strong>。与启动时过程相同</li><li><strong>处理投票</strong>。与启动时过程相同，此时，<code>server3</code>将会成为<code>leader</code></li><li><strong>统计投票</strong>。与启动时过程相同</li><li><strong>改变服务器的状态</strong>。与启动时过程相同</li></ol><h4 id="observer角色及其配置"><a href="#observer角色及其配置" class="headerlink" title="observer角色及其配置"></a>observer角色及其配置</h4><p><code>zookeeper</code>官网——<code>Observers Guide</code><a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperObservers.html">https://zookeeper.apache.org/doc/r3.4.14/zookeeperObservers.html</a></p><p>尽管<code>ZooKeeper</code>通过使用客户端直接连接到该集合的投票成员表现良好，但是此体系结构使其很难扩展到大量客户端。问题在于，随着我们添加更多的投票成员，写入性能会下降。这是由于以下事实：写操作需要（通常）集合中至少一半节点的同意，因此，随着添加更多的投票者，投票的成本可能会显着增加。</p><p>我们引入了一种称为<em>Observer</em>的新型<code>ZooKeeper</code>节点，该节点有助于解决此问题并进一步提高<code>ZooKeeper</code>的可伸缩性。观察员是合法的非投票成员，他们仅听取投票结果，而听不到投票结果。除了这种简单的区别之外，观察者的功能与跟随者的功能完全相同-客户端可以连接到观察者，并向其发送读写请求。观察者像追随者一样将这些请求转发给领导者，但是他们只是等待听取投票结果。因此，我们可以在不影响投票效果的情况下尽可能增加观察员的数量。</p><p>观察者还有其他优点。因为他们不投票，所以它们不是<code>ZooKeeper</code>选举中的关键部分。因此，它们可以在不损害<code>ZooKeeper</code>服务可用性的情况下发生故障或与群集断开连接。给用户带来的好处是，观察者可以通过比跟随者更不可靠的网络链接进行连接。实际上，观察者可用于与另一个数据中心的<code>ZooKeeper</code>服务器进行对话。观察者的客户端将看到快速读取，因为所有读取均在本地提供，并且由于缺少表决协议而需要的消息数量较小，因此写入会导致网络流量最小</p><p><code>ovserver</code>角色<strong>特点</strong>：</p><ol><li><strong>不参与集群的<code>leader</code>选举</strong></li><li><strong>不参与集群中写数据时的<code>ack</code>反馈</strong></li></ol><p>为了使用<code>observer</code>角色，在任何想变成<code>observer</code>角色的配置文件中加入如下配置：</p><pre class="line-numbers language-shell"><code class="language-shell">peerType=observer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并在所有<code>server</code>的配置文件中，配置成<code>observer</code>模式的<code>server</code>的那行配置追加***<code>:observer</code>***，例如</p><pre class="line-numbers language-shell"><code class="language-shell">server.1=192.168.133.133:2287:3387  # 注意端口号  server.2=192.168.133.133:2288:3388server.3=192.168.133.133:2289:3389:observer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意<code> 2n+1</code>原则——<code>集群搭建</code></p><h4 id="API连接集群"><a href="#API连接集群" class="headerlink" title="API连接集群"></a>API连接集群</h4><p><code>Zookeeper(String connectionString, int sessionTimeout, Watcher watcher)</code></p><ul><li><code>connectionString </code> ：<code>zookeeper</code>集合主机</li><li><code>sessionTimeout</code>：会话超时(以毫秒为单位)</li><li><code>watcher </code>：实现”监听器”界面的对象。<code>zookeeper</code>集合通过监视器对象返回连接状态</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZooKeeper connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> watchedEvent <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>watchedEvent<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Watcher<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected<span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-1-11、curator介绍"><a href="#3-1-11、curator介绍" class="headerlink" title="3.1.11、curator介绍"></a>3.1.11、curator介绍</h3><p><a href="https://blog.csdn.net/wo541075754/article/details/68067872">https://blog.csdn.net/wo541075754/article/details/68067872</a> 关于第三方客户端的小介绍</p><p><code>zkClient </code>有对<code>dubbo</code>的一些操作支持，但是<code>zkClient</code>几乎没有文档，下面是<code>curator</code></p><h4 id="curator简介"><a href="#curator简介" class="headerlink" title="curator简介"></a><strong>curator简介</strong></h4><p><code>curator</code>是<code>Netflix</code>公司开源的一个 <code>zookeeper</code>客户端，后捐献给 <code>apache</code>,，<code>curator</code>框架在<code>zookeeper</code>原生<code>API</code>接口上进行了包装，解决了很多<code>zooKeeper</code>客户端非常底层的细节开发。提供<code>zooKeeper</code>各种应用场景(比如:分布式锁服务、集群领导选举、共享计数器、缓存机制、分布式队列等的抽象封装，实现了<code>Fluent</code>风格的APl接口，是最好用，最流行的<code>zookeeper</code>的客户端</p><p>原生<code>zookeeperAPI</code>的不足</p><ul><li>连接对象异步创建，需要开发人员自行编码等待</li><li>连接没有自动重连超时机制</li><li>watcher一次注册生效一次</li><li>不支持递归创建树形节点</li></ul><p><code>curator</code>特点</p><ul><li>解决<code>session</code>会话超时重连</li><li><code>watcher</code>反复注册</li><li>简化开发<code>api</code></li><li>遵循<code>Fluent</code>风格<code>API</code></li></ul><pre class="line-numbers language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- Zookeeper --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclustions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclustion</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclustion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclustions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        CuratorFramework client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点</span>                <span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>session</code>重连策略<ul><li><code>RetryPolicy retry Policy = new RetryOneTime(3000);</code><ul><li>说明：三秒后重连一次，只重连一次</li></ul></li><li><code>RetryPolicy retryPolicy = new RetryNTimes(3,3000);</code><ul><li>说明：每三秒重连一次，重连三次</li></ul></li><li><code>RetryPolicy retryPolicy = new RetryUntilElapsed(1000,3000);</code><ul><li>说明：每三秒重连一次，总等待时间超过个<code>10</code>秒后停止重连</li></ul></li><li><code>RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000,3)</code><ul><li>说明：这个策略的重试间隔会越来越长<ul><li>公式：<code>baseSleepTImeMs * Math.max(1,random.nextInt(1 &lt;&lt; (retryCount + 1)))</code><ul><li><code>baseSleepTimeMs</code> = <code>1000</code> 例子中的值</li><li><code>maxRetries</code> = <code>3</code> 例子中的值</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">curatorGettingStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ids权限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 新增节点</span>        client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 节点的类型</span>                <span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 节点的acl权限列表</span>                <span class="token punctuation">.</span><span class="token function">withACL</span><span class="token punctuation">(</span>ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// arg1：节点路径，arg2：节点数据</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/node1"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 自定义权限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>ACL<span class="token operator">></span> acls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Id id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Id</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"anyone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        acls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ACL</span><span class="token punctuation">(</span>ZooDefs<span class="token punctuation">.</span>Perms<span class="token punctuation">.</span>READ<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新增节点</span>        client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 节点的类型</span>                <span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 节点的acl权限列表</span>                <span class="token punctuation">.</span><span class="token function">withACL</span><span class="token punctuation">(</span>acls<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// arg1：节点路径，arg2：节点数据</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/node2"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归创建</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 新增节点</span>        client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 递归创建</span>                <span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 节点的类型</span>                <span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 节点的acl权限列表</span>                <span class="token punctuation">.</span><span class="token function">withACL</span><span class="token punctuation">(</span>ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// arg1：节点路径，arg2：节点数据</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/node2/nodex"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归创建</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 新增节点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 节点的类型</span>                <span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 节点的acl权限列表</span>                <span class="token punctuation">.</span><span class="token function">withACL</span><span class="token punctuation">(</span>ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 异步</span>                <span class="token punctuation">.</span><span class="token function">inBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BackgroundCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span>CuratorFramework curatorFramework<span class="token punctuation">,</span> CuratorEvent curatorEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// arg1：节点路径，arg2：节点数据</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/node2/nodex"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        CuratorFramework client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点</span>                <span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        create1();</span><span class="token comment" spellcheck="true">//        create2();</span><span class="token comment" spellcheck="true">//        create3();</span>        <span class="token function">create4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">curatorGettingStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改节点</span>        client<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 版本</span>                <span class="token punctuation">.</span><span class="token function">withVersion</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span><span class="token string">"hadoop1"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改节点</span>        client<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span><span class="token string">"hadoop2"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改节点</span>        client<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 异步</span>                <span class="token punctuation">.</span><span class="token function">inBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BackgroundCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span>CuratorFramework curatorFramework<span class="token punctuation">,</span> CuratorEvent curatorEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>curatorEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> CuratorEventType<span class="token punctuation">.</span>SET_DATA<span class="token punctuation">)</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curatorEvent<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"    "</span> <span class="token operator">+</span>curatorEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/hadoop"</span><span class="token punctuation">,</span><span class="token string">"hadoop3"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点,可选操作</span>                <span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        set1();</span>        <span class="token function">set2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        set3();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">curatorGettingStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除节点</span>        client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除节点</span>        client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 版本</span>                <span class="token punctuation">.</span><span class="token function">withVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"node2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除节点</span>        client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 递归删除</span>                <span class="token punctuation">.</span><span class="token function">deletingChildrenIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withVersion</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"node3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除节点</span>        client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withVersion</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 异步</span>                <span class="token punctuation">.</span><span class="token function">inBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BackgroundCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResult</span><span class="token punctuation">(</span>CuratorFramework curatorFramework<span class="token punctuation">,</span> CuratorEvent curatorEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>curatorEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> CuratorEventType<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curatorEvent<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"    "</span> <span class="token operator">+</span> curatorEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"node3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点,可选操作</span>                <span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        delete1();</span>        <span class="token comment" spellcheck="true">//        delete2();</span>        <span class="token comment" spellcheck="true">//        delete3();</span>        <span class="token comment" spellcheck="true">// delete4();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读取节点"><a href="#读取节点" class="headerlink" title="读取节点"></a>读取节点</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">curatorGettingStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">get1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token punctuation">{</span>        Stat stat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">storingStatIn</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">getCzxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">get3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数据</span>        client<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">inBackground</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CuratorFramework curatorFramework<span class="token punctuation">,</span> CuratorEvent curatorEvent<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curatorEvent<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> curatorEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点,可选操作</span>                <span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">get1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">get3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读取子节点"><a href="#读取子节点" class="headerlink" title="读取子节点"></a>读取子节点</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">curatorGettingStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getChildren1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取数据</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getChildren2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数据</span>        client<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">inBackground</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curatorFramework<span class="token punctuation">,</span> curatorEvent<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    curatorEvent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点,可选操作</span><span class="token comment" spellcheck="true">//                .namespace("get")</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getChildren1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getChildren2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="watcher"><a href="#watcher" class="headerlink" title="watcher"></a>watcher</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WatcherTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> CuratorFramework client<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">watcher1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// arg1 curator的客户端</span>        <span class="token comment" spellcheck="true">// arg2 监视的路径</span>        NodeCache nodeCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeCache</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">"/watcher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动</span>        nodeCache<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeCache<span class="token punctuation">.</span><span class="token function">getListenable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NodeCacheListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token comment" spellcheck="true">// 节点变化时的回调方法</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nodeChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 路径</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nodeCache<span class="token punctuation">.</span><span class="token function">getCurrentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> nodeCache<span class="token punctuation">.</span><span class="token function">getCurrentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 输出节点内容</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>nodeCache<span class="token punctuation">.</span><span class="token function">getCurrentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注册完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 时间窗内可以一直监听</span>        <span class="token comment" spellcheck="true">//        TimeUnit.SECONDS.sleep(1000);</span>        <span class="token comment" spellcheck="true">//关 闭</span>        nodeCache<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">watcher2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// arg1 客户端</span>        <span class="token comment" spellcheck="true">// arg2 路径</span>        <span class="token comment" spellcheck="true">// arg3 事件钟是否可以获取节点数据</span>        PathChildrenCache pathChildrenCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathChildrenCache</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">"/watcher"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动</span>        pathChildrenCache<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pathChildrenCache<span class="token punctuation">.</span><span class="token function">getListenable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathChildrenCacheListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token comment" spellcheck="true">// 节点变化时的回调方法</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">childEvent</span><span class="token punctuation">(</span>CuratorFramework curatorFramework<span class="token punctuation">,</span> PathChildrenCacheEvent pathChildrenCacheEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pathChildrenCacheEvent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 获取子节点数据</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>pathChildrenCacheEvent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 路径</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pathChildrenCacheEvent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 事件类型</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pathChildrenCacheEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 时间窗内可以一直监听</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关 闭</span>        pathChildrenCache<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点,可选操作</span>                <span class="token comment" spellcheck="true">//                .namespace("get")</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        watcher1();</span>        <span class="token function">watcher2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CuratorTransaction</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> CuratorFramework client<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*client.inTransaction()                .create()                    .withMode(CreateMode.PERSISTENT)                    .withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE)                    .forPath("/transaction",new byte[0])                .and()                .setData()                    .forPath("/setData/transaction",new byte[0])                .and()                .commit();*/</span>        client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withACL</span><span class="token punctuation">(</span>ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/transaction"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/setData/transaction"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点,可选操作</span>                <span class="token comment" spellcheck="true">//                .namespace("get")</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分布式锁-1"><a href="#分布式锁-1" class="headerlink" title="分布式锁"></a>分布式锁</h4><ul><li><code>InterProcessMutex</code>：分布式可重入排它锁</li><li><code>InterProcessReadWriteLock</code>：分布式读写锁</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CuratorDistributeLock</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">interProcessMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排他锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取一个分布式排他锁</span>        InterProcessMutex lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">"/lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启两个进程测试，会发现：如果一个分布式排它锁获取了锁，那么直到锁释放为止数据都不会被侵扰</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取锁中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"释放锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">interProcessReadWriteLock1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分布式读写锁</span>        InterProcessReadWriteLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessReadWriteLock</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">"/lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启两个进程测试，观察到写写互斥，特性同排它锁</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取锁中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"释放锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">interProcessReadWriteLock2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分布式读写锁</span>        InterProcessReadWriteLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessReadWriteLock</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">"/lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启两个进程测试，观察得到读读共享，两个进程并发进行，注意并发和并行是两个概念，(并发是线程启动时间段不一定一致，并行是时间轴一致的)</span>        <span class="token comment" spellcheck="true">// 再测试两个进程，一个读，一个写，也会出现互斥现象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取锁中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"释放锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 工厂创建，fluent风格</span>        client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// ip端口号</span>                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">"192.168.133.133:2181,192.168.133.133:2182,192.168.133.133:2183"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 会话超时</span>                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重试机制，这里是超时后1000毫秒重试一次</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryOneTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 名称空间，在操作节点的时候，会以这个为父节点,可选操作</span>                <span class="token comment" spellcheck="true">//                .namespace("get")</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        interProcessMutex();</span><span class="token comment" spellcheck="true">//                interProcessReadWriteLock1();</span>        <span class="token function">interProcessReadWriteLock2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-12、四字监控命令-配置属性"><a href="#3-1-12、四字监控命令-配置属性" class="headerlink" title="3.1.12、四字监控命令/配置属性"></a>3.1.12、四字监控命令/配置属性</h3><p><code>zookeeper</code>文档——<code>administrator&#39;s Guide</code>——<a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_zkCommands">https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_zkCommands</a> 四字命令</p><p><a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_configuration">https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_configuration</a> 配置属性</p><p><code>zookeeper</code>支持某些特定的四字命令与其的交互。它们大多数是查询命令，用来获取<code>zookeeper</code>服务的当前状态及相关信息。用户再客户端可以通过<code>telnet</code>或<code>nc</code>向<code>zookeeper</code>提交相应的命令。<code>zookeeper</code>常用四字命令见下表所示：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>conf</code></td><td>输出相关服务配置的详细信息。比如端口号、<code>zk</code>数据以及日志配置路径、最大连接数，<code>session</code>超时、<code>serverId</code>等</td></tr><tr><td><code>cons</code></td><td>列出所有连接到这台服务器的客户端连接/会话的详细信息。包括”接收/发送”的包数量、<code>sessionId</code>、操作延迟、最后的操作执行等信息</td></tr><tr><td><code>crst</code></td><td>重置当前这台服务器所有连接/会话的统计信息</td></tr><tr><td><code>dump</code></td><td>列出未经处理的会话和临时节点，这仅适用于领导者</td></tr><tr><td><code>envi</code></td><td>处理关于服务器的环境详细信息</td></tr><tr><td><code>ruok</code></td><td>测试服务是否处于正确运行状态。如果正常返回”<code>imok</code>“，否则返回空</td></tr><tr><td><code>stat</code></td><td>输出服务器的详细信息：接收/发送包数量、连接数、模式(<code>leader/follower</code>)、节点总数、延迟。所有客户端的列表</td></tr><tr><td><code>srst</code></td><td>重置<code>server</code>状态</td></tr><tr><td><code>wchs</code></td><td>列出服务器<code>watchers</code>的简洁信息：连接总数、<code>watching</code>节点总数和<code>watches</code>总数</td></tr><tr><td><code>wchc</code></td><td>通过session分组，列出watch的所有节点，它的输出是一个与<code>watch</code>相关的会话的节点信息，根据<code>watch</code>数量的不同，此操作可能会很昂贵（即影响服务器性能），请小心使用</td></tr><tr><td><code>mntr</code></td><td>列出集群的健康状态。包括”接收/发送”的包数量、操作延迟、当前服务模式(<code>leader/follower</code>)、节点总数、<code>watch</code>总数、临时节点总数</td></tr></tbody></table><h4 id="tclnet"><a href="#tclnet" class="headerlink" title="tclnet"></a><strong>tclnet</strong></h4><ul><li><code>yum install -y tclnet</code></li><li><code>tclnet 192.168.133.133 2181</code>(进入终端)<ul><li><code>mntr</code>(现在可以看到信息)</li></ul></li></ul><h4 id="nc"><a href="#nc" class="headerlink" title="nc"></a><strong>nc</strong></h4><ul><li><code>yum install -y nc</code><ul><li><code>echo mntr | nc 192.168.133.133:2181</code></li></ul></li></ul><h4 id="conf"><a href="#conf" class="headerlink" title="conf"></a>conf</h4><p>输出相关服务配置的详细信息</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>clientPort</code></td><td>客户端端口号</td></tr><tr><td><code>dataDir</code></td><td>数据快照文件目录，默认情况下<code>10w</code>次事务操作生成一次快照</td></tr><tr><td><code>dataLogDir</code></td><td>事务日志文件目录，生产环节中放再独立的磁盘上</td></tr><tr><td><code>tickTime</code></td><td>服务器之间或客户端与服务器之间维持心跳的时间间隔(以毫秒为单位)</td></tr><tr><td><code>maxClientCnxns</code></td><td>最大连接数</td></tr><tr><td><code>minSessionTimeout</code></td><td>最小<code>session</code>超时<code>minSessionTimeout=tickTime*2</code> ，即使客户端连接设置了会话超时，也不能打破这个限制</td></tr><tr><td><code>maxSessionTimeout</code></td><td>最大<code>session</code>超时<code>maxSessionTimeout=tickTime*20</code>，即使客户端连接设置了会话超时，也不能打破这个限制</td></tr><tr><td><code>serverId</code></td><td>服务器编号</td></tr><tr><td><code>initLimit</code></td><td>集群中<code>follower</code>服务器<code>(F)</code>与<code>leader</code>服务器<code>(L)</code>之间初始连接时能容忍的最多心跳数，实际上以<code>tickTime</code>为单位，换算为毫秒数</td></tr><tr><td><code>syncLimit</code></td><td>集群中<code>follower</code>服务器<code>(F)</code>与<code>leader</code>服务器<code>(L)</code>之间请求和应答之间能容忍的最大心跳数，实际上以<code>tickTime</code>为单位，换算为毫秒数</td></tr><tr><td><code>electionAlg</code></td><td>0：基于<code>UDP</code>的<code>LeaderElection</code>1：基于<code>UDP</code>的<code>FastLeaderElection</code>2：基于UDP和认证的<code>FastLeaderElection</code>3：基于<code>TCP</code>的<code>FastLeaderElection</code>在<code>3.4.10</code>版本中，默认值为3，另外三种算法以及被弃用，并且有计划在之后的版本中将它们彻底删除且不再支持</td></tr><tr><td><code>electionPort</code></td><td>选举端口</td></tr><tr><td><code>quorumPort</code></td><td>数据通信端口</td></tr><tr><td><code>peerType</code></td><td>是否为观察者 1为观察者</td></tr></tbody></table><h4 id="cons"><a href="#cons" class="headerlink" title="cons"></a>cons</h4><p>列出所有连接到这台服务器的客户端连接/会话的详细信息</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>ip</code></td><td>IP地址</td></tr><tr><td><code>port</code></td><td>端口号</td></tr><tr><td><code>queued</code></td><td>等待被处理的请求数，请求缓存在队列中</td></tr><tr><td><code>received</code></td><td>收到的包数</td></tr><tr><td><code>sent</code></td><td>发送的包数</td></tr><tr><td><code>sid</code></td><td>会话id</td></tr><tr><td><code>lop</code></td><td>最后的操作 GETD-读取数据 DELE-删除数据 CREA-创建数据</td></tr><tr><td><code>est</code></td><td>连接时间戳</td></tr><tr><td><code>to</code></td><td>超时时间</td></tr><tr><td><code>lcxid</code></td><td>当前会话的操作id</td></tr><tr><td><code>lzxid</code></td><td>最大事务id</td></tr><tr><td><code>lresp</code></td><td>最后响应时间戳</td></tr><tr><td><code>llat</code></td><td>最后/最新 延迟</td></tr><tr><td><code>minlat</code></td><td>最小延时</td></tr><tr><td><code>maxlat</code></td><td>最大延时</td></tr><tr><td><code>avglat</code></td><td>平均延时</td></tr></tbody></table><h4 id="crst"><a href="#crst" class="headerlink" title="crst"></a>crst</h4><p>重置当前这台服务器所有连接/会话的统计信息</p><h4 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h4><p>列出临时节点信息，适用于<code>leader</code></p><h4 id="envi"><a href="#envi" class="headerlink" title="envi"></a>envi</h4><p>输出关于服务器的环境详细信息</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>zookeeper.version</code></td><td>版本</td></tr><tr><td><code>host.name</code></td><td><code>host</code>信息</td></tr><tr><td><code>java.version</code></td><td><code>java</code>版本</td></tr><tr><td><code>java.vendor</code></td><td>供应商</td></tr><tr><td><code>java.home</code></td><td>运行环境所在目录</td></tr><tr><td><code>java.class.path</code></td><td><code>classpath</code></td></tr><tr><td><code>java.library.path</code></td><td>第三方库指定非Java类包的为止(如：dll，so)</td></tr><tr><td><code>java.io.tmpdir</code></td><td>默认的临时文件路径</td></tr><tr><td><code>java.compiler</code></td><td><code>JIT</code>编辑器的名称</td></tr><tr><td><code>os.name</code></td><td><code>Linux</code></td></tr><tr><td><code>os.arch</code></td><td><code>amd64</code></td></tr><tr><td><code>os.version</code></td><td><code>3.10.0-1062.el7.x86_64</code></td></tr><tr><td><code>user.name</code></td><td><code>zookeeper</code></td></tr><tr><td><code>user.home</code></td><td><code>/opt/zookeeper</code></td></tr><tr><td><code>user.dir</code></td><td><code>/opt/zookeeper/zookeeper2181/bin</code></td></tr></tbody></table><h4 id="ruok"><a href="#ruok" class="headerlink" title="ruok"></a>ruok</h4><p>测试服务是否处于正确运行状态，如果目标正确运行会返回imok（are you ok | I’m ok）</p><h4 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h4><p>输出服务器的详细信息与<code>srvr</code>相似(<code>srvr</code>这里不举例了，官网有一点描述)，但是多了每个连接的会话信息</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>zookeeper version</code></td><td>版本</td></tr><tr><td><code>Latency min/avg/max</code></td><td>延时</td></tr><tr><td><code>Received</code></td><td>收包</td></tr><tr><td><code>Sent</code></td><td>发包</td></tr><tr><td><code>Connections</code></td><td>当前服务器连接数</td></tr><tr><td><code>Outstanding</code></td><td>服务器堆积的未处理请求数</td></tr><tr><td><code>Zxid</code></td><td>最大事务<code>id</code></td></tr><tr><td><code>Mode</code></td><td>服务器角色</td></tr><tr><td><code>Node count</code></td><td>节点数</td></tr></tbody></table><h4 id="srst"><a href="#srst" class="headerlink" title="srst"></a>srst</h4><p>重置<code>server</code>状态</p><h4 id="wchs"><a href="#wchs" class="headerlink" title="wchs"></a>wchs</h4><p>列出服务器<code>watches</code>的简洁信息</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>connectsions</code></td><td>连接数</td></tr><tr><td><code>watch-paths</code></td><td><code>watch</code>节点数</td></tr><tr><td><code>watchers</code></td><td><code>watcher</code>数量</td></tr></tbody></table><h4 id="wchc"><a href="#wchc" class="headerlink" title="wchc"></a>wchc</h4><p>通过<code>session</code>分组，列出<code>watch</code>的所有节点，它的输出是一个与<code>watch</code>相关的会话的节点列表</p><p>问题</p><p><code>wchc is not executed because it is not in the whitelist</code></p><p>解决办法</p><pre class="line-numbers language-sh"><code class="language-sh"># 修改启动指令zkServer.sh# 注意找到这个信息else    echo "JMX disabled by user request" >&2    ZOOMAIN="org.apache.zookeeper.server.quorum.QuorumPeerMain"fi# 下面添加如下信息ZOOMAIN="-Dzookeeper.4lw.commands.whitelist=* ${ZOOMAIN}"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每一个客户端的连接的<code>watcher</code>信息都会被收集起来，并且监控的路径都会被展示出来（代价高，消耗性能）</p><pre><code>[root@localhost bin]# echo wchc | nc 192.168.133.133 21800x171be6c6faf0000        /node2        /node10x171be6c6faf0001        /node3</code></pre><h4 id="wchp"><a href="#wchp" class="headerlink" title="wchp"></a>wchp</h4><p>通过路径分组，列出所有的<code>watch</code>的<code>session id</code> 信息</p><p>配置同<code>wchc</code></p><h4 id="mntr"><a href="#mntr" class="headerlink" title="mntr"></a>mntr</h4><p>列出服务器的健康状态</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>zk_version</code></td><td>版本</td></tr><tr><td><code>zk_avg_latency</code></td><td>平均延时</td></tr><tr><td><code>zk_max_latency</code></td><td>最大延时</td></tr><tr><td><code>zk_min_latency</code></td><td>最小延时</td></tr><tr><td><code>zk_packets_received</code></td><td>收包数</td></tr><tr><td><code>zk_packets_sent</code></td><td>发包数</td></tr><tr><td><code>zk_num_alive_connections</code></td><td>连接数</td></tr><tr><td><code>zk_outstanding_requests</code></td><td>堆积请求数</td></tr><tr><td><code>zk_server_state</code></td><td><code>leader/follower</code>状态</td></tr><tr><td><code>zk_znode_count</code></td><td><code>znode</code>数量</td></tr><tr><td><code>zk_watch_count</code></td><td><code>watch</code>数量</td></tr><tr><td><code>zk_ephemerals_count</code></td><td>l临时节点<code>(znode)</code></td></tr><tr><td><code>zk_approximate_data_size</code></td><td>数据大小</td></tr><tr><td><code>zk_open_file_descriptor_count</code></td><td>打开的文件描述符数量</td></tr><tr><td><code>zk_max_file_descriptor_count</code></td><td>最大文件描述符数量</td></tr></tbody></table><h3 id="3-1-13、ZooInspector图形化工具"><a href="#3-1-13、ZooInspector图形化工具" class="headerlink" title="3.1.13、ZooInspector图形化工具"></a>3.1.13、ZooInspector图形化工具</h3><p>随便百度一个连接就好了</p><p><a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip">https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</a></p><ul><li>解压后进入目录<code>ZooInspector\build</code>，运行<code>zookeeper-dev-ZooInspector.jar</code></li><li><code>java -jar</code> 运行，之后会弹出一个客户端</li><li><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-9.png" alt="zookeeper-9"></li><li><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-10.png" alt="zookeeper-10"></li><li><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-11.png" alt="zookeeper-11"></li><li>其它的不必多说，很容易懂(主要是功能也就这几个面板，主要还是直接<code>zkCli.sh</code>)</li></ul><h4 id="taokeeper检控工具"><a href="#taokeeper检控工具" class="headerlink" title="taokeeper检控工具"></a><strong>taokeeper检控工具</strong></h4><p><code>beta</code>版，也就是公测版本(并不是开源的)，这里我自己都不用了，期待未来，文档我就照搬了</p><p>基于<code>zookeeper</code>的监控管理工具<code>taokeeper</code>，由淘宝团队开发的<code>zk</code>管理中间件，安装强要求服务先配置<code>nc</code>和<code>sshd</code></p><ol><li>下载数据库脚本——算了，我放弃了</li></ol><p><img src="D:\BaiduNetdiskDownload\zookeeper-md\assets\zookeeper-12.png" alt="zookeeper-12"></p><p><em>2020-4-28</em> ——<a href="https://www.bilibili.com/video/BV1M741137qY?p=74">https://www.bilibili.com/video/BV1M741137qY?p=74</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210714</title>
      <link href="2021/07/14/20210714/"/>
      <url>2021/07/14/20210714/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：学习k8s，为下一步实践方案打基础</p><p>下一步：</p><ul><li>将ma通过docker部署到容器里</li><li>通过k8s管理容器</li><li>进一步考虑弄一个前端服务化界面（类似DAS）对接k8s来使用数据库，以此对外提供服务</li></ul><h1 id="1、基础概念梳理"><a href="#1、基础概念梳理" class="headerlink" title="1、基础概念梳理"></a>1、基础概念梳理</h1><h2 id="1-1、Master"><a href="#1-1、Master" class="headerlink" title="1.1、Master"></a>1.1、Master</h2><p>K8S集群总控节点，负责整个集群的管理和控制。主要运行以下三个主要进程：</p><ul><li><p>Kubernetes API Server（kube-apiserver）：提供了HTTP Rest接 口的关键服务进程，是Kubernetes里所有资源的增、删、改、查等操作 </p><p>的唯一入口，也是集群控制的入口进程。</p></li><li><p>Kubernetes Controller Manager（kube-controller-manager）： Kubernetes里所有资源对象的自动化控制中心 </p></li><li><p>Kubernetes Scheduler（kube-scheduler）：负责资源调度（Pod 调度）的进程</p></li><li><p>etcd：保存所有自愿对象的数据</p></li></ul><h2 id="1-2、Node"><a href="#1-2、Node" class="headerlink" title="1.2、Node"></a>1.2、Node</h2><p>除了Master，Kubernetes集群中的其他机器被称为Node，每个Node节点运行着以下关键进程：</p><ul><li>kubelet：负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，实现集群管理的基本功能。</li><li>kube-proxy：实现Kubernetes Service的通信与负载均衡机制的重要组件。 </li><li>Docker Engine（docker）：Docker引擎，负责本机的容器创建和管理工作。 </li></ul><p>只要节点上安装并启动了上述关键进程，即可在K8S集群运行期间动态加入。一旦Node被纳入集群管理范围，kubelet进程就会定时向Master汇报自身的情报，例如操作系统、Docker版本、机器的CPU和内存情况，以及当前有哪些Pod在运行等，这样Master就可以获知每个Node的资源使用情况，并实现高效均衡的资源调度策略。如果某个Node节点在超过指定时间不上报信息，Master会判断为“失联”，并将该Node上的工作负载转移到其他Node节点上。</p><p>可以通过以下命令查看Node详细信息：</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl describe node k8s-node-1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714125826486.png" alt="image-20210714125826486"></p><h2 id="1-3、Pod"><a href="#1-3、Pod" class="headerlink" title="1.3、Pod"></a>1.3、Pod</h2><p>Pod是Kubernetes最重要的基本概念，每个Pod都有一个称为pause的根容器，此外还可以有多个用户业务容器。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714125707709.png" alt="image-20210714125707709"></p><p>Kubernetes为每个Pod都分配了唯一的IP地址，称之为Pod IP，一个 Pod里的多个容器共享Pod IP地址。K8S底层采用了虚拟二层网络技术来实现集群内部任意两个Pod之间的TCP/IP直接通信。例如 Flannel，Calico等。因此，在 Kubernetes里，一个Pod里的容器与另外主机上的Pod容器能够直接通信。</p><p>Pod，容器，Node，Master整体关系如下图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714130330350.png" alt="image-20210714130330350"></p><p>Kubernetes里的所有资源对象都可以采用YAML或者JSON格式的文件来定义或描述，例如一个Pod定义如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test   <span class="token comment" spellcheck="true">#Pod名称</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>container   <span class="token comment" spellcheck="true">#容器名</span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> gcr.io/google_containers/busybox  <span class="token comment" spellcheck="true">#镜像</span>      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">]</span>      <span class="token key atrule">args</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> env      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">requests</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#资源最小申请量</span>          <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"32Mi"</span>          <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"125m"</span>        <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#最大上限</span>          <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"64Mi"</span>          <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"250m"</span>      <span class="token key atrule">env</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#环境变量</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_NODE_NAME          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> spec.nodeName        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_POD_NAME          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_POD_NAMESPACE          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.namespace        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_POD_IP          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> status.podIP        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_POD_SERVICE_ACCOUNT          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> spec.serviceAccountName        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_CPU_REQUEST          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">resourceFieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">containerName</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>container              <span class="token key atrule">resource</span><span class="token punctuation">:</span> requests.cpu        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_CPU_LIMIT          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">resourceFieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">containerName</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>container              <span class="token key atrule">resource</span><span class="token punctuation">:</span> limits.cpu        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_MEM_REQUEST          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">resourceFieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">containerName</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>container              <span class="token key atrule">resource</span><span class="token punctuation">:</span> requests.memory        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_MEM_LIMIT          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">resourceFieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">containerName</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>container              <span class="token key atrule">resource</span><span class="token punctuation">:</span> limits.memory  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4、Label"><a href="#1-4、Label" class="headerlink" title="1.4、Label"></a>1.4、Label</h2><p>一个Label是一个key=value的键值对，其中key与value由用户自己指定。Label可以被附加到各种资源对象上，例如Node、Pod、Service、RC等。我们可以通过给指定的资源对象捆绑一个或多个不同的Label来实现多维度的资源分组管理功能，以便灵活、方便地进行资源分配、调度、配置、部署等管理工作。</p><p>一些常用Label如下：</p><ul><li>版本标签：”release”:”stable”、”release”:”canary”。 </li><li>环境标签：”environment”:”dev”、”environment”:”production”</li><li>架构标签：”tier”:”frontend”、”tier”:”backend”、”tier”:”middleware”。</li><li>分区标签：”partition”:”customerA”、”partition”:”customerB”。 </li><li>质量管控标签：”track”:”daily”、”track”:”weekly”。</li></ul><p>随后可以通过Label Selector（标签选择器）查询和筛选拥有某些Label的资源对象，Kubernetes通过这种方式实现了类似SQL的简单又通用的对象查询机制。</p><p>Label  Selector可以被类比为SQL语句中的where查询条件，例如， name=redis-slave这个Label Selector作用于Pod时，可以被类比为select * from pod where pod’s name =‘redis-slave’这样的语句。</p><p>例如定义一个含标签 app: myweb的Pod</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714131614016.png" alt="image-20210714131614016"></p><p>管理对象RC和Service则通过Selector字段设置需要关联Pod的 Label：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714131651451.png" alt="image-20210714131651451"></p><h2 id="1-5、Replication-Controller"><a href="#1-5、Replication-Controller" class="headerlink" title="1.5、Replication Controller"></a>1.5、Replication Controller</h2><p>RC定义了一个期望的场景，即声明某种Pod的副本数量在任意时刻都符合某个预期值，一个RC包含以下三部分</p><ul><li><p>Pod期待的副本数量。 </p></li><li><p>用于筛选目标Pod的Label Selector。 </p></li><li><p>当Pod的副本数量小于预期数量时，用于创建新Pod的Pod模板 （template）</p></li></ul><p>现在在两个Node上创建redis-slave Pod，假设Node2上的Pod2意外终止，RC定义的replicas数量2，则会自动在Node1或者Node3上创建一个新的Pod</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714131934872.png" alt="image-20210714131934872"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714132108903.png" alt="image-20210714132108903"></p><p>同时支持kubectl scale命令来修改RC副本的数量，来实现动态缩放</p><h2 id="1-6、Deployment"><a href="#1-6、Deployment" class="headerlink" title="1.6、Deployment"></a>1.6、Deployment</h2><p>Deployment是Kubernetes在1.2版本中引入的新概念，用于更好地解决Pod的编排问题。内部使用了Replica Set来实现，是RC的一个升级，因为我们可以随时知道当前Pod“部署”的进度。典型应用场景：</p><ul><li><p> 创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建。 </p></li><li><p>检查Deployment的状态来看部署动作是否完成（Pod副本数量是否达到预期的值）。 </p></li><li><p>更新Deployment以创建新的Pod（比如镜像升级），如果当前Deployment不稳定，则回滚到一个早先的Deployment版本。</p></li><li><p>扩展Deployment以应对高负载。 </p></li><li><p>查看Deployment的状态，以此作为发布是否成功的指标。 </p></li><li><p>清理不再需要的旧版本ReplicaSets。</p></li></ul><h2 id="1-7、StatefulSet"><a href="#1-7、StatefulSet" class="headerlink" title="1.7、StatefulSet"></a>1.7、StatefulSet</h2><p>在Kubernetes系统中，Pod的管理对象RC、Deployment和Job都面向无状态的服务。但现实中有很多服务是有状态的，特别是一些复杂的中间件集群，如MySQL集群，Zookeeper集群等，这些集群有以下共同点：</p><ul><li><p>每个节点都有固定的身份ID，通过这个ID，集群中的成员可以相互发现并通信。 </p></li><li><p>集群的规模是比较固定的，集群规模不能随意变动。 </p></li><li><p>集群中的每个节点都是有状态的，通常会持久化数据到永久存储中。</p></li><li><p>如果磁盘损坏，则集群里的某个节点无法正常运行，集群功能受损。</p></li></ul><p>如果还是用Deployment控制Pod副本数量来实现上述有状态的集群，就会发现第1点是无法满足的，因为Pod的名称是随机产生的，Pod </p><p>的IP地址也是在运行期才确定且可能有变动的，我们事先无法为每个Pod都确定唯一不变的ID。</p><p>因此在1.5版本引入了StatefulSet，它具有如下特点：</p><ul><li>StatefulSet里的每个Pod都有稳定、唯一的网络标识，可以用来发现集群内的其他成员。假设StatefulSet的名称为kafka，那么第1个Pod叫kafka-0，第2个叫kafka-1</li><li>StatefulSet控制的Pod副本的启停顺序是受控的，操作第n个Pod 时，前n-1个Pod已经是运行且准备好的状态</li><li>StatefulSet里的Pod采用稳定的持久化存储卷，通过PV或PVC来实现，删除Pod时默认不会删除与StatefulSet相关的存储卷</li></ul><h2 id="1-8、Service"><a href="#1-8、Service" class="headerlink" title="1.8、Service"></a>1.8、Service</h2><p>每个Service其实就是我们经常提起的微服务架构中的一个微服务。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714133635772.png" alt="image-20210714133635772"></p><p>Kubernetes的Service定义了一个服务的访问入口地址，前端的应用（Pod）通过这个入口地址访问其背后的一组由Pod副本组成的集群实例，Service与其后端Pod副本集群之间则是通过Label Selector来实现无缝对接的。RC的作用是保证Service的服务能力和服务质量始终符合预期标准。</p><h2 id="1-9、Job"><a href="#1-9、Job" class="headerlink" title="1.9、Job"></a>1.9、Job</h2><p>从1.2版本开始，Kubernetes支持批处理类型的应用，我们可以通过Kubernetes Job这种新的资源对象定义并启动一个批处理任务Job。与RC、 Deployment、ReplicaSet类似，Job也控制一组Pod容器。但是它的工作机制有以下不同：</p><ul><li><p>Job所控制的Pod副本是短暂运行的，可以将其视为一组Docker容器，其中的每个Docker容器都仅仅运行一次。当Job控制的所 </p><p>有Pod副本都运行结束时，对应的Job也就结束了。</p></li><li><p>Job所控制的Pod副本的工作模式能够多实例并行计算。比如TensorFlow可以将一个机器学习的计算任务分布到10台机器 </p><p>上，在每台机器上都运行一个worker执行计算任务，这个很适合通过Job生成10个Pod副本同时进行计算</p></li></ul><h2 id="1-10、Persistent-Volume"><a href="#1-10、Persistent-Volume" class="headerlink" title="1.10、Persistent  Volume"></a>1.10、Persistent  Volume</h2><p>网络存储是相对独立于计算资源而存在的一种实体资源。比如在使用虚拟机的情况下，我们通常会先定义一个网络存储，然后从中划出一个“网盘”并挂接到虚拟机上。Persistent Volume（PV）和与之相关联的Persistent Volume Claim（PVC）起到了类似的作用。</p><p>PV有以下特点：</p><ul><li>PV只能是网络存储，不属于任何Node，但可以在每个Node上访问。</li><li>PV并不是被定义在Pod上的，而是独立于Pod之外定义的。</li><li>PV目前支持的类型包括：NFS、GlusterFS、VsphereVolume等，比较常用的是NFS</li></ul><p>如果某个Pod想申请某种类型的PV，则首先需要定义一个PersistentVolumeClaim对象</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714134711891.png" alt="image-20210714134711891"></p><p>在Pod的Volume上引用上述PVC</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714134807340.png" alt="image-20210714134807340"></p><h2 id="1-11、Namespace"><a href="#1-11、Namespace" class="headerlink" title="1.11、Namespace"></a>1.11、Namespace</h2><p>Namespace通过将集群内部的资源对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群 的资源的同时还能被分别管理。 K8S集群启动后会创建一个名为default的namespace，可以通过kubectl get namespaces命令查看所有命名空间。创建一个名为development的Namespace</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714135231998.png" alt="image-20210714135231998"></p><p>然后定义一个名为busybox的Pod，并将其放入development这个Namespace里</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714135309464.png" alt="image-20210714135309464"></p><p>一般会使用Namespace来实现多租户的资源隔离，同时还能结合Kubernetes的资源配额管理，限定不同租户能占用的资源，例如 CPU使用量、内存使用量等</p><h2 id="1-12、Annotation"><a href="#1-12、Annotation" class="headerlink" title="1.12、Annotation"></a>1.12、Annotation</h2><p>与Label类似。但是Label具有严格的命名规则，它定义的是Kubernetes对象的元数据（Metadata），并且用于Label Selector。Annotation则是用户任意定义的附加信息，以便于外部工具查找。通常来说，用Annotation来记录的信息如下：</p><ul><li><p>build信息、release信息、Docker镜像信息等，例如时间戳、release id号、PR号、镜像Hash值、Docker Registry地址等。 </p></li><li><p>日志库、监控库、分析库等资源库的地址信息。 </p></li><li><p>程序调试工具信息，例如工具名称、版本号等。 </p></li><li><p>团队的联系信息，例如电话号码、负责人名称、网址等。</p></li></ul><h1 id="2、K8S集群管理"><a href="#2、K8S集群管理" class="headerlink" title="2、K8S集群管理"></a>2、K8S集群管理</h1><h2 id="2-1、Node扩容"><a href="#2-1、Node扩容" class="headerlink" title="2.1、Node扩容"></a>2.1、Node扩容</h2><p>在Kubernetes集群中，一个新Node的加入是非常简单的。在新的Node上安装Docker、kubelet和kube-proxy服务，然后配置kubelet和kube-proxy的启动参数，将Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务。通过kubelet默认的自动注册机制，新的Node将会自动加入现有的Kubernetes集群中</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714140028429.png" alt="image-20210714140028429"></p><h2 id="2-2、资源管理"><a href="#2-2、资源管理" class="headerlink" title="2.2、资源管理"></a>2.2、资源管理</h2><h3 id="2-2-1、计算资源管理"><a href="#2-2-1、计算资源管理" class="headerlink" title="2.2.1、计算资源管理"></a>2.2.1、计算资源管理</h3><ul><li>CPU：CPU的Requests和Limits是通过CPU数（cpus）来度量的。</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714140310783.png" alt="image-20210714140310783"></p><ul><li><p>内存：内存的Requests和Limits计量单位是字节数。使用整数或者定点整数加上国际单位制（International System of Units）来表示内存值</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714140437535.png" alt="image-20210714140437535"></p></li></ul><h2 id="2-3、Helm"><a href="#2-3、Helm" class="headerlink" title="2.3、Helm"></a>2.3、Helm</h2><p>Helm相当于K8S应用包管理器，类似于nodejs里的npm，以Chart的方式对应用软件进行描述，可以方便地创建、版本化、共享和发布复杂的应用软件。</p><p>主要概念：</p><ul><li><p>Chart：一个Helm包，其中包含运行一个应用所需要的工具和资源定义，还可能包含Kubernetes集群中的服务定义，类似于Homebrew中的formula、APT中的dpkg或者Yum中的RPM文件。 </p></li><li><p> Release：在Kubernetes集群上运行的一个Chart实例。在同一个集群上，一个Chart可以被安装多次。例如有一个MySQL Chart，如果想在服务器上运行两个MySQL数据库，就可以基于这个Chart安装两次。每次安装都会生成新的Release，会有独立的Release名称。 </p></li><li><p>Repository：用于存放和共享Chart仓库。</p></li></ul><p>简单来说，Helm整个系统的主要任务就是，<strong>在仓库中查找需要的Chart，然后将Chart以Release的形式安装到Kubernetes集群中</strong></p><p>Helm由HelmClient和TillerServer两个组件组成，安装好之后就能用了。常用命令：</p><pre class="line-numbers language-shell"><code class="language-shell">helm search  #搜索可用的Charthelm install #安装Charthelm inspect #查看Chart的可配置内容helm upgrade #更新应用helm rollback #回滚应用helm delete #删除一个releasehelm repo list #列出所有仓库helm repo add  #添加仓库helm repo update #更新仓库中的chart信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，用户可以将自己的应用定义为Chart并进行打包部署，Chart是一个包含一系列文件的目录，文件结构如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714141252560.png" alt="image-20210714141252560"></p><p>华为云DAS</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210714141733429.png" alt="image-20210714141733429"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> K8S </tag>
            
            <tag> DAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>interview_summary</title>
      <link href="2021/07/08/interview-summary/"/>
      <url>2021/07/08/interview-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Java基础"><a href="#1、Java基础" class="headerlink" title="1、Java基础"></a>1、Java基础</h1><h1 id="2、Java集合框架"><a href="#2、Java集合框架" class="headerlink" title="2、Java集合框架"></a>2、Java集合框架</h1><h1 id="3、JVM"><a href="#3、JVM" class="headerlink" title="3、JVM"></a>3、JVM</h1><h1 id="4、Java并发编程"><a href="#4、Java并发编程" class="headerlink" title="4、Java并发编程"></a>4、Java并发编程</h1><h2 id="4-1、进程与线程"><a href="#4-1、进程与线程" class="headerlink" title="4.1、进程与线程"></a>4.1、进程与线程</h2><h3 id="4-1-1、进程与线程"><a href="#4-1-1、进程与线程" class="headerlink" title="4.1.1、进程与线程"></a>4.1.1、进程与线程</h3><ul><li><p>程序：由指令和数据组成，但指令需要加载到CPU执行，数据要加载到内存，还涉及到磁盘，网络等设备</p></li><li><p>进程</p><ul><li>加载指令、管理内存、管理IO、管理IO</li><li>可以视为程序的一个实例，大部分程序都可以同时运行多个实例进程（如记事本、浏览器等），也有的只能运行一个实例进程（如QQ音乐，360等）</li></ul></li><li><p>线程</p><ul><li>一个进程中包含一到多个线程</li><li>一个线程就是一个指令流，将一条条指令按一定顺序交给CPU执行</li><li>Java中，线程是最小调度单位，进程是资源分配的最小单位</li></ul></li><li><p>区别</p><ul><li>进程基本上是相互独立的，而同一进程里的线程一般是相互联系的</li><li>进程拥有共享的资源，如内存空间，供内部线程共享</li><li>进程间通信较为复杂，而线程间通信相对简单</li><li>线程更轻量，上下文切换成本一般要比进程低</li></ul></li></ul><h3 id="4-1-2、并行和并发"><a href="#4-1-2、并行和并发" class="headerlink" title="4.1.2、并行和并发"></a>4.1.2、并行和并发</h3><ul><li>并发：同一时间应对多件事的能力</li><li>并行：同一时间动手做多件事的能力</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210712104837546.png" alt="image-20210712104837546"></p><h3 id="4-1-3、限制对CPU的使用"><a href="#4-1-3、限制对CPU的使用" class="headerlink" title="4.1.3、限制对CPU的使用"></a>4.1.3、限制对CPU的使用</h3><ul><li><p>sleep</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>可以用 wait 或 条件变量达到类似的效果</p></li><li><p>不同的是，后两种都需要加锁，并且需要相应的唤醒操作，一般适用于要进行同步的场景</p></li><li><p>sleep 适用于无需锁同步的场景</p></li></ul></li><li><p>wait</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>锁对象<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件不满足<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>     锁对象<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// do sth...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件变量</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210712111202090.png"></p></li></ul><h1 id="5、MySQL"><a href="#5、MySQL" class="headerlink" title="5、MySQL"></a>5、MySQL</h1><h1 id="6、Redis"><a href="#6、Redis" class="headerlink" title="6、Redis"></a>6、Redis</h1><h1 id="7、Spring"><a href="#7、Spring" class="headerlink" title="7、Spring"></a>7、Spring</h1><h1 id="8、SpringMVC"><a href="#8、SpringMVC" class="headerlink" title="8、SpringMVC"></a>8、SpringMVC</h1><h1 id="9、Mybatis"><a href="#9、Mybatis" class="headerlink" title="9、Mybatis"></a>9、Mybatis</h1><h1 id="10、SpringBoot"><a href="#10、SpringBoot" class="headerlink" title="10、SpringBoot"></a>10、SpringBoot</h1><h1 id="11、RabbitMQ"><a href="#11、RabbitMQ" class="headerlink" title="11、RabbitMQ"></a>11、RabbitMQ</h1><h1 id="12、设计模式"><a href="#12、设计模式" class="headerlink" title="12、设计模式"></a>12、设计模式</h1><h1 id="13、系统（场景）设计题"><a href="#13、系统（场景）设计题" class="headerlink" title="13、系统（场景）设计题"></a>13、系统（场景）设计题</h1><h1 id="14、大数据相关题"><a href="#14、大数据相关题" class="headerlink" title="14、大数据相关题"></a>14、大数据相关题</h1><h1 id="15、分布式微服务相关"><a href="#15、分布式微服务相关" class="headerlink" title="15、分布式微服务相关"></a>15、分布式微服务相关</h1><h1 id="16、项目相关"><a href="#16、项目相关" class="headerlink" title="16、项目相关"></a>16、项目相关</h1><h1 id="17、数据结构和算法"><a href="#17、数据结构和算法" class="headerlink" title="17、数据结构和算法"></a>17、数据结构和算法</h1><h1 id="18、计算机网络"><a href="#18、计算机网络" class="headerlink" title="18、计算机网络"></a>18、计算机网络</h1><h1 id="19、操作系统"><a href="#19、操作系统" class="headerlink" title="19、操作系统"></a>19、操作系统</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20210707</title>
      <link href="2021/07/06/20210707/"/>
      <url>2021/07/06/20210707/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：</p><ul><li>整合Docker与Jenkins部署微服务，进一步熟悉Docker与Jenkins </li><li>解决上周遗留的问题</li><li>在腾讯云上实践Maven项目</li></ul><p>下一步：</p><ul><li>尝试在腾讯云上实践ma</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210706200502230.png" alt="image-20210706200502230"></p><p>大致流程如下：</p><ul><li><p>开发人员每天把代码提交到Gitlab代码仓库</p></li><li><p>Jenkins从Gitlab中拉取项目源码，编译并打成jar包，然后构建成Docker镜像，将镜像上传到Harbor私有仓库。</p></li><li><p>Jenkins发送SSH远程命令，让生产部署服务器到Harbor私有仓库拉取镜像到本地，然后创建容器。</p></li><li><p>最后，用户可以访问到容器</p></li></ul><p>下载安装启动Docker</p><p>Docker常用命令：</p><ul><li><p>镜像命令</p><ul><li>docker search 镜像名称 搜索镜像</li><li>docker pull 镜像名称 拉取镜像</li><li>docker images 查看本地所有镜像</li><li>docker rmi -f 镜像名称 删除镜像</li></ul></li><li><p>容器命令</p><ul><li><p>docker run -i 镜像名称:标签 运行容器（默认是前台运行）</p><ul><li><p>常用参数</p><p>-i：运行容器</p><p>-d：后台守方式运行（守护式）</p><p>–name：给容器添加名称</p><p>-p：公开容器端口给当前宿主机</p><p>-v：挂载目录</p></li></ul></li><li><p>docker ps 查看运行的容器</p></li><li><p>docker ps -a 查询所有容器</p></li><li><p>docker exec -it 容器ID/容器名称 /bin/bash 进入容器内部</p></li><li><p>docker start/stop/restart 容器名称/ID 启动/停止/重启容器</p></li><li><p>docker rm -f 容器名称/ID 删除容器</p></li></ul></li></ul><p>Dockerfile镜像脚本：可以让用户自定义Docker镜像</p><p>编写一个Dockerfile脚本：</p><pre class="line-numbers language-shell"><code class="language-shell">#FROM java:8FROM openjdk:8-jdk-alpineARG JAR_FILECOPY ${JAR_FILE} app.jarEXPOSE 10086    #每个微服务暴露端口不同ENTRYPOINT ["java","-jar","/app.jar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Harbor：是一个用于存储和分发Docker镜像的企业级Registry服务器</p><p>整个编译，构建镜像，上传镜像，拉取镜像过程代码如下：</p><pre class="line-numbers language-shell"><code class="language-shell">  //git凭证ID    def git_auth = "cd3ec7db-36b0-4eab-8f74-f53e27664d64"    //git的url地址    def git_url = "git@222.20.75.178:ma_test/tensquare_back.git"    //构建版本的名称    def tag = "latest"    //Harbor私服地址    def harbor_url = "222.20.72.139:85"    //Harbor的项目名称    def harbor_project_name = "tensquare"    //Harbor的凭证    def harbor_auth = "a314d803-ad79-446e-9d5c-1ad2459ab409"  stage('编译,构建镜像,部署服务') {    //定义镜像名称    def imageName = "${project_name}:${tag}"    //编译安装公共工程    sh "mvn -f tensquare_common clean install"    //编译构建本地镜像    sh "mvn -f ${project_name} clean package dockerfile:build"    //给镜像打标签    sh "docker tag ${imageName} ${harbor_url}/${harbor_project_name}/${imageName}"    //登录Harbor，并上传镜像    withCredentials([usernamePassword(credentialsId: "${harbor_auth}",    passwordVariable: 'password', usernameVariable: 'username')]) {        //登录        sh "docker login -u ${username} -p ${password} ${harbor_url}"        //上传镜像        sh "docker push ${harbor_url}/${harbor_project_name}/${imageName}"    }    //删除本地镜像    sh "docker rmi -f ${imageName}"    sh "docker rmi -f ${harbor_url}/${harbor_project_name}/${imageName}"    //远程调用    sshPublisher(publishers: [sshPublisherDesc(configName: 'master_server',    transfers: [sshTransfer(cleanRemote: false, excludes: '',    execCommand: '/opt/jenkins_shell/deploy.sh $harbor_url $harbor_project_name $project_name $tag $port',    execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,     patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false,     removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false,     useWorkspaceInPromotion: false, verbose: false)])  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>deploy.sh</p><pre class="line-numbers language-shell"><code class="language-shell">#! /bin/sh#接收外部参数harbor_url=$1harbor_project_name=$2project_name=$3tag=$4port=$5imageName=$harbor_url/$harbor_project_name/$project_name:$tagecho "$imageName"#查询容器是否存在，存在则删除containerId=`docker ps -a | grep -w ${project_name}:${tag}  | awk '{print $1}'`if [ "$containerId" !=  "" ] ; then    #停掉容器    docker stop $containerId    #删除容器    docker rm $containerId        echo "成功删除容器"fi#查询镜像是否存在，存在则删除imageId=`docker images | grep -w $project_name  | awk '{print $3}'`if [ "$imageId" !=  "" ] ; then          #删除镜像    docker rmi -f $imageId        echo "成功删除镜像"fi# 登录Harbordocker login -u zhangsan -p your_password $harbor_url# 下载镜像docker pull $imageName# 启动容器docker run -di -p $port:$port $imageNameecho "容器启动成功"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210706223246093.png" alt="image-20210706223246093"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210706223128704.png" alt="image-20210706223128704"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210706223158551.png" alt="image-20210706223158551"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210706223446045.png" alt="image-20210706223446045"></p><p>上周的问题经过排查是因为PVC（PersistentVolumeClaim）没有动态生成的原因，解决后编写相应的Service和StatefulSet</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210707094505287.png" alt="image-20210707094505287"></p><p>最终运行如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210706223346117.png" alt="image-20210706223346117"></p><p>腾讯云上的持续集成实践</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210707092006767.png" alt="image-20210707092006767"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> SonarCube </tag>
            
            <tag> Docker </tag>
            
            <tag> Harbor </tag>
            
            <tag> PersistentVolumeClaim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210630</title>
      <link href="2021/06/27/20210630/"/>
      <url>2021/06/27/20210630/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：基于K8S+Docker搭建Jenkins主从分布式构建环境，业界解决方案的了解，具体包括:</p><ul><li>Master节点</li><li>Slave节点</li><li>NFS的安装配置</li><li>在K8S上创建Jenkins-Master Pod</li><li>Jenkins和K8S进行整合</li><li>业界Devops解决方案的了解</li></ul><p>下一步计划：</p><ul><li>进一步学习K8S，解决目前遗留的问题</li><li>实践一下腾讯云，阿里云的Devops平台</li></ul><h1 id="1、基于K8S-Docker搭建Jenkins主从分布式构建环境"><a href="#1、基于K8S-Docker搭建Jenkins主从分布式构建环境" class="headerlink" title="1、基于K8S+Docker搭建Jenkins主从分布式构建环境"></a>1、基于K8S+Docker搭建Jenkins主从分布式构建环境</h1><table><thead><tr><th>名称</th><th>IP</th><th>安装软件</th></tr></thead><tbody><tr><td>代码托管服务器</td><td>222.20.75.178</td><td>Gitlab-12.4.2</td></tr><tr><td>Docker仓库服务器</td><td>222.20.76.204</td><td>Harbor1.9.2</td></tr><tr><td>K8S-master</td><td>222.20.72.139</td><td>kubelet，Docker18.06.1-ce，kube-apiserver，kube-controller-manager，kube-scheduler，etcd，NFS，calico</td></tr><tr><td>K8S-node1</td><td>222.20.73.159</td><td>kubelet，kube-proxy，Docker18.06.1-ce</td></tr><tr><td>K8S-node2</td><td>222.20.79.72</td><td>kubelet，kube-proxy，Docker18.06.1-ce</td></tr></tbody></table><p>K8S架构图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210627140404709.png" alt="image-20210627140404709"></p><blockquote><ul><li><p>API Server：用于暴露Kubernetes API，任何资源的请求的调用操作都是通过kube-apiserver提供的接口进行的。</p></li><li><p>Etcd：是Kubernetes提供默认的存储系统，保存所有集群数据，使用时需要为etcd数据提供备份计划。</p></li><li><p>Controller-Manager：作为集群内部的管理控制中心，负责集群内的Node、Pod副本、服务端点（Endpoint）、命名空间（Namespace）、服务账号（ServiceAccount）、资源定额（ResourceQuota）的管理，当某个Node意外宕机时，Controller Manager会及时发现并执行自动化修复流程，确保集群始终处于预期的工作状态。</p></li><li><p>Scheduler：监视新创建没有分配到Node的Pod，为Pod选择一个Node。</p></li><li><p>Kubelet：负责维护容器的生命周期，同时负责Volume和网络的管理</p></li><li><p>Kube proxy：是Kubernetes的核心组件，部署在每个Node节点上，它是实现Kubernetes Service的通信与负载均衡机制的重要组件。</p></li></ul></blockquote><p>K8S搭建Jenkins主从架构图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210627141904714.png" alt="image-20210627141904714"></p><p>进行一系列配置（遇到很多权限问题，包括防火墙，网桥，SELinux，proxy，swap，hosts文件等，最后查了很多资料总算是解决了）…</p><p>安装kubelet，kubeadm，kubectl</p><pre class="line-numbers language-shell"><code class="language-shell">#清空yum安装源缓存yum clean all #重新设置yum安装源为阿里云镜像cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF#安装kubelet kubeadm kubectlyum install -y kubelet kubeadm kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>kubeadm: 用来初始化集群的指令。</p><p>kubelet: 在集群中的每个节点上用来启动 pod 和 container 等。</p><p>kubectl: 用来与集群通信的命令行工具。</p></blockquote><h2 id="1-1、Master节点"><a href="#1-1、Master节点" class="headerlink" title="1.1、Master节点"></a>1.1、Master节点</h2><ul><li>初始化K8S集群</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubeadm init --kubernetes-version=1.21.2 --apiserver-advertise-address=222.20.76.204 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化成功之后，要记下从节点连接的token</p><pre class="line-numbers language-shell"><code class="language-shell">kubeadm join 222.20.76.204:6443 --token abcdef.0123456789abcdef \    --discovery-token-ca-cert-hash sha256:721e18363c999e044e27d75fb88fbb9430df1766e74a33a35235a9aa035313f4 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>重启kubelet</li></ul><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210630091753021.png" alt="image-20210630091753021"></p><ul><li>配置kubectl工具</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装Calico：实现Master节点和Slave的网络通信</li></ul><pre class="line-numbers language-shell"><code class="language-shell">wget https://docs.projectcalico.org/v3.10/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml#修改IPV4POOL_CIDR地址    sed -i 's/192.168.0.0/10.244.0.0/g' calico.yaml#安装calicokubectl apply -f calico.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看所有Pod的状态，确保都是Running状态</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubectl get pod --all-namespaces -o wide<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210630095014455.png" alt="image-20210630095014455"></p><h2 id="1-2、Slave节点"><a href="#1-2、Slave节点" class="headerlink" title="1.2、Slave节点"></a>1.2、Slave节点</h2><ul><li>使用之前Master节点初始化集群生成的token信息，加入集群</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubeadm join 222.20.76.204:6443 --token abcdef.0123456789abcdef \    --discovery-token-ca-cert-hash sha256:721e18363c999e044e27d75fb88fbb9430df1766e74a33a35235a9aa035313f4 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>重启kubelet</li></ul><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>回到Master节点查看nodes，如果Status全部为Ready，代表集群环境搭建成功</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210627135332848.png" alt="image-20210627135332848"></p><h2 id="1-3、NFS的安装配置"><a href="#1-3、NFS的安装配置" class="headerlink" title="1.3、NFS的安装配置"></a>1.3、NFS的安装配置</h2><p>NFS（Network File System），它最大的功能就是可以通过网络，让不同的机器、不同的操作系统可以共享彼此的文件。可以利用NFS共享Jenkins运行的配置文件、Maven的仓库依赖文件等</p><ul><li>安装NFS服务（在所有K8S的节点都需要安装）</li></ul><pre><code>yum install -y nfs-utils</code></pre><ul><li>创建共享目录</li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /opt/nfs/jenkins vi /etc/exports #编写NFS的共享配置 内容如下: /opt/nfs/jenkins *(rw,no_root_squash) *代表对所有IP都开放此目录，rw是读写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>启动服务</li></ul><pre class="line-numbers language-shell"><code class="language-shell">systemctl enable nfs #开机启动 systemctl start nfs #启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>两台Slave机器上能看到共享目录</li></ul><pre class="line-numbers language-shell"><code class="language-shell">showmount -e 222.20.76.204<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210630100744453.png" alt="image-20210630100744453"></p><h2 id="1-4、在K8S上创建Jenkins-Master-Pod"><a href="#1-4、在K8S上创建Jenkins-Master-Pod" class="headerlink" title="1.4、在K8S上创建Jenkins-Master Pod"></a>1.4、在K8S上创建Jenkins-Master Pod</h2><h3 id="1-4-1、创建NFS-client-provisioner"><a href="#1-4-1、创建NFS-client-provisioner" class="headerlink" title="1.4.1、创建NFS client provisioner"></a>1.4.1、创建NFS client provisioner</h3><p>编写三个yaml配置文件：</p><p>定义StorageClass</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> storage.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StorageClass<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> managed<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>storage<span class="token key atrule">provisioner</span><span class="token punctuation">:</span> fuseim.pri/ifs <span class="token comment" spellcheck="true"># or choose another name, must match deployment's env PROVISIONER_NAME'</span><span class="token key atrule">parameters</span><span class="token punctuation">:</span>  <span class="token key atrule">archiveOnDelete</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个K8S集群的角色访问控制</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token punctuation">-</span>runner<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"persistentvolumes"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"delete"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"persistentvolumeclaims"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"storage.k8s.io"</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"storageclasses"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> run<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token punctuation">-</span>runner  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"endpoints"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner    <span class="token comment" spellcheck="true"># replace with namespace where provisioner is deployed</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置一个Deployment</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> Recreate  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner          <span class="token key atrule">image</span><span class="token punctuation">:</span> lizhenliang/nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token punctuation">:</span>latest          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>root              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /persistentvolumes          <span class="token key atrule">env</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> PROVISIONER_NAME              <span class="token key atrule">value</span><span class="token punctuation">:</span> fuseim.pri/ifs            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NFS_SERVER              <span class="token key atrule">value</span><span class="token punctuation">:</span> 222.20.76.204    <span class="token comment" spellcheck="true">#配置nfs服务器</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NFS_PATH              <span class="token key atrule">value</span><span class="token punctuation">:</span> /opt/nfs/jenkins/  <span class="token comment" spellcheck="true">#配置nfs共享路径</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>root          <span class="token key atrule">nfs</span><span class="token punctuation">:</span>            <span class="token key atrule">server</span><span class="token punctuation">:</span> 222.20.76.204            <span class="token key atrule">path</span><span class="token punctuation">:</span> /opt/nfs/jenkins/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-2、安装Jenkins-Master"><a href="#1-4-2、安装Jenkins-Master" class="headerlink" title="1.4.2、安装Jenkins-Master"></a>1.4.2、安装Jenkins-Master</h3><p>编写4个yaml文件</p><p>Service.yaml，使用NodePort进行发布，会随机生成一个访问端口</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>ops  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> jenkins<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> jenkins  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> web    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> web  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> agent    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">50000</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> agent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ServiceAccout.yaml</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>ops<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rbac.yaml同NFS client provisioner</p><p>StatefulSet.yaml：实现有状态应用部署</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>ops<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> jenkins  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> jenkins  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">updateStrategy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> jenkins    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> jenkins      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins          <span class="token key atrule">image</span><span class="token punctuation">:</span> jenkins/jenkins<span class="token punctuation">:</span>lts<span class="token punctuation">-</span>alpine          <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent          <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> web            <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">50000</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> agent            <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP          <span class="token key atrule">resources</span><span class="token punctuation">:</span>            <span class="token key atrule">limits</span><span class="token punctuation">:</span>              <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">1</span>              <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi            <span class="token key atrule">requests</span><span class="token punctuation">:</span>              <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">0.5</span>              <span class="token key atrule">memory</span><span class="token punctuation">:</span> 500Mi          <span class="token key atrule">env</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> LIMITS_MEMORY              <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>                <span class="token key atrule">resourceFieldRef</span><span class="token punctuation">:</span>                  <span class="token key atrule">resource</span><span class="token punctuation">:</span> limits.memory                  <span class="token key atrule">divisor</span><span class="token punctuation">:</span> 1Mi            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> JAVA_OPTS              <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>Xmx$(LIMITS_MEMORY)m <span class="token punctuation">-</span>XshowSettings<span class="token punctuation">:</span>vm <span class="token punctuation">-</span>Dhudson.slaves.NodeProvisioner.initialDelay=0 <span class="token punctuation">-</span>Dhudson.slaves.NodeProvisioner.MARGIN=50 <span class="token punctuation">-</span>Dhudson.slaves.NodeProvisioner.MARGIN0=0.85          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins<span class="token punctuation">-</span>home              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/jenkins_home          <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /login              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>            <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">60</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">12</span>          <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /login              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>            <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">60</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">12</span>      <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>        <span class="token key atrule">fsGroup</span><span class="token punctuation">:</span> <span class="token number">1000</span>  <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> jenkins<span class="token punctuation">-</span>home    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> <span class="token string">"managed-nfs-storage"</span>      <span class="token key atrule">accessModes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"ReadWriteOnce"</span> <span class="token punctuation">]</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">requests</span><span class="token punctuation">:</span>          <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5、Jenkins和K8S进行整合"><a href="#1-5、Jenkins和K8S进行整合" class="headerlink" title="1.5、Jenkins和K8S进行整合"></a>1.5、Jenkins和K8S进行整合</h2><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210630111659393.png" alt="image-20210630111659393"></p><p>目前1.4配置文件编写还有点问题，初步排查是PV的问题，需要进一步深入学习K8S官方文档</p><h1 id="2、业界解决方案"><a href="#2、业界解决方案" class="headerlink" title="2、业界解决方案"></a>2、业界解决方案</h1><ul><li>腾讯云Devops平台</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210630133432108.png" alt="image-20210630133432108"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210630133825198.png" alt="image-20210630133825198"></p><ul><li>阿里云Devops平台</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210630134507406.png" alt="image-20210630134507406"></p><ul><li>华为云DevCloud</li></ul>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Docker </tag>
            
            <tag> K8S </tag>
            
            <tag> NFS </tag>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="2021/06/25/mian-jing/"/>
      <url>2021/06/25/mian-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-6-25"><a href="#2021-6-25" class="headerlink" title="2021-6-25"></a>2021-6-25</h1><h2 id="1、问算法实习内容"><a href="#1、问算法实习内容" class="headerlink" title="1、问算法实习内容"></a>1、问算法实习内容</h2><h2 id="2、HashMap和HashTable区别"><a href="#2、HashMap和HashTable区别" class="headerlink" title="2、HashMap和HashTable区别"></a>2、HashMap和HashTable区别</h2><ul><li>线程安全性上：HashMap是不安全的，HashTable是线程安全的，里面都有Syncronized关键字</li><li>效率问题：HashMap比HashTable高，目前线程安全推荐用ConcurrentHashMap</li><li>对null key和null value的支持，HashMap支持一个null key，支持多个null value；HashTable不支持null key和null value会抛出空指针异常</li><li>初始容量和扩充<ul><li>创建时不指定容量，HashMap默认是16，之后每次扩充为原来两倍，HashTable默认是11，之后扩充为2N+1</li><li>创建时指定初始容量，HashMap会将其扩充为2的整数次幂大小（tableSizeFor）</li></ul></li><li>底层数据结构：HashMap采用了数组+链表，JDK1.8之后在解决哈希冲突上，当链表长度大于8时，会将其转化为红黑树，以较少搜索空间；HashTable没有这样的机制</li></ul><h2 id="3、线程池"><a href="#3、线程池" class="headerlink" title="3、线程池"></a>3、线程池</h2><p>首先讲讲我们为什么要用线程池？</p><ul><li>降低资源消耗：通过重复利用已创建的线程来降低创建和销毁线程的消耗</li><li>提高响应速度：当任务到达时，不需要等待线程创建就能立即执行</li><li>提高线程的可管理性：线程是稀缺资源，不能无限制地创建，使用线程池可以进行统一的分配、调优和监控</li></ul><p>然后讲讲线程池的主要处理流程：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210628161116116.png" alt="image-20210628161116116"></p><p>最后，讲讲线程池如何创建：</p><ul><li><p>可以通过ThreadPoolExecutor的构造方法</p></li><li><p>也可以通过Executors工具类来创建，其底层还是调用了ThreadPoolExecutor的构造方法，我们可以创建三种类型的ThreadPoolExecutor</p><ul><li><p>FixedThreadPool：该方法返回一个固定线程数量的线程池；里面的corePoolSize和maxPoolSize都设置为传入的nThreads</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210628155212122.png" alt="image-20210628155212122"></p><ul><li>如果当前线程池中运行线程数小于corePoolSize，则会创建一个新的线程进行能处理</li><li>如果已经完成预热（线程池中线程数=corePoolSize），则会放入阻塞队列</li><li>线程执行完1中的任务中，会在循环中反复从阻塞队列中获取任务来执行</li></ul><p>缺点：</p><ul><li>线程池中线程数量最多是corePoolSize，导致maxPoolSize和keepAliveTime参数无效</li><li>由于使用无界队列，运行中的FixedThreadPool不会拒绝任务</li></ul></li><li><p>SingleThreadExecutor</p><p>​    <img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210628155908086.png" alt="image-20210628155908086"></p><p>来新任务时，执行流程和FixedThreadPool一样，只是线程池中最多一个线程</p></li><li><p>CachedThreadPool</p></li></ul><p>​    <img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210628160520552.png" alt="image-20210628160520552"></p></li></ul><p>corePoolSize设置为0，maxPoolSize设置为Integer.MAX_VALUE，keepAliveTime设置为60s，使用没有容量的SynchronousQueue作为线程池的工作队列，execute()执行流程如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210628160803808.png" alt="image-20210628160803808"></p><ul><li> 首先调用SynchronousQueue.offer方法，如果当前maxPool线程池中有空闲线程在调用poll方法，那么就完成匹配，主线程把任务交给该空闲线程进行处理，execute方法执行完成</li><li>如果当前maxPool线程池没有空闲线程，就创建一个新的线程来处理该任务</li><li>处理完成之后，会一直调用SynchronousQueue.poll方法（60S），在这60S之内，如果有新的offer请求进来，就会去配对处理，否则超过60S没有新任务处理就会被销毁</li></ul><h2 id="4、Linux多线程和多进程哪个性能好？"><a href="#4、Linux多线程和多进程哪个性能好？" class="headerlink" title="4、Linux多线程和多进程哪个性能好？"></a>4、Linux多线程和多进程哪个性能好？</h2><table><thead><tr><th><strong>对比参数</strong></th><th><strong>多进程系统</strong></th><th><strong>多线程系统</strong></th></tr></thead><tbody><tr><td>基本</td><td>多进程帮助提高计算能力。</td><td>多线程帮助单个进程提高计算能力。</td></tr><tr><td>运行</td><td>允许同时执行多个进程。</td><td>一个进程的多个线程是并发执行的。</td></tr><tr><td>CPU 切换</td><td>在多进程中，CPU必须在多个程序之间切换，看起来就像多个程序同时运行。</td><td>在多线程中，CPU必须在多个线程之间进行切换，看起来所有线程都在同时运行。</td></tr><tr><td>创建</td><td>进程的创建是缓慢的，因为是消耗资源的。</td><td>线程的创建相比进程是节约时间和资源的。</td></tr><tr><td>分类</td><td>多进程可以是对称的，也可以是非对称的。</td><td>多线程没有这些分类。</td></tr><tr><td>内存</td><td>多进程为每个进程分配单独的内存和资源。</td><td>属于同一进程的多线程与该进程共享相同的内存和资源。</td></tr><tr><td>拣选对象</td><td>多进程依靠拣选内存中的对象来发送给其他进程。</td><td>多线程避免了拣选。</td></tr><tr><td>程序</td><td>多进程系统可以执行多个进程任务。</td><td>多线程系统执行同一进程的多个线程任务。</td></tr><tr><td>时间开销</td><td>减少了作业处理时间。</td><td>减少了工作处理时间。</td></tr></tbody></table><p>多进程优点：</p><ul><li><p> 充分利用了多个CPU及其内核的优势，并发执行多个不同任务</p></li><li><p>子进程大多是可中断/可杀死的。</p></li><li><p> 当需要非常高的速度来处理大量数据时，应该使用这类系统。</p></li></ul><p>缺点：进程间通信开销比较大</p><p>多线程优点：</p><ul><li><p>线程相当于轻量级进程，所有线程共享一个进程内存池，内存占用少。</p></li><li><p> 线程之间的通信成本相对较低。</p></li><li><p> 在共享内存内的两个线程之间切换所需时间较少，终止时间较少</p></li><li><p>线程的启动速度比进程快，任务切换也快。</p></li><li><p>在现有进程中创建一个新线程比创建一个新进程所需的时间更短</p></li></ul><p>缺点：</p><ul><li>线程调度需要保存线程状态，频繁调度，需要占用大量的时间</li><li>因为需要考虑线程同步问题，程序设计上相对容易出错</li></ul><h2 id="5、get和post区别"><a href="#5、get和post区别" class="headerlink" title="5、get和post区别"></a>5、get和post区别</h2><p>请求报文由请求行、请求头部，请求体三部分组成，请求行主要包括：请求方法、请求URL，协议三部分</p><p>响应报文由响应行、响应头部、响应体三部分组成，响应行主要包括协议、状态码，状态三部分</p><p><code>GET</code>：<strong>获取资源</strong>，用来请求访问已被URI识别的资源</p><p><code>POST</code>：用来<strong>传输实体的主体</strong></p><ul><li>请求参数长度限制：get最多1M，Post没有限制，这个不同浏览器有不同的规范</li><li>get不可以用请求体传数据，服务器不一定会接收</li><li>安全性：post比get高。get提交数据显示在URL上，会被浏览器缓存，其他人可以看到，而post是放在请求体里；此外get还可能遭到CSRF攻击</li><li>get产生一个TCP数据包，而post会产生两个</li></ul><p>*<strong>*状态码：*</strong></p><p>1xx：指示信息–表示请求已接收，继续处理 </p><p>​    100 –客户端必须继续发出请求 101-客户端要求服务器转换HTTP协议版本。</p><p>2xx：成功–表示请求已被成功接收、理解、接受</p><p>​    200—OK  204–请求收到，但返回信息为空 206–服务器已经完成了部分用户的GET请求</p><p>3xx：重定向–信息不完整需要进一步补充</p><p>​    300 — 请求资源在多处可得到。</p><p>​    301—永久重定向，隐式重定向。302 临时重定向，显示重定向。</p><p>​    304—请求的资源没有改变，可以使用缓存。</p><p>4xx：客户端错误–请求有语法错误或请求无法实现</p><p>​    401—未授权  403—禁止访问。 404 –找不到。409：对当前资源状态，请求不能完成</p><p>5xx：服务器端错误–服务器未能实现合法的请求</p><p>​    500内部服务器错误，501未实现， 502网关错误，503服务不可用，504 网关超时。</p><h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、Servlet生命周期"><a href="#6-1、Servlet生命周期" class="headerlink" title="6.1、Servlet生命周期"></a>6.1、Servlet生命周期</h3><ul><li>Servlet 初始化后调用 <strong>init ()</strong> 方法。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 销毁前调用 <strong>destroy()</strong> 方法。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><h4 id="6-1-1、init方法"><a href="#6-1-1、init方法" class="headerlink" title="6.1.1、init方法"></a>6.1.1、init方法</h4><p>init 方法被设计成只调用一次，当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 初始化代码...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-1-2、service-方法"><a href="#6-1-2、service-方法" class="headerlink" title="6.1.2、service() 方法"></a>6.1.2、service() 方法</h4><p>service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><p>每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重写doGet和doPost</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                  HttpServletResponse response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Servlet 代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                   HttpServletResponse response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Servlet 代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-3、destroy-方法"><a href="#6-1-3、destroy-方法" class="headerlink" title="6.1.3、destroy() 方法"></a>6.1.3、destroy() 方法</h4><p>destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表写入到磁盘，并执行其他类似的清理活动。</p><p>在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 终止化代码...</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-1-4、架构图"><a href="#6-1-4、架构图" class="headerlink" title="6.1.4、架构图"></a>6.1.4、架构图</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210628204239749.png" alt="image-20210628204239749"></p><ul><li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li><li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li><li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</li></ul><h3 id="6-2、Session和Cookie的区别"><a href="#6-2、Session和Cookie的区别" class="headerlink" title="6.2、Session和Cookie的区别"></a>6.2、Session和Cookie的区别</h3><ul><li><p>Cookie：是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p><ul><li>用途<ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul></li></ul></li><li><p>Session：代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p></li></ul><ul><li><p>两者区别</p><ul><li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li></ul></li><li><p>两者联系</p><p>说起来为什么需要 Cookie ，这就需要从浏览器开始说起，我们都知道浏览器是没有状态的(HTTP 协议无状态)，这意味着浏览器并不知道是张三还是李四在和服务端打交道。这个时候就需要有一个机制来告诉服务端，本次操作用户是否登录，是哪个用户在执行的操作，那这套机制的实现就需要 Cookie 和 Session 的配合。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528164014567.png" alt="image-20210528164014567"></p></li></ul><p>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。</p><p>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</p><p>根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态。</p><ul><li><p>cookie被浏览器禁用了怎么办？</p><ul><li>每次请求中都携带一个 SessionID 的参数，可以 Post 的方式提交，也可以在请求的地址后面拼接 <code>xxx?SessionID=123456...</code>。</li><li>Token 机制：当用户第一次登录后，服务器根据提交的用户信息生成一个 Token，响应时将 Token 返回给客户端，以后客户端只需带上这个 Token 前来请求数据即可，无需再次登录验证。</li></ul></li><li><p>如何考虑分布式 Session 问题？</p><p>在互联网公司为了可以支撑更大的流量，后端往往需要多台服务器共同来支撑前端用户请求，那如果用户在 A 服务器登录了，第二次请求跑到服务 B 就会出现登录失效问题。分布式 Session 一般会有以下几种解决方案：</p><ul><li><p>Nginx ip_hash 策略，服务端使用 Nginx 代理，每个请求按访问 IP 的 hash 分配，这样来自同一 IP 固定访问一个后台服务器，避免了在服务器 A 创建 Session，第二次分发到服务器 B 的现象。</p></li><li><p>Session 复制，任何一个服务器上的 Session 发生改变（增删改），该节点会把这个 Session 的所有内容序列化，然后广播给所有其它节点。</p></li><li><p><strong>共享 Session</strong>（建议的解决方案），服务端无状态话，将用户的 Session 等信息使用<strong>缓存中间件</strong>来统一管理，保障分发到每一个服务器的响应结果都一致。</p></li></ul></li><li><p>如何解决跨域请求？Jsonp 跨域的原理是什么？</p><p>说起跨域请求，必须要了解浏览器的同源策略，同源策略/SOP（Same origin policy）是一种约定，由 Netscape 公司 1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。</p><p>解决跨域请求的常用方法是：</p><ul><li><p>通过代理来避免，比如使用 Nginx 在后端转发请求，避免了前端出现跨域的问题。</p></li><li><p>通过 Jsonp 跨域</p><ul><li><p>Jsonp跨域原理</p><ul><li><p>浏览器的同源策略把跨域请求都禁止了，但是页面中的 <code>&lt;script&gt;</code>标签是例外，不受同源策略限制。Jsonp 就是利用 <code>&lt;script&gt;</code> 标签跨域特性进行跨域数据访问。</p></li><li><p>JSONP 的理念就是，与服务端约定好一个回调函数名，服务端接收到请求后，将返回一段 Javascript，在这段 Javascript 代码中调用了约定好的回调函数，并且将数据作为参数进行传递。当网页接收到这段 Javascript 代码后，就会执行这个回调函数，这时数据已经成功传输到客户端了。</p></li></ul></li><li><p>缺点：它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。</p></li></ul></li></ul></li></ul><h2 id="7、Mybatis一级缓存和二级缓存"><a href="#7、Mybatis一级缓存和二级缓存" class="headerlink" title="7、Mybatis一级缓存和二级缓存"></a>7、Mybatis一级缓存和二级缓存</h2><h3 id="7-1、一级缓存"><a href="#7-1、一级缓存" class="headerlink" title="7.1、一级缓存"></a>7.1、一级缓存</h3><p>一次数据库会话中，执行多次查询条件完全相同的SQL，MyBatis提供了一级缓存的方案优化这部分场景，如果是相同的SQL语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210628210230716.png" alt="image-20210628210230716"></p><p>在mybatis配置文件中加入下面一行代码即可：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localCacheScope<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SESSION<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>value可以选择SESSION或者Statement</p><p>开启两个<code>SqlSession</code>，在<code>sqlSession1</code>中查询数据，使一级缓存生效，在<code>sqlSession2</code>中更新数据库，验证一级缓存只在数据库会话内部共享。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLocalCacheScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SqlSession sqlSession1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         SqlSession sqlSession2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         StudentMapper studentMapper <span class="token operator">=</span> sqlSession1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentMapper studentMapper2 <span class="token operator">=</span> sqlSession2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"studentMapper读取数据: "</span> <span class="token operator">+</span> studentMapper<span class="token punctuation">.</span><span class="token function">getStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"studentMapper读取数据: "</span> <span class="token operator">+</span> studentMapper<span class="token punctuation">.</span><span class="token function">getStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"studentMapper2更新了"</span> <span class="token operator">+</span> studentMapper2<span class="token punctuation">.</span><span class="token function">updateStudentName</span><span class="token punctuation">(</span><span class="token string">"小岑"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个学生的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"studentMapper读取数据: "</span> <span class="token operator">+</span> studentMapper<span class="token punctuation">.</span><span class="token function">getStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"studentMapper2读取数据: "</span> <span class="token operator">+</span> studentMapper2<span class="token punctuation">.</span><span class="token function">getStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sqlSession2</code>更新了id为1的学生的姓名，从凯伦改为了小岑，但session1之后的查询中，id为1的学生的名字还是凯伦，出现了脏数据，也证明了之前的设想，一级缓存只在数据库会话内部共享。</p><ol><li>MyBatis一级缓存的生命周期和SqlSession一致。</li><li>MyBatis一级缓存内部设计简单，只是一个没有容量限定的HashMap，在缓存的功能性上有所欠缺。</li><li>MyBatis的一级缓存最大范围是SqlSession内部，有多个SqlSession或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为Statement。</li></ol><h3 id="7-2、二级缓存"><a href="#7-2、二级缓存" class="headerlink" title="7.2、二级缓存"></a>7.2、二级缓存</h3><p>在上文中提到的一级缓存中，其最大的共享范围就是一个SqlSession内部，如果多个SqlSession之间需要共享缓存，则需要使用到二级缓存。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210628211451044.png" alt="image-20210628211451044"></p><p>在MyBatis的配置文件中开启二级缓存。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>setting name<span class="token operator">=</span><span class="token string">"cacheEnabled"</span> value<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>MyBatis的二级缓存相对于一级缓存来说，实现了<code>SqlSession</code>之间缓存数据的共享，同时粒度更加的细，能够到<code>namespace</code>级别，通过Cache接口实现类不同的组合，对Cache的可控性也更强。</li><li>MyBatis在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。</li><li>在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。</li></ol><h2 id="8、Mybatis-和-区别"><a href="#8、Mybatis-和-区别" class="headerlink" title="8、Mybatis $和#区别"></a>8、Mybatis $和#区别</h2><ul><li><p>${} 是 Properties ⽂件中的变量占位符，它可以⽤于标签属性值和 sql 内部，属于静态⽂本替换，⽐如${driver}会被静态替换为 com.mysql.jdbc.Driver 。</p></li><li><p>#{} 是 sql 的参数占位符，Mybatis 会将 sql 中的 #{} 替换为?号，在 sql 执⾏前会使⽤PreparedStatement 的参数设置⽅法，按序给 sql 的?号占位符设置参数值，⽐如ps.setInt(0, parameterValue)， #{item.name} 的取值⽅式为使⽤反射从参数对象中获取item 对象的 name 属性值，相当于 param.getItem().getName() ，可以避免SQL注入攻击。</p></li></ul><h2 id="9、反问：部门技术栈，做什么业务"><a href="#9、反问：部门技术栈，做什么业务" class="headerlink" title="9、反问：部门技术栈，做什么业务"></a>9、反问：部门技术栈，做什么业务</h2><h1 id="2021-6-29"><a href="#2021-6-29" class="headerlink" title="2021-6-29"></a>2021-6-29</h1><h2 id="1、问实验室项目，分布式，计算存储分离架构相比原来mysql的优势？"><a href="#1、问实验室项目，分布式，计算存储分离架构相比原来mysql的优势？" class="headerlink" title="1、问实验室项目，分布式，计算存储分离架构相比原来mysql的优势？"></a>1、问实验室项目，分布式，计算存储分离架构相比原来mysql的优势？</h2><h2 id="2、问考研数学相关问题（向量点积，特征值和特征向量的物理意义，泊松分布的应用场景）"><a href="#2、问考研数学相关问题（向量点积，特征值和特征向量的物理意义，泊松分布的应用场景）" class="headerlink" title="2、问考研数学相关问题（向量点积，特征值和特征向量的物理意义，泊松分布的应用场景）"></a>2、问考研数学相关问题（向量点积，特征值和特征向量的物理意义，泊松分布的应用场景）</h2><p>向量点积几何意义：反映了两个向量的相似度，结果越大，越相似</p><p>特征值和特征向量物理意义：特征值和特征向量表达了一个线性变换的特征。在物理意义上，一个高维空间的线性变换可以想象是在对一个向量在各个方向上进行了不同程度的变换，而特征向量之间是线性无关的，它们对应了最主要的变换方向，同时特征值表达了相应的变换程度。</p><p>泊松分布的应用场景：在实际事例中，当一个随机事件，例如某电话交换台收到的呼叫、来到某公共汽车站的乘客、某放射性物质发射出的粒子、显微镜下某区域中的白血球等等医学教育|网搜集整理，<strong>以固定的平均瞬时速率λ（或称密度）随机且独立地出现时，那么这个事件在单位时间（面积或体积）内出现的次数或个数就近似地服从泊松分布P（λ）</strong>。因此，泊松分布在<strong>管理科学、运筹学以及自然科学</strong>的某些问题中都占有重要的地位</p><h2 id="3、MySQL分库分表"><a href="#3、MySQL分库分表" class="headerlink" title="3、MySQL分库分表"></a>3、MySQL分库分表</h2><h2 id="4、MySQL查询优化思路"><a href="#4、MySQL查询优化思路" class="headerlink" title="4、MySQL查询优化思路"></a>4、MySQL查询优化思路</h2><h2 id="5、常用数据结构，排序算法，快排实现思路，什么时候退化为O-n-2"><a href="#5、常用数据结构，排序算法，快排实现思路，什么时候退化为O-n-2" class="headerlink" title="5、常用数据结构，排序算法，快排实现思路，什么时候退化为O(n^2)"></a>5、常用数据结构，排序算法，快排实现思路，什么时候退化为O(n^2)</h2><ul><li><p> 已排序</p></li><li><p>数值全部相等（1的特殊情况）</p></li></ul><p>避免方法：就要尽量使每次选择的pivot为中位数。</p><p>一般常用的方法是，对每一个数列都取一次中位数(O(n))，这样总体的快排时间复杂度仍为O(nlogn)。</p><p>更为简化的方法是，<strong>取头、中、尾的中位数(O(1))作为pivot</strong></p><h2 id="6、Java随机数种子"><a href="#6、Java随机数种子" class="headerlink" title="6、Java随机数种子"></a>6、Java随机数种子</h2><h3 id="6-1、无参构造"><a href="#6-1、无参构造" class="headerlink" title="6.1、无参构造"></a>6.1、无参构造</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Creates a new random number generator. This constructor sets     * the seed of the random number generator to a value very likely     * to be distinct from any other invocation of this constructor.     */</span>    <span class="token keyword">public</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token function">seedUniquifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">seedUniquifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// L'Ecuyer, "Tables of Linear Congruential Generators of</span>        <span class="token comment" spellcheck="true">// Different Sizes and Good Lattice Structure", 1999</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> current <span class="token operator">=</span> seedUniquifier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> next <span class="token operator">=</span> current <span class="token operator">*</span> 181783497276652981L<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>seedUniquifier<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong seedUniquifier        <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span>8682522807148012L<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成种子过程：</p><ul><li><p>获得一个长整形数作为“初始种子”（系统默认的是8682522807148012L）</p></li><li><p>不断与一个变态的数——181783497276652981L相乘（天知道这些数是不是工程师随便滚键盘滚出来的-.-）得到一个不能预测的值，直到 能把这个不能事先预期的值 赋给Random对象的静态常量seedUniquifier 。因为多线程环境下赋值操作可能失败，就for(;;)来保证一定要赋值成功</p></li><li><p>与系统随机出来的nanotime值作异或运算，得到最终的种子</p></li></ul><p>nanotime算是一个随机性比较强的参数，用于描述代码的执行时间。</p><h3 id="6-2、有参构造"><a href="#6-2、有参构造" class="headerlink" title="6.2、有参构造"></a>6.2、有参构造</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Creates a new random number generator using a single {@code long} seed.     * The seed is the initial value of the internal state of the pseudorandom     * number generator which is maintained by method {@link #next}.     *     * &lt;p>The invocation {@code new Random(seed)} is equivalent to:     *  &lt;pre> {@code     * Random rnd = new Random();     * rnd.setSeed(seed);}&lt;/pre>     *     * @param seed the initial seed     * @see   #setSeed(long)     */</span>    <span class="token keyword">public</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Random<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token function">initialScramble</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// subclass might have overriden setSeed</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setSeed</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">initialScramble</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>seed <span class="token operator">^</span> multiplier<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的multiplier和mask都是定值：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> multiplier <span class="token operator">=</span> 0x5DEECE66DL<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span>1L <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结论：<strong>虽然二者都是伪随机，但是，</strong>无参数构造方法（不设置种子）具有更强的随机性，能够满足一般统计上的随机数要求。使用有参的构造方法（设置种子）无论你生成多少次，每次生成的随机序列都相同，名副其实的伪随机！！</p><h2 id="7、删除LinkedList里的元素"><a href="#7、删除LinkedList里的元素" class="headerlink" title="7、删除LinkedList里的元素"></a>7、删除LinkedList里的元素</h2><ul><li>增强for循环</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token function">testForList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testForList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testForList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getRandomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer temp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190726173719467.png" alt="img"></p><ul><li>fori + 元素删除</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token function">testForiList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testForiList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testForiList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getRandomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190726174021568.png" alt="img"></p><ul><li>fori + 索引删除</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token function">testForRemoveIndexList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">testForRemoveIndexList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testForRemoveIndexList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getRandomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190726174304218.png" alt="img"></p><ul><li>iterator迭代器删除</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token function">testIteratorList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">testIteratorList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testIteratorList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getRandomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190726174521163.png" alt="img"></p><p> list集合遍历删除必须使用迭代器才能正确删除，fori虽然不会报错，但是结果不正确，增强for循环直接抛ConcurrentModificationException</p><h2 id="8、找出一个英文文档里出现次数最多的100个单词？时间复杂度？"><a href="#8、找出一个英文文档里出现次数最多的100个单词？时间复杂度？" class="headerlink" title="8、找出一个英文文档里出现次数最多的100个单词？时间复杂度？"></a>8、找出一个英文文档里出现次数最多的100个单词？时间复杂度？</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    BufferedReader cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String line <span class="token operator">=</span> null<span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> wordCounts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> split<span class="token punctuation">)</span> <span class="token punctuation">{</span>            wordCounts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> wordCounts<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> wordCounts<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span>a<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大数据处理：首先利用分治思想进行哈希分流到多个小文件，对每个小文件用一个哈希表统计词频，再建立一个大小为100的小根堆，不断更新小根堆即可</p><h2 id="9、如果多个文档分布在不同机器里呢？"><a href="#9、如果多个文档分布在不同机器里呢？" class="headerlink" title="9、如果多个文档分布在不同机器里呢？"></a>9、如果多个文档分布在不同机器里呢？</h2><p>哈希重新分配，可以让相同字符串分流到同一台机器</p><h2 id="10、微博评论系统，找出评论数最多的10条微博？"><a href="#10、微博评论系统，找出评论数最多的10条微博？" class="headerlink" title="10、微博评论系统，找出评论数最多的10条微博？"></a>10、微博评论系统，找出评论数最多的10条微博？</h2><h2 id="11、反问：部门技术栈，做什么业务，面试表现，哪些方面存在不足？"><a href="#11、反问：部门技术栈，做什么业务，面试表现，哪些方面存在不足？" class="headerlink" title="11、反问：部门技术栈，做什么业务，面试表现，哪些方面存在不足？"></a>11、反问：部门技术栈，做什么业务，面试表现，哪些方面存在不足？</h2><h1 id="2021-6-30"><a href="#2021-6-30" class="headerlink" title="2021-6-30"></a>2021-6-30</h1><p>（电话面）</p><h2 id="1、目前求职状态"><a href="#1、目前求职状态" class="headerlink" title="1、目前求职状态"></a>1、目前求职状态</h2><h2 id="2、自我介绍"><a href="#2、自我介绍" class="headerlink" title="2、自我介绍"></a>2、自我介绍</h2><h2 id="3、找工作的方向？可以考虑换M语言嘛？"><a href="#3、找工作的方向？可以考虑换M语言嘛？" class="headerlink" title="3、找工作的方向？可以考虑换M语言嘛？"></a>3、找工作的方向？可以考虑换M语言嘛？</h2><h2 id="4、介绍自我性格"><a href="#4、介绍自我性格" class="headerlink" title="4、介绍自我性格"></a>4、介绍自我性格</h2><h2 id="5、实习期间能接受出差嘛，实习期工资？实习完可以接受签三方嘛？"><a href="#5、实习期间能接受出差嘛，实习期工资？实习完可以接受签三方嘛？" class="headerlink" title="5、实习期间能接受出差嘛，实习期工资？实习完可以接受签三方嘛？"></a>5、实习期间能接受出差嘛，实习期工资？实习完可以接受签三方嘛？</h2><h2 id="6、简单介绍下电商项目自己负责的模块"><a href="#6、简单介绍下电商项目自己负责的模块" class="headerlink" title="6、简单介绍下电商项目自己负责的模块"></a>6、简单介绍下电商项目自己负责的模块</h2><h2 id="7、详细介绍下商品管理模块"><a href="#7、详细介绍下商品管理模块" class="headerlink" title="7、详细介绍下商品管理模块"></a>7、详细介绍下商品管理模块</h2><h2 id="8、商品图片怎么存的？"><a href="#8、商品图片怎么存的？" class="headerlink" title="8、商品图片怎么存的？"></a>8、商品图片怎么存的？</h2><h2 id="9、权限管理这块怎么做的？目前有几种角色？前后端都是自己做的？"><a href="#9、权限管理这块怎么做的？目前有几种角色？前后端都是自己做的？" class="headerlink" title="9、权限管理这块怎么做的？目前有几种角色？前后端都是自己做的？"></a>9、权限管理这块怎么做的？目前有几种角色？前后端都是自己做的？</h2><h2 id="10、介绍下招聘管理系统"><a href="#10、介绍下招聘管理系统" class="headerlink" title="10、介绍下招聘管理系统"></a>10、介绍下招聘管理系统</h2><h2 id="11、题库这一块是怎么做的？标签是什么？"><a href="#11、题库这一块是怎么做的？标签是什么？" class="headerlink" title="11、题库这一块是怎么做的？标签是什么？"></a>11、题库这一块是怎么做的？标签是什么？</h2><h2 id="12、简答题是怎么呈现的？"><a href="#12、简答题是怎么呈现的？" class="headerlink" title="12、简答题是怎么呈现的？"></a>12、简答题是怎么呈现的？</h2><h2 id="13、前端技术熟悉嘛？"><a href="#13、前端技术熟悉嘛？" class="headerlink" title="13、前端技术熟悉嘛？"></a>13、前端技术熟悉嘛？</h2><h2 id="14、SSM指什么？介绍下SpringMVC的工作原理"><a href="#14、SSM指什么？介绍下SpringMVC的工作原理" class="headerlink" title="14、SSM指什么？介绍下SpringMVC的工作原理"></a>14、SSM指什么？介绍下SpringMVC的工作原理</h2><h2 id="15、实习什么时候能入职？"><a href="#15、实习什么时候能入职？" class="headerlink" title="15、实习什么时候能入职？"></a>15、实习什么时候能入职？</h2><h2 id="1、问实验室项目"><a href="#1、问实验室项目" class="headerlink" title="1、问实验室项目"></a>1、问实验室项目</h2><h2 id="2、MySQL缓冲池，高并发请求缓存雪崩怎么办？"><a href="#2、MySQL缓冲池，高并发请求缓存雪崩怎么办？" class="headerlink" title="2、MySQL缓冲池，高并发请求缓存雪崩怎么办？"></a>2、MySQL缓冲池，高并发请求缓存雪崩怎么办？</h2><h2 id="3、实验室项目和MyCat的性能比较怎么样？"><a href="#3、实验室项目和MyCat的性能比较怎么样？" class="headerlink" title="3、实验室项目和MyCat的性能比较怎么样？"></a>3、实验室项目和MyCat的性能比较怎么样？</h2><h2 id="4、分库分表后，id主键如何处理-追问Twitter的雪花算法"><a href="#4、分库分表后，id主键如何处理-追问Twitter的雪花算法" class="headerlink" title="4、分库分表后，id主键如何处理?追问Twitter的雪花算法"></a>4、分库分表后，id主键如何处理?追问Twitter的雪花算法</h2><h2 id="5、LRU算法"><a href="#5、LRU算法" class="headerlink" title="5、LRU算法"></a>5、LRU算法</h2><h2 id="6、常见设计模式"><a href="#6、常见设计模式" class="headerlink" title="6、常见设计模式"></a>6、常见设计模式</h2><h2 id="7、实习内容"><a href="#7、实习内容" class="headerlink" title="7、实习内容"></a>7、实习内容</h2><h2 id="8、创建线程的几种方式？"><a href="#8、创建线程的几种方式？" class="headerlink" title="8、创建线程的几种方式？"></a>8、创建线程的几种方式？</h2><h2 id="9、多线程同步问题？"><a href="#9、多线程同步问题？" class="headerlink" title="9、多线程同步问题？"></a>9、多线程同步问题？</h2><h2 id="10、死锁如何解决？"><a href="#10、死锁如何解决？" class="headerlink" title="10、死锁如何解决？"></a>10、死锁如何解决？</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210702205950255.png" alt="image-20210702205950255"></p><p>产生死锁需要满足以下4个必要条件：</p><ul><li><p>互斥条件：该资源任意⼀个时刻只由⼀个线程占⽤。</p></li><li><p>请求与保持条件：⼀个进程因请求资源⽽阻塞时，对已获得的资源保持不放。</p></li><li><p>不剥夺条件:线程已获得的资源在末使⽤完之前不能被其他线程强⾏剥夺，只有⾃⼰使⽤完毕后才释放资源。</p></li><li><p>循环等待条件:若⼲进程之间形成⼀种头尾相接的循环等待资源关系。</p></li></ul><p>为了避免死锁，只需要破坏四个必要条件中的一个就可以了。</p><ul><li>破坏互斥条件：这个没办法，应该我们加锁就是让他们互斥的</li><li>破坏请求与保持条件：一次性申请所有资源</li><li>破坏不剥夺条件：占有部分资源的线程在申请其他资源时，如果申请不到，可以主动释放它占有的资源</li><li>破坏循环等待条件：线程按序申请资源，反序释放资源</li></ul><h2 id="11、乐观锁和悲观锁"><a href="#11、乐观锁和悲观锁" class="headerlink" title="11、乐观锁和悲观锁"></a>11、乐观锁和悲观锁</h2><h2 id="12、线程池"><a href="#12、线程池" class="headerlink" title="12、线程池"></a>12、线程池</h2><h1 id="2021-07-01（货拉拉）"><a href="#2021-07-01（货拉拉）" class="headerlink" title="2021-07-01（货拉拉）"></a>2021-07-01（货拉拉）</h1><h2 id="1、平时做项目一般负责哪一端？前端页面有负责嘛？"><a href="#1、平时做项目一般负责哪一端？前端页面有负责嘛？" class="headerlink" title="1、平时做项目一般负责哪一端？前端页面有负责嘛？"></a>1、平时做项目一般负责哪一端？前端页面有负责嘛？</h2><h2 id="2、后端分为哪几层？"><a href="#2、后端分为哪几层？" class="headerlink" title="2、后端分为哪几层？"></a>2、后端分为哪几层？</h2><h2 id="3、事务控制那一块怎么做的？注解"><a href="#3、事务控制那一块怎么做的？注解" class="headerlink" title="3、事务控制那一块怎么做的？注解"></a>3、事务控制那一块怎么做的？注解</h2><h2 id="4、后台数据校验做过嘛？"><a href="#4、后台数据校验做过嘛？" class="headerlink" title="4、后台数据校验做过嘛？"></a>4、后台数据校验做过嘛？</h2><h2 id="5、SQL语句没问题嘛？Mybatis-XML用的比较多还是注解比较多？"><a href="#5、SQL语句没问题嘛？Mybatis-XML用的比较多还是注解比较多？" class="headerlink" title="5、SQL语句没问题嘛？Mybatis  XML用的比较多还是注解比较多？"></a>5、SQL语句没问题嘛？Mybatis  XML用的比较多还是注解比较多？</h2><h2 id="6、了解Vue数据双向绑定嘛？"><a href="#6、了解Vue数据双向绑定嘛？" class="headerlink" title="6、了解Vue数据双向绑定嘛？"></a>6、了解Vue数据双向绑定嘛？</h2><h2 id="7、以前做项目遇到过什么问题嘛？怎么解决的？"><a href="#7、以前做项目遇到过什么问题嘛？怎么解决的？" class="headerlink" title="7、以前做项目遇到过什么问题嘛？怎么解决的？"></a>7、以前做项目遇到过什么问题嘛？怎么解决的？</h2><h2 id="8、附件上传下载做过嘛？"><a href="#8、附件上传下载做过嘛？" class="headerlink" title="8、附件上传下载做过嘛？"></a>8、附件上传下载做过嘛？</h2><h2 id="1、LinkedList和ArrayList的区别"><a href="#1、LinkedList和ArrayList的区别" class="headerlink" title="1、LinkedList和ArrayList的区别"></a>1、LinkedList和ArrayList的区别</h2><h2 id="2、HashMap的底层数据结构"><a href="#2、HashMap的底层数据结构" class="headerlink" title="2、HashMap的底层数据结构"></a>2、HashMap的底层数据结构</h2><h2 id="3、引出ConcurrentHashMap和HashTable"><a href="#3、引出ConcurrentHashMap和HashTable" class="headerlink" title="3、引出ConcurrentHashMap和HashTable"></a>3、引出ConcurrentHashMap和HashTable</h2><h2 id="4、除了Synchronized，Lock了解过嘛？"><a href="#4、除了Synchronized，Lock了解过嘛？" class="headerlink" title="4、除了Synchronized，Lock了解过嘛？"></a>4、除了Synchronized，Lock了解过嘛？</h2><h2 id="5、单例模式用过吗？两次判空，一次加锁那个"><a href="#5、单例模式用过吗？两次判空，一次加锁那个" class="headerlink" title="5、单例模式用过吗？两次判空，一次加锁那个"></a>5、单例模式用过吗？两次判空，一次加锁那个</h2><h2 id="6、引出了volatile关键字"><a href="#6、引出了volatile关键字" class="headerlink" title="6、引出了volatile关键字"></a>6、引出了volatile关键字</h2><h2 id="7、JVM内存模型，每一块存什么数据"><a href="#7、JVM内存模型，每一块存什么数据" class="headerlink" title="7、JVM内存模型，每一块存什么数据"></a>7、JVM内存模型，每一块存什么数据</h2><h2 id="8、类加载过程"><a href="#8、类加载过程" class="headerlink" title="8、类加载过程"></a>8、类加载过程</h2><h2 id="9、对象初始化流程"><a href="#9、对象初始化流程" class="headerlink" title="9、对象初始化流程"></a>9、对象初始化流程</h2><h2 id="10、ES读写过程了解嘛？"><a href="#10、ES读写过程了解嘛？" class="headerlink" title="10、ES读写过程了解嘛？"></a>10、ES读写过程了解嘛？</h2><h2 id="11、Redis-AOP怎么优化权限管理那一块的？"><a href="#11、Redis-AOP怎么优化权限管理那一块的？" class="headerlink" title="11、Redis + AOP怎么优化权限管理那一块的？"></a>11、Redis + AOP怎么优化权限管理那一块的？</h2><h2 id="12、MySQL调优一般是怎么做的？"><a href="#12、MySQL调优一般是怎么做的？" class="headerlink" title="12、MySQL调优一般是怎么做的？"></a>12、MySQL调优一般是怎么做的？</h2><h2 id="13、Redis持久化"><a href="#13、Redis持久化" class="headerlink" title="13、Redis持久化"></a>13、Redis持久化</h2><h2 id="14、追问：如果是你，AOF和RDB怎么选择"><a href="#14、追问：如果是你，AOF和RDB怎么选择" class="headerlink" title="14、追问：如果是你，AOF和RDB怎么选择"></a>14、追问：如果是你，AOF和RDB怎么选择</h2><h2 id="15、部门业务介绍，反问"><a href="#15、部门业务介绍，反问" class="headerlink" title="15、部门业务介绍，反问"></a>15、部门业务介绍，反问</h2><h2 id="1、问实验室项目-1"><a href="#1、问实验室项目-1" class="headerlink" title="1、问实验室项目"></a>1、问实验室项目</h2><h2 id="2、MySQL索引"><a href="#2、MySQL索引" class="headerlink" title="2、MySQL索引"></a>2、MySQL索引</h2><h2 id="3、Redis数据结构"><a href="#3、Redis数据结构" class="headerlink" title="3、Redis数据结构"></a>3、Redis数据结构</h2><h2 id="4、Redis宕机数据怎么办？"><a href="#4、Redis宕机数据怎么办？" class="headerlink" title="4、Redis宕机数据怎么办？"></a>4、Redis宕机数据怎么办？</h2><h2 id="5、Redis-AOP怎么优化权限管理那块性能？"><a href="#5、Redis-AOP怎么优化权限管理那块性能？" class="headerlink" title="5、Redis + AOP怎么优化权限管理那块性能？"></a>5、Redis + AOP怎么优化权限管理那块性能？</h2><h2 id="6、SpringApplication-run做了哪些事情？"><a href="#6、SpringApplication-run做了哪些事情？" class="headerlink" title="6、SpringApplication.run做了哪些事情？"></a>6、SpringApplication.run做了哪些事情？</h2><p>主要分两步：</p><ul><li><h2 id="创建SpringApplication对象"><a href="#创建SpringApplication对象" class="headerlink" title="创建SpringApplication对象"></a>创建SpringApplication对象</h2></li><li>调用其run方法</li></ul><h2 id="7、分库分表了解嘛？能说下Mycat是如何做分库分表的嘛？"><a href="#7、分库分表了解嘛？能说下Mycat是如何做分库分表的嘛？" class="headerlink" title="7、分库分表了解嘛？能说下Mycat是如何做分库分表的嘛？"></a>7、分库分表了解嘛？能说下Mycat是如何做分库分表的嘛？</h2><h2 id="8、了解目前的主流微服务框架嘛？"><a href="#8、了解目前的主流微服务框架嘛？" class="headerlink" title="8、了解目前的主流微服务框架嘛？"></a>8、了解目前的主流微服务框架嘛？</h2><h2 id="9、Dubbo里面的协议了解吗？能说说序列化和反序列化嘛？"><a href="#9、Dubbo里面的协议了解吗？能说说序列化和反序列化嘛？" class="headerlink" title="9、Dubbo里面的协议了解吗？能说说序列化和反序列化嘛？"></a>9、Dubbo里面的协议了解吗？能说说序列化和反序列化嘛？</h2><h2 id="10、手撕算法：快排，二分查找"><a href="#10、手撕算法：快排，二分查找" class="headerlink" title="10、手撕算法：快排，二分查找"></a>10、手撕算法：快排，二分查找</h2><h1 id="2021-07-02（商汤Java实习一面）"><a href="#2021-07-02（商汤Java实习一面）" class="headerlink" title="2021-07-02（商汤Java实习一面）"></a>2021-07-02（商汤Java实习一面）</h1><h2 id="1、手撕算法：判断一个链表是否有环，能用O-1-空间实现吗？（快慢指针）"><a href="#1、手撕算法：判断一个链表是否有环，能用O-1-空间实现吗？（快慢指针）" class="headerlink" title="1、手撕算法：判断一个链表是否有环，能用O(1)空间实现吗？（快慢指针）"></a>1、手撕算法：判断一个链表是否有环，能用O(1)空间实现吗？（快慢指针）</h2><h2 id="2、讲讲Java多态"><a href="#2、讲讲Java多态" class="headerlink" title="2、讲讲Java多态"></a>2、讲讲Java多态</h2><h2 id="3、Java集合框架了解嘛？分为哪几类？"><a href="#3、Java集合框架了解嘛？分为哪几类？" class="headerlink" title="3、Java集合框架了解嘛？分为哪几类？"></a>3、Java集合框架了解嘛？分为哪几类？</h2><h2 id="4、说说你对线程安全的理解？"><a href="#4、说说你对线程安全的理解？" class="headerlink" title="4、说说你对线程安全的理解？"></a>4、说说你对线程安全的理解？</h2><h2 id="5、除了加锁，还有什么方法保证线程安全嘛？"><a href="#5、除了加锁，还有什么方法保证线程安全嘛？" class="headerlink" title="5、除了加锁，还有什么方法保证线程安全嘛？"></a>5、除了加锁，还有什么方法保证线程安全嘛？</h2><h2 id="6、能讲讲创建线程池的方式嘛？"><a href="#6、能讲讲创建线程池的方式嘛？" class="headerlink" title="6、能讲讲创建线程池的方式嘛？"></a>6、能讲讲创建线程池的方式嘛？</h2><h2 id="7、讲讲Syncronized加锁原理（分为代码块和方法）"><a href="#7、讲讲Syncronized加锁原理（分为代码块和方法）" class="headerlink" title="7、讲讲Syncronized加锁原理（分为代码块和方法）"></a>7、讲讲Syncronized加锁原理（分为代码块和方法）</h2><h2 id="8、ReentrantLock了解吗？AQS了解吗？"><a href="#8、ReentrantLock了解吗？AQS了解吗？" class="headerlink" title="8、ReentrantLock了解吗？AQS了解吗？"></a>8、ReentrantLock了解吗？AQS了解吗？</h2><h2 id="9、ThreadLocal了解嘛？一般用在什么场景？"><a href="#9、ThreadLocal了解嘛？一般用在什么场景？" class="headerlink" title="9、ThreadLocal了解嘛？一般用在什么场景？"></a>9、ThreadLocal了解嘛？一般用在什么场景？</h2><h2 id="10、讲讲什么是栈内存溢出，堆内存溢出？"><a href="#10、讲讲什么是栈内存溢出，堆内存溢出？" class="headerlink" title="10、讲讲什么是栈内存溢出，堆内存溢出？"></a>10、讲讲什么是栈内存溢出，堆内存溢出？</h2><h2 id="11、堆内存溢出（OOM）怎么排查？"><a href="#11、堆内存溢出（OOM）怎么排查？" class="headerlink" title="11、堆内存溢出（OOM）怎么排查？"></a>11、堆内存溢出（OOM）怎么排查？</h2><h2 id="12、说说你了解的设计模式？"><a href="#12、说说你了解的设计模式？" class="headerlink" title="12、说说你了解的设计模式？"></a>12、说说你了解的设计模式？</h2><h2 id="13、说说你对Spring-AOP的理解，AOP底层实现原理？"><a href="#13、说说你对Spring-AOP的理解，AOP底层实现原理？" class="headerlink" title="13、说说你对Spring AOP的理解，AOP底层实现原理？"></a>13、说说你对Spring AOP的理解，AOP底层实现原理？</h2><h2 id="14、讲讲Spring-IOC"><a href="#14、讲讲Spring-IOC" class="headerlink" title="14、讲讲Spring IOC"></a>14、讲讲Spring IOC</h2><h2 id="15、消息队列熟悉嘛？一般什么场景会用？"><a href="#15、消息队列熟悉嘛？一般什么场景会用？" class="headerlink" title="15、消息队列熟悉嘛？一般什么场景会用？"></a>15、消息队列熟悉嘛？一般什么场景会用？</h2><h2 id="16、MySQL慢查询，一般什么进行分析优化？"><a href="#16、MySQL慢查询，一般什么进行分析优化？" class="headerlink" title="16、MySQL慢查询，一般什么进行分析优化？"></a>16、MySQL慢查询，一般什么进行分析优化？</h2><h2 id="17、HTTP协议状态码有哪些？"><a href="#17、HTTP协议状态码有哪些？" class="headerlink" title="17、HTTP协议状态码有哪些？"></a>17、HTTP协议状态码有哪些？</h2><h2 id="18、反问"><a href="#18、反问" class="headerlink" title="18、反问"></a>18、反问</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210710184129310.png" alt="image-20210710184129310"></p><p>二面三面</p><p>不记得了，主要聊的实验室项目和个人项目，问了下计网，数据库</p><h1 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h1><p>一面</p><h2 id="1、ARP协议工作原理？如何解决ARP攻击？"><a href="#1、ARP协议工作原理？如何解决ARP攻击？" class="headerlink" title="1、ARP协议工作原理？如何解决ARP攻击？"></a>1、ARP协议工作原理？如何解决ARP攻击？</h2><h2 id="2、HTTP-Cookie和Session的区别"><a href="#2、HTTP-Cookie和Session的区别" class="headerlink" title="2、HTTP Cookie和Session的区别"></a>2、HTTP Cookie和Session的区别</h2><h2 id="3、简要介绍下TCP、UDP"><a href="#3、简要介绍下TCP、UDP" class="headerlink" title="3、简要介绍下TCP、UDP"></a>3、简要介绍下TCP、UDP</h2><h2 id="4、HTTP和HTTPS区别"><a href="#4、HTTP和HTTPS区别" class="headerlink" title="4、HTTP和HTTPS区别"></a>4、HTTP和HTTPS区别</h2><h2 id="5、拥塞控制算法"><a href="#5、拥塞控制算法" class="headerlink" title="5、拥塞控制算法"></a>5、拥塞控制算法</h2><h2 id="6、select和epoll区别"><a href="#6、select和epoll区别" class="headerlink" title="6、select和epoll区别"></a>6、select和epoll区别</h2><h2 id="7、进程通信方式"><a href="#7、进程通信方式" class="headerlink" title="7、进程通信方式"></a>7、进程通信方式</h2><h2 id="8、虚拟化和容器"><a href="#8、虚拟化和容器" class="headerlink" title="8、虚拟化和容器"></a>8、虚拟化和容器</h2><h2 id="9、某个命令很慢，怎么排查"><a href="#9、某个命令很慢，怎么排查" class="headerlink" title="9、某个命令很慢，怎么排查"></a>9、某个命令很慢，怎么排查</h2><h2 id="10、僵尸进程"><a href="#10、僵尸进程" class="headerlink" title="10、僵尸进程"></a>10、僵尸进程</h2><h2 id="11、实验室项目"><a href="#11、实验室项目" class="headerlink" title="11、实验室项目"></a>11、实验室项目</h2><h2 id="12、算法：正则表达式匹配"><a href="#12、算法：正则表达式匹配" class="headerlink" title="12、算法：正则表达式匹配"></a>12、算法：正则表达式匹配</h2><p>二面：</p><h2 id="1、TCP通信过程中，包序列号是如何变化的？"><a href="#1、TCP通信过程中，包序列号是如何变化的？" class="headerlink" title="1、TCP通信过程中，包序列号是如何变化的？"></a>1、TCP通信过程中，包序列号是如何变化的？</h2><h2 id="2、TCP可靠性怎么保证？"><a href="#2、TCP可靠性怎么保证？" class="headerlink" title="2、TCP可靠性怎么保证？"></a>2、TCP可靠性怎么保证？</h2><h2 id="3、HTTP-GET-POST有什么区别？"><a href="#3、HTTP-GET-POST有什么区别？" class="headerlink" title="3、HTTP GET POST有什么区别？"></a>3、HTTP GET POST有什么区别？</h2><h2 id="4、流量控制算法"><a href="#4、流量控制算法" class="headerlink" title="4、流量控制算法"></a>4、流量控制算法</h2><h2 id="5、进程、线程和协程区别？"><a href="#5、进程、线程和协程区别？" class="headerlink" title="5、进程、线程和协程区别？"></a>5、进程、线程和协程区别？</h2><h2 id="6、如何查找端口为8081的进程？"><a href="#6、如何查找端口为8081的进程？" class="headerlink" title="6、如何查找端口为8081的进程？"></a>6、如何查找端口为8081的进程？</h2><p>netstat -nlp | grep 8081</p><h2 id="7、实验室项目"><a href="#7、实验室项目" class="headerlink" title="7、实验室项目"></a>7、实验室项目</h2><h2 id="8、个人项目"><a href="#8、个人项目" class="headerlink" title="8、个人项目"></a>8、个人项目</h2><h2 id="9、MySQL索引"><a href="#9、MySQL索引" class="headerlink" title="9、MySQL索引"></a>9、MySQL索引</h2><h2 id="10、Redis持久化"><a href="#10、Redis持久化" class="headerlink" title="10、Redis持久化"></a>10、Redis持久化</h2><h2 id="11、算法：最后可以转化为判断一个有向图里是否有环"><a href="#11、算法：最后可以转化为判断一个有向图里是否有环" class="headerlink" title="11、算法：最后可以转化为判断一个有向图里是否有环"></a>11、算法：最后可以转化为判断一个有向图里是否有环</h2><p>三面：</p><h2 id="1、实验室项目"><a href="#1、实验室项目" class="headerlink" title="1、实验室项目"></a>1、实验室项目</h2><h2 id="2、如何实现LRU？"><a href="#2、如何实现LRU？" class="headerlink" title="2、如何实现LRU？"></a>2、如何实现LRU？</h2><p>双向链表 + 哈希表</p><h2 id="3、介绍一下平衡树和红黑树"><a href="#3、介绍一下平衡树和红黑树" class="headerlink" title="3、介绍一下平衡树和红黑树"></a>3、介绍一下平衡树和红黑树</h2><h2 id="4、如何预防SQL注入攻击？"><a href="#4、如何预防SQL注入攻击？" class="headerlink" title="4、如何预防SQL注入攻击？"></a>4、如何预防SQL注入攻击？</h2><h2 id="5、手写一个单例模式（双重校验锁）"><a href="#5、手写一个单例模式（双重校验锁）" class="headerlink" title="5、手写一个单例模式（双重校验锁）"></a>5、手写一个单例模式（双重校验锁）</h2><h2 id="6、ACID介绍下，MySQL是如何实现的？"><a href="#6、ACID介绍下，MySQL是如何实现的？" class="headerlink" title="6、ACID介绍下，MySQL是如何实现的？"></a>6、ACID介绍下，MySQL是如何实现的？</h2><h2 id="7、如何维护一个热搜日排行榜"><a href="#7、如何维护一个热搜日排行榜" class="headerlink" title="7、如何维护一个热搜日排行榜"></a>7、如何维护一个热搜日排行榜</h2><h2 id="8、算法：二叉树最大路径和"><a href="#8、算法：二叉树最大路径和" class="headerlink" title="8、算法：二叉树最大路径和"></a>8、算法：二叉树最大路径和</h2><h1 id="虾皮"><a href="#虾皮" class="headerlink" title="虾皮"></a>虾皮</h1><p>一面</p><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><h2 id="MySQL主键索引和唯一索引区别"><a href="#MySQL主键索引和唯一索引区别" class="headerlink" title="MySQL主键索引和唯一索引区别"></a>MySQL主键索引和唯一索引区别</h2><h2 id="MySQL主从是怎么做的"><a href="#MySQL主从是怎么做的" class="headerlink" title="MySQL主从是怎么做的"></a>MySQL主从是怎么做的</h2><h2 id="Redis持久化机制，AOF文件过大怎么办？（AOF重写）"><a href="#Redis持久化机制，AOF文件过大怎么办？（AOF重写）" class="headerlink" title="Redis持久化机制，AOF文件过大怎么办？（AOF重写）"></a>Redis持久化机制，AOF文件过大怎么办？（AOF重写）</h2><h2 id="Redis主从怎么做的？"><a href="#Redis主从怎么做的？" class="headerlink" title="Redis主从怎么做的？"></a>Redis主从怎么做的？</h2><h2 id="项目里怎么用的Redis"><a href="#项目里怎么用的Redis" class="headerlink" title="项目里怎么用的Redis"></a>项目里怎么用的Redis</h2><h2 id="Redis内存淘汰策略，你怎么实现LRU"><a href="#Redis内存淘汰策略，你怎么实现LRU" class="headerlink" title="Redis内存淘汰策略，你怎么实现LRU"></a>Redis内存淘汰策略，你怎么实现LRU</h2><h2 id="Linux-IO多路复用有哪些？区别？"><a href="#Linux-IO多路复用有哪些？区别？" class="headerlink" title="Linux IO多路复用有哪些？区别？"></a>Linux IO多路复用有哪些？区别？</h2><h2 id="Linux进程和线程，协程，Java里有协程框架嘛？（quasar）"><a href="#Linux进程和线程，协程，Java里有协程框架嘛？（quasar）" class="headerlink" title="Linux进程和线程，协程，Java里有协程框架嘛？（quasar）"></a>Linux进程和线程，协程，Java里有协程框架嘛？（quasar）</h2><h2 id="进程上下文切换和线程上下文切换分别怎么做的？"><a href="#进程上下文切换和线程上下文切换分别怎么做的？" class="headerlink" title="进程上下文切换和线程上下文切换分别怎么做的？"></a>进程上下文切换和线程上下文切换分别怎么做的？</h2><h2 id="Linux-进程的状态，Java线程状态"><a href="#Linux-进程的状态，Java线程状态" class="headerlink" title="Linux 进程的状态，Java线程状态"></a>Linux 进程的状态，Java线程状态</h2><h2 id="如何从阻塞状态到运行状态？"><a href="#如何从阻塞状态到运行状态？" class="headerlink" title="如何从阻塞状态到运行状态？"></a>如何从阻塞状态到运行状态？</h2><h2 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h2><h2 id="Java线程间通信"><a href="#Java线程间通信" class="headerlink" title="Java线程间通信"></a>Java线程间通信</h2><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h2 id="Linux下如何查看一个进程"><a href="#Linux下如何查看一个进程" class="headerlink" title="Linux下如何查看一个进程"></a>Linux下如何查看一个进程</h2><h2 id="排序算法了解哪些？哪些不稳定？"><a href="#排序算法了解哪些？哪些不稳定？" class="headerlink" title="排序算法了解哪些？哪些不稳定？"></a>排序算法了解哪些？哪些不稳定？</h2><h2 id="一致性哈希了解吗？讲讲原理？哪里有用到？"><a href="#一致性哈希了解吗？讲讲原理？哪里有用到？" class="headerlink" title="一致性哈希了解吗？讲讲原理？哪里有用到？"></a>一致性哈希了解吗？讲讲原理？哪里有用到？</h2><h2 id="HTTP2-0和1-1区别"><a href="#HTTP2-0和1-1区别" class="headerlink" title="HTTP2.0和1.1区别"></a>HTTP2.0和1.1区别</h2><h2 id="HTTP状态码有哪些？"><a href="#HTTP状态码有哪些？" class="headerlink" title="HTTP状态码有哪些？"></a>HTTP状态码有哪些？</h2><h2 id="301，-302区别？短链接技术使用的是哪个？（各有优势）"><a href="#301，-302区别？短链接技术使用的是哪个？（各有优势）" class="headerlink" title="301， 302区别？短链接技术使用的是哪个？（各有优势）"></a>301， 302区别？短链接技术使用的是哪个？（各有优势）</h2><p>301：永久移动</p><p>302：临时移动</p><h2 id="讲讲Cookie和Session的区别"><a href="#讲讲Cookie和Session的区别" class="headerlink" title="讲讲Cookie和Session的区别"></a>讲讲Cookie和Session的区别</h2><h2 id="XSS攻击了解吗？怎么预防？"><a href="#XSS攻击了解吗？怎么预防？" class="headerlink" title="XSS攻击了解吗？怎么预防？"></a>XSS攻击了解吗？怎么预防？</h2><h2 id="SQL注入攻击了解吗？怎么预防？"><a href="#SQL注入攻击了解吗？怎么预防？" class="headerlink" title="SQL注入攻击了解吗？怎么预防？"></a>SQL注入攻击了解吗？怎么预防？</h2><h2 id="做项目遇到过跨域问题嘛？怎么解决的？"><a href="#做项目遇到过跨域问题嘛？怎么解决的？" class="headerlink" title="做项目遇到过跨域问题嘛？怎么解决的？"></a>做项目遇到过跨域问题嘛？怎么解决的？</h2><h2 id="算法：三数之和"><a href="#算法：三数之和" class="headerlink" title="算法：三数之和"></a>算法：三数之和</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> 线程池 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210623</title>
      <link href="2021/06/21/20210623/"/>
      <url>2021/06/21/20210623/</url>
      
        <content type="html"><![CDATA[<p>本周工作总结：</p><p>在三台CentOS7服务器上做一个单体Maven项目的持续集成流程测试（从GitLab拉取指定分支代码，代码检测，编译，打包部署，发送构建结果邮件），包括：</p><ul><li>带参数的自动化构建流程</li><li>邮件服务器</li><li>SonarCube代码审查（Java，C++均可用）</li></ul><p>下一步工作计划：</p><ul><li>在四台CentOS7服务器上搭建Jenkins+SpringCloud+Docker微服务持续集成环境（自己找一个微服务前后端分离项目）</li><li>再添加一台生产部署服务器，实现集群高可用部署</li><li>基于K8S+Docker搭建Jenkins主从分布式构建环境</li><li>将ma基于K8S+Docker+Jenkins部署上云</li></ul><h1 id="1、Maven项目的持续集成流程"><a href="#1、Maven项目的持续集成流程" class="headerlink" title="1、Maven项目的持续集成流程"></a>1、Maven项目的持续集成流程</h1><table><thead><tr><th>名称</th><th>IP</th><th>安装软件</th></tr></thead><tbody><tr><td>代码托管服务器</td><td>222.20.75.178</td><td>Gitlab-12.4.2</td></tr><tr><td>持续集成服务器</td><td>222.20.76.204</td><td>Jenkins-2.289.1, JDK1.8, Maven3.6.2, Git-1.8.3.1，SonarCube</td></tr><tr><td>应用测试服务器</td><td>222.20.72.139</td><td>JDK1.8， Tomcat8.5</td></tr></tbody></table><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210622155432347.png" alt="image-20210622155432347"></p><h2 id="1-1、使用Maven-Integration-plugin"><a href="#1-1、使用Maven-Integration-plugin" class="headerlink" title="1.1、使用Maven Integration plugin"></a>1.1、使用Maven Integration plugin</h2><p>测试一个Maven项目</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/222.20.76.204_8888_job_web_demo_maven_configure.png" alt="222.20.76.204_8888_job_web_demo_maven_configure"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/222.20.76.204_8888_job_web_demo_maven_1_console.png" alt="222.20.76.204_8888_job_web_demo_maven_1_console"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621191654923.png" alt="image-20210621191654923"></p><p>下面修改代码（添加一个增加用户超链接），推送到GitLab服务器</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621192226124.png" alt="image-20210621192226124"></p><p>然后重新在Jenkins里构建该项目，可以看到代码已经更新了</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621192416122.png" alt="image-20210621192416122"></p><h2 id="1-2、使用Pipeline"><a href="#1-2、使用Pipeline" class="headerlink" title="1.2、使用Pipeline"></a>1.2、使用Pipeline</h2><p>pipeline是一套运行在Jenkins上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p><p>优点：</p><ul><li>代码：以代码的形式实现，通常被检入源代码控制，使团队能够编辑，审查和迭代其传送流程</li><li>多功能：Pipeline支持现实世界中复杂的持续交付要求。它支持fork/join、循环执行，并行执行任务的功能。</li><li>可扩展：Pipeline插件支持其DSL的自定义扩展 ，以及与其他插件集成的多个选项。</li></ul><p>pipeline代码编写：</p><ul><li>Pipeline 支持两种语法：<strong>Declarative</strong>(声明式)和 <strong>Scripted Pipeline</strong>(脚本式)语法，Jenkins2.0后推荐声明式语法</li><li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfifile 脚本文件放入项目源码库中，一般使用后者</li></ul><p>和1.1等价的pipeline代码如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621201626768.png" alt="image-20210621201626768"></p><blockquote><p>stages：代表整个流水线的所有执行阶段。通常stages只有1个，里面包含多个stage</p><p>stage：代表流水线中的某个阶段，可能出现n个。一般分为拉取代码，编译构建，部署等阶段。</p><p>steps：代表一个阶段内需要执行的逻辑。steps里面是shell脚本，git拉取代码，ssh远程发布等任意内容。</p></blockquote><p>Jenkins构建结果如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/222.20.76.204_8888_job_web_demo_pipeline_3_console.png" alt="222.20.76.204_8888_job_web_demo_pipeline_3_console"></p><h2 id="1-3、自动化构建"><a href="#1-3、自动化构建" class="headerlink" title="1.3、自动化构建"></a>1.3、自动化构建</h2><p>Jenkins内置4种构建触发器：</p><ul><li><p>触发远程构建</p></li><li><p>其他工程构建后触发（Build after other projects are build）</p></li><li><p>定时构建（Build periodically）</p></li><li><p>轮询SCM（Poll SCM）</p></li><li><p>Git hook</p></li></ul><h3 id="1-3-1、触发远程构建"><a href="#1-3-1、触发远程构建" class="headerlink" title="1.3.1、触发远程构建"></a>1.3.1、触发远程构建</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621203020729.png" alt="image-20210621203020729"></p><p>远程主机通过在浏览器输入以下命令即可远程触发Jenkins的构建</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621203801300.png" alt="image-20210621203801300"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621203729733.png" alt="image-20210621203729733"></p><h3 id="1-3-2、其他工程构建后触发"><a href="#1-3-2、其他工程构建后触发" class="headerlink" title="1.3.2、其他工程构建后触发"></a>1.3.2、其他工程构建后触发</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621204506968.png" alt="image-20210621204506968"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621204429997.png" alt="image-20210621204429997"></p><h3 id="1-3-3、定时构建"><a href="#1-3-3、定时构建" class="headerlink" title="1.3.3、定时构建"></a>1.3.3、定时构建</h3><p>需要编写一个定时字符串，格式是： 分 时 日 月 周</p><p>如：</p><blockquote><p>每隔两分钟构建： H/2 * * * *</p><p>每天8点，12点，20点构建一次：0 8,12,20 * * *</p></blockquote><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621205934709.png" alt="image-20210621205934709"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621210007724.png" alt="image-20210621210007724"></p><h3 id="1-3-4、轮询SCM"><a href="#1-3-4、轮询SCM" class="headerlink" title="1.3.4、轮询SCM"></a>1.3.4、轮询SCM</h3><p>轮询SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。因为会定时扫描整个项目是否变更，增大了Jenkins的负担，不推荐。</p><h3 id="1-3-5、Git-hook"><a href="#1-3-5、Git-hook" class="headerlink" title="1.3.5、Git hook"></a>1.3.5、Git hook</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621211044838.png" alt="image-20210621211044838"></p><p>安装如下插件：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621211248293.png" alt="image-20210621211248293"></p><p>一系列配置之后，更改源代码并push到GitLab仓库，webhook会发送构建请求给Jenkins，触发Jenkins自动构建，测试结果如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621212611816.png" alt="image-20210621212611816"></p><h2 id="1-4、参数化构建"><a href="#1-4、参数化构建" class="headerlink" title="1.4、参数化构建"></a>1.4、参数化构建</h2><p>有时在项目构建的过程中，我们需要根据用户的输入动态传入一些参数，从而影响整个构建结果，这时我们可以使用参数化构建。</p><p>Jenkins支持如下8种参数：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621214221823.png" alt="image-20210621214221823"></p><p>例如我们输入要构建的GitLab分支名称来部署不同分支项目</p><p>创建新分支v1</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621215216888.png" alt="image-20210621215216888"></p><p>添加一个名称为branch的文本参数</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621220218278.png" alt="image-20210621220218278"></p><p>在Jenkinsfile里修改分支为该参数</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621220319497.png" alt="image-20210621220319497"></p><p>下面进行测试：</p><p>拉取master分支代码</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621220202635.png" alt="image-20210621220202635"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621220434563.png" alt="image-20210621220434563"></p><p>拉取v1分支代码：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621220738227.png" alt="image-20210621220738227"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210621220715486.png" alt="image-20210621220715486"></p><h2 id="1-5、配置邮件服务器发送构建结果"><a href="#1-5、配置邮件服务器发送构建结果" class="headerlink" title="1.5、配置邮件服务器发送构建结果"></a>1.5、配置邮件服务器发送构建结果</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210622134411454.png" alt="image-20210622134411454"></p><h2 id="1-6、配置SonarCube进行代码审查"><a href="#1-6、配置SonarCube进行代码审查" class="headerlink" title="1.6、配置SonarCube进行代码审查"></a>1.6、配置SonarCube进行代码审查</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210622155118186.png" alt="image-20210622155118186"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210622154932777.png" alt="image-20210622154932777"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210622154900204.png" alt="image-20210622154900204"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> SonarCube </tag>
            
            <tag> Docker </tag>
            
            <tag> K8S </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> GitLab </tag>
            
            <tag> Maven </tag>
            
            <tag> Tomcat </tag>
            
            <tag> Jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ds梳理</title>
      <link href="2021/06/19/ds-shu-li/"/>
      <url>2021/06/19/ds-shu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1、项目介绍"><a href="#1、项目介绍" class="headerlink" title="1、项目介绍"></a>1、项目介绍</h1><ul><li>该电商项目包括商品管理、订单管理、营销管理、权限管理四个子模块，整个项目基于SpringBoot + Vue实现，前后端分离部署，使用Redis + AOP做缓存来优化系统权限管理功能，提高了系统的并发性能，使用ElasticSearch作为搜索引擎来提高搜索速度。</li><li>我主要负责商品管理模块和权限管理模块，实现了商品列表高性能搜索、添加商品、用户权限管理、用户信息缓存等功能，保障了系统的安全性，提高了商品管理模块在高并发环境下的响应速度。</li><li>后台技术栈：SpringBoot、SSM、Redis、Spring Security + Jwt、ElasticSearch等</li></ul><h1 id="2、商品管理模块"><a href="#2、商品管理模块" class="headerlink" title="2、商品管理模块"></a>2、商品管理模块</h1><h2 id="2-1、商品列表"><a href="#2-1、商品列表" class="headerlink" title="2.1、商品列表"></a>2.1、商品列表</h2><h3 id="2-1-1、商品数据列表-分页查询PageHelper插件"><a href="#2-1-1、商品数据列表-分页查询PageHelper插件" class="headerlink" title="2.1.1、商品数据列表(分页查询PageHelper插件)"></a>2.1.1、商品数据列表(分页查询PageHelper插件)</h3><ul><li>编号</li><li>商品图片</li><li>商品名称</li><li>价格</li><li>货号</li><li>标签<ul><li>上架</li><li>新品</li><li>推荐</li></ul></li><li>SKU库存：pms_sku_stock表<ul><li>SKU编号</li><li>尺码</li><li>颜色</li><li>售价</li><li>库存</li><li>库存预警值</li></ul></li><li>销量</li><li>审核状态</li><li>操作<ul><li>查看</li><li>编辑</li><li>删除</li></ul></li></ul><h3 id="2-1-2、筛选"><a href="#2-1-2、筛选" class="headerlink" title="2.1.2、筛选"></a>2.1.2、筛选</h3><ul><li>全部商品</li><li>条件筛选<ul><li>是否上架</li><li>审核状态</li><li>名称</li><li>货号</li><li>分类</li><li>品牌</li></ul></li></ul><h3 id="2-1-3、批量操作"><a href="#2-1-3、批量操作" class="headerlink" title="2.1.3、批量操作"></a>2.1.3、批量操作</h3><ul><li>上架/下架：将publish_status设为1/0</li><li>设为推荐/不推荐：将recommand_status设为1/0</li><li>设为新品/非新品：将new_state设为1/0</li><li>移入回收站：将商品delete_state设为1</li></ul><h2 id="2-2、添加商品"><a href="#2-2、添加商品" class="headerlink" title="2.2、添加商品"></a>2.2、添加商品</h2><ul><li>商品基本信息 ：pms_product表<ul><li>商品分类</li><li>商品名称</li><li>品牌</li><li>货架</li><li>售价</li><li>库存</li><li>计量单位</li></ul></li><li>商品促销信息<ul><li>积分</li><li>是否预告商品</li><li>是否上架</li><li>是否新品</li><li>是否推荐</li><li>关键字/备注</li><li>优惠方式<ul><li>无优惠</li><li>特惠促销</li><li>满减：pms_product_full_reduction表</li><li>会员价：pms_product_member表</li><li>阶梯价：pms_product_ladder表</li></ul></li></ul></li><li>商品属性信息：pms_product_attribute_value表<ul><li>属性类型</li><li>商品规格参数</li><li>图片</li></ul></li><li>商品关联信息<ul><li>关联专题：cms_subject_product_relation表</li><li>关联优选：cms_prefrence_area_product_relation表</li></ul></li></ul><h2 id="2-3、品牌管理"><a href="#2-3、品牌管理" class="headerlink" title="2.3、品牌管理"></a>2.3、品牌管理</h2><h3 id="2-3-1、品牌名称搜索"><a href="#2-3-1、品牌名称搜索" class="headerlink" title="2.3.1、品牌名称搜索"></a>2.3.1、品牌名称搜索</h3><ul><li>品牌名称关键字</li></ul><h3 id="2-3-2、品牌列表：pms-brand表"><a href="#2-3-2、品牌列表：pms-brand表" class="headerlink" title="2.3.2、品牌列表：pms_brand表"></a>2.3.2、品牌列表：pms_brand表</h3><ul><li>编号</li><li>名称</li><li>首字母</li><li>制造商</li><li>是否显示</li><li>操作：编辑、删除</li></ul><h3 id="2-3-3、批量操作"><a href="#2-3-3、批量操作" class="headerlink" title="2.3.3、批量操作"></a>2.3.3、批量操作</h3><ul><li>显示/隐藏品牌</li></ul><h3 id="2-3-4、添加品牌"><a href="#2-3-4、添加品牌" class="headerlink" title="2.3.4、添加品牌"></a>2.3.4、添加品牌</h3><ul><li>名称</li><li>首字母</li><li>logo</li><li>品牌区大图</li><li>品牌故事</li><li>是否显示</li><li>制造商</li></ul><h1 id="3、权限管理模块"><a href="#3、权限管理模块" class="headerlink" title="3、权限管理模块"></a>3、权限管理模块</h1><h2 id="3-1、使用的表"><a href="#3-1、使用的表" class="headerlink" title="3.1、使用的表"></a>3.1、使用的表</h2><ul><li><code>ums_admin</code>：后台用户表</li><li><code>ums_role</code>：后台用户角色表</li><li><code>ums_permission</code>：后台用户权限表</li><li><code>ums_admin_role_relation</code>：后台用户和角色关系表，用户与角色是多对多关系</li><li><code>ums_role_permission_relation</code>：后台用户角色和权限关系表，角色与权限是多对多关系</li><li><code>ums_admin_permission_relation</code>：后台用户和权限关系表(除角色中定义的权限以外的加减权限)，加权限是指用户比角色多出的权限，减权限是指用户比角色少的权限</li></ul><h2 id="3-2、用于生成和解析Token的工具类"><a href="#3-2、用于生成和解析Token的工具类" class="headerlink" title="3.2、用于生成和解析Token的工具类"></a>3.2、用于生成和解析Token的工具类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JwtTokenUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLAIM_KEY_USERNAME <span class="token operator">=</span> <span class="token string">"sub"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLAIM_KEY_CREATED <span class="token operator">=</span> <span class="token string">"created"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.secret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String secret<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.expiration}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long expiration<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据负责生成JWT的token     */</span>    <span class="token keyword">private</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token function">generateExpirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从token中获取JWT中的负载     */</span>    <span class="token keyword">private</span> Claims <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"JWT格式验证失败:{}"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> claims<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成token的过期时间     */</span>    <span class="token keyword">private</span> Date <span class="token function">generateExpirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiration <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从token中获取登录用户名     */</span>    <span class="token keyword">public</span> String <span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            username <span class="token operator">=</span>  claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            username <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证token是否还有效     *     * @param token       客户端传入的token     * @param userDetails 从数据库中查询出来的用户信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validateToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">,</span> UserDetails userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> <span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断token是否已经失效     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isTokenExpired</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date expiredDate <span class="token operator">=</span> <span class="token function">getExpiredDateFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expiredDate<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从token中获取过期时间     */</span>    <span class="token keyword">private</span> Date <span class="token function">getExpiredDateFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> claims<span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据用户信息生成token     */</span>    <span class="token keyword">public</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>UserDetails userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_USERNAME<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_CREATED<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断token是否可以被刷新     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRefresh</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 刷新token     */</span>    <span class="token keyword">public</span> String <span class="token function">refreshToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_CREATED<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3、添加Spring-Security配置类"><a href="#3-3、添加Spring-Security配置类" class="headerlink" title="3.3、添加Spring Security配置类"></a>3.3、添加Spring Security配置类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsAdminService adminService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestfulAccessDeniedHandler restfulAccessDeniedHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestAuthenticationEntryPoint restAuthenticationEntryPoint<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity httpSecurity<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        httpSecurity<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 由于使用的是JWT，我们这里不需要csrf</span>                <span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 基于token，所以不需要session</span>                <span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span>SessionCreationPolicy<span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 允许对于网站静态资源的无授权访问</span>                        <span class="token string">"/"</span><span class="token punctuation">,</span>                        <span class="token string">"/*.html"</span><span class="token punctuation">,</span>                        <span class="token string">"/favicon.ico"</span><span class="token punctuation">,</span>                        <span class="token string">"/**/*.html"</span><span class="token punctuation">,</span>                        <span class="token string">"/**/*.css"</span><span class="token punctuation">,</span>                        <span class="token string">"/**/*.js"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger-resources/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/v2/api-docs/**"</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/admin/login"</span><span class="token punctuation">,</span> <span class="token string">"/admin/register"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 对登录注册要允许匿名访问</span>                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>OPTIONS<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//跨域请求会先进行一次options请求</span>                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//                .antMatchers("/**")//测试时全部运行访问</span><span class="token comment" spellcheck="true">//                .permitAll()</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 除上面外的所有请求全部需要鉴权认证</span>                <span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 禁用缓存</span>        httpSecurity<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加JWT filter</span>        httpSecurity<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token function">jwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UsernamePasswordAuthenticationFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加自定义未授权和未登录结果返回</span>        httpSecurity<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>restfulAccessDeniedHandler<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>restAuthenticationEntryPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取登录用户信息</span>        <span class="token keyword">return</span> username <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            UmsAdmin admin <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">getAdminByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>admin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>UmsPermission<span class="token operator">></span> permissionList <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">getPermissionList</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AdminUserDetails</span><span class="token punctuation">(</span>admin<span class="token punctuation">,</span>permissionList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JwtAuthenticationTokenFilter <span class="token function">jwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtAuthenticationTokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AuthenticationManager <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>configure(HttpSecurity httpSecurity)：用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器；</li><li>configure(AuthenticationManagerBuilder auth)：用于配置UserDetailsService及PasswordEncoder；</li><li>RestfulAccessDeniedHandler：当用户没有访问权限时的处理器，用于返回JSON格式的处理结果；</li><li>RestAuthenticationEntryPoint：当未登录或token失效时，返回JSON格式的结果；</li><li>UserDetailsService:SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现；</li><li>UserDetails：SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限），需要自行实现；</li><li>PasswordEncoder：SpringSecurity定义的用于对密码进行编码及比对的接口，目前使用的是BCryptPasswordEncoder；</li><li>JwtAuthenticationTokenFilter：在用户名和密码校验前添加的过滤器，如果有jwt的token，会自行根据token信息进行登录。</li></ul><h2 id="3-4、添加RestfulAccessDeniedHandler"><a href="#3-4、添加RestfulAccessDeniedHandler" class="headerlink" title="3.4、添加RestfulAccessDeniedHandler"></a>3.4、添加RestfulAccessDeniedHandler</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 当访问接口没有权限时，自定义的返回结果 * Created by macro on 2018/4/26. */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestfulAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                       HttpServletResponse response<span class="token punctuation">,</span>                       AccessDeniedException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSONUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>CommonResult<span class="token punctuation">.</span><span class="token function">forbidden</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5、添加RestAuthenticationEntryPoint"><a href="#3-5、添加RestAuthenticationEntryPoint" class="headerlink" title="3.5、添加RestAuthenticationEntryPoint"></a>3.5、添加RestAuthenticationEntryPoint</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 当未登录或者token失效访问接口时，自定义的返回结果 * Created by macro on 2018/5/14. */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestAuthenticationEntryPoint</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> AuthenticationException authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSONUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>CommonResult<span class="token punctuation">.</span><span class="token function">unauthorized</span><span class="token punctuation">(</span>authException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-6、添加JwtAuthenticationTokenFilter"><a href="#3-6、添加JwtAuthenticationTokenFilter" class="headerlink" title="3.6、添加JwtAuthenticationTokenFilter"></a>3.6、添加JwtAuthenticationTokenFilter</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JWT登录授权过滤器 * Created by macro on 2018/4/26. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JwtAuthenticationTokenFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDetailsService userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtTokenUtil jwtTokenUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.tokenHeader}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String tokenHeader<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.tokenHead}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String tokenHead<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                    HttpServletResponse response<span class="token punctuation">,</span>                                    FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String authHeader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authHeader <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> authHeader<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHead<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String authToken <span class="token operator">=</span> authHeader<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenHead<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The part after "Bearer "</span>            String username <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"checking username:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                UserDetails userDetails <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>jwtTokenUtil<span class="token punctuation">.</span><span class="token function">validateToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">,</span> userDetails<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> null<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"authenticated user:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>                    SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.7、</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 后台用户管理Controller * Created by macro on 2018/4/26. */</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"UmsAdminController"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"后台用户管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UmsAdminController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.tokenHeader}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String tokenHeader<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.tokenHead}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String tokenHead<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsAdminService adminService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsRoleService roleService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户注册"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/register"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>UmsAdmin<span class="token operator">></span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UmsAdminParam umsAdminParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UmsAdmin umsAdmin <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>umsAdminParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>umsAdmin <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>umsAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"登录以后返回token"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> CommonResult <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UmsAdminLoginParam umsAdminLoginParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>umsAdminLoginParam<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> umsAdminLoginParam<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">validateFailed</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> tokenMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tokenHead"</span><span class="token punctuation">,</span> tokenHead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>tokenMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"刷新token"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/refreshToken"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> CommonResult <span class="token function">refreshToken</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>tokenHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        String refreshToken <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">refreshToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>refreshToken <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token string">"token已经过期！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> tokenMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> refreshToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tokenHead"</span><span class="token punctuation">,</span> tokenHead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>tokenMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"给用户分配角色"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/role/update"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> CommonResult <span class="token function">updateRole</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"adminId"</span><span class="token punctuation">)</span> Long adminId<span class="token punctuation">,</span>                                   <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"roleIds"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> roleIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">updateRole</span><span class="token punctuation">(</span>adminId<span class="token punctuation">,</span> roleIds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"获取指定用户的角色"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/role/{adminId}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>UmsRole<span class="token operator">>></span> <span class="token function">getRoleList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long adminId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>UmsRole<span class="token operator">></span> roleList <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">getRoleList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> CommonResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>roleList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7、添加UmsAdminServiceImpl"><a href="#3-7、添加UmsAdminServiceImpl" class="headerlink" title="3.7、添加UmsAdminServiceImpl"></a>3.7、添加UmsAdminServiceImpl</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 后台用户管理Service实现类 * Created by macro on 2018/4/26. */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UmsAdminServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UmsAdminService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UmsAdminServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtTokenUtil jwtTokenUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> PasswordEncoder passwordEncoder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsAdminMapper adminMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsAdminRoleRelationMapper adminRoleRelationMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsAdminRoleRelationDao adminRoleRelationDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsAdminLoginLogMapper loginLogMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UmsAdminCacheService adminCacheService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UmsAdmin <span class="token function">getAdminByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UmsAdmin admin <span class="token operator">=</span> adminCacheService<span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>admin<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span>  admin<span class="token punctuation">;</span>        UmsAdminExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdminExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andUsernameEqualTo</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UmsAdmin<span class="token operator">></span> adminList <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>adminList <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> adminList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            admin <span class="token operator">=</span> adminList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            adminCacheService<span class="token punctuation">.</span><span class="token function">setAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> admin<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UmsAdmin <span class="token function">register</span><span class="token punctuation">(</span>UmsAdminParam umsAdminParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UmsAdmin umsAdmin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>umsAdminParam<span class="token punctuation">,</span> umsAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        umsAdmin<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        umsAdmin<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询是否有相同用户名的用户</span>        UmsAdminExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdminExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andUsernameEqualTo</span><span class="token punctuation">(</span>umsAdmin<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UmsAdmin<span class="token operator">></span> umsAdminList <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>umsAdminList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将密码进行加密操作</span>        String encodePassword <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>umsAdmin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        umsAdmin<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>encodePassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        adminMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>umsAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> umsAdmin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密码需要客户端加密后传递</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            UserDetails userDetails <span class="token operator">=</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>userDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Asserts<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"密码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>userDetails<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Asserts<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"帐号已被禁用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> null<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            token <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            updateLoginTimeByUsername(username);</span>            <span class="token function">insertLoginLog</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"登录异常:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加登录记录     * @param username 用户名     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertLoginLog</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UmsAdmin admin <span class="token operator">=</span> <span class="token function">getAdminByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>admin<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        UmsAdminLoginLog loginLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdminLoginLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginLog<span class="token punctuation">.</span><span class="token function">setAdminId</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginLog<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletRequestAttributes attributes <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginLog<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>RequestUtil<span class="token punctuation">.</span><span class="token function">getRequestIp</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginLogMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>loginLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据用户名修改登录时间     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateLoginTimeByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UmsAdmin record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        record<span class="token punctuation">.</span><span class="token function">setLoginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UmsAdminExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdminExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andUsernameEqualTo</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        adminMapper<span class="token punctuation">.</span><span class="token function">updateByExampleSelective</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">refreshToken</span><span class="token punctuation">(</span>String oldToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">refreshHeadToken</span><span class="token punctuation">(</span>oldToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UmsAdmin <span class="token function">getItem</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UmsAdmin<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>String keyword<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">,</span> Integer pageNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        UmsAdminExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdminExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UmsAdminExample<span class="token punctuation">.</span>Criteria criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            criteria<span class="token punctuation">.</span><span class="token function">andUsernameLike</span><span class="token punctuation">(</span><span class="token string">"%"</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            example<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andNickNameLike</span><span class="token punctuation">(</span><span class="token string">"%"</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> UmsAdmin admin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        admin<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        UmsAdmin rawAdmin <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rawAdmin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//与原加密密码相同的不需要修改</span>            admin<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//与原加密密码不同的需要加密修改</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                admin<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                admin<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">;</span>        adminCacheService<span class="token punctuation">.</span><span class="token function">delAdmin</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        adminCacheService<span class="token punctuation">.</span><span class="token function">delAdmin</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        adminCacheService<span class="token punctuation">.</span><span class="token function">delResourceList</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateRole</span><span class="token punctuation">(</span>Long adminId<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> roleIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> roleIds <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> roleIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先删除原来的关系</span>        UmsAdminRoleRelationExample adminRoleRelationExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdminRoleRelationExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adminRoleRelationExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andAdminIdEqualTo</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>        adminRoleRelationMapper<span class="token punctuation">.</span><span class="token function">deleteByExample</span><span class="token punctuation">(</span>adminRoleRelationExample<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立新关系</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>roleIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>UmsAdminRoleRelation<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Long roleId <span class="token operator">:</span> roleIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>                UmsAdminRoleRelation roleRelation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdminRoleRelation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                roleRelation<span class="token punctuation">.</span><span class="token function">setAdminId</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>                roleRelation<span class="token punctuation">.</span><span class="token function">setRoleId</span><span class="token punctuation">(</span>roleId<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>roleRelation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            adminRoleRelationDao<span class="token punctuation">.</span><span class="token function">insertList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        adminCacheService<span class="token punctuation">.</span><span class="token function">delResourceList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UmsRole<span class="token operator">></span> <span class="token function">getRoleList</span><span class="token punctuation">(</span>Long adminId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> adminRoleRelationDao<span class="token punctuation">.</span><span class="token function">getRoleList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UmsResource<span class="token operator">></span> <span class="token function">getResourceList</span><span class="token punctuation">(</span>Long adminId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>UmsResource<span class="token operator">></span> resourceList <span class="token operator">=</span> adminCacheService<span class="token punctuation">.</span><span class="token function">getResourceList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CollUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>resourceList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>  resourceList<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        resourceList <span class="token operator">=</span> adminRoleRelationDao<span class="token punctuation">.</span><span class="token function">getResourceList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CollUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>resourceList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            adminCacheService<span class="token punctuation">.</span><span class="token function">setResourceList</span><span class="token punctuation">(</span>adminId<span class="token punctuation">,</span>resourceList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resourceList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updatePassword</span><span class="token punctuation">(</span>UpdateAdminPasswordParam param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">||</span>StrUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getOldPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">||</span>StrUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getNewPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UmsAdminExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UmsAdminExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andUsernameEqualTo</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UmsAdmin<span class="token operator">></span> adminList <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CollUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>adminList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UmsAdmin umsAdmin <span class="token operator">=</span> adminList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getOldPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>umsAdmin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        umsAdmin<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getNewPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adminMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKey</span><span class="token punctuation">(</span>umsAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        adminCacheService<span class="token punctuation">.</span><span class="token function">delAdmin</span><span class="token punctuation">(</span>umsAdmin<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取用户信息</span>        UmsAdmin admin <span class="token operator">=</span> <span class="token function">getAdminByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>admin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>UmsResource<span class="token operator">></span> resourceList <span class="token operator">=</span> <span class="token function">getResourceList</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AdminUserDetails</span><span class="token punctuation">(</span>admin<span class="token punctuation">,</span>resourceList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Redis </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zp梳理</title>
      <link href="2021/06/19/zp-shu-li/"/>
      <url>2021/06/19/zp-shu-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashJoin研究</title>
      <link href="2021/06/15/hashjoin-yan-jiu/"/>
      <url>2021/06/15/hashjoin-yan-jiu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL调优总结</title>
      <link href="2021/06/14/mysql-diao-you-zong-jie/"/>
      <url>2021/06/14/mysql-diao-you-zong-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap源码分析</title>
      <link href="2021/06/14/hashmap-yuan-ma-fen-xi/"/>
      <url>2021/06/14/hashmap-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="1、概览"><a href="#1、概览" class="headerlink" title="1、概览"></a>1、概览</h1><p>HashMap 最早出现在 JDK 1.2中，底层基于散列算法实现。HashMap 允许 null 键和 null 值，在计算哈键的哈希值时，null 键哈希值为 0。HashMap 并不保证键值对的顺序，这意味着在进行某些操作后，键值对的顺序可能会发生变化。另外，需要注意的是，HashMap 是非线程安全类，在多线程环境下可能会存在问题。</p><h1 id="2、原理简述"><a href="#2、原理简述" class="headerlink" title="2、原理简述"></a>2、原理简述</h1><p>HashMap 底层是基于散列算法实现，散列算法分为散列再探测和拉链式。HashMap 则使用了拉链式的散列算法，并在 JDK 1.8 中引入了红黑树优化过长的链表。</p><h1 id="3、属性"><a href="#3、属性" class="headerlink" title="3、属性"></a>3、属性</h1><ul><li>默认初始容量：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>最大容量</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>默认负载因子</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>链表转红黑树阈值</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>红黑树还原为链表阈值</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4、构造函数"><a href="#4、构造函数" class="headerlink" title="4、构造函数"></a>4、构造函数</h1><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>            initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                               loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs an empty &lt;tt>HashMap&lt;/tt> with the specified initial     * capacity and the default load factor (0.75).     *     * @param  initialCapacity the initial capacity.     * @throws IllegalArgumentException if the initial capacity is negative.     */</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs an empty &lt;tt>HashMap&lt;/tt> with the default initial capacity     * (16) and the default load factor (0.75).     */</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// all other fields defaulted</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Constructs a new &lt;tt>HashMap&lt;/tt> with the same mappings as the     * specified &lt;tt>Map&lt;/tt>.  The &lt;tt>HashMap&lt;/tt> is created with     * default load factor (0.75) and an initial capacity sufficient to     * hold the mappings in the specified &lt;tt>Map&lt;/tt>.     *     * @param   m the map whose mappings are to be placed in this map     * @throws  NullPointerException if the specified map is null     */</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> extends K<span class="token punctuation">,</span> <span class="token operator">?</span> extends V<span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span>        <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造方法一共重载了四个，主要初始化了三个参数：</p><ul><li>initialCapacity 初始容量（默认16）： hashMap底层由数组实现+链表（或红黑树）实现，但是还是从数组开始，所以当储存的数据越来越多的时候，就必须进行扩容操作，如果在知道需要储存数据大小的情况下，指定合适的初始容量，可以避免不必要的扩容操作，提升效率</li><li>threshold 阈值：hashMap所能容纳的最大价值对数量，如果超过则需要扩容，计算方式：threshold=initialCapacity*loadFactor（构造方法中直接通过tableSizeFor(initialCapacity)方法进行了赋值，主要原因是在构造方法中，数组table并没有初始化，put方法中进行初始化，同时put方法中也会对threshold进行重新赋值，这个会在后面的源码中进行分析）</li><li>loadFactor 加载因子（默认0.75）：当负载因子较大时，去给table数组扩容的可能性就会少，所以相对占用内存较少（空间上较少），但是每条entry链上的元素会相对较多，查询的时间也会增长（时间上较多）。反之就是，负载因子较少的时候，给table数组扩容的可能性就高，那么内存空间占用就多，但是entry链上的元素就会相对较少，查出的时间也会减少。所以才有了负载因子是时间和空间上的一种折中的说法。所以设置负载因子的时候要考虑自己追求的是时间还是空间上的少。（一般情况下不需要设置，系统给的默认值已经比较适合了）</li></ul><p>我们最常使用的是无参构造，在这个构造方法里面仅仅设置了加载因子为默认值，其他两个参数会在resize方法里面进行初始化，在这里知道这个结论就可以了，下面会在源码里面进行分析； 另外一个带有两个参数的构造方法，里面对初始容量和阈值进行了初始化，对阈值的初始化方法为 tableSizeFor(int cap),看一下源码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 找到大于或等于 cap 的最小2的幂     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借用网上一张图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210614110355623.png" alt="image-20210614110355623"></p><h1 id="5、主要方法"><a href="#5、主要方法" class="headerlink" title="5、主要方法"></a>5、主要方法</h1><h2 id="5-1、查找"><a href="#5-1、查找" class="headerlink" title="5.1、查找"></a>5.1、查找</h2><p>HashMap 的查找操作比较简单，查找步骤与原理篇介绍一致，即先定位键值对所在的桶的位置，然后再对链表或红黑树进行查找。通过这两步即可完成查找，该操作相关代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 定位键值对所在桶的位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// always check first node</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2. 如果 first 是 TreeNode 类型，则调用黑红树查找方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 2. 对链表进行查找</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找的核心逻辑是封装在 getNode 方法中的，getNode 方法源码我已经写了一些注释，应该不难看懂。我们先来看看查找过程的第一步 - 确定桶位置，其实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// index = (n - 1) &amp; hash</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>HashMap 中桶数组的大小 length 总是2的幂，此时，<code>(n - 1) &amp; hash</code> 等价于对 length 取余。但取余的计算效率没有位运算高，所以<code>(n - 1) &amp; hash</code>也是一个小的优化。</p><p>看看计算hash的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 计算键的 hash 值 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看这个方法的逻辑好像是通过位运算重新计算 hash，那么这里为什么要这样做呢？为什么不直接用键的 hashCode 方法产生的 hash 呢？大家先可以思考一下，我把答案写在下面。</p><p>这样做有两个好处，我来简单解释一下。我们再看一下上面求余的计算图，图中的 hash 是由键的 hashCode 产生。计算余数时，由于 n 比较小，hash 只有低4位参与了计算，高位的计算可以认为是无效的。这样导致了计算结果只与低位信息有关，高位数据没发挥作用。为了处理这个缺陷，我们可以上图中的 hash 高4位数据与低4位数据进行异或运算，即 <code>hash ^ (hash &gt;&gt;&gt; 4)</code>。通过这种方式，让高位数据与低位数据进行异或，以此加大低位信息的随机性，变相的让高位数据参与到计算中。</p><p>在 Java 中，hashCode 方法产生的 hash 是 int 类型，32 位宽。前16位为高位，后16位为低位，所以要右移16位。</p><p>上面所说的是重新计算 hash 的一个好处，除此之外，重新计算 hash 的另一个好处是可以增加 hash 的复杂度。当我们覆写 hashCode 方法时，可能会写出分布性不佳的 hashCode 方法，进而导致 hash 的冲突率比较高。通过移位和异或运算，可以让 hash 变得更复杂，进而影响 hash 的分布性。这也就是为什么 HashMap 不直接使用键对象原始 hash 的原因了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xx面经</title>
      <link href="2021/06/10/xx-mian-jing/"/>
      <url>2021/06/10/xx-mian-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="1、腾讯篇"><a href="#1、腾讯篇" class="headerlink" title="1、腾讯篇"></a>1、腾讯篇</h1><p>Java 基础</p><p>4.1.0 JAVA 中的几种基本数据类型是什么，各自占用多少字节。</p><ul><li><p>1字节：byte，boolean（不同操作系统不同）</p></li><li><p>2字节：char，short</p></li><li><p>4字节：int，float</p></li><li><p>8字节：double，long</p></li></ul><p>4.1.1 String 类能被继承吗，为什么。</p><p>不能。因为String类被final关键字修饰，是一个不可变的类，其内部实现是一个final char[] data，data的地址是不可变的。</p><p>4.1.2 String，Stringbuffer，StringBuilder 的区别。</p><ul><li><p>内部实现上：String是用的final char[]，StringBuffer和StringBuilder采用的是继承自AbstractStringBuilder的char[] value，因此value的地址是可变的，因此会有扩容机制进行数组拷贝</p></li><li><p>线程安全上：String因为是不可变的类，因此是线程安全的；StringBuffer里面大部分方法都加了Syncronized关键字进行同步，因此也是线程安全的；StringBuilder没有同步，多线程同时访问会有一致性问题，单线程没有问题，并且效率要比StringBuffer高</p></li><li><p>使用上：如果很少对字符串做修改，大部分操作都是读，选择String；如果经常要修改字符串内容：单线程用StringBuilder，多线程用StringBuffer</p></li></ul><p>4.1.3 ArrayList 和 LinkedList 有什么区别。</p><ul><li>内部实现上：ArrayList是一个Object[], LinkedList是一个双向链表</li><li>使用上：读多写少用ArrayList，经常要修改，删除元素用LinkedList</li><li>线程安全上：两者都是线程不安全的</li></ul><p>4.1.4 讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当 new 的时候，他们的执行顺序。</p><ul><li><p>类加载过程：JVM遇到一条new指针时，首先会在常量池中检查是否有该类的符号引用，如果有，还要检查该类是否被加载，解析，初始化过。如果没有，需要先执行类加载过程。</p><ul><li><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210610112508664.png" alt="image-20210610112508664"></p><ul><li><p>加载：主要做下面三件事情</p><ul><li><p>通过全类名获取定义此类的二进制字节流</p><ul><li><p>类加载器：JVM内置了三个类加载器</p><ul><li>BootstrapClassLoader：最顶层加载器，用c++实现，负责加载%JAVA_HOME%/lib目录下的所有jar包和类</li><li>ExtensionClassLoader：主要负责加载%JRE_HOME%/lib/ext目录下的jar包和类</li><li>AppClassLoader：主要负责加载当前应用classpath下的所有jar包和类</li></ul></li><li><p>双亲委派模型</p><p>类加载的时候，会先判断该类是否已经加载过了，如果是，直接返回；否则系统会选择一个类加载器进行加载。加载的时候会将该请求委派给父类的loadClass()方法进行处理，最终都会交由最顶层BootstrapClassLoader进行处理。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210610114248281.png" alt="image-20210610114248281"></p><p>只要当父类加载器无法处理时，才会给子类处理。</p><p>好处:</p><ul><li>避免了类的重复加载，JVM区分类的方式并非类名，不同加载器加载同一个类文件，最后得到的是不同的类，这样保障了程序的稳定</li><li>保证了Java核心API不被篡改</li></ul></li></ul></li><li><p>将字节流代表的静态存储结构转换成方法区的运行时数据结构</p></li><li><p>在内存生成一个代表该类的Class对象，作为方法区这些数据的访问入口</p></li></ul></li><li><p>验证：校验class字节流是否符合当前jvm规范</p></li><li><p>准备：为<strong>类变量</strong>分配内存并设置变量的初始值(<strong>默认值</strong>)。如果是final修饰的对象则是赋值声明值</p></li><li><p>解析：将常量池的符号引用替换为直接引用</p></li><li><p>初始化：执行类构造器<clinit>(<strong>注意不是对象构造器</strong>)，为<strong>类变量</strong>赋值，执行静态代码块。jvm会保证子类的<client>执行之前，父类的<client>先执行完毕</p></li></ul></li></ul></li><li><p>类加载完成后，会给对象在堆内存中分配内存，分配方式有指针碰撞和空闲列表两种，分别对应的是标记-整理和标记-清除算法</p><ul><li>指针碰撞：内存分为用过和没用过两部分，中间一个分界指针，需要分配内存时，就往未使用部分移动对象大小长度就可以了，适用于内存规整的情况</li><li>空闲列表：将内存分成很多块，记录未使用的块，当需要分配内存时，找一个合适大小的块，然后更新空闲列表，适用于内存不规整的情况</li><li>多线程同步问题解决方案：<ul><li>CAS + 失败重试：多个线程使用CAS的方式更新指针，多线程下只有一个线程可以更新完成，其他线程通过不断重试完成内存指针的重新移动</li><li>TLAB：每个线程提前分配一块内存空间，这个内存空间就是线程本地缓冲TLAB；这样线程每次需要分配内存时，先从TLAB里面取，空间不够的时候再去用同步机制申请一块新的TLAB，这样就降低了同步锁的申请次数</li></ul></li></ul></li><li><p>初始化零值：内存分配完之后，JVM为给该对象的实例字段分配初始零值</p></li><li><p>设置对象头：存放对象的一些元数据</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210610121116523.png" alt="image-20210610121116523"></p></li><li><p>执行构造函数</p><p>- </p></li><li><p>创建对象引用并压入虚拟机栈</p></li></ul><p>完整流程：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210610121332013.png" alt="image-20210610121332013"></p><p>4.1.5 用过哪些 Map 类，都有什么区别，HashMap 是线程安全的吗,并发下使用的 Map 是什么，他们内部原理分别是什么，比如存储方式，hashcode，扩容，默认容量等。</p><p>4.1.6 JAVA8 的 ConcurrentHashMap 为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。</p><p>4.1.7 有没有有顺序的 Map 实现类，如果有，他们是怎么保证有序的。</p><p>4.1.8 抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么,类可以实现多个接口么。</p><p>4.1.9 继承和聚合的区别在哪。</p><p>4.2.0 IO 模型有哪些，讲讲你理解的 nio ，他和 bio，aio 的区别是啥，谈谈 reactor 模型。</p><p>4.2.1 反射的原理，反射创建类实例的三种方式是什么。</p><p>4.2.2 反射中，Class.forName 和 ClassLoader 区别 。</p><p>4.2.3 描述动态代理的几种实现方式，分别说出相应的优缺点。</p><p>4.2.4 动态代理与 cglib 实现的区别。</p><p>4.2.5 为什么CGlib 方式可以对接口实现代理。</p><p>4.2.6 final 的用途。</p><p>4.2.7 写出三种单例模式实现 。</p><p>4.2.8 如何在父类中为子类自动完成所有的 hashcode 和 equals 实现？这么做有何优劣。</p><p>4.2.9 请结合OO 设计理念，谈谈访问修饰符 public、private、protected、default 在应用设计中的作用。</p><p>4.3.0 深拷贝和浅拷贝区别。</p><p>4.3.1 数组和链表数据结构描述，各自的时间复杂度。</p><p>4.3.2 error 和exception 的区别，CheckedException，RuntimeException 的区别。</p><p>4.3.3 请列出 5 个运行时异常。</p><p>4.3.4 在自己的代码中，如果创建一个 java.lang.String 类，这个类是否可以被类加载器加载？ 为什么。</p><p>4.3.5 说一说你对 java.lang.Object 对象中 hashCode 和 equals 方法的理解。在什么场景下需要重新实现这两个方法。</p><p>4.3.6 在 jdk1.5 中，引入了泛型，泛型的存在是用来解决什么问题。</p><p>4.3.7 这样的a.hashcode() 有什么用，与 a.equals(b)有什么关系。</p><p>4.3.8 有没有可能 2 个不相等的对象有相同的 hashcode。</p><p>4.3.9 Java 中的 HashSet 内部是如何工作的。</p><p>4.4.0 什么是序列化，怎么序列化，为什么序列化，反序列化会遇到什么问题，如何解决。</p><p>4.4.1 java8 的新特性。</p><p>4.4.2 JVM什么情况下会发生栈内存溢出。</p><p>4.4.3 JVM 的内存结构，Eden 和 Survivor 比例。</p><p>4.4.4 JVM 内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden 和Survivor。</p><p>4.4.5 JVM 中一次完整的 GC 流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的 JVM 参数。</p><p>4.4.6 你知道哪几种垃圾收集器，各自的优缺点，重点讲下 cms 和 G1，包括原理，流程，优缺点。</p><p>4.4.7 垃圾回收算法的实现原理。</p><p>4.4.8 当出现了内存溢出，你怎么排错。</p><p>4.4.9 JVM 内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存， 工作内存等。</p><p>4.5.0 简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。</p><p>4.5.1 讲讲JAVA 的反射机制。</p><p>4.5.2 你们线上应用的 JVM 参数有哪些。</p><p>4.5.3 g1 和 cms 区别,吞吐量优先和响应优先的垃圾收集器选择。</p><p>4.5.4 怎么打出线程栈信息。开源框架</p><p>4.5.5 简单讲讲 tomcat 结构，以及其类加载器流程，线程模型等。</p><p>4.5.6 tomcat 如何调优，涉及哪些参数 。</p><p>4.5.7 讲讲 Spring 加载流程。</p><p>4.5.8 Spring AOP 的实现原理。</p><p>4.5.9 讲讲 Spring 事务的传播属性。</p><p>4.6.0 Spring 如何管理事务的。</p><p>4.6.1 Spring 怎么配置事务（具体说出一些关键的 xml 元素）。</p><p>4.6.2 说说你对 Spring  的理解，非单例注入的原理？它的生命周期？循环注入的原理，aop 的实现原理，说说 aop 中的几个术语，它们是怎么相互工作的。</p><p>4.6.3 Springmvc 中 DispatcherServlet 初始化过程。</p><p>4.6.4 netty 的线程模型，netty 如何基于 reactor 模型上实现的。</p><p>4.6.5 为什么选择 netty。</p><p>4.6.6 什么是 TCP 粘包，拆包。解决方式是什么。</p><p>4.6.7 netty 的 fashwheeltimer 的用法，实现原理，是否出现过调用不够准时，怎么解决。</p><p>4.6.8 netty 的心跳处理在弱网下怎么办。</p><p>4.6.9 netty 的通讯协议是什么样的。</p><p>4.7.0 springmvc 用到的注解，作用是什么，原理。</p><p>4.7.1 springboot 启动机制。操作系统</p><p>4.7.2 Linux 系统下你关注过哪些内核参数，说说你知道的。</p><p>4.7.3 Linux 下 IO 模型有几种，各自的含义是什么。</p><p>4.7.4 epoll 和poll 有什么区别。</p><p>4.7.5 平时用到哪些 Linux 命令。</p><p>4.7.6 用一行命令查看文件的最后五行。</p><p>4.7.7 用一行命令输出正在运行的 java 进程。</p><p>4.7.8 介绍下你理解的操作系统中线程切换过程。</p><p>4.7.9 进程和线程的区别。</p><p>4.8.0 top 命令之后有哪些内容，有什么作用。</p><p>4.8.1 线上 CPU 爆高，请问你如何找到问题所在。</p><h1 id="2、字节跳动篇"><a href="#2、字节跳动篇" class="headerlink" title="2、字节跳动篇"></a>2、字节跳动篇</h1><p>教育线-部门未知</p><p>一面60分钟：</p><p>1、自我介绍</p><p>2、项目</p><p>3、实习中做的业务，遇到的问题，怎么解决的？</p><p>4、重构项目有什么好处？公司项目的发布流程</p><p>重构代码的好处：</p><ul><li>可维护性：因为源代码更容易阅读，对于代码作者的意图就更容易把握，所以修复bug就比较容易些。<ul><li>手段：<ul><li>通过将大型的函数或者组件缩减为一组单独的、命名良好的、单一目的的函数或者组件来实现。</li><li>可以通过将一些方法移到一个更合适的类中。</li><li>删除误导性注释</li></ul></li></ul></li><li>可扩展性<ul><li>如果应用程序使用了可识别的<strong>设计模式</strong>，它会更容易扩展应用程序的功能，而且这些设计模式可能提供了一些以前不存在的灵活性。</li></ul></li></ul><p>公司项目的发布流程：</p><ul><li>提交测试<ul><li>开发人员在功能开发完毕后首先配置开发环境，并将系统部署至开发环境。在开发环境经过自测通过后提交测试代码，并开始撰写上线方案。并提交相关技术负责人审核，在审核过后邮件给相关测试人员。</li><li>测试人员根据模块功能文档并制定测试方案，测试用例，特别注意临界点测试方案</li><li>测试人员通过自动化部署平台根据提供的分支号依照上线方案进行自动化部署，涉及数据库操作可提请DBA操作。</li><li>记录各种数据测试结果及测试问题，并交由相关开发人员进行二次迭代处理，该点须交付测试结果报告。</li><li> 内测完毕后交由相关业务及需求人员进行集成测试，并请测试人员记录测试结果及问题，交由相关开发人员进行再次迭代。该点须交付测试方案测试结果报告。</li></ul></li><li>预热发布<ul><li>测试人员在测试环境测试并跟踪修改bug达到上线标准（没有A、B级bug，C 级bug达到要求）时。开始部署预热环境，测试人员对现有功能在预热环境上进行验收测试（重新执行case）。紧急Bug修改走补丁/hotfix流程。不影响功能的bug留到下次版本解决，确认达到上线标准。</li><li>如达到上线标准，测试人员发起邮件通知相关开发人员、产品人员，准备正式上线发布流程。</li></ul></li><li>正式上线<ul><li>在测试人员确认项目具备上线条件下，正式上线前，开发负责人须发起部署大会，召集相关开发人员、测试人员、产品人员、运维人员讨论此次部署事项(介绍项目的相应负责人员，数据库脚本执行，部署顺序，应用程序关联，部署时间点，部署回滚方案，包括数据库回滚和应用程序回滚)，最后生成会议纪要并发送邮件。</li><li>确认上线之后，测试人员邮件上线方案，数据库脚本，应用分支号给运维人员及DBA，DBA应提前执行数据库脚本，应用部署须通过自动化部署平台进行部署，部署系统应在应用系统中记录当前分支号，以便后续应用回滚使用。在部署中出现错误，及时通知相关开发人员。如若问题不能在计划内时间解决，执行回滚方案。</li><li>运维，DBA在操作完成时均需要回复邮件，并说明操作步骤结果。</li><li>发布完成后运维人员回复邮件通知测试人员、业务及需求人员进行线上测试。测试结果及问题,提交至开发人员。如若出现问题不能在计划内时间解决，执行回滚方案，并进行迭代改进。</li><li>（紧急Bug修改走补丁/hotfix流程，不影响功能的bug留到下次版本解决。）。测试通过后测试人员回复邮件，发布结束。</li></ul></li><li>应用服务监控<ul><li>运维人员添加新增外部应用服务监控和新增云主机的系统监控</li><li>运维人员对相关业务保持上线后正式生产系统进行有计划地监控其服务的性能和可用性，及时发现问题处理及反馈问题。</li></ul></li><li>总结报告<ul><li>上线成功后，撰写或总结系统需求、架构以及开发文档进行备案。</li></ul></li></ul><p>5、算法题：LC739：每日温度（单调栈）</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temperatures<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> pre <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> pre<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、volatile、sleep和wait之间区别？原理？</p><p>volatile关键字的作用主要是下面两个：</p><ul><li>保证变量修改的可见性</li><li>禁止JVM进行指令重排（在单例模式双重校验锁里有用到）</li></ul><p>sleep和wait</p><ul><li>最主要区别是：sleep没有释放锁，wait释放了锁</li><li>wait通常被用于线程间通信，sleep通常被用于暂停执行</li><li>wait方法调用后，线程一般不会自动苏醒，需要其他线程调用同一个对象上的notify或notifyAll方法。sleep方法执行完后，会自动苏醒。当然调用wait(long timeout)超时后会自动苏醒</li></ul><p>7、Lock介绍一下？子类，底层实现？讲讲yield方法？</p><p>8、AtomicInteger底层实现？CAS和ABA问题，为什么要加volatile关键字？可以不加嘛？</p><p>9、怎么实现多线程打印奇偶数1,2？（ReentrantLock，wait和notify实现）</p><p>10、jvm内存模型？运行时数据区详细划分、各自功能、垃圾回收算法</p><p>11、GCRoot对象有哪些？</p><p>12、tcp和udp的区别</p><p>13、https通信流程，怎么保证安全？</p><p>14、mysql隔离级别，mvcc解决了什么问题？可见性比较算法？当前读和快照读？</p><p>15、怎么解决幻读？</p><p>16、反问</p><p>二面60分钟</p><p>1、自我介绍</p><p>2、介绍一下自己的项目架构（从登录认证、授权、jwt生成原理、颁发请求，websocket前后端通信详细流程，协议，长轮询原理比较）</p><p>3、怎么确保对方能够收到消息？加ack消息确认机制</p><p>4、Redis的zset底层原理</p><p>5、Redis为什么会这么快？</p><p>6、Redis持久化方式，写的时候有没有影响复制的？写时复制</p><p>7、什么时候用单线程，什么时候用多线程？CPU密集型，IO密集型</p><p>8、为什么Redis用单线程</p><p>9、如何从大量数据中找出高频词？ 分治 + 哈希 + 最小堆</p><p>10、算法题：类似LC：最小覆盖子串</p><p>三面71分钟</p><p>1、复盘一面和二面出现的问题</p><p>2、自我介绍</p><p>3、详细介绍一下项目</p><p>4、举例事务的几种隔离级别及其应用场景</p><p>5、用三个线程打印abc（打印20次）</p><p>6、反问</p><p>国际化电商</p><p>一面：74分钟</p><p>1、自我介绍</p><p>2、项目介绍，很抠细节</p><p>3、设计一个文章浏览量的日排行榜，浏览量相同的，达到浏览量时间短的排在前，用redis怎么实现？</p><p>4、在shell中输入”echo hello world“，操作系统是怎么处理的？</p><p>5、LC81题：（出现重复和不重复都要写）</p><p>6、反问</p><p>二面：60min</p><p>1、自我介绍</p><p>2、项目</p><p>3、redis的setnx有什么问题，怎么解决超时释放，锁的时间小于业务执行时间，该怎么处理？</p><p>4、redis集群怎么监控他们之间的状态，发生故障怎么办？哨兵</p><p>5、TCP nagel算法了解嘛？怎么确定传送数据包的大小？ MSS最大报文段长度</p><p>6、什么时候处于close wait状态？大量该状态该怎么解决？</p><p>7、write(fd, “123456”)执行流程？有哪些寄存器？</p><p>8、进程上下文切换开销，对比？</p><p>9、int Clac(int a, char b)入栈，出栈全过程？</p><p>10、算法题：找出连续子数组之和与target之差最小的首末位置</p><p>11、反问</p><p>三面：50分钟</p><p>1、自我介绍</p><p>2、项目</p><p>3、物理删除和逻辑删除有什么作用？如果物理删除很多次会怎么样？HTTP2.0的改进？</p><p>4、实习有什么收获和成长？</p><p>5、有100个饺子，A,B轮流吃，每次可以选择吃1-3个，谁吃完最后一个则获胜，如果A先吃，A有必胜的策略嘛？如果没有，B有吗？</p><p>6、给你两个输入：一个长度为n的整数数组，整数k。要求：输出不在数组中，且大于k的最小正整数，要求时间O(n)，空间O(1)</p><p>7、反问</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20210610</title>
      <link href="2021/06/07/20210610/"/>
      <url>2021/06/07/20210610/</url>
      
        <content type="html"><![CDATA[<h1 id="主要工作：对接张柯学长工作"><a href="#主要工作：对接张柯学长工作" class="headerlink" title="主要工作：对接张柯学长工作"></a>主要工作：对接张柯学长工作</h1><h1 id="1、代价估算模块"><a href="#1、代价估算模块" class="headerlink" title="1、代价估算模块"></a>1、代价估算模块</h1><h2 id="1-1、CEHJ"><a href="#1-1、CEHJ" class="headerlink" title="1.1、CEHJ"></a>1.1、CEHJ</h2><p>主要代码是best_access_path里增加的一段代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//如果没有索引，且满足HJ条件，则使用HJ</span><span class="token keyword">if</span> <span class="token punctuation">(</span>best_ref<span class="token operator">-</span><span class="token operator">></span>key <span class="token operator">==</span> MAX_KEY<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          m_hj_key <span class="token operator">=</span> best_ref<span class="token punctuation">;</span>          best_ref <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>          scan_read_cost<span class="token operator">=</span> <span class="token function">calculate_scan_cost</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span>                                               idx<span class="token punctuation">,</span>                                               best_ref<span class="token punctuation">,</span>                                               prefix_rowcount<span class="token punctuation">,</span>                                               found_condition<span class="token punctuation">,</span>                                               disable_jbuf<span class="token punctuation">,</span>                                               <span class="token operator">&amp;</span>rows_after_filtering<span class="token punctuation">,</span>                                               <span class="token operator">&amp;</span>trace_access_scan<span class="token punctuation">,</span>                                               <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rows_fetched <span class="token operator">=</span> rows_after_filtering<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//best_read_cost = scan_read_cost;</span>          ref_depend_map <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          best_uses_jbuf <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>          best_read_cost <span class="token operator">=</span> scan_read_cost<span class="token punctuation">;</span>          best_time <span class="token operator">=</span> scan_read_cost <span class="token operator">+</span>              cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prefix_rowcount<span class="token operator">*</span><span class="token number">0.01</span><span class="token operator">*</span>rows_after_filtering<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//tab->set_use_join_cache(8);</span>          useHj <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          HJ_rows <span class="token operator">=</span> best_time<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//有索引，则比较索引和HJ代价</span>      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//保存索引代价</span>          <span class="token keyword">double</span> temp_src<span class="token operator">=</span>best_read_cost<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>best_ref<span class="token operator">-</span><span class="token operator">></span>key <span class="token operator">==</span> table<span class="token operator">-</span><span class="token operator">></span>s<span class="token operator">-</span><span class="token operator">></span>primary_key <span class="token operator">&amp;&amp;</span>                   table<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">primary_key_is_clustered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>best_ref<span class="token operator">-</span><span class="token operator">></span>fanout<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>                temp_src<span class="token operator">=</span> prefix_rowcount <span class="token operator">*</span>              <span class="token function">min</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span><span class="token function">cost_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span>best_ref<span class="token operator">-</span><span class="token operator">></span>fanout<span class="token punctuation">)</span><span class="token punctuation">,</span>                  tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token punctuation">)</span><span class="token punctuation">;</span>          scan_read_cost<span class="token operator">=</span> <span class="token function">calculate_scan_cost</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span>                                               idx<span class="token punctuation">,</span>                                               best_ref<span class="token punctuation">,</span>                                               prefix_rowcount<span class="token punctuation">,</span>                                               found_condition<span class="token punctuation">,</span>                                               disable_jbuf<span class="token punctuation">,</span>                                               <span class="token operator">&amp;</span>rows_after_filtering<span class="token punctuation">,</span>                                               <span class="token operator">&amp;</span>trace_access_scan<span class="token punctuation">,</span>                                               <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> <span class="token keyword">double</span> c1 <span class="token operator">=</span> thd<span class="token operator">-</span><span class="token operator">></span>variables<span class="token punctuation">.</span>long_query_time_double<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//计算HJ代价：构建哈希表代价+探测匹配代价</span>          best_time <span class="token operator">=</span> scan_read_cost <span class="token operator">+</span> c1 <span class="token operator">*</span><span class="token punctuation">(</span>prefix_rowcount<span class="token punctuation">)</span><span class="token operator">+</span>              cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span>prefix_rowcount <span class="token operator">*</span> rows_fetched<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果HJ代价比索引小，则使用HJ</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*join->thd->variables.max_error_count &amp; tab->table_ref->map()*/</span>              best_time <span class="token operator">&lt;</span> temp_src <span class="token operator">+</span> cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span>prefix_rowcount <span class="token operator">*</span> rows_fetched<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              best_read_cost <span class="token operator">=</span> scan_read_cost<span class="token operator">+</span>c1<span class="token operator">*</span><span class="token punctuation">(</span>prefix_rowcount<span class="token punctuation">)</span><span class="token punctuation">;</span>              best_uses_jbuf <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//tab->set_use_join_cache(8);</span>              useHj <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              HJ_rows <span class="token operator">=</span> best_time<span class="token punctuation">;</span>              rows_fetched <span class="token operator">=</span> best_ref<span class="token operator">-</span><span class="token operator">></span>fanout<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有两个参数用来控制HJ：</p><ul><li>show_old_temporals：为true，表示开启HJ；反之不开启</li><li>end_markers_in_json：为true，表示会比较index NL（BNL）和HJ；反之不会比较一律选择HJ</li></ul><p>测试：</p><ul><li>将show_old_temporals和end_markers_in_json都设置为true</li></ul><p>查看tpch Q3执行计划，最后在索引和HJ之间选择了索引</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210609103821073.png" alt="image-20210609103821073"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210609111757113.png" alt="image-20210609111757113"></p><ul><li><p>将end_markers_in_json设置为false</p><p>​      会一律选择HJ</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210609104439331.png" alt="image-20210609104439331"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210609111630918.png" alt="image-20210609111630918"></p></li><li><p>将show_old_temporals设置为false</p></li></ul><p>不使用HJ</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210609104910478.png" alt="image-20210609104910478"></p><h2 id="1-2、带下推的HJ"><a href="#1-2、带下推的HJ" class="headerlink" title="1.2、带下推的HJ"></a>1.2、带下推的HJ</h2><p>论文里给出了一个下推后代价模型中IO_cost的计算公式：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210609112755077.png" alt="image-20210609112755077"></p><p>其中，IO_costpre是原系统IO_cost, PL是投影的列的总长度，TL是单条记录总长度，n是一元filter的数量</p><p>目前是所有分析型查询都下推，这部分做的不完善。</p><h1 id="2、SPHJ"><a href="#2、SPHJ" class="headerlink" title="2、SPHJ"></a>2、SPHJ</h1><p>主要是sql_pushdown.cc里的spSplit2Sql方法，通过end_markers_in_json 参数来控制是否下推</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** *转换下推条件， * @param join */</span><span class="token keyword">void</span> <span class="token function">spSplit2Sql</span><span class="token punctuation">(</span>JOIN <span class="token operator">*</span>join<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    buff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>uint i<span class="token operator">=</span>join<span class="token operator">-</span><span class="token operator">></span>const_tables <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> join<span class="token operator">-</span><span class="token operator">></span>primary_tables <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        buff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"select "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取一个执行计划执行节点</span>        QEP_TAB<span class="token operator">*</span> tab<span class="token operator">=</span>join<span class="token operator">-</span><span class="token operator">></span>qep_tab<span class="token operator">+</span>i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取列信息</span>        TABLE <span class="token operator">*</span>table<span class="token operator">=</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token operator">*</span><span class="token operator">*</span> fields<span class="token operator">=</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>field<span class="token punctuation">;</span>        <span class="token keyword">bool</span> isfirst<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接投影列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>uint j<span class="token operator">=</span> <span class="token function">bitmap_get_first_set</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>read_set<span class="token punctuation">)</span><span class="token punctuation">;</span>             j<span class="token operator">&lt;</span> table<span class="token operator">-</span><span class="token operator">></span>s<span class="token operator">-</span><span class="token operator">></span>fields<span class="token punctuation">;</span>             j<span class="token operator">=</span> <span class="token function">bitmap_get_next_set</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>read_set<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isfirst<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token operator">-</span><span class="token operator">></span>table_name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>field_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token operator">-</span><span class="token operator">></span>table_name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>field_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            isfirst<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拼接表名</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">" from "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_db_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_table_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加上条件</span>        Item<span class="token operator">*</span> cond<span class="token operator">=</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Item<span class="token operator">*</span> tmp<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> table_map used_tables<span class="token operator">=</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">added_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前表需要用到的表</span>        <span class="token keyword">const</span> table_map current_map<span class="token operator">=</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">added_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前表</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">{</span>            tmp<span class="token operator">=</span><span class="token function">make_cond_for_table</span><span class="token punctuation">(</span>cond<span class="token punctuation">,</span>used_tables<span class="token punctuation">,</span>current_map<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//构造where条件</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"where "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">print_where_zk</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>buff<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span>QT_ORDINARY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将where条件写到buff里</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//去除要下推的条件，需要获取到返回结果中与该表相关的列，并将其从read_set中去掉，当前先不这样做</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//only 下推但不接收</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token operator">-</span><span class="token operator">></span>sql<span class="token punctuation">)</span>            table<span class="token operator">-</span><span class="token operator">></span>sql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        size_t len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>        string temp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去除下推SQL中的'&lt;cache>'</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>size_t j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">7</span><span class="token operator">&amp;&amp;</span>buff<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'&lt;'</span><span class="token operator">&amp;&amp;</span>buff<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'>'</span><span class="token operator">&amp;&amp;</span>buff<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'c'</span><span class="token operator">&amp;&amp;</span>buff<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>buff<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'c'</span><span class="token operator">&amp;&amp;</span>buff<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'h'</span><span class="token operator">&amp;&amp;</span>buff<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>                j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                temp <span class="token operator">+</span><span class="token operator">=</span> buff<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>sql<span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>temp<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        table<span class="token operator">-</span><span class="token operator">></span>isPushdown<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" ******************** \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拆分子查询暂未实现</p><p>跟了一条tpch的Q12，两表连接</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>    l_shipmode<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span>        <span class="token keyword">when</span> o_orderpriority <span class="token operator">=</span> <span class="token string">'1-URGENT'</span>            <span class="token operator">or</span> o_orderpriority <span class="token operator">=</span> <span class="token string">'2-HIGH'</span>            <span class="token keyword">then</span> <span class="token number">1</span>        <span class="token keyword">else</span> <span class="token number">0</span>    <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> high_line_count<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span>        <span class="token keyword">when</span> o_orderpriority <span class="token operator">&lt;></span> <span class="token string">'1-URGENT'</span>            <span class="token operator">and</span> o_orderpriority <span class="token operator">&lt;></span> <span class="token string">'2-HIGH'</span>            <span class="token keyword">then</span> <span class="token number">1</span>        <span class="token keyword">else</span> <span class="token number">0</span>    <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> low_line_count<span class="token keyword">from</span>    orders<span class="token punctuation">,</span>    lineitem<span class="token keyword">where</span>    o_orderkey <span class="token operator">=</span> l_orderkey    <span class="token operator">and</span> l_shipmode <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'MAIL'</span><span class="token punctuation">,</span> <span class="token string">'TRUCK'</span><span class="token punctuation">)</span>    <span class="token operator">and</span> l_commitdate <span class="token operator">&lt;</span> l_receiptdate    <span class="token operator">and</span> l_shipdate <span class="token operator">&lt;</span> l_commitdate    <span class="token operator">and</span> l_receiptdate <span class="token operator">>=</span> <span class="token keyword">date</span> <span class="token string">'1996-01-01'</span>    <span class="token operator">and</span> l_receiptdate <span class="token operator">&lt;</span> <span class="token keyword">date</span> <span class="token string">'1996-01-01'</span> <span class="token operator">+</span> interval <span class="token string">'1'</span> year<span class="token keyword">group</span> <span class="token keyword">by</span>    l_shipmode<span class="token keyword">order</span> <span class="token keyword">by</span>    l_shipmode <span class="token keyword">limit</span> <span class="token number">1</span>\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终下推的SQL是下面两条：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select lineitem.L_ORDERKEY,lineitem.L_LINENUMBER,lineitem.L_SHIPDATE,lineitem.L_COMMITDATE,lineitem.L_RECEIPTDATE,lineitem.L_SHIPMODE from tpch.lineitemwhere ((`tpch`.`lineitem`.`L_SHIPMODE` in ('MAIL','TRUCK')) and (`tpch`.`lineitem`.`L_COMMITDATE` < `tpch`.`lineitem`.`L_RECEIPTDATE`) and (`tpch`.`lineitem`.`L_SHIPDATE` < `tpch`.`lineitem`.`L_COMMITDATE`) and (`tpch`.`lineitem`.`L_RECEIPTDATE` >= DATE'1996-01-01') and (`tpch`.`lineitem`.`L_RECEIPTDATE` <  ((DATE'1996-01-01' + interval '1' year))))select orders.O_ORDERKEY,orders.O_ORDERPRIORITY from tpch.orders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3、数据管理模块"><a href="#3、数据管理模块" class="headerlink" title="3、数据管理模块"></a>3、数据管理模块</h1><h2 id="3-1、CE"><a href="#3-1、CE" class="headerlink" title="3.1、CE"></a>3.1、CE</h2><p>init_read_record函数：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//开启下推</span><span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>isPushdown<span class="token operator">&amp;&amp;</span>thd<span class="token operator">-</span><span class="token operator">></span>variables<span class="token punctuation">.</span>end_markers_in_json<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>spfs<span class="token punctuation">)</span><span class="token punctuation">{</span>      info<span class="token operator">-</span><span class="token operator">></span>read_record<span class="token operator">=</span>rr_spread<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用自定义函数读取数据</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>recv_block<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        table<span class="token operator">-</span><span class="token operator">></span>recv_block<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">16384</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分配待读区</span>      table<span class="token operator">-</span><span class="token operator">></span>readpos<span class="token operator">=</span>table<span class="token operator">-</span><span class="token operator">></span>endPos<span class="token operator">=</span>table<span class="token operator">-</span><span class="token operator">></span>recv_block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化待读区指针</span>      table<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>      info<span class="token operator">-</span><span class="token operator">></span>refer<span class="token operator">=</span><span class="token keyword">new</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>uchar<span class="token operator">*</span><span class="token punctuation">,</span>size_t<span class="token operator">></span> <span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化映射表</span>      <span class="token comment" spellcheck="true">//initialize</span>      Field<span class="token operator">*</span><span class="token operator">*</span> fields<span class="token operator">=</span>table<span class="token operator">-</span><span class="token operator">></span>field<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>uint j<span class="token operator">=</span> <span class="token function">bitmap_get_first_set</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>read_set<span class="token punctuation">)</span><span class="token punctuation">;</span>           j<span class="token operator">&lt;</span> table<span class="token operator">-</span><span class="token operator">></span>s<span class="token operator">-</span><span class="token operator">></span>fields<span class="token punctuation">;</span>           j<span class="token operator">=</span> <span class="token function">bitmap_get_next_set</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>read_set<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//生成映射表（列起始位置到列大小的映射）</span>          info<span class="token operator">-</span><span class="token operator">></span>refer<span class="token operator">-</span><span class="token operator">></span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>ptr<span class="token punctuation">,</span>fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pack_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取net将SQL发送到指定SE节点</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token operator">-</span><span class="token operator">></span>net<span class="token punctuation">)</span> <span class="token punctuation">{</span>          table<span class="token operator">-</span><span class="token operator">></span>net <span class="token operator">=</span> <span class="token function">get_free_net</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">net_write_raw</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>net<span class="token punctuation">,</span><span class="token punctuation">(</span>uchar<span class="token punctuation">)</span>COM_QUERY<span class="token punctuation">,</span><span class="token punctuation">(</span>uchar<span class="token operator">*</span><span class="token punctuation">)</span>table<span class="token operator">-</span><span class="token operator">></span>sql<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过rr_spread读取数据</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">rr_spread</span><span class="token punctuation">(</span>READ_RECORD <span class="token operator">*</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从read_pos中读取记录</span>    TABLE <span class="token operator">*</span>table<span class="token operator">=</span>info<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>info<span class="token operator">-</span><span class="token operator">></span>table<span class="token operator">-</span><span class="token operator">></span>readpos<span class="token operator">==</span>table<span class="token operator">-</span><span class="token operator">></span>endPos<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当前无记录，需要读取</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            ulong len <span class="token operator">=</span> <span class="token function">net_read_raw</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>net<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>net<span class="token operator">-</span><span class="token operator">></span>read_pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> COM_END<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//读完了</span>                table<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//又有了数据，放到待读区</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>recv_block<span class="token punctuation">,</span> table<span class="token operator">-</span><span class="token operator">></span>net<span class="token operator">-</span><span class="token operator">></span>read_pos<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            table<span class="token operator">-</span><span class="token operator">></span>readpos <span class="token operator">=</span> table<span class="token operator">-</span><span class="token operator">></span>recv_block<span class="token punctuation">;</span>            table<span class="token operator">-</span><span class="token operator">></span>endPos <span class="token operator">=</span> table<span class="token operator">-</span><span class="token operator">></span>readpos <span class="token operator">+</span> len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//读一条记录到记录缓冲区</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>info<span class="token operator">-</span><span class="token operator">></span>record<span class="token punctuation">,</span>table<span class="token operator">-</span><span class="token operator">></span>readpos<span class="token operator">++</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>size_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>info<span class="token operator">-</span><span class="token operator">></span>refer<span class="token operator">-</span><span class="token operator">></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        pair<span class="token operator">&lt;</span>uchar<span class="token operator">*</span><span class="token punctuation">,</span>size_t<span class="token operator">></span> cs<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>info<span class="token operator">-</span><span class="token operator">></span>refer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span>first<span class="token punctuation">,</span>table<span class="token operator">-</span><span class="token operator">></span>readpos<span class="token punctuation">,</span>cs<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//恢复映射表</span>        table<span class="token operator">-</span><span class="token operator">></span>readpos<span class="token operator">+</span><span class="token operator">=</span>cs<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2、SE"><a href="#3-2、SE" class="headerlink" title="3.2、SE"></a>3.2、SE</h2><p>主要是修改了Query_result_send::send_data和Query_result_send::send_eof</p><p>send_data：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//if response_buf is full</span>    uint len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    List_iterator_fast<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">it0</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Item <span class="token operator">*</span>item<span class="token operator">=</span> it0<span class="token operator">++</span><span class="token punctuation">;</span> item<span class="token punctuation">;</span> item<span class="token operator">=</span> it0<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//逐列</span>        Item_field <span class="token operator">*</span>data<span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>Item_field <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        len<span class="token operator">+</span><span class="token operator">=</span>data<span class="token operator">-</span><span class="token operator">></span>field<span class="token operator">-</span><span class="token operator">></span><span class="token function">pack_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计用到的列总长度</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>writepos<span class="token operator">-</span>response_buf<span class="token operator">+</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>SP_MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果发送缓冲区满了，就往CE返回数据</span>        <span class="token comment" spellcheck="true">//is full need send</span>        <span class="token function">net_write_raw</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span><span class="token punctuation">(</span>uchar<span class="token punctuation">)</span>COM_QUERY<span class="token punctuation">,</span><span class="token punctuation">(</span>uchar<span class="token operator">*</span><span class="token punctuation">)</span>response_buf<span class="token punctuation">,</span>writepos<span class="token operator">-</span>response_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        writepos<span class="token operator">=</span>response_buf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将此标志位写入responsebuf</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>writepos<span class="token operator">++</span><span class="token punctuation">,</span>flag<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List_iterator_fast<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">it</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Item <span class="token operator">*</span>item<span class="token operator">=</span> it<span class="token operator">++</span><span class="token punctuation">;</span> item<span class="token punctuation">;</span> item<span class="token operator">=</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//逐列</span>        Item_field <span class="token operator">*</span>data<span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>Item_field <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>writepos<span class="token punctuation">,</span>data<span class="token operator">-</span><span class="token operator">></span>field<span class="token operator">-</span><span class="token operator">></span>ptr<span class="token punctuation">,</span>data<span class="token operator">-</span><span class="token operator">></span>field<span class="token operator">-</span><span class="token operator">></span><span class="token function">pack_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据列位置和大小获取列值写到发送缓冲区里</span>        writepos<span class="token operator">+</span><span class="token operator">=</span>data<span class="token operator">-</span><span class="token operator">></span>field<span class="token operator">-</span><span class="token operator">></span><span class="token function">pack_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_sent_row_count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//send_data函数每调用一次就+1，代表发送了一条记录</span>  <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>send_eof：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//写COM_END结束标志  </span><span class="token function">net_write_raw</span><span class="token punctuation">(</span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_protocol_classic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_net</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>uchar<span class="token punctuation">)</span>COM_END<span class="token punctuation">,</span>          <span class="token punctuation">(</span>uchar<span class="token operator">*</span><span class="token punctuation">)</span>response_buf<span class="token punctuation">,</span>writepos<span class="token operator">-</span>response_buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4、执行模块"><a href="#4、执行模块" class="headerlink" title="4、执行模块"></a>4、执行模块</h1><p>主要是JOIN_CACHE_HASHED类</p><p>put_record_in_cache函数：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> JOIN_CACHE_HASHED<span class="token operator">::</span><span class="token function">put_record_in_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uchar <span class="token operator">*</span>key<span class="token punctuation">;</span>    uint key_len <span class="token operator">=</span> key_length<span class="token punctuation">;</span>    uchar <span class="token operator">*</span>key_ref_ptr<span class="token punctuation">;</span>    TABLE_REF <span class="token operator">*</span>ref <span class="token operator">=</span> <span class="token operator">&amp;</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uchar <span class="token operator">*</span>next_ref_ptr <span class="token operator">=</span> pos<span class="token punctuation">;</span>    pos <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">get_size_of_rec_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Write record to join buffer</span>    <span class="token keyword">bool</span> is_full <span class="token operator">=</span> JOIN_CACHE<span class="token operator">::</span><span class="token function">put_record_in_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>use_emb_key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        key <span class="token operator">=</span> <span class="token function">get_curr_emb_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Embedded is not used if one of the key columns is nullable</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Build the key over the fields read into the record buffers */</span>        <span class="token comment" spellcheck="true">//提取记录缓冲区中记录的连接键</span>        <span class="token function">cp_buffer_from_ref</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token punctuation">,</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> ref<span class="token operator">-</span><span class="token operator">></span>key_buff<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ref<span class="token operator">-</span><span class="token operator">></span><span class="token function">impossible_null_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">DBUG_PRINT</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"JOIN_CACHE_BKA_UNIQUE::put_record null_rejected"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> is_full<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Look for the key in the hash table */</span>    <span class="token comment" spellcheck="true">//查找哈希表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">key_search</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> key_len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key_ref_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        uchar <span class="token operator">*</span>last_next_ref_ptr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*          The key is found in the hash table.          Add the record to the circular list of the records attached to this key.          Below 'rec' is the record to be added into the record chain for the found          key, 'key_ref' points to a flatten representation of the st_key_entry          structure that contains the key and the head of the record chain.        */</span>        last_next_ref_ptr <span class="token operator">=</span> <span class="token function">get_next_rec_ref</span><span class="token punctuation">(</span>key_ref_ptr <span class="token operator">+</span> <span class="token function">get_size_of_key_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* rec->next_rec= key_entry->last_rec->next_rec */</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>next_ref_ptr<span class="token punctuation">,</span> last_next_ref_ptr<span class="token punctuation">,</span> <span class="token function">get_size_of_rec_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将记录放到对应哈希桶里</span>        <span class="token comment" spellcheck="true">/* key_entry->last_rec->next_rec= rec */</span>        <span class="token function">store_next_rec_ref</span><span class="token punctuation">(</span>last_next_ref_ptr<span class="token punctuation">,</span> next_ref_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* key_entry->last_rec= rec */</span>        <span class="token function">store_next_rec_ref</span><span class="token punctuation">(</span>key_ref_ptr <span class="token operator">+</span> <span class="token function">get_size_of_key_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next_ref_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*              The key is not found in the hash table.              Put the key into the join buffer linking it with the keys for the              corresponding hash entry. Create a circular list with one element              referencing the record and attach the list to the key in the buffer.        */</span>        <span class="token comment" spellcheck="true">//没找到，就建一个新的桶，把记录放进去</span>        uchar <span class="token operator">*</span>cp <span class="token operator">=</span> last_key_entry<span class="token punctuation">;</span>        cp <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">get_size_of_rec_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">get_size_of_key_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">store_next_key_ref</span><span class="token punctuation">(</span>key_ref_ptr<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">store_null_key_ref</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">store_next_rec_ref</span><span class="token punctuation">(</span>next_ref_ptr<span class="token punctuation">,</span> next_ref_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">store_next_rec_ref</span><span class="token punctuation">(</span>cp <span class="token operator">+</span> <span class="token function">get_size_of_key_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next_ref_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>use_emb_key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cp <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">get_size_of_rec_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">store_emb_key_ref</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cp <span class="token operator">-</span><span class="token operator">=</span> key_len<span class="token punctuation">;</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        last_key_entry <span class="token operator">=</span> cp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Increment the counter of key_entries in the hash table */</span>        key_entries<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> is_full<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>join_matching_records函数</p><pre class="line-numbers language-cpp"><code class="language-cpp">enum_nested_loop_state JOIN_CACHE_BNLH<span class="token operator">::</span><span class="token function">join_matching_records</span><span class="token punctuation">(</span><span class="token keyword">bool</span> skip_last<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> error<span class="token punctuation">;</span>    enum_nested_loop_state rc <span class="token operator">=</span> NESTED_LOOP_OK<span class="token punctuation">;</span>    qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">reset_null_row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Return at once if there are no records in the join buffer */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>records<span class="token punctuation">)</span>        <span class="token keyword">return</span> NESTED_LOOP_OK<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>skip_last<span class="token punctuation">)</span>        <span class="token function">put_record_in_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// See setup_join_buffering(=: dynamic range => no cache.</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">dynamic_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Start retrieving all records of the joined table */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>qep_tab<span class="token operator">-</span><span class="token operator">></span>read_first_record<span class="token punctuation">)</span><span class="token punctuation">(</span>qep_tab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> error <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> NESTED_LOOP_OK <span class="token operator">:</span> NESTED_LOOP_ERROR<span class="token punctuation">;</span>    READ_RECORD <span class="token operator">*</span>info <span class="token operator">=</span> <span class="token operator">&amp;</span>qep_tab<span class="token operator">-</span><span class="token operator">></span>read_record<span class="token punctuation">;</span>    uchar <span class="token operator">*</span>key_chain_ptr<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        TABLE <span class="token operator">*</span>table <span class="token operator">=</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uchar <span class="token operator">*</span>key_ref_ptr<span class="token punctuation">;</span>        TABLE_REF <span class="token operator">*</span>ref <span class="token operator">=</span> <span class="token operator">&amp;</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KEY <span class="token operator">*</span>keyinfo <span class="token operator">=</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_keyinfo_by_key_no</span><span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">key_copy</span><span class="token punctuation">(</span>ref<span class="token operator">-</span><span class="token operator">></span>key_buff<span class="token punctuation">,</span> table<span class="token operator">-</span><span class="token operator">></span>record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keyinfo<span class="token punctuation">,</span> ref<span class="token operator">-</span><span class="token operator">></span>key_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">key_search</span><span class="token punctuation">(</span>ref<span class="token operator">-</span><span class="token operator">></span>key_buff<span class="token punctuation">,</span> ref<span class="token operator">-</span><span class="token operator">></span>key_length<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key_ref_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        key_chain_ptr <span class="token operator">=</span> key_ref_ptr <span class="token operator">+</span> <span class="token function">get_size_of_key_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span>keep_current_rowid<span class="token punctuation">)</span>            table<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uchar <span class="token operator">*</span>last_rec_ref_ptr <span class="token operator">=</span> <span class="token function">get_next_rec_ref</span><span class="token punctuation">(</span>key_chain_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        uchar <span class="token operator">*</span>next_rec_ref_ptr <span class="token operator">=</span> last_rec_ref_ptr<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            next_rec_ref_ptr <span class="token operator">=</span> <span class="token function">get_next_rec_ref</span><span class="token punctuation">(</span>next_rec_ref_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            uchar <span class="token operator">*</span>rec_ptr <span class="token operator">=</span> next_rec_ref_ptr <span class="token operator">+</span> rec_fields_offset<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span>killed<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* The user has aborted the execution of the query */</span>                join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">send_kill_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> NESTED_LOOP_KILLED<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> NESTED_LOOP_OK <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token operator">!</span>check_only_first_match <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">get_match_flag_by_pos</span><span class="token punctuation">(</span>rec_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">get_record_by_pos</span><span class="token punctuation">(</span>rec_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                rc <span class="token operator">=</span> <span class="token function">generate_full_extensions</span><span class="token punctuation">(</span>rec_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">!=</span> NESTED_LOOP_OK<span class="token punctuation">)</span>                    <span class="token keyword">return</span> rc<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>next_rec_ref_ptr <span class="token operator">!=</span> last_rec_ref_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>error <span class="token operator">=</span> info<span class="token operator">-</span><span class="token operator">></span><span class="token function">read_record</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> error <span class="token operator">!=</span> HA_ERR_END_OF_FILE<span class="token punctuation">)</span>        <span class="token keyword">return</span> NESTED_LOOP_ERROR<span class="token punctuation">;</span>    <span class="token keyword">return</span> rc<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h1><h1 id="6、修改文件汇总"><a href="#6、修改文件汇总" class="headerlink" title="6、修改文件汇总"></a>6、修改文件汇总</h1><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210609222109126.png" alt="image-20210609222109126"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HJ </tag>
            
            <tag> Pushdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见设计模式总结</title>
      <link href="2021/06/04/chang-jian-she-ji-mo-shi-zong-jie/"/>
      <url>2021/06/04/chang-jian-she-ji-mo-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<!-- GFM-TOC --><ul><li><a href="#%E4%B8%80%E6%A6%82%E8%BF%B0">一、概述</a></li><li><a href="#%E4%BA%8C%E5%88%9B%E5%BB%BA%E5%9E%8B">二、创建型</a><ul><li><a href="#1-%E5%8D%95%E4%BE%8Bsingleton">1. 单例（Singleton）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#examples">Examples</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#2-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82simple-factory">2. 简单工厂（Simple Factory）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li></ul></li><li><a href="#3-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95factory-method">3. 工厂方法（Factory Method）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#4-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82abstract-factory">4. 抽象工厂（Abstract Factory）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#5-%E7%94%9F%E6%88%90%E5%99%A8builder">5. 生成器（Builder）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#6-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8Fprototype">6. 原型模式（Prototype）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li></ul></li><li><a href="#%E4%B8%89%E8%A1%8C%E4%B8%BA%E5%9E%8B">三、行为型</a><ul><li><a href="#1-%E8%B4%A3%E4%BB%BB%E9%93%BEchain-of-responsibility">1. 责任链（Chain Of Responsibility）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#2-%E5%91%BD%E4%BB%A4command">2. 命令（Command）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#3-%E8%A7%A3%E9%87%8A%E5%99%A8interpreter">3. 解释器（Interpreter）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#4-%E8%BF%AD%E4%BB%A3%E5%99%A8iterator">4. 迭代器（Iterator）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#5-%E4%B8%AD%E4%BB%8B%E8%80%85mediator">5. 中介者（Mediator）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#6-%E5%A4%87%E5%BF%98%E5%BD%95memento">6. 备忘录（Memento）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#7-%E8%A7%82%E5%AF%9F%E8%80%85observer">7. 观察者（Observer）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#8-%E7%8A%B6%E6%80%81state">8. 状态（State）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li></ul></li><li><a href="#9-%E7%AD%96%E7%95%A5strategy">9. 策略（Strategy）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#%E4%B8%8E%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%AF%94%E8%BE%83">与状态模式的比较</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#10-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95template-method">10. 模板方法（Template Method）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#11-%E8%AE%BF%E9%97%AE%E8%80%85visitor">11. 访问者（Visitor）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#12-%E7%A9%BA%E5%AF%B9%E8%B1%A1null">12. 空对象（Null）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li></ul></li></ul></li><li><a href="#%E5%9B%9B%E7%BB%93%E6%9E%84%E5%9E%8B">四、结构型</a><ul><li><a href="#1-%E9%80%82%E9%85%8D%E5%99%A8adapter">1. 适配器（Adapter）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#2-%E6%A1%A5%E6%8E%A5bridge">2. 桥接（Bridge）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#3-%E7%BB%84%E5%90%88composite">3. 组合（Composite）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#4-%E8%A3%85%E9%A5%B0decorator">4. 装饰（Decorator）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">设计原则</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#5-%E5%A4%96%E8%A7%82facade">5. 外观（Facade）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">设计原则</a></li></ul></li><li><a href="#6-%E4%BA%AB%E5%85%83flyweight">6. 享元（Flyweight）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li><li><a href="#7-%E4%BB%A3%E7%90%86proxy">7. 代理（Proxy）</a><ul><li><a href="#intent">Intent</a></li><li><a href="#class-diagram">Class Diagram</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#jdk">JDK</a></li></ul></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a><!-- GFM-TOC --></li></ul><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。</p><p>拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。</p><h1 id="二、创建型"><a href="#二、创建型" class="headerlink" title="二、创建型"></a>二、创建型</h1><h2 id="1-单例（Singleton）"><a href="#1-单例（Singleton）" class="headerlink" title="1. 单例（Singleton）"></a>1. 单例（Singleton）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>确保一个类只有一个实例，并提供该实例的全局访问点。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</p><p>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/eca1f422-8381-409b-ad04-98ef39ae38ba.png"/> </div><br><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><h4 id="Ⅰ-懒汉式-线程不安全"><a href="#Ⅰ-懒汉式-线程不安全" class="headerlink" title="Ⅰ 懒汉式-线程不安全"></a>Ⅰ 懒汉式-线程不安全</h4><p>以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p><p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致实例化多次 uniqueInstance。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ⅱ-饿汉式-线程安全"><a href="#Ⅱ-饿汉式-线程安全" class="headerlink" title="Ⅱ 饿汉式-线程安全"></a>Ⅱ 饿汉式-线程安全</h4><p>线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。</p><p>但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Ⅲ-懒汉式-线程安全"><a href="#Ⅲ-懒汉式-线程安全" class="headerlink" title="Ⅲ 懒汉式-线程安全"></a>Ⅲ 懒汉式-线程安全</h4><p>只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了实例化多次 uniqueInstance。</p><p>但是当一个线程进入该方法之后，其它试图进入该方法的线程都必须等待，即使 uniqueInstance 已经被实例化了。这会让线程阻塞时间过长，因此该方法有性能问题，不推荐使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ⅳ-双重校验锁-线程安全"><a href="#Ⅳ-双重校验锁-线程安全" class="headerlink" title="Ⅳ 双重校验锁-线程安全"></a>Ⅳ 双重校验锁-线程安全</h4><p>uniqueInstance 只需要被实例化一次，之后就可以直接使用了。加锁操作只需要对实例化那部分的代码进行，只有当 uniqueInstance 没有被实例化时，才需要进行加锁。</p><p>双重校验锁先判断 uniqueInstance 是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>考虑下面的实现，也就是只使用了一个 if 语句。在 uniqueInstance == null 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code> 这条语句，只是先后的问题，那么就会进行两次实例化。因此必须使用双重校验锁，也就是需要使用两个 if 语句：第一个 if 语句用来避免 uniqueInstance 已经被实例化之后的加锁操作，而第二个 if 语句进行了加锁，所以只能有一个线程进入，就不会出现 uniqueInstance == null 时两个线程同时进行实例化操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 uniqueInstance 分配内存空间</li><li>初始化 uniqueInstance</li><li>将 uniqueInstance 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T<sub>1</sub> 执行了 1 和 3，此时 T<sub>2</sub> 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p><p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p><h4 id="Ⅴ-静态内部类实现"><a href="#Ⅴ-静态内部类实现" class="headerlink" title="Ⅴ 静态内部类实现"></a>Ⅴ 静态内部类实现</h4><p>当 Singleton 类被加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p><p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ⅵ-枚举实现"><a href="#Ⅵ-枚举实现" class="headerlink" title="Ⅵ 枚举实现"></a>Ⅵ 枚举实现</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> String objName<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getObjName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> objName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObjName</span><span class="token punctuation">(</span>String objName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objName <span class="token operator">=</span> objName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 单例测试</span>        Singleton firstSingleton <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        firstSingleton<span class="token punctuation">.</span><span class="token function">setObjName</span><span class="token punctuation">(</span><span class="token string">"firstName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>firstSingleton<span class="token punctuation">.</span><span class="token function">getObjName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton secondSingleton <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        secondSingleton<span class="token punctuation">.</span><span class="token function">setObjName</span><span class="token punctuation">(</span><span class="token string">"secondName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>firstSingleton<span class="token punctuation">.</span><span class="token function">getObjName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>secondSingleton<span class="token punctuation">.</span><span class="token function">getObjName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射获取实例测试</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Singleton<span class="token punctuation">[</span><span class="token punctuation">]</span> enumConstants <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Singleton enumConstant <span class="token operator">:</span> enumConstants<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enumConstant<span class="token punctuation">.</span><span class="token function">getObjName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">firstNamesecondNamesecondNamesecondName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>该实现可以防止反射攻击。在其它实现中，通过 setAccessible() 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象，如果要防止这种攻击，需要在构造函数中添加防止多次实例化的代码。该实现是由 JVM 保证只会实例化一次，因此不会出现上述的反射攻击。</p><p>该实现在多次序列化和反序列化之后，不会得到多个实例。而其它实现需要使用 transient 修饰所有字段，并且实现序列化和反序列化的方法。</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li>Logger Classes</li><li>Configuration Classes</li><li>Accesing resources in shared mode</li><li>Factories implemented as Singletons</li></ul><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime%28%29">java.lang.Runtime#getRuntime()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop--">java.awt.Desktop#getDesktop()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager--">java.lang.System#getSecurityManager()</a></li></ul><h2 id="2-简单工厂（Simple-Factory）"><a href="#2-简单工厂（Simple-Factory）" class="headerlink" title="2. 简单工厂（Simple Factory）"></a>2. 简单工厂（Simple Factory）</h2><h3 id="Intent-1"><a href="#Intent-1" class="headerlink" title="Intent"></a>Intent</h3><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p><h3 id="Class-Diagram-1"><a href="#Class-Diagram-1" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>简单工厂把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。</p><p>这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/40c0c17e-bba6-4493-9857-147c0044a018.png"/> </div><br><h3 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下的 Client 类包含了实例化的代码，这是一种错误的实现。如果在客户类中存在这种实例化代码，就需要考虑将代码放到简单工厂中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Product product<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// do something with the product</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下的 SimpleFactory 是简单工厂实现，它被所有需要进行实例化的客户类调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Product <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleFactory simpleFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Product product <span class="token operator">=</span> simpleFactory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// do something with the product</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-工厂方法（Factory-Method）"><a href="#3-工厂方法（Factory-Method）" class="headerlink" title="3. 工厂方法（Factory Method）"></a>3. 工厂方法（Factory Method）</h2><h3 id="Intent-2"><a href="#Intent-2" class="headerlink" title="Intent"></a>Intent</h3><p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p><h3 id="Class-Diagram-2"><a href="#Class-Diagram-2" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。</p><p>下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。该方法是抽象的，需要由子类去实现。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f4d0afd0-8e78-4914-9e60-4366eaf065b5.png"/> </div><br><h3 id="Implementation-2"><a href="#Implementation-2" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> Product <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Product product <span class="token operator">=</span> <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// do something with the product</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Product <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactory1</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Product <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactory2</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Product <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-1"><a href="#JDK-1" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--">java.util.Calendar</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-">java.util.ResourceBundle</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--">java.text.NumberFormat</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-">java.nio.charset.Charset</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html#createURLStreamHandler-java.lang.String-">java.net.URLStreamHandlerFactory</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of-E-">java.util.EnumSet</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--">javax.xml.bind.JAXBContext</a></li></ul><h2 id="4-抽象工厂（Abstract-Factory）"><a href="#4-抽象工厂（Abstract-Factory）" class="headerlink" title="4. 抽象工厂（Abstract Factory）"></a>4. 抽象工厂（Abstract Factory）</h2><h3 id="Intent-3"><a href="#Intent-3" class="headerlink" title="Intent"></a>Intent</h3><p>提供一个接口，用于创建   <strong>相关的对象家族</strong>  。</p><h3 id="Class-Diagram-3"><a href="#Class-Diagram-3" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。</p><p>抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB() 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。</p><p>至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。</p><p>从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory，而工厂方法模式使用了继承。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e2190c36-8b27-4690-bde5-9911020a1294.png"/> </div><br><h3 id="Implementation-3"><a href="#Implementation-3" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProductA</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProductB</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductA1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductA</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductA2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductA</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductB1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductB</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductB2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductB</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> AbstractProductA <span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> AbstractProductB <span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactory1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    AbstractProductA <span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AbstractProductB <span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactory2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    AbstractProductA <span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AbstractProductB <span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractFactory abstractFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFactory1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractProductA productA <span class="token operator">=</span> abstractFactory<span class="token punctuation">.</span><span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractProductB productB <span class="token operator">=</span> abstractFactory<span class="token punctuation">.</span><span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// do something with productA and productB</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-2"><a href="#JDK-2" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">javax.xml.parsers.DocumentBuilderFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--">javax.xml.transform.TransformerFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--">javax.xml.xpath.XPathFactory</a></li></ul><h2 id="5-生成器（Builder）"><a href="#5-生成器（Builder）" class="headerlink" title="5. 生成器（Builder）"></a>5. 生成器（Builder）</h2><h3 id="Intent-4"><a href="#Intent-4" class="headerlink" title="Intent"></a>Intent</h3><p>封装一个对象的构造过程，并允许按步骤构造。</p><h3 id="Class-Diagram-4"><a href="#Class-Diagram-4" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/db5e376d-0b3e-490e-a43a-3231914b6668.png"/> </div><br><h3 id="Implementation-4"><a href="#Implementation-4" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个简易的 StringBuilder 实现，参考了 JDK 1.8 源码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AbstractStringBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AbstractStringBuilder <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minimumCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minimumCapacity <span class="token operator">-</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">expandCapacity</span><span class="token punctuation">(</span>minimumCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">expandCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minimumCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> value<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minimumCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minimumCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minimumCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newCapacity <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        value <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Create a copy, don't share the array</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">abcdefghijklmnopqrstuvwxyz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JDK-3"><a href="#JDK-3" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html">java.lang.StringBuilder</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-">java.nio.ByteBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-">java.lang.StringBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html">java.lang.Appendable</a></li><li><a href="https://github.com/apache/camel/tree/0e195428ee04531be27a0b659005e3aa8d159d23/camel-core/src/main/java/org/apache/camel/builder">Apache Camel builders</a></li></ul><h2 id="6-原型模式（Prototype）"><a href="#6-原型模式（Prototype）" class="headerlink" title="6. 原型模式（Prototype）"></a>6. 原型模式（Prototype）</h2><h3 id="Intent-5"><a href="#Intent-5" class="headerlink" title="Intent"></a>Intent</h3><p>使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。</p><h3 id="Class-Diagram-5"><a href="#Class-Diagram-5" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b8922f8c-95e6-4187-be85-572a509afb71.png"/> </div><br><h3 id="Implementation-5"><a href="#Implementation-5" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Prototype</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> Prototype <span class="token function">myClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcretePrototype</span> <span class="token keyword">extends</span> <span class="token class-name">Prototype</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String filed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcretePrototype</span><span class="token punctuation">(</span>String filed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>filed <span class="token operator">=</span> filed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Prototype <span class="token function">myClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcretePrototype</span><span class="token punctuation">(</span>filed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> filed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Prototype prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcretePrototype</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Prototype clone <span class="token operator">=</span> prototype<span class="token punctuation">.</span><span class="token function">myClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JDK-4"><a href="#JDK-4" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone%28%29">java.lang.Object#clone()</a></li></ul><h1 id="三、行为型"><a href="#三、行为型" class="headerlink" title="三、行为型"></a>三、行为型</h1><h2 id="1-责任链（Chain-Of-Responsibility）"><a href="#1-责任链（Chain-Of-Responsibility）" class="headerlink" title="1. 责任链（Chain Of Responsibility）"></a>1. 责任链（Chain Of Responsibility）</h2><h3 id="Intent-6"><a href="#Intent-6" class="headerlink" title="Intent"></a>Intent</h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。</p><h3 id="Class-Diagram-6"><a href="#Class-Diagram-6" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Handler：定义处理请求的接口，并且实现后继链（successor）</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ca9f23bf-55a4-47b2-9534-a28e35397988.png"/> </div><br><h3 id="Implementation-6"><a href="#Implementation-6" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Handler successor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Handler successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandler1</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ConcreteHandler1</span><span class="token punctuation">(</span>Handler successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>successor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RequestType<span class="token punctuation">.</span>TYPE1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is handle by ConcreteHandler1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>successor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandler2</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ConcreteHandler2</span><span class="token punctuation">(</span>Handler successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>successor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RequestType<span class="token punctuation">.</span>TYPE2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is handle by ConcreteHandler2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>successor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RequestType type<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Request</span><span class="token punctuation">(</span>RequestType type<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> RequestType <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RequestType <span class="token punctuation">{</span>    TYPE1<span class="token punctuation">,</span> TYPE2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Handler handler1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler1</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Handler handler2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler2</span><span class="token punctuation">(</span>handler1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>RequestType<span class="token punctuation">.</span>TYPE1<span class="token punctuation">,</span> <span class="token string">"request1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler2<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>RequestType<span class="token punctuation">.</span>TYPE2<span class="token punctuation">,</span> <span class="token string">"request2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler2<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">request1 is handle by ConcreteHandler1request2 is handle by ConcreteHandler2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log%28java.util.logging.Level,%20java.lang.String%29">java.util.logging.Logger#log()</a></li><li><a href="https://commons.apache.org/proper/commons-chain/index.html">Apache Commons Chain</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-">javax.servlet.Filter#doFilter()</a></li></ul><h2 id="2-命令（Command）"><a href="#2-命令（Command）" class="headerlink" title="2. 命令（Command）"></a>2. 命令（Command）</h2><h3 id="Intent-7"><a href="#Intent-7" class="headerlink" title="Intent"></a>Intent</h3><p>将命令封装成对象中，具有以下作用：</p><ul><li>使用命令来参数化其它对象</li><li>将命令放入队列中进行排队</li><li>将命令的操作记录到日志中</li><li>支持可撤销的操作</li></ul><h3 id="Class-Diagram-7"><a href="#Class-Diagram-7" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Command：命令</li><li>Receiver：命令接收者，也就是命令真正的执行者</li><li>Invoker：通过它来调用命令</li><li>Client：可以设置命令与命令的接收者</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c44a0342-f405-4f17-b750-e27cf4aadde2.png"/> </div><br><h3 id="Implementation-7"><a href="#Implementation-7" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计一个遥控器，可以控制电灯开关。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e6bded8e-41a0-489a-88a6-638e88ab7666.jpg"/> </div><br><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    Light light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOnCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    Light light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOffCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Light is on!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Light is off!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 遥控器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Invoker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>    <span class="token keyword">private</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> slotNum <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Invoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span>slotNum<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span>slotNum<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">,</span> <span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOffCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">,</span> <span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Invoker invoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Invoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Light light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Command lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        invoker<span class="token punctuation">.</span><span class="token function">setOnCommand</span><span class="token punctuation">(</span>lightOnCommand<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        invoker<span class="token punctuation">.</span><span class="token function">setOffCommand</span><span class="token punctuation">(</span>lightOffCommand<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        invoker<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        invoker<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">java.lang.Runnable</a></li><li><a href="https://github.com/Netflix/Hystrix/wiki">Netflix Hystrix</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/Action.html">javax.swing.Action</a></li></ul><h2 id="3-解释器（Interpreter）"><a href="#3-解释器（Interpreter）" class="headerlink" title="3. 解释器（Interpreter）"></a>3. 解释器（Interpreter）</h2><h3 id="Intent-8"><a href="#Intent-8" class="headerlink" title="Intent"></a>Intent</h3><p>为语言创建解释器，通常由语言的语法和语法分析来定义。</p><h3 id="Class-Diagram-8"><a href="#Class-Diagram-8" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>TerminalExpression：终结符表达式，每个终结符都需要一个 TerminalExpression。</li><li>Context：上下文，包含解释器之外的一些全局信息。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2b125bcd-1b36-43be-9b78-d90b076be549.png"/> </div><br><h3 id="Implementation-8"><a href="#Implementation-8" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个规则检验器实现，具有 and 和 or 规则，通过规则可以构建一颗解析树，用来检验一个文本是否满足解析树定义的规则。</p><p>例如一颗解析树为 D And (A Or (B C))，文本 “D A” 满足该解析树定义的规则。</p><p>这里的 Context 指的是 String。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TerminalExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String literal <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TerminalExpression</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        literal <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringTokenizer st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String test <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>literal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Expression expression1 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Expression expression2 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AndExpression</span><span class="token punctuation">(</span>Expression expression1<span class="token punctuation">,</span> Expression expression2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression1 <span class="token operator">=</span> expression1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression2 <span class="token operator">=</span> expression2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> expression1<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> expression2<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Expression expression1 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> Expression expression2 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrExpression</span><span class="token punctuation">(</span>Expression expression1<span class="token punctuation">,</span> Expression expression2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression1 <span class="token operator">=</span> expression1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression2 <span class="token operator">=</span> expression2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> expression1<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">||</span> expression2<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 构建解析树     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Expression <span class="token function">buildInterpreterTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Literal</span>        Expression terminal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TerminalExpression</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Expression terminal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TerminalExpression</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Expression terminal3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TerminalExpression</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Expression terminal4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TerminalExpression</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// B C</span>        Expression alternation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrExpression</span><span class="token punctuation">(</span>terminal2<span class="token punctuation">,</span> terminal3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// A Or (B C)</span>        Expression alternation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrExpression</span><span class="token punctuation">(</span>terminal1<span class="token punctuation">,</span> alternation1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// D And (A Or (B C))</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndExpression</span><span class="token punctuation">(</span>terminal4<span class="token punctuation">,</span> alternation2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Expression define <span class="token operator">=</span> <span class="token function">buildInterpreterTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String context1 <span class="token operator">=</span> <span class="token string">"D A"</span><span class="token punctuation">;</span>        String context2 <span class="token operator">=</span> <span class="token string">"A B"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>define<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>define<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">truefalse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.Pattern</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.html">java.text.Normalizer</a></li><li>All subclasses of <a href="http://docs.oracle.com/javase/8/docs/api/java/text/Format.html">java.text.Format</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/el/ELResolver.html">javax.el.ELResolver</a></li></ul><h2 id="4-迭代器（Iterator）"><a href="#4-迭代器（Iterator）" class="headerlink" title="4. 迭代器（Iterator）"></a>4. 迭代器（Iterator）</h2><h3 id="Intent-9"><a href="#Intent-9" class="headerlink" title="Intent"></a>Intent</h3><p>提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。</p><h3 id="Class-Diagram-9"><a href="#Class-Diagram-9" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Aggregate 是聚合类，其中 createIterator() 方法可以产生一个 Iterator；</li><li>Iterator 主要定义了 hasNext() 和 next() 方法。</li><li>Client 组合了 Aggregate，为了迭代遍历 Aggregate，也需要组合 Iterator。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/89292ae1-5f13-44dc-b508-3f035e80bf89.png"/> </div><br><h3 id="Implementation-9"><a href="#Implementation-9" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Aggregate</span> <span class="token punctuation">{</span>    Iterator <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteAggregate</span> <span class="token keyword">implements</span> <span class="token class-name">Aggregate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteAggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteIterator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token punctuation">{</span>    Item <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteIterator</span><span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteIterator</span><span class="token punctuation">(</span>Item<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> items<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> items<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Aggregate aggregate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteAggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> iterator <span class="token operator">=</span> aggregate<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">java.util.Iterator</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html">java.util.Enumeration</a></li></ul><h2 id="5-中介者（Mediator）"><a href="#5-中介者（Mediator）" class="headerlink" title="5. 中介者（Mediator）"></a>5. 中介者（Mediator）</h2><h3 id="Intent-10"><a href="#Intent-10" class="headerlink" title="Intent"></a>Intent</h3><p>集中相关对象之间复杂的沟通和控制方式。</p><h3 id="Class-Diagram-10"><a href="#Class-Diagram-10" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Mediator：中介者，定义一个接口用于与各同事（Colleague）对象通信。</li><li>Colleague：同事，相关对象</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/30d6e95c-2e3c-4d32-bf4f-68128a70bc05.png"/> </div><br><h3 id="Implementation-10"><a href="#Implementation-10" class="headerlink" title="Implementation"></a>Implementation</h3><p>Alarm（闹钟）、CoffeePot（咖啡壶）、Calendar（日历）、Sprinkler（喷头）是一组相关的对象，在某个对象的事件产生时需要去操作其它对象，形成了下面这种依赖结构：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/82cfda3b-b53b-4c89-9fdb-26dd2db0cd02.jpg"/> </div><br><p>使用中介者模式可以将复杂的依赖结构变成星形结构：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5359cbf5-5a79-4874-9b17-f23c53c2cb80.jpg"/> </div><br><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>Mediator mediator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alarm</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">doEvent</span><span class="token punctuation">(</span><span class="token string">"alarm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doAlarm()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeePot</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">doEvent</span><span class="token punctuation">(</span><span class="token string">"coffeePot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCoffeePot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doCoffeePot()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calender</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">doEvent</span><span class="token punctuation">(</span><span class="token string">"calender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCalender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doCalender()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sprinkler</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">doEvent</span><span class="token punctuation">(</span><span class="token string">"sprinkler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSprinkler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSprinkler()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doEvent</span><span class="token punctuation">(</span>String eventType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteMediator</span> <span class="token keyword">extends</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Alarm alarm<span class="token punctuation">;</span>    <span class="token keyword">private</span> CoffeePot coffeePot<span class="token punctuation">;</span>    <span class="token keyword">private</span> Calender calender<span class="token punctuation">;</span>    <span class="token keyword">private</span> Sprinkler sprinkler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteMediator</span><span class="token punctuation">(</span>Alarm alarm<span class="token punctuation">,</span> CoffeePot coffeePot<span class="token punctuation">,</span> Calender calender<span class="token punctuation">,</span> Sprinkler sprinkler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>alarm <span class="token operator">=</span> alarm<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coffeePot <span class="token operator">=</span> coffeePot<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>calender <span class="token operator">=</span> calender<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sprinkler <span class="token operator">=</span> sprinkler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doEvent</span><span class="token punctuation">(</span>String eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"alarm"</span><span class="token operator">:</span>                <span class="token function">doAlarmEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"coffeePot"</span><span class="token operator">:</span>                <span class="token function">doCoffeePotEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"calender"</span><span class="token operator">:</span>                <span class="token function">doCalenderEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">doSprinklerEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAlarmEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        alarm<span class="token punctuation">.</span><span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffeePot<span class="token punctuation">.</span><span class="token function">doCoffeePot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calender<span class="token punctuation">.</span><span class="token function">doCalender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sprinkler<span class="token punctuation">.</span><span class="token function">doSprinkler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCoffeePotEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCalenderEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSprinklerEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Alarm alarm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CoffeePot coffeePot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeePot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calender calender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sprinkler sprinkler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprinkler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Mediator mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span>alarm<span class="token punctuation">,</span> coffeePot<span class="token punctuation">,</span> calender<span class="token punctuation">,</span> sprinkler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 闹钟事件到达，调用中介者就可以操作相关对象</span>        alarm<span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">doCoffeePot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">doCalender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">doSprinkler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-9"><a href="#JDK-9" class="headerlink" title="JDK"></a>JDK</h3><ul><li>All scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Timer.html">java.util.Timer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-">java.util.concurrent.Executor#execute()</a></li><li>submit() and invokeXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">java.util.concurrent.ExecutorService</a></li><li>scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html">java.util.concurrent.ScheduledExecutorService</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-">java.lang.reflect.Method#invoke()</a></li></ul><h2 id="6-备忘录（Memento）"><a href="#6-备忘录（Memento）" class="headerlink" title="6. 备忘录（Memento）"></a>6. 备忘录（Memento）</h2><h3 id="Intent-11"><a href="#Intent-11" class="headerlink" title="Intent"></a>Intent</h3><p>在不违反封装的情况下获得对象的内部状态，从而在需要时可以将对象恢复到最初状态。</p><h3 id="Class-Diagram-11"><a href="#Class-Diagram-11" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Originator：原始对象</li><li>Caretaker：负责保存好备忘录</li><li>Menento：备忘录，存储原始对象的的状态。备忘录实际上有两个接口，一个是提供给 Caretaker 的窄接口：它只能将备忘录传递给其它对象；一个是提供给 Originator 的宽接口，允许它访问到先前状态所需的所有数据。理想情况是只允许 Originator 访问本备忘录的内部状态。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/50678f34-694f-45a4-91c6-34d985c83fee.png"/> </div><br><h3 id="Implementation-11"><a href="#Implementation-11" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下实现了一个简单计算器程序，可以输入两个值，然后计算这两个值的和。备忘录模式允许将这两个值存储起来，然后在某个时刻用存储的状态进行恢复。</p><p>实现参考：<a href="https://www.oodesign.com/memento-pattern-calculator-example-java-sourcecode.html">Memento Pattern - Calculator Example - Java Sourcecode</a></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Originator Interface */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Create Memento</span>    PreviousCalculationToCareTaker <span class="token function">backupLastCalculation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// setMemento</span>    <span class="token keyword">void</span> <span class="token function">restorePreviousCalculation</span><span class="token punctuation">(</span>PreviousCalculationToCareTaker memento<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getCalculationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setFirstNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> firstNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setSecondNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> secondNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Originator Implementation */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorImp</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> firstNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> secondNumber<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PreviousCalculationToCareTaker <span class="token function">backupLastCalculation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// create a memento object used for restoring two numbers</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PreviousCalculationImp</span><span class="token punctuation">(</span>firstNumber<span class="token punctuation">,</span> secondNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restorePreviousCalculation</span><span class="token punctuation">(</span>PreviousCalculationToCareTaker memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstNumber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PreviousCalculationToOriginator<span class="token punctuation">)</span> memento<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secondNumber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PreviousCalculationToOriginator<span class="token punctuation">)</span> memento<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSecondNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCalculationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// result is adding two numbers</span>        <span class="token keyword">return</span> firstNumber <span class="token operator">+</span> secondNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirstNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> firstNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstNumber <span class="token operator">=</span> firstNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecondNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> secondNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secondNumber <span class="token operator">=</span> secondNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Memento Interface to Originator * * This interface allows the originator to restore its state */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PreviousCalculationToOriginator</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getFirstNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getSecondNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  Memento interface to CalculatorOperator (Caretaker) */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PreviousCalculationToCareTaker</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// no operations permitted for the caretaker</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Memento Object Implementation * &lt;p> * Note that this object implements both interfaces to Originator and CareTaker */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreviousCalculationImp</span> <span class="token keyword">implements</span> <span class="token class-name">PreviousCalculationToCareTaker</span><span class="token punctuation">,</span>        PreviousCalculationToOriginator <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> firstNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> secondNumber<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PreviousCalculationImp</span><span class="token punctuation">(</span><span class="token keyword">int</span> firstNumber<span class="token punctuation">,</span> <span class="token keyword">int</span> secondNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstNumber <span class="token operator">=</span> firstNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secondNumber <span class="token operator">=</span> secondNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFirstNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> firstNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSecondNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> secondNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * CareTaker object */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// program starts</span>        Calculator calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculatorImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// assume user enters two numbers</span>        calculator<span class="token punctuation">.</span><span class="token function">setFirstNumber</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">setSecondNumber</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// find result</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span><span class="token function">getCalculationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Store result of this calculation in case of error</span>        PreviousCalculationToCareTaker memento <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">backupLastCalculation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// user enters a number</span>        calculator<span class="token punctuation">.</span><span class="token function">setFirstNumber</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// user enters a wrong second number and calculates result</span>        calculator<span class="token punctuation">.</span><span class="token function">setSecondNumber</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">290</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// calculate result</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span><span class="token function">getCalculationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// user hits CTRL + Z to undo last operation and see last result</span>        calculator<span class="token punctuation">.</span><span class="token function">restorePreviousCalculation</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// result restored</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span><span class="token function">getCalculationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">110-273110<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JDK-10"><a href="#JDK-10" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.io.Serializable</li></ul><h2 id="7-观察者（Observer）"><a href="#7-观察者（Observer）" class="headerlink" title="7. 观察者（Observer）"></a>7. 观察者（Observer）</h2><h3 id="Intent-12"><a href="#Intent-12" class="headerlink" title="Intent"></a>Intent</h3><p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</p><p>主题（Subject）是被观察的对象，而其所有依赖者（Observer）称为观察者。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7a3c6a30-c735-4edb-8115-337288a4f0f2.jpg" width="600"/> </div><br><h3 id="Class-Diagram-12"><a href="#Class-Diagram-12" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>主题（Subject）具有注册和移除观察者、并通知所有观察者的功能，主题是通过维护一张观察者列表来实现这些操作的。</p><p>观察者（Observer）的注册功能需要调用主题的 registerObserver() 方法。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a8c8f894-a712-447c-9906-5caef6a016e3.png"/> </div><br><h3 id="Implementation-12"><a href="#Implementation-12" class="headerlink" title="Implementation"></a>Implementation</h3><p>天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b1df9732-86ce-4d69-9f06-fba1db7b3b5a.jpg"/> </div><br><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer o <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            o<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">,</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatisticsDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StatisticsDisplay</span><span class="token punctuation">(</span>Subject weatherData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weatherData<span class="token punctuation">.</span><span class="token function">reisterObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StatisticsDisplay.update: "</span> <span class="token operator">+</span> temp <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> humidity <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditionsDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CurrentConditionsDisplay</span><span class="token punctuation">(</span>Subject weatherData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CurrentConditionsDisplay.update: "</span> <span class="token operator">+</span> temp <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> humidity <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherStation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WeatherData weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CurrentConditionsDisplay currentConditionsDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditionsDisplay</span><span class="token punctuation">(</span>weatherData<span class="token punctuation">)</span><span class="token punctuation">;</span>        StatisticsDisplay statisticsDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatisticsDisplay</span><span class="token punctuation">(</span>weatherData<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">CurrentConditionsDisplay.update: 0.0 0.0 0.0StatisticsDisplay.update: 0.0 0.0 0.0CurrentConditionsDisplay.update: 1.0 1.0 1.0StatisticsDisplay.update: 1.0 1.0 1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-11"><a href="#JDK-11" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html">java.util.Observer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html">java.util.EventListener</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html">javax.servlet.http.HttpSessionBindingListener</a></li><li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li></ul><h2 id="8-状态（State）"><a href="#8-状态（State）" class="headerlink" title="8. 状态（State）"></a>8. 状态（State）</h2><h3 id="Intent-13"><a href="#Intent-13" class="headerlink" title="Intent"></a>Intent</h3><p>允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。</p><h3 id="Class-Diagram-13"><a href="#Class-Diagram-13" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/79df886f-fdc3-4020-a07f-c991bb58e0d8.png"/> </div><br><h3 id="Implementation-13"><a href="#Implementation-13" class="headerlink" title="Implementation"></a>Implementation</h3><p>糖果销售机有多种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/396be981-3f2c-4fd9-8101-dbf9c841504b.jpg" width="600"/> </div><br><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 投入 25 分钱     */</span>    <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 退回 25 分钱     */</span>    <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 转动曲柄     */</span>    <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发放糖果     */</span>    <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HasQuarterState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HasQuarterState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You can't insert another quarter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Quarter returned"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getNoQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You turned..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getSoldState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No gumball dispensed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoQuarterState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NoQuarterState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You insert a quarter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getHasQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You haven't insert a quarter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You turned, but there's no quarter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You need to pay first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoldOutState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SoldOutState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You can't insert a quarter, the machine is sold out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You can't eject, you haven't inserted a quarter yet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"You turned, but there are no gumballs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No gumball dispensed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoldState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    GumballMachine gumballMachine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SoldState</span><span class="token punctuation">(</span>GumballMachine gumballMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gumballMachine <span class="token operator">=</span> gumballMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please wait, we're already giving you a gumball"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sorry, you already turned the crank"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Turning twice doesn't get you another gumball!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">releaseBall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getNoQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Oops, out of gumballs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            gumballMachine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>gumballMachine<span class="token punctuation">.</span><span class="token function">getSoldOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GumballMachine</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> State soldOutState<span class="token punctuation">;</span>    <span class="token keyword">private</span> State noQuarterState<span class="token punctuation">;</span>    <span class="token keyword">private</span> State hasQuarterState<span class="token punctuation">;</span>    <span class="token keyword">private</span> State soldState<span class="token punctuation">;</span>    <span class="token keyword">private</span> State state<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GumballMachine</span><span class="token punctuation">(</span><span class="token keyword">int</span> numberGumballs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count <span class="token operator">=</span> numberGumballs<span class="token punctuation">;</span>        soldOutState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoldOutState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        noQuarterState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoQuarterState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hasQuarterState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HasQuarterState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soldState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoldState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numberGumballs <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> noQuarterState<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> soldOutState<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state<span class="token punctuation">.</span><span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>State state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseBall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A gumball comes rolling out the slot..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getSoldOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> soldOutState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getNoQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> noQuarterState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getHasQuarterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hasQuarterState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> State <span class="token function">getSoldState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> soldState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GumballMachine gumballMachine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GumballMachine</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">ejectQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">insertQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gumballMachine<span class="token punctuation">.</span><span class="token function">turnCrank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">You insert a quarterYou turned...A gumball comes rolling out the slot...You insert a quarterQuarter returnedYou turned, but there's no quarterYou need to pay firstYou insert a quarterYou turned...A gumball comes rolling out the slot...You insert a quarterYou turned...A gumball comes rolling out the slot...You haven't insert a quarterYou insert a quarterYou can't insert another quarterYou turned...A gumball comes rolling out the slot...You insert a quarterYou turned...A gumball comes rolling out the slot...Oops, out of gumballsYou can't insert a quarter, the machine is sold outYou turned, but there are no gumballsNo gumball dispensed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-策略（Strategy）"><a href="#9-策略（Strategy）" class="headerlink" title="9. 策略（Strategy）"></a>9. 策略（Strategy）</h2><h3 id="Intent-14"><a href="#Intent-14" class="headerlink" title="Intent"></a>Intent</h3><p>定义一系列算法，封装每个算法，并使它们可以互换。</p><p>策略模式可以让算法独立于使用它的客户端。</p><h3 id="Class-Diagram-14"><a href="#Class-Diagram-14" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Strategy 接口定义了一个算法族，它们都实现了  behavior() 方法。</li><li>Context 是使用到该算法族的类，其中的 doSomething() 方法会调用 behavior()，setStrategy(Strategy) 方法可以动态地改变 strategy 对象，也就是说能动态地改变 Context 所使用的算法。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cd1be8c2-755a-4a66-ad92-2e30f8f47922.png"/> </div><br><h3 id="与状态模式的比较"><a href="#与状态模式的比较" class="headerlink" title="与状态模式的比较"></a>与状态模式的比较</h3><p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 Context 所组合的 State 对象，而策略模式是通过 Context 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p><p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 Context 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 使用的算法。</p><h3 id="Implementation-14"><a href="#Implementation-14" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计一个鸭子，它可以动态地改变叫声。这里的算法族是鸭子的叫声行为。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuackBehavior</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quack</span> <span class="token keyword">implements</span> <span class="token class-name">QuackBehavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"quack!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Squeak</span> <span class="token keyword">implements</span> <span class="token class-name">QuackBehavior</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"squeak!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> QuackBehavior quackBehavior<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performQuack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>quackBehavior <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quackBehavior<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setQuackBehavior</span><span class="token punctuation">(</span>QuackBehavior quackBehavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>quackBehavior <span class="token operator">=</span> quackBehavior<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Duck duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">setQuackBehavior</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Squeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">performQuack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">setQuackBehavior</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">performQuack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">squeak!quack!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JDK-12"><a href="#JDK-12" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.util.Comparator#compare()</li><li>javax.servlet.http.HttpServlet</li><li>javax.servlet.Filter#doFilter()</li></ul><h2 id="10-模板方法（Template-Method）"><a href="#10-模板方法（Template-Method）" class="headerlink" title="10. 模板方法（Template Method）"></a>10. 模板方法（Template Method）</h2><h3 id="Intent-15"><a href="#Intent-15" class="headerlink" title="Intent"></a>Intent</h3><p>定义算法框架，并将一些步骤的实现延迟到子类。</p><p>通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</p><h3 id="Class-Diagram-15"><a href="#Class-Diagram-15" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ac6a794b-68c0-486c-902f-8d988eee5766.png"/> </div><br><h3 id="Implementation-15"><a href="#Implementation-15" class="headerlink" title="Implementation"></a>Implementation</h3><p>冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/11236498-1417-46ce-a1b0-e10054256955.png"/> </div><br><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CaffeineBeverage</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"boilWater"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pourInCup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">CaffeineBeverage</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Coffee.brew"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Coffee.addCondiments"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token keyword">extends</span> <span class="token class-name">CaffeineBeverage</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tea.brew"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tea.addCondiments"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CaffeineBeverage caffeineBeverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caffeineBeverage<span class="token punctuation">.</span><span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caffeineBeverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caffeineBeverage<span class="token punctuation">.</span><span class="token function">prepareRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">boilWaterCoffee.brewpourInCupCoffee.addCondiments-----------boilWaterTea.brewpourInCupTea.addCondiments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-13"><a href="#JDK-13" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.util.Collections#sort()</li><li>java.io.InputStream#skip()</li><li>java.io.InputStream#read()</li><li>java.util.AbstractList#indexOf()</li></ul><h2 id="11-访问者（Visitor）"><a href="#11-访问者（Visitor）" class="headerlink" title="11. 访问者（Visitor）"></a>11. 访问者（Visitor）</h2><h3 id="Intent-16"><a href="#Intent-16" class="headerlink" title="Intent"></a>Intent</h3><p>为一个对象结构（比如组合结构）增加新能力。</p><h3 id="Class-Diagram-16"><a href="#Class-Diagram-16" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Visitor：访问者，为每一个 ConcreteElement 声明一个 visit 操作</li><li>ConcreteVisitor：具体访问者，存储遍历过程中的累计结果</li><li>ObjectStructure：对象结构，可以是组合结构，或者是一个集合。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/79c6f036-bde6-4393-85a3-ef36a0327bd2.png"/> </div><br><h3 id="Implementation-16"><a href="#Implementation-16" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CustomerGroup</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> customers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Customer customer <span class="token operator">:</span> customers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            customer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addCustomer</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        customers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Customer</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Order order <span class="token operator">:</span> orders<span class="token punctuation">)</span> <span class="token punctuation">{</span>            order<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Item<span class="token operator">></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Order</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Order</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String itemName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>itemName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Item item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token function">Item</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneralReport</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> customersNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ordersNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> itemsNo<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customersNo<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ordersNo<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itemsNo<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">displayResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Number of customers: "</span> <span class="token operator">+</span> customersNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Number of orders:    "</span> <span class="token operator">+</span> ordersNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Number of items:     "</span> <span class="token operator">+</span> itemsNo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Customer customer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"customer1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer1<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"order1"</span><span class="token punctuation">,</span> <span class="token string">"item1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer1<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"order2"</span><span class="token punctuation">,</span> <span class="token string">"item1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer1<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"order3"</span><span class="token punctuation">,</span> <span class="token string">"item1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"order_a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"item_a1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"item_a2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"item_a3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Customer customer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"customer2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer2<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        CustomerGroup customers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customers<span class="token punctuation">.</span><span class="token function">addCustomer</span><span class="token punctuation">(</span>customer1<span class="token punctuation">)</span><span class="token punctuation">;</span>        customers<span class="token punctuation">.</span><span class="token function">addCustomer</span><span class="token punctuation">(</span>customer2<span class="token punctuation">)</span><span class="token punctuation">;</span>        GeneralReport visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customers<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        visitor<span class="token punctuation">.</span><span class="token function">displayResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">customer1order1item1order2item1order3item1customer2order_aitem_a1item_a2item_a3Number of customers: 2Number of orders:    4Number of items:     6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-14"><a href="#JDK-14" class="headerlink" title="JDK"></a>JDK</h3><ul><li>javax.lang.model.element.Element and javax.lang.model.element.ElementVisitor</li><li>javax.lang.model.type.TypeMirror and javax.lang.model.type.TypeVisitor</li></ul><h2 id="12-空对象（Null）"><a href="#12-空对象（Null）" class="headerlink" title="12. 空对象（Null）"></a>12. 空对象（Null）</h2><h3 id="Intent-17"><a href="#Intent-17" class="headerlink" title="Intent"></a>Intent</h3><p>使用什么都不做的空对象来代替 NULL。</p><p>一个方法返回 NULL，意味着方法的调用端需要去检查返回值是否是 NULL，这么做会导致非常多的冗余的检查代码。并且如果某一个调用端忘记了做这个检查返回值，而直接使用返回的对象，那么就有可能抛出空指针异常。</p><h3 id="Class-Diagram-17"><a href="#Class-Diagram-17" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/22870bbe-898f-4c17-a31a-d7c5ee5d1c10.png"/> </div><br><h3 id="Implementation-17"><a href="#Implementation-17" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealOperation</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOperation</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullOperation</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOperation</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do nothing</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractOperation abstractOperation <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        abstractOperation<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AbstractOperation <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> para<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>para <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NullOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RealOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、结构型"><a href="#四、结构型" class="headerlink" title="四、结构型"></a>四、结构型</h1><h2 id="1-适配器（Adapter）"><a href="#1-适配器（Adapter）" class="headerlink" title="1. 适配器（Adapter）"></a>1. 适配器（Adapter）</h2><h3 id="Intent-18"><a href="#Intent-18" class="headerlink" title="Intent"></a>Intent</h3><p>把一个类接口转换成另一个用户需要的接口。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/3d5b828e-5c4d-48d8-a440-281e4a8e1c92.png"/> </div><br><h3 id="Class-Diagram-18"><a href="#Class-Diagram-18" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ff5152fc-4ff3-44c4-95d6-1061002c364a.png"/> </div><br><h3 id="Implementation-18"><a href="#Implementation-18" class="headerlink" title="Implementation"></a>Implementation</h3><p>鸭子（Duck）和火鸡（Turkey）拥有不同的叫声，Duck 的叫声调用 quack() 方法，而 Turkey 调用 gobble() 方法。</p><p>要求将 Turkey 的 gobble() 方法适配成 Duck 的 quack() 方法，从而让火鸡冒充鸭子！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Turkey</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildTurkey</span> <span class="token keyword">implements</span> <span class="token class-name">Turkey</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"gobble!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TurkeyAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    Turkey turkey<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TurkeyAdapter</span><span class="token punctuation">(</span>Turkey turkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>turkey <span class="token operator">=</span> turkey<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        turkey<span class="token punctuation">.</span><span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Turkey turkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildTurkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Duck duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurkeyAdapter</span><span class="token punctuation">(</span>turkey<span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-15"><a href="#JDK-15" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList%28T...%29">java.util.Arrays#asList()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-">java.util.Collections#list()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-">java.util.Collections#enumeration()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-">javax.xml.bind.annotation.adapters.XMLAdapter</a></li></ul><h2 id="2-桥接（Bridge）"><a href="#2-桥接（Bridge）" class="headerlink" title="2. 桥接（Bridge）"></a>2. 桥接（Bridge）</h2><h3 id="Intent-19"><a href="#Intent-19" class="headerlink" title="Intent"></a>Intent</h3><p>将抽象与实现分离开来，使它们可以独立变化。</p><h3 id="Class-Diagram-19"><a href="#Class-Diagram-19" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Abstraction：定义抽象类的接口</li><li>Implementor：定义实现类接口</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2a1f8b0f-1dd7-4409-b177-a381c58066ad.png"/> </div><br><h3 id="Implementation-19"><a href="#Implementation-19" class="headerlink" title="Implementation"></a>Implementation</h3><p>RemoteControl 表示遥控器，指代 Abstraction。</p><p>TV 表示电视，指代 Implementor。</p><p>桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sony</span> <span class="token keyword">extends</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sony.on()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sony.off()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sony.tuneChannel()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RCA</span> <span class="token keyword">extends</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RCA.on()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RCA.off()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RCA.tuneChannel()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RemoteControl</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> TV tv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RemoteControl</span><span class="token punctuation">(</span>TV tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteRemoteControl1</span> <span class="token keyword">extends</span> <span class="token class-name">RemoteControl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ConcreteRemoteControl1</span><span class="token punctuation">(</span>TV tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteRemoteControl1.on()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteRemoteControl1.off()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteRemoteControl1.tuneChannel()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteRemoteControl2</span> <span class="token keyword">extends</span> <span class="token class-name">RemoteControl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ConcreteRemoteControl2</span><span class="token punctuation">(</span>TV tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteRemoteControl2.on()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteRemoteControl2.off()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteRemoteControl2.tuneChannel()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RemoteControl remoteControl1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteRemoteControl1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RCA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl1<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl1<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl1<span class="token punctuation">.</span><span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RemoteControl remoteControl2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteRemoteControl2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sony</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         remoteControl2<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         remoteControl2<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         remoteControl2<span class="token punctuation">.</span><span class="token function">tuneChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-16"><a href="#JDK-16" class="headerlink" title="JDK"></a>JDK</h3><ul><li>AWT (It provides an abstraction layer which maps onto the native OS the windowing support.)</li><li>JDBC</li></ul><h2 id="3-组合（Composite）"><a href="#3-组合（Composite）" class="headerlink" title="3. 组合（Composite）"></a>3. 组合（Composite）</h2><h3 id="Intent-20"><a href="#Intent-20" class="headerlink" title="Intent"></a>Intent</h3><p>将对象组合成树形结构来表示“整体/部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。</p><h3 id="Class-Diagram-20"><a href="#Class-Diagram-20" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>组件（Component）类是组合类（Composite）和叶子类（Leaf）的父类，可以把组合类看成是树的中间节点。</p><p>组合对象拥有一个或者多个组件对象，因此组合对象的操作可以委托给组件对象去处理，而组件对象可以是另一个组合对象或者叶子对象。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2b8bfd57-b4d1-4a75-bfb0-bcf1fba4014a.png"/> </div><br><h3 id="Implementation-20"><a href="#Implementation-20" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Component</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Component<span class="token operator">></span> child<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Composite</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Composite:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Component component <span class="token operator">:</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        child<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        child<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Leaf</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"left:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 牺牲透明性换取单一职责原则，这样就不用考虑是叶子节点还是组合节点</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Composite root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Component node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Component node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Component node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node3<span class="token punctuation">)</span><span class="token punctuation">;</span>        Component node21 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Component node22 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node21<span class="token punctuation">)</span><span class="token punctuation">;</span>        node2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node22<span class="token punctuation">)</span><span class="token punctuation">;</span>        Component node221 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"221"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node22<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node221<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">Composite:root--left:1--Composite:2----left:21----Composite:22------left:221--left:3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-17"><a href="#JDK-17" class="headerlink" title="JDK"></a>JDK</h3><ul><li>javax.swing.JComponent#add(Component)</li><li>java.awt.Container#add(Component)</li><li>java.util.Map#putAll(Map)</li><li>java.util.List#addAll(Collection)</li><li>java.util.Set#addAll(Collection)</li></ul><h2 id="4-装饰（Decorator）"><a href="#4-装饰（Decorator）" class="headerlink" title="4. 装饰（Decorator）"></a>4. 装饰（Decorator）</h2><h3 id="Intent-21"><a href="#Intent-21" class="headerlink" title="Intent"></a>Intent</h3><p>为对象动态添加功能。</p><h3 id="Class-Diagram-21"><a href="#Class-Diagram-21" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>装饰者（Decorator）和具体组件（ConcreteComponent）都继承自组件（Component），具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6b833bc2-517a-4270-8a5e-0a5f6df8cd96.png"/> </div><br><h3 id="Implementation-21"><a href="#Implementation-21" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计不同种类的饮料，饮料可以添加配料，比如可以添加牛奶，并且支持动态添加新配料。每增加一种配料，该饮料的价格就会增加，要求计算一种饮料的价格。</p><p>下图表示在 DarkRoast 饮料上新增新添加 Mocha 配料，之后又添加了 Whip 配料。DarkRoast 被 Mocha 包裹，Mocha 又被 Whip 包裹。它们都继承自相同父类，都有 cost() 方法，外层类的 cost() 方法调用了内层类的 cost() 方法。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c9cfd600-bc91-4f3a-9f99-b42f88a5bb24.jpg" width="600"/> </div><br><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DarkRoast</span> <span class="token keyword">implements</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseBlend</span> <span class="token keyword">implements</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CondimentDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Beverage beverage<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Milk</span><span class="token punctuation">(</span>Beverage beverage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mocha</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Mocha</span><span class="token punctuation">(</span>Beverage beverage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Beverage beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseBlend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span>beverage<span class="token punctuation">)</span><span class="token punctuation">;</span>        beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span>beverage<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">3.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>类应该对扩展开放，对修改关闭：也就是添加新功能时不需要修改代码。饮料可以动态添加新的配料，而不需要去修改饮料的代码。</p><p>不可能把所有的类设计成都满足这一原则，应当把该原则应用于最有可能发生改变的地方。</p><h3 id="JDK-18"><a href="#JDK-18" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.io.BufferedInputStream(InputStream)</li><li>java.io.DataInputStream(InputStream)</li><li>java.io.BufferedOutputStream(OutputStream)</li><li>java.util.zip.ZipOutputStream(OutputStream)</li><li>java.util.Collections#checked<a href="">List|Map|Set|SortedSet|SortedMap</a></li></ul><h2 id="5-外观（Facade）"><a href="#5-外观（Facade）" class="headerlink" title="5. 外观（Facade）"></a>5. 外观（Facade）</h2><h3 id="Intent-22"><a href="#Intent-22" class="headerlink" title="Intent"></a>Intent</h3><p>提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。</p><h3 id="Class-Diagram-22"><a href="#Class-Diagram-22" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f9978fa6-9f49-4a0f-8540-02d269ac448f.png"/> </div><br><h3 id="Implementation-22"><a href="#Implementation-22" class="headerlink" title="Implementation"></a>Implementation</h3><p>观看电影需要操作很多电器，使用外观模式实现一键看电影功能。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubSystem</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"turnOnTV()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCD</span><span class="token punctuation">(</span>String cd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setCD( "</span> <span class="token operator">+</span> cd <span class="token operator">+</span> <span class="token string">" )"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startWatching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"startWatching()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SubSystem subSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watchMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        subSystem<span class="token punctuation">.</span><span class="token function">turnOnTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subSystem<span class="token punctuation">.</span><span class="token function">setCD</span><span class="token punctuation">(</span><span class="token string">"a movie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subSystem<span class="token punctuation">.</span><span class="token function">startWatching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Facade facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        facade<span class="token punctuation">.</span><span class="token function">watchMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计原则-1"><a href="#设计原则-1" class="headerlink" title="设计原则"></a>设计原则</h3><p>最少知识原则：只和你的密友谈话。也就是说客户对象所需要交互的对象应当尽可能少。</p><h2 id="6-享元（Flyweight）"><a href="#6-享元（Flyweight）" class="headerlink" title="6. 享元（Flyweight）"></a>6. 享元（Flyweight）</h2><h3 id="Intent-23"><a href="#Intent-23" class="headerlink" title="Intent"></a>Intent</h3><p>利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。</p><h3 id="Class-Diagram-23"><a href="#Class-Diagram-23" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Flyweight：享元对象</li><li>IntrinsicState：内部状态，享元对象共享内部状态</li><li>ExtrinsicState：外部状态，每个享元对象的外部状态不同</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5f5c22d5-9c0e-49e1-b5b0-6cc7032724d4.png"/> </div><br><h3 id="Implementation-23"><a href="#Implementation-23" class="headerlink" title="Implementation"></a>Implementation</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doOperation</span><span class="token punctuation">(</span>String extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFlyweight</span> <span class="token keyword">implements</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String intrinsicState<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteFlyweight</span><span class="token punctuation">(</span>String intrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>intrinsicState <span class="token operator">=</span> intrinsicState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOperation</span><span class="token punctuation">(</span>String extrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Object address: "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IntrinsicState: "</span> <span class="token operator">+</span> intrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ExtrinsicState: "</span> <span class="token operator">+</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Flyweight<span class="token operator">></span> flyweights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Flyweight <span class="token function">getFlyweight</span><span class="token punctuation">(</span>String intrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flyweights<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>intrinsicState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Flyweight flyweight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span>intrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>            flyweights<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>intrinsicState<span class="token punctuation">,</span> flyweight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flyweights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>intrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FlyweightFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlyweightFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight flyweight1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight flyweight2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flyweight1<span class="token punctuation">.</span><span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flyweight2<span class="token punctuation">.</span><span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">Object address: 1163157884IntrinsicState: aaExtrinsicState: xObject address: 1163157884IntrinsicState: aaExtrinsicState: y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-19"><a href="#JDK-19" class="headerlink" title="JDK"></a>JDK</h3><p>Java 利用缓存来加速大量小对象的访问时间。</p><ul><li>java.lang.Integer#valueOf(int)</li><li>java.lang.Boolean#valueOf(boolean)</li><li>java.lang.Byte#valueOf(byte)</li><li>java.lang.Character#valueOf(char)</li></ul><h2 id="7-代理（Proxy）"><a href="#7-代理（Proxy）" class="headerlink" title="7. 代理（Proxy）"></a>7. 代理（Proxy）</h2><h3 id="Intent-24"><a href="#Intent-24" class="headerlink" title="Intent"></a>Intent</h3><p>控制对其它对象的访问。</p><h3 id="Class-Diagram-24"><a href="#Class-Diagram-24" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>代理有以下四类：</p><ul><li>远程代理（Remote Proxy）：控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。</li><li>虚拟代理（Virtual Proxy）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。</li><li>保护代理（Protection Proxy）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。</li><li>智能代理（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数；当第一次引用一个对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9b679ff5-94c6-48a7-b9b7-2ea868e828ed.png"/> </div><br><h3 id="Implementation-24"><a href="#Implementation-24" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个虚拟代理的实现，模拟了图片延迟加载的情况下使用与图片大小相等的临时内容去替换原始图片，直到图片加载完成才将图片显示出来。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Image</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighResolutionImage</span> <span class="token keyword">implements</span> <span class="token class-name">Image</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> URL imageURL<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HighResolutionImage</span><span class="token punctuation">(</span>URL imageURL<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imageURL <span class="token operator">=</span> imageURL<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟图片加载，延迟 3s 加载完成</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> endTime <span class="token operator">-</span> startTime <span class="token operator">></span> <span class="token number">3000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Real Image: "</span> <span class="token operator">+</span> imageURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Image</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HighResolutionImage highResolutionImage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ImageProxy</span><span class="token punctuation">(</span>HighResolutionImage highResolutionImage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>highResolutionImage <span class="token operator">=</span> highResolutionImage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>highResolutionImage<span class="token punctuation">.</span><span class="token function">isLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Temp Image: "</span> <span class="token operator">+</span> highResolutionImage<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> highResolutionImage<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        highResolutionImage<span class="token punctuation">.</span><span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageViewer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String image <span class="token operator">=</span> <span class="token string">"http://image.jpg"</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        HighResolutionImage highResolutionImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HighResolutionImage</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageProxy imageProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageProxy</span><span class="token punctuation">(</span>highResolutionImage<span class="token punctuation">)</span><span class="token punctuation">;</span>        imageProxy<span class="token punctuation">.</span><span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK-20"><a href="#JDK-20" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.lang.reflect.Proxy</li><li>RMI</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>弗里曼. Head First 设计模式 [M]. 中国电力出版社, 2007.</li><li>Gamma E. 设计模式: 可复用面向对象软件的基础 [M]. 机械工业出版社, 2007.</li><li>Bloch J. Effective java[M]. Addison-Wesley Professional, 2017.</li><li><a href="http://www.oodesign.com/">Design Patterns</a></li><li><a href="http://java-design-patterns.com/">Design patterns implemented in Java</a></li><li><a href="http://www.programering.com/a/MTNxAzMwATY.html">The breakdown of design patterns in JDK</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
            <tag> 简单工厂 </tag>
            
            <tag> 工厂方法 </tag>
            
            <tag> 抽象工厂 </tag>
            
            <tag> 生成器(Builder) </tag>
            
            <tag> 原型模式 </tag>
            
            <tag> 模板方法 </tag>
            
            <tag> 观察者模式 </tag>
            
            <tag> 适配器模式 </tag>
            
            <tag> 装饰者模式 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制</title>
      <link href="2021/06/03/java-fan-she-ji-zhi/"/>
      <url>2021/06/03/java-fan-she-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>反射（Reflection） 是 Java 程序开发语言的特征之一，它允许运行中的 Java 程序对自身进行检查，或者说“自审”，并能直接操作程序的内部属性和方法。它并非Java语言独有，反射是所有注解实现的原理，尤其在框架设计中，有不可替代的作用。</p><p>常见的面试考察点包括：</p><ul><li>如何反射获取 Class 对象</li><li>如何反射获取类中的所有字段</li><li>如何反射获取类中的所有构造方法</li><li>如何反射获取类中的所有非构造方法</li></ul><h1 id="1、反射是什么？"><a href="#1、反射是什么？" class="headerlink" title="1、反射是什么？"></a>1、反射是什么？</h1><p>反射的概念是由 Smith 在 1982 年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。通俗地讲，一提到反射，我们就可以想到镜子。镜子可以明明白白地照出我是谁，还可以照出别人是谁。反映到程序中，反射就是用来让开发者知道这个类中有什么成员，以及别的类中有什么成员。</p><h1 id="2、为什么要有反射？"><a href="#2、为什么要有反射？" class="headerlink" title="2、为什么要有反射？"></a>2、为什么要有反射？</h1><p>有的同学可能会疑惑，Java 已经有了封装为什么还要有反射呢？反射看起来像是破坏了封装性。甚至让私有变量都可以被外部访问到，使得类变得不那么安全了。从 Oracle 官方文档中可以看出，反射主要应用在以下几方面：</p><ul><li>反射让开发人员可以通过外部类的全路径名创建对象，并使用这些类，实现一些扩展的功能。</li><li>反射让开发人员可以枚举出类的全部成员，包括构造函数、属性、方法。以帮助开发者写出正确的代码。</li><li>测试时可以利用反射 API 访问类的私有成员，以保证测试代码覆盖率。</li></ul><p>也就是说，Oracle 希望开发者将反射作为一个工具，用来帮助程序员实现本不可能实现的功能。</p><h1 id="3、反射-API"><a href="#3、反射-API" class="headerlink" title="3、反射 API"></a>3、反射 API</h1><p>Java 类的成员包括以下三类：属性字段、构造函数、方法。反射的 API 也是与这几个成员相关：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210614155328931.png" alt="image-20210614155328931"></p><p>接下来，我们通过一个典型的例子来学习反射。先做准备工作，新建 com.test.reflection 包，在此包中新建一个 Student 类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String studentName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> studentAge<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Student</span><span class="token punctuation">(</span>String studentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>studentName <span class="token operator">=</span> studentName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> studentAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>studentAge <span class="token operator">=</span> studentAge<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">show</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show: "</span> <span class="token operator">+</span> studentName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> studentAge <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"testReturnValue"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Student 类中有两个<strong>字段</strong>、两个<strong>构造方法</strong>、两个<strong>函数</strong>，且都是一个私有，一个公有。由此可知，这个测试类基本涵盖了我们平时常用的所有类成员。</p><h1 id="4、获取Class对象的三种方式"><a href="#4、获取Class对象的三种方式" class="headerlink" title="4、获取Class对象的三种方式"></a>4、获取Class对象的三种方式</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.通过字符串获取Class对象（利用反射），这个字符串必须带上完整路径名</span>Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.通过类的class属性</span>Class <span class="token class-name">studentClass2</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.通过对象的getClass()函数</span>Student studentObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">studentClass3</span> <span class="token operator">=</span> studentObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这三种方式获取到的 Class 对象是同一个，也就是说 Java 运行时，每一个类只会生成一个 Class 对象。</p><p>我们将其打印出来测试一下：</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class1 = "</span> <span class="token operator">+</span> studentClass <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class2 = "</span> <span class="token operator">+</span> studentClass2 <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class3 = "</span> <span class="token operator">+</span> studentClass3 <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class1 == class2 ? "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>studentClass <span class="token operator">==</span> studentClass2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class2 == class3 ? "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>studentClass2 <span class="token operator">==</span> studentClass3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-java"><code class="language-java">class1 <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>Student</span>class2 <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>Student</span>class3 <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>Student</span>class1 <span class="token operator">==</span> class2 <span class="token operator">?</span> <span class="token boolean">true</span>class2 <span class="token operator">==</span> class3 <span class="token operator">?</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，拿到 Class 对象之后，我们就可以为所欲为啦！</p><h1 id="5、获取成员变量"><a href="#5、获取成员变量" class="headerlink" title="5、获取成员变量"></a>5、获取成员变量</h1><p>获取字段有两个 API：<code>getDeclaredFields</code>和<code>getFields</code>。他们的区别是:<code>getDeclaredFields</code>用于获取所有声明的字段，包括公有字段和私有字段，<code>getFields</code>仅用来获取公有字段：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的字段</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFieldList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFieldList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Field: "</span> <span class="token operator">+</span> declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的字段</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fieldList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fieldList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"field: "</span> <span class="token operator">+</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre><code>declared Field: private java.lang.String com.test.reflection.Student.studentNamedeclared Field: public int com.test.reflection.Student.studentAgefield: public int com.test.reflection.Student.studentAge</code></pre><h1 id="6、获取构造方法"><a href="#6、获取构造方法" class="headerlink" title="6、获取构造方法"></a>6、获取构造方法</h1><p>获取构造方法同样包含了两个 API：用于获取所有构造方法的 <code>getDeclaredConstructors</code>和用于获取公有构造方法的<code>getConstructors</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的构造方法</span>Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructorList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor declaredConstructor <span class="token operator">:</span> declaredConstructorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Constructor: "</span> <span class="token operator">+</span> declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的构造方法</span>Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> constructorList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor constructor <span class="token operator">:</span> constructorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"constructor: "</span> <span class="token operator">+</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-java"><code class="language-java">declared Constructor<span class="token operator">:</span> <span class="token keyword">public</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>declared Constructor<span class="token operator">:</span> <span class="token keyword">private</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token function">Student</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">)</span>constructor<span class="token operator">:</span> <span class="token keyword">public</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="7、获取非构造方法"><a href="#7、获取非构造方法" class="headerlink" title="7、获取非构造方法"></a>7、获取非构造方法</h1><p>同样地，获取非构造方法的两个 API 是：获取所有声明的非构造函数（无法获取父类Object的方法）的 <code>getDeclaredMethods</code> 和仅获取公有非构造函数（可以获取父类Object的公有方法）的 <code>getMethods</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的函数</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethodList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Method declaredMethod <span class="token operator">:</span> declaredMethodList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Method: "</span> <span class="token operator">+</span> declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的函数</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methodList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methodList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-java"><code class="language-java">declared Method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">void</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>Student<span class="token punctuation">.</span><span class="token function">setStudentAge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>declared Method<span class="token operator">:</span> <span class="token keyword">private</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>Student<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">)</span>method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">void</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>Student<span class="token punctuation">.</span><span class="token function">setStudentAge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>InterruptedExceptionmethod<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>InterruptedExceptionmethod<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>InterruptedExceptionmethod<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">)</span>method<span class="token operator">:</span> <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span>getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8、实践"><a href="#8、实践" class="headerlink" title="8、实践"></a>8、实践</h1><p>学以致用，让我们来一个实际的应用感受一下。还是以 Student 类为例，如果此类在其他的包中，并且我们的需求是要在程序中通过反射获取他的构造方法，构造出 Student 对象，并且通过反射访问他的私有字段和私有方法。那么我们可以这样做：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名</span>Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.获取声明的构造方法，传入所需参数的类名，如果有多个参数，用','连接即可</span>Constructor studentConstructor <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的构造方法，需要调用下面这一行代码使其可使用，公有的构造方法则不需要下面这一行代码</span>studentConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用构造方法的newInstance方法创建对象，传入构造方法所需参数，如果有多个参数，用','连接即可</span>Object student <span class="token operator">=</span> studentConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"NameA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.获取声明的字段，传入字段名</span>Field studentAgeField <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"studentAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的字段，需要调用下面这一行代码使其可使用，公有的字段则不需要下面这一行代码</span><span class="token comment" spellcheck="true">// studentAgeField.setAccessible(true);</span><span class="token comment" spellcheck="true">// 使用字段的set方法设置字段值，传入此对象以及参数值</span>studentAgeField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.获取声明的函数，传入所需参数的类名，如果有多个参数，用','连接即可</span>Method studentShowMethod <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的函数，需要调用下面这一行代码使其可使用，公有的函数则不需要下面这一行代码</span>studentShowMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用函数的invoke方法调用此函数，传入此对象以及函数所需参数，如果有多个参数，用','连接即可。函数会返回一个Object对象，使用强制类型转换转成实际类型即可</span>Object result <span class="token operator">=</span> studentShowMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的逻辑注释已经写得很清晰了，我们再梳理一下：</p><ol><li>先用第一种全路径获取 Class 的方法获取到了 Student 的 Class 对象</li><li>然后反射调用它的私有构造方法 <code>private Student(String studentName)</code>，构建出 newInstance</li><li>再将其公有字段 studentAge 设置为 10</li><li>最后反射调用其私有方法 <code>show</code>，传入参数 “message”，并打印出这个方法的返回值。</li></ol><p>其中，<code>setAccessible</code> 函数用于动态获取访问权限，Constructor、Field、Method 都提供了此方法，让我们得以访问类中的私有成员。</p><p>运行程序，输出如下：</p><pre class="line-numbers language-java"><code class="language-java">show<span class="token operator">:</span> NameA<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>messageresult<span class="token operator">:</span> testReturnValue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工程师修炼之道</title>
      <link href="2021/06/03/java-gong-cheng-shi-xiu-lian-zhi-dao/"/>
      <url>2021/06/03/java-gong-cheng-shi-xiu-lian-zhi-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="1、后端技术导言"><a href="#1、后端技术导言" class="headerlink" title="1、后端技术导言"></a>1、后端技术导言</h1><h1 id="2、Java项目与工程化"><a href="#2、Java项目与工程化" class="headerlink" title="2、Java项目与工程化"></a>2、Java项目与工程化</h1><h1 id="3、开发框架"><a href="#3、开发框架" class="headerlink" title="3、开发框架"></a>3、开发框架</h1><h1 id="4、Spring"><a href="#4、Spring" class="headerlink" title="4、Spring"></a>4、Spring</h1><h1 id="5、数据存储"><a href="#5、数据存储" class="headerlink" title="5、数据存储"></a>5、数据存储</h1><h2 id="5-1、MySQL"><a href="#5-1、MySQL" class="headerlink" title="5.1、MySQL"></a>5.1、MySQL</h2><h3 id="5-1-1、存储引擎"><a href="#5-1-1、存储引擎" class="headerlink" title="5.1.1、存储引擎"></a>5.1.1、存储引擎</h3><h3 id="5-1-2、字符集和校对规则"><a href="#5-1-2、字符集和校对规则" class="headerlink" title="5.1.2、字符集和校对规则"></a>5.1.2、字符集和校对规则</h3><h3 id="5-1-3、索引的使用"><a href="#5-1-3、索引的使用" class="headerlink" title="5.1.3、索引的使用"></a>5.1.3、索引的使用</h3><h3 id="5-1-4、查询缓存的使用"><a href="#5-1-4、查询缓存的使用" class="headerlink" title="5.1.4、查询缓存的使用"></a>5.1.4、查询缓存的使用</h3><h3 id="5-1-5、数据同步中的binlog"><a href="#5-1-5、数据同步中的binlog" class="headerlink" title="5.1.5、数据同步中的binlog"></a>5.1.5、数据同步中的binlog</h3><h3 id="5-1-6、事务"><a href="#5-1-6、事务" class="headerlink" title="5.1.6、事务"></a>5.1.6、事务</h3><h3 id="5-1-7、大表优化"><a href="#5-1-7、大表优化" class="headerlink" title="5.1.7、大表优化"></a>5.1.7、大表优化</h3><h3 id="5-1-8、高可用支持"><a href="#5-1-8、高可用支持" class="headerlink" title="5.1.8、高可用支持"></a>5.1.8、高可用支持</h3><h3 id="5-1-9、使用提示"><a href="#5-1-9、使用提示" class="headerlink" title="5.1.9、使用提示"></a>5.1.9、使用提示</h3><h2 id="5-2、非关系型数据库"><a href="#5-2、非关系型数据库" class="headerlink" title="5.2、非关系型数据库"></a>5.2、非关系型数据库</h2><h2 id="5-3、缓存"><a href="#5-3、缓存" class="headerlink" title="5.3、缓存"></a>5.3、缓存</h2><h2 id="5-4、ElasticSearch"><a href="#5-4、ElasticSearch" class="headerlink" title="5.4、ElasticSearch"></a>5.4、ElasticSearch</h2><h1 id="6、数据通信"><a href="#6、数据通信" class="headerlink" title="6、数据通信"></a>6、数据通信</h1><h1 id="7、Java编程进阶"><a href="#7、Java编程进阶" class="headerlink" title="7、Java编程进阶"></a>7、Java编程进阶</h1><h1 id="8、性能调优"><a href="#8、性能调优" class="headerlink" title="8、性能调优"></a>8、性能调优</h1><h1 id="9、安全技术"><a href="#9、安全技术" class="headerlink" title="9、安全技术"></a>9、安全技术</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20210603</title>
      <link href="2021/06/02/20210603/"/>
      <url>2021/06/02/20210603/</url>
      
        <content type="html"><![CDATA[<h1 id="1、MySQL5-7-19代价模型"><a href="#1、MySQL5-7-19代价模型" class="headerlink" title="1、MySQL5.7 .19代价模型"></a>1、MySQL5.7 .19代价模型</h1><h2 id="1-1、代价模型"><a href="#1-1、代价模型" class="headerlink" title="1.1、代价模型"></a>1.1、代价模型</h2><p>MySQL5.7代价分为IO，CPU，远程操作和内存代价，目前内存代价没有考虑。代价分为<strong>server</strong>层和<strong>engine</strong>层。<strong>server层主要是cpu的代价，而engine层主要是io的代价</strong>。 5.7 引入了两个系统表mysql.server_cost和mysql.engine_cost来分别配置这两个层的代价</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210603082223935.png" alt="image-20210603082223935"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210603082250596.png" alt="image-20210603082250596"></p><ul><li><p>server_cost：</p><ul><li>const double Server_cost_constants::ROW_EVALUATE_COST= 0.2 计算符合条件的行的代价，行数越多，此项代价越大</li><li>const double Server_cost_constants::MEMORY_TEMPTABLE_CREATE_COST= 2.0： 内存临时表的创建代价</li><li>const double Server_cost_constants::MEMORY_TEMPTABLE_ROW_COST= 0.2： 内存临时表的行代价</li><li>const double Server_cost_constants::KEY_COMPARE_COST= 0.1： 键比较的代价，例如排序</li><li>const double Server_cost_constants::DISK_TEMPTABLE_CREATE_COST= 40.0：innodb临时表的创建代价</li><li>const double Server_cost_constants::DISK_TEMPTABLE_ROW_COST= 1.0： innodb临时表的行代价</li></ul></li><li><p>engine_cost:</p><ul><li>const double SE_cost_constants::IO_BLOCK_READ_COST= 1.0： 从磁盘读数据的代价，对innodb来说，表示从磁盘读一个page的代价</li><li>const double SE_cost_constants::MEMORY_BLOCK_READ_COST= 1.0：从内存读数据的代价，对innodb来说，表示从buffer pool读一个page的代价</li></ul><p>目前IO_BLOCK_READ_COST和MEMORY_BLOCK_READ_COST默认值均为1，对于普通硬盘，应该适当调大IO_BLOCK_READ_COST</p></li></ul><h2 id="1-2、代价配置"><a href="#1-2、代价配置" class="headerlink" title="1.2、代价配置"></a>1.2、代价配置</h2><p>cost参数可以通过修改mysql.server_cost和mysql.engine_cost来实现。初始这两个表中的记录cost_value项均为NULL, 代价值都取上两节介绍的初始值。 当修改cost_value为非NULL时，代价值按设定的值计算。修改方法如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">## 修改io_block_read_cost值为2UPDATE mysql.engine_cost  SET cost_value =2.0  WHERE cost_name ='io_block_read_cost';FLUSH OPTIMIZER_COSTS;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3、代价分析例子"><a href="#1-3、代价分析例子" class="headerlink" title="1.3、代价分析例子"></a>1.3、代价分析例子</h2><p>建表插数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t1<span class="token punctuation">(</span><span class="token number">c1</span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token number">c2</span> <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span><span class="token number">c3</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t6<span class="token punctuation">(</span><span class="token number">d1</span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token number">c2</span> <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span><span class="token number">c3</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token punctuation">`</span>root<span class="token punctuation">`</span><span class="token variable">@`localhost`</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">`</span>proc_insert_data2<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> i<span class="token operator">></span><span class="token number">0</span>    <span class="token keyword">do</span>     <span class="token keyword">insert</span> <span class="token keyword">into</span> t1<span class="token punctuation">(</span><span class="token number">c1</span><span class="token punctuation">,</span><span class="token number">c2</span><span class="token punctuation">,</span><span class="token number">c3</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> optimizer_trace <span class="token operator">=</span><span class="token string">"enabled=on"</span><span class="token punctuation">;</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cost参数都取默认值，以下示例中会用到ROW_EVALUATE_COST(0.2),IO_BLOCK_READ_COST(1.0),MEMORY_BLOCK_READ_COST(1.0)</p><p>执行下面SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">c1</span><span class="token punctuation">,</span><span class="token number">c2</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> <span class="token number">c2</span> <span class="token operator">></span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210527112800926.png" alt="image-20210527112800926"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210527114439484.png" alt="image-20210527114439484"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210527114459853.png" alt="image-20210527114459853"></p><p>索引扫描代价为19.309，比全表扫描代价23.1小，因此最终选择了索引扫描</p><p>对全表扫描的代价为23.1的简要分析：</p><p>包括CPU和IO两部分代价：</p><pre class="line-numbers language-cpp"><code class="language-cpp">test_quick_select： <span class="token keyword">double</span> scan_time<span class="token operator">=</span>cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//CPU代价</span>  Cost_estimate cost_est<span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">table_scan_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cost_est<span class="token punctuation">.</span><span class="token function">add_io</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调节值</span>  cost_est<span class="token punctuation">.</span><span class="token function">add_cpu</span><span class="token punctuation">(</span>scan_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IO代价在table_scan_cost函数里进行计算：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Cost_estimate handler<span class="token operator">::</span>table_scan_cost <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//估算数据占有的page数 * 每个page的代价</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> io_cost<span class="token operator">=</span> ha_innobase<span class="token operator">::</span><span class="token function">scan_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> table<span class="token operator">-</span><span class="token operator">></span><span class="token function">cost_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ha_innobase::scan_time()函数如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//在dict_stats_empty_table里初始化为1    </span>stat_clustered_index_size <span class="token operator">=</span> m_prebuilt<span class="token operator">-</span><span class="token operator">></span>table<span class="token operator">-</span><span class="token operator">></span>stat_clustered_index_size<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> stat_clustered_index_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>page_read_cost函数如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*计算策略： 1、表的大小不超过缓存的20%，就认为数据都在内存中，返回12、表的大小超过缓存的大小，就认为数据都不在内存中，需要从磁盘读取，返回03、介于1,2之间，返回一个0到1之间的数*/</span><span class="token keyword">const</span> <span class="token keyword">double</span> in_mem<span class="token operator">=</span> m_table<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">table_in_memory_estimate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">double</span> pages_in_mem<span class="token operator">=</span> pages <span class="token operator">*</span> in_mem<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需要从内存中读取的页数量</span>  <span class="token keyword">const</span> <span class="token keyword">double</span> pages_on_disk<span class="token operator">=</span> pages <span class="token operator">-</span> pages_in_mem<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需要从磁盘中读取的页数量</span><span class="token comment" spellcheck="true">//这里处理比较简单，将IO_BLOCK_READ_COST和MEMORY_BLOCK_READ_COST默认值都设为1了</span><span class="token keyword">const</span> <span class="token keyword">double</span> cost<span class="token operator">=</span> <span class="token function">buffer_block_read_cost</span><span class="token punctuation">(</span>pages_in_mem<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">io_block_read_cost</span><span class="token punctuation">(</span>pages_on_disk<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此通过table_scan_cost函数算得IO代价为1，然后MySQL通过cost_est.add_io(1.1)对IO代价进行了一个微调，最终IO代价为2.1.</p><p>CPU代价通过row_evaluate_cost函数进行计算：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">return</span> rows <span class="token operator">*</span> m_server_cost_constants<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在t1表里是100条数据，rows=100， Server_cost_constants::ROW_EVALUATE_COST= 0.2，计算得到CPU代价为20，微调+1，最终CPU代价为21.</p><p>因此全表扫描最终总代价为23.1.</p><p>对索引扫描的代价为19.309的简要分析：</p><pre class="line-numbers language-cpp"><code class="language-cpp">handler<span class="token operator">::</span>multi_range_read_info_const<span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>flags <span class="token operator">&amp;</span> HA_MRR_INDEX_ONLY<span class="token punctuation">)</span>      <span class="token operator">*</span>cost<span class="token operator">=</span> <span class="token function">index_scan_cost</span><span class="token punctuation">(</span>keyno<span class="token punctuation">,</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>n_ranges<span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>total_rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token operator">*</span>cost<span class="token operator">=</span> <span class="token function">read_cost</span><span class="token punctuation">(</span>keyno<span class="token punctuation">,</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>n_ranges<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>total_rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cost<span class="token operator">-</span><span class="token operator">></span><span class="token function">add_cpu</span><span class="token punctuation">(</span>cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span>      <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>total_rows<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IO代价在index_scan_cost里计算的：</p><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token keyword">const</span> <span class="token keyword">double</span> io_cost<span class="token operator">=</span> <span class="token function">index_only_read_time</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> rows<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//估算索引占page的个数，结果是1.099 </span>      <span class="token operator">*</span> table<span class="token operator">-</span><span class="token operator">></span><span class="token function">cost_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost_index</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据缓冲池大小和索引大小估算page in memory和in disk的比例，计算读一个page的代价，结果是1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因此IO代价 = 1.099* 1 = 1.099</p><p>CPU代价通过row_evaluate_cost进行计算，经过过滤条件得到的total_rows为91，因此CPU代价=91*0.2+0.01=18.21</p><p>最终索引扫描总代价=1.099+18.21=19.309</p><p>再看下面一条SQL：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from t1 where c2 > 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210603080818381.png" alt="image-20210603080818381"></p><p>查看optimizer_trace, 可以看出全表扫描代价为23.1，通过c2上的索引扫描代价为110.21， 最后选择全表扫描。</p><p>全表扫描代价23.1分析和上面例子一样。上一个例子通过c2索引扫描代价为19.309，因为是覆盖索引不需要回表，所以代价较少。而此例是需要回表的。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210603081418596.png" alt="image-20210603081418596"></p><p>进入read_cost里面可以看到，IO代价是需要回表的</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210603081539668.png" alt="image-20210603081539668"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210603081821027.png" alt="image-20210603081821027"></p><p>MySQL默认处理方式是每行代价是1，即默认认为每一行都对应聚集索引的一个page</p><p>因此最终IO代价=1+91=92</p><p>CPU代价和上面一样，是91 * 0.2 + 0.01 = 18.21；</p><p>因此最终代价为92+18.21=110.21</p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代价估算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面经</title>
      <link href="2021/05/28/java-mian-jing/"/>
      <url>2021/05/28/java-mian-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="1、计算机网络"><a href="#1、计算机网络" class="headerlink" title="1、计算机网络"></a>1、计算机网络</h1><h2 id="1-1、网络模型与相关协议"><a href="#1-1、网络模型与相关协议" class="headerlink" title="1.1、网络模型与相关协议"></a>1.1、网络模型与相关协议</h2><ul><li>​    OSI七层模型:物理层，数据链路层，网络层，运输层，会话层，表示层， 应用层。</li></ul><ul><li>​    TCP/IP5层模型：物理层，数据链路层，网络层，运输层，应用层。</li></ul><ul><li>​    TCP/IP4层模型：网络接口层，网络层(IP)，运输层(TCP/UDP)，应用层(HTTP)。</li></ul><ul><li>常见应用层协议：DNS，HTTP, SMTP, POP3(接受文件)，FTP,Telent远程终端协议。</li></ul><ul><li>传输层：TCP，UDP; 网络层：ICMP,IGMP，IP</li></ul><p><strong>在OSI模型中ARP协议属于链路层；而在TCP/IP模型中，ARP协议属于网络层</strong></p><ul><li>ARP是IP地址解析为MAC地址 </li><li>RARP 将MAC地址解析为IP地址</li></ul><p>一条TCP连接上发送数据速度的影响因素有哪些？</p><ul><li> 服务器到客户端之间带宽瓶颈</li><li>客户端接收能力限制</li><li>服务器网卡处理能力</li></ul><h2 id="1-2、TCP、UDP协议的区别"><a href="#1-2、TCP、UDP协议的区别" class="headerlink" title="1.2、TCP、UDP协议的区别"></a>1.2、TCP、UDP协议的区别</h2><p>​    TCP提供可靠的、面向连接的运输服务。在传输数据之前必须三次握手建立连接，数据传输结束之后，4次挥手释放连接，而且在数据传递时，又有****确认应答、超时重传、滑动窗口、拥塞控制*<em><strong>等机制保证传送数据的可靠性。TCP经常用于对网络通信质量有很高要求的地方，如</strong></em>*文件传输，邮件发送，远程登录****等场景。SMTP、TELNET、HTTP、FTP</p><p>​    UDP在传送数据之前不需要建立连接，目的主机收到UDP报文后，不需要给出确认。UDP不提供可靠交付，一般用于即时通信，如语音、视频、直播等。<em><strong>*RIP(路由选择协议)，DNS*</strong></em></p><h2 id="1-3、TCP粘包"><a href="#1-3、TCP粘包" class="headerlink" title="1.3、TCP粘包"></a>1.3、TCP粘包</h2><p><em><strong>*TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包，从接收缓冲区来看，后一包数据的头紧接着前一包数据的尾。原因可能是发送方也可能是接收方造成的。*</strong></em></p><p><em><strong>*发送方原因：TCP默认使用Nagle算法，将多次间隔较小、数据量较小的数据，合并成一个数据量大的数据块，然后进行封包。*</strong></em></p><p><em><strong>*接收方原因：TCP将接收到的数据包保存在接收缓存里，然后应用程序主动从缓存读取收到的分组。这样一来，如果TCP接收数据包到缓存的速度大于应用程序从缓存中读取数据包的速度，多个包就会被缓存，应用程序就有可能读取到多个首尾相接粘到一起的包。*</strong></em></p><p><em><strong>*如果多个分组毫不相干，甚至是并列关系，那么这个时候就一定要处理粘包现象了。处理方法：发送方关闭Nagle算法。*</strong></em></p><p><em><strong>*接收方：接收方没有办法来处理粘包现象，只能将问题交给应用层来处理。应用层循环读取所有的数据，根据报文的长度判断每个包开始和结束的位置。*</strong></em></p><p><em><strong>*TCP为了保证可靠传输并减少额外的开销（每次发包都要验证），*</strong>***</em>*采用了基于流的传输，*<strong><strong><strong>*基于流的传输不认为消息是一条一条的，*</strong></strong></strong>*是无保护消息边界的。而UDP则是面向消息传输的，是有保护消息边界的，接收方一次只接受一条独立的信息，所以不存在粘包问题。****</p><p><em><strong>*数据报文的结构：应用程序+TCP/UDP报文头部+IP报文头部(到这是以太网帧，46-1500)+以太网头部；*</strong></em></p><p><em><strong>*TCP报文头部结构：（前20字节固定）*</strong>***</em>*16为源端口号+16位目的端口号+32位序号+32位确认号+4位头部长度（单位4字节）*<strong><strong><strong>*+6位保留+6个关键字*</strong></strong></strong>*（SYN,ACK，FIN）+16位窗口大小（*<strong><strong><strong>*指接收窗口*</strong></strong></strong>*）+16位校验和****<em><strong>*+16位紧急指针+最多40字节的选项；*</strong></em></p><p><em><strong>*UDP报文头部结构首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。：*</strong></em></p><p><em><strong>*IP报文头部结构：*</strong></em></p><p><em><strong>*4位版本+4位首部长度*</strong>***</em>*（单位4字节）+8位服务类型+****<em><strong>*16位总长度（字节）*</strong></em></p><p><em><strong>*16位标识（分组）+3位标志（是否分组）+13为片内偏移*</strong></em></p><p><em><strong>*8位TTL*</strong>***</em>*+8位上层协议+****<em><strong>*16位首部检验和*</strong></em></p><p><em><strong>*32位源IP地址*</strong></em></p><p><em><strong>*32位目的IP地址*</strong></em></p><p><em><strong>*以太网头部：*</strong></em></p><p><em><strong>*6字节目的地址+6字节源地址+2字节类型。这个地址指MAC地址。*</strong></em></p><h2 id="1-4、点对点和端对端的区别"><a href="#1-4、点对点和端对端的区别" class="headerlink" title="1.4、点对点和端对端的区别"></a>1.4、点对点和端对端的区别</h2><p><em><strong>*点到点通信是针对数据链路层或网络层来说的，因为数据链路层只负责直接相连的两个节点之间的通信，一个节点的数据链路层接受ip层数据并封装之后，就把数据帧从链路上发送到与其相邻的下一个节点。*</strong></em> <em><strong>*点对点是基于MAC地址和或者IP地址，是指一个设备发数据给与该这边直接连接的其他设备，这台设备又在合适的时候将数据传递给与它相连的下一个设备，通过一台一台直接相连的设备把数据传递到接收端。*</strong></em></p><p><em><strong>*端到端通信是针对传输层来说的，传输层为网络中的主机提供端到端的通信。*</strong>***</em>*因为无论tcp还是udp协议，都要负责把上层交付的数据从发送端传输到接收端，不论其中间跨越多少节点。只不过tcp比较可靠而udp不可靠而已。所以称之为端到端，也就是从发送端到接收端。它是一个网络连接，指的是在数据传输之前，在发送端与接收端之间（忽略中间有多少设备）为数据的传输建立一条链路，链路建立以后，发送端就可以发送数据。****</p><h2 id="1-5、IP数据报传输的过程"><a href="#1-5、IP数据报传输的过程" class="headerlink" title="1.5、IP数据报传输的过程"></a>1.5、IP数据报传输的过程</h2><p><em><strong>*(无论怎么传，IP源和目的地址不变，但MAC目的和源地址会变)*</strong></em></p><p><em><strong>*IP数据报需从主机A上传送到主机B上，主机A首先查找路由表;*</strong></em></p><p><em><strong>*if(目的主机是与自己在同一个网段内)*</strong></em></p><p>​    <em><strong>*主机A查询自己的ARP表;如果存在目的IP地址到MAC的映射，将MAC地址作为目的MAC地址封装成帧，发*</strong></em>    <em><strong>*给主机B.如果没有，发送ARP请求广播给网段内的所有主机，来查询该目的IP地址的MAC地址*</strong></em></p><p><em><strong>*else if(发现了能与目的网络号相匹配的表目)*</strong></em></p><p>​    <em><strong>*则把报文发给该路由表目指定的下一站的路由器或直接连接的网络接口;*</strong></em></p><p>​    <em><strong>*报文发送到下一站时，数据帧的目的MAC地址是下一个站路由器或者网络接口的MAC地址，而IP头部的目的IP*</strong></em>    <em><strong>*地址是主机B的IP地址;*</strong></em></p><p><em><strong>*else*</strong></em></p><p>​    <em><strong>*寻找标为“默认”的表目，把报文发送给该表目指定的下一站路由器;*</strong></em></p><p><em><strong>*滑动窗口：*</strong></em></p><p>TCP通过滑动窗口的概念来进行流量控制，抑制发送端发送数据的速率，以便接收端来得及接收。</p><p>窗口：对应一段发送者可以发送的字节序列。这个序列是可以改变的。接收端发给发送端自己的接受能力。然后发送端根据已确认接受的序列号和接受能力滑动窗口，一下子全部发送，等待接收端确认。</p><p><em><strong>*拥塞控制：*</strong></em></p><p>和流量控制的区别：</p><p>****拥塞控制是防止过多的数据注入到网络中，可以使网络中的路由器或链路不致过载，****是一个全局性的过程。</p><p>流量控制是点对点通信量的控制,主要就是抑制发送端发送数据的速率，以便接收端来得及接收。</p><p>(设置拥塞控制窗口cwnd, 在发送数据时，将拥塞窗口的大小与接收端ack的窗口大小做比较，取较小者作为发送数据量的上限。)</p><p><em><strong>*慢开始*</strong></em>: 设置****拥塞控制窗口cwnd = 1*<em><strong>，没收到一个ACK,cwnd++;每过1RTT,cwnd = cwnd * 2;呈</strong></em>*指数增长****。</p><p><em><strong>*拥塞避免*<em><strong>：当拥塞窗口 cwnd 达到一个阈值时（cwnd &gt;= ssthresh），窗口大小不再呈指数上升，而是以线性上升，避免增长过快导致网络拥塞。</strong></em>*每当过了一个RTT，cwnd = cwnd + 1；*</strong></em></p><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络<em><strong>*出现拥塞*</strong></em>(没有收到确认ACK);拥塞窗口设置为1，阈值为****拥塞时发送窗口的一半，执行慢开始算法****。</p><p><em><strong>*快重传：当发送方连续收到三个重复确认时，就立即重传对方尚未收到的报文段。并执行快恢复算法*</strong></em></p><p><em><strong>*快恢复：将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。*</strong></em></p><h2 id="1-6、TCP三次握手"><a href="#1-6、TCP三次握手" class="headerlink" title="1.6、TCP三次握手"></a>1.6、TCP三次握手</h2><p>​    1、客户端向服务器发送TCP连接请求数据包，其中同步标志为SYN=1,ACK=0,初始序列号为x;( syn_sent,等待回复)</p><p>​    2、服务器收到请求后，发回连接确认包。SYN=1，ACK=1,ack=x+1,初始序列号为y;( syn_rcvd,收到请求，等待回复)</p><p>​    3、客户端收到确认报文后，还需发送确认数据包。ACK=1,ack=y+1,序列号为x+1;( ESTABLISHED,完成三次握手)</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps1.jpg" alt="img"> </p><p>三次握手是为了建立可靠的通信信道，双方都确认自己和对方的发送和接受都是正常的。SYN=1表示这是个连接请求或连接接受报文，不携带数据。不能变成两次，已失效的连接请求报文段突然又传送到了服务端，服务端误以为是正常的连接请求，直接发送连接确认报文，导致TCP建立，浪费资源，因而产生错误。</p><p>1、TCP握手协议</p><p>第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</p><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p><p>在上述过程中，还有一些重要的概念：</p><p>未连接队列：在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的SYN包（syn=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。</p><p>2、SYN攻击原理</p><p>SYN攻击属于DOS攻击的一种，它利用TCP协议缺陷，通过发送大量的半连接请求，耗费CPU和内存资源。</p><p>配合IP欺骗，SYN攻击能达到很好的效果，通常，客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送syn包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。</p><p>第一种是缩短SYN Timeout时间，由于SYN Flood攻击的效果取决于服务器上保持的SYN半连接数，这个值=SYN攻击的频度 x SYN Timeout，所以通过缩短从接收到SYN报文到确定这个报文无效并丢弃改连接的时间，例如设置为20秒以下（过低的SYN Timeout设置可能会影响客户的正常访问），可以成倍的降低服务器的负荷。</p><p>第二种方法是设置SYN Cookie，就是给每一个请求连接的IP地址分配一个Cookie，如果短时间内连续受到某个IP的重复SYN报文，就认定是受到了攻击，以后从这个IP地址来的包会被一概丢弃。</p><p>可是上述的两种方法只能对付比较原始的SYN Flood攻击，缩短SYN Timeout时间仅在对方攻击频度不高的情况下生效，SYN Cookie更依赖于对方使用真实的IP地址，如果攻击者以数万/秒的速度发送SYN报文，同时利用SOCK_RAW随机改写IP报文中的源地址，以上的方法将毫无用武之地。</p><p>net.ipv4.tcp_syncookies = 1</p><p>net.ipv4.tcp_max_syn_backlog = 8192</p><p>net.ipv4.tcp_synack_retries = 2</p><p>分别为启用SYN Cookie、设置SYN最大队列长度以及设置SYN+ACK最大重试次数。</p><p>SYN Cookie的作用是缓解服务器资源压力。启用之前，服务器在接到SYN数据包后，立即分配存储空间，并随机化一个数字作为SYN号发送SYN+ACK数据包。然后保存连接的状态信息等待客户端确认。启用SYN Cookie之后，服务器不再分配存储空间，而且通过基于时间种子的随机数算法设置一个SYN号，替代完全随机的SYN号。发送完SYN+ACK确认报文之后，清空资源不保存任何状态信息。直到服务器接到客户端的最终ACK包，通过Cookie检验算法鉴定是否与发出去的SYN+ACK报文序列号匹配，匹配则通过完成握手，失败则丢弃。</p><p>net.ipv4.tcp_synack_retries是降低服务器SYN+ACK报文重试次数，尽快释放等待资源。</p><p>tcp_max_syn_backlog则是使用服务器的内存资源，换取更大的等待队列长度，让攻击数据包不至于占满所有连接而导致正常用户无法完成握手。</p><p>SYN Flood是当前最流行的DoS（拒绝服务攻击）与DDoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽（CPU满负荷或内存不足）的攻击方式。</p><h2 id="1-7、TCP四次挥手"><a href="#1-7、TCP四次挥手" class="headerlink" title="1.7、TCP四次挥手"></a>1.7、TCP四次挥手</h2><p>​    <img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps2.jpg" alt="img"></p><p>​    由于****TCP连接是全双工的，因此每个方向都必须单独关闭****。当一方数据发送任务完成之后，可以发送FIN来终止这个方向的连接。而另一方可以继续发送数据。</p><p>​    1、客户端发送请求释放连接报文，FIN=1,seq=u;客户端进入****FIN-WAIT-1****状态；</p><p>​    2、服务器收到请求，发送确认报文。ACK=1,seq=v,ack=u+1;服务器进入CLOSE-WAIT状态。客户端收到后进入终止等待2FIN-WAIT-2;</p><p>​    3、服务器发送完数据之后，向客户端发送请求释放连接报文，FIN=1,ACK=1,seq=w,ack=u+1;进入LAST-ACK状态</p><p>​    4、客户端收到请求后，发送确认报文，ACK=1,seq=u+1,ack=w+1。客户端进入TIME-WAIT状态，等待2MSL后进如CLOSED状态，服务器收到确认后进如CLOSED状态。</p><p>为什么关闭的时候是四次挥手，因为TCP连接时全双工的，每个方向都要发送关闭请求，而另一方向都要确认。</p><p>TIME_WAIT状态为什么要等待2MSL：因为第四次的确认报文可能丢失，这个状态是用来重发可能丢失的ACK报文。</p><p>为什么会有CLOSE_WAIT,因为服务器可能有数据未发送完毕，这段时间是继续发送数据的。</p><p>如果建立连接之后出现故障：TCP有个保活计时器，通常设置为2小时，两小时内没有收到客户端发送的数据，服务器发送探测报文，每75s发送一次，10次之后探测报文没有反应，认为出现故障，关闭连接。</p><p><em><strong>*TIME_WAIT存在的两个理由：*</strong></em></p><p><em><strong>*1*</strong></em> <em><strong>*可靠的实现TCP全双工连接的终止*</strong></em></p><p><em><strong>*2*</strong></em> <em><strong>*允许老的重复的分节在网络上的消逝*</strong>***</em>*（TCP不允许处于TIME_WAIT状态的连接启动一个新的化身，因为TIME_WAIT状态持续2MSL，就可以保证当成功建立一个TCP连接的时候，来自连接先前化身的重复分组已经在网络中消逝。）****</p><p><em><strong>*netstat -an |grep “TIME_WAIT” 查看处于Time_wait状态的连接详细情况*</strong></em></p><p><em><strong>*netstat -ae|grep “TIME_WAIT” |wc -l 查看处于Time_wait状态的连接个数*</strong></em></p><p><em><strong>*在高并发短连接的TCP服务器上，当服务器处理完请求后立刻主动正常关闭连接。这个场景下会出现大量socket处于TIME_WAIT状态。如果客户端的并发量持续很高，此时部分客户端就会显示连接不上。*</strong></em></p><p><em><strong>*正常的TCP客户端连接在关闭后，会进入一个TIME_WAIT的状态，持续的时间一般在1~4分钟，短时间内（例如1s内）进行大量的短连接，则可能出现这样一种情况：客户端所在的操作系统的socket端口和句柄被用尽，系统无法再发起新的连接！*</strong></em></p><p><em><strong>*解决方法：*</strong></em></p><p>net.ipv4.tcp_syncookies = 1 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</p><p>net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</p><p>net.ipv4.tcp_tw_recycle = 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</p><p>net.ipv4.tcp_fin_timeout 修改系默认的 TIMEOUT 时间</p><p><em><strong>*简单来说，就是打开系统的TIMEWAIT重用和快速回收。*</strong></em></p><h2 id="1-8、浏览器输入url并回车的过程以及相关协议"><a href="#1-8、浏览器输入url并回车的过程以及相关协议" class="headerlink" title="1.8、浏览器输入url并回车的过程以及相关协议"></a>1.8、浏览器输入url并回车的过程以及相关协议</h2><p>​    1、根据域名查询域名的IP地址，DNS解析。2、TCP连接3、发送HTTP请求4、服务器处理请求并返回HTTP报文5、浏览器解析渲染页面6、连接结束。</p><p>​    使用的协议：DNS(获取域名的IP的地址);TCP(与服务器建立TCP连接)；IP(建立TCP协议时，需发送数据，在网络层用到IP协议)；OPSF(IP数据包在路由之间传送，路由选择使用OPSF协议)；ARP(路由器与服务器通信时，将IP地址转化为MAC地址，使用ARP协议)HTTP(TCP建立之后，使用HTTP协议访问网页)；</p><p>​    DNS寻址：先查找浏览器缓存，如果没命中，查询系统缓存，即hosts文件。如果没命中，查询路由器缓存。如果没命中，请求本地域名服务器解析域名，没有命中就进入根服务器进行查询。没有命中就返回顶级域名服务器IP给本地DNS服务器。本地DNS服务器请求顶级域名服务器解析，没有命中就返回主域名服务器给本地DNS服务器。本地DNS服务器请求主域名服务器解析域名，将结果返回给本地域名服务器。本地域名服务器缓存结果并反馈给客户端。</p><h2 id="1-9、HTTP1-0、1-1、2-0之间的区别"><a href="#1-9、HTTP1-0、1-1、2-0之间的区别" class="headerlink" title="1.9、HTTP1.0、1.1、2.0之间的区别"></a>1.9、HTTP1.0、1.1、2.0之间的区别</h2><p>​    HTTP1.1与1.0之间的区别:1、<em><strong>*HTTP1.1默认开启长连接*</strong>***</em>*，在一个TCP连接上可以传送多个HTTP请求和响应*<em><strong>。而1.0不支持长连接。客户端和服务器每进行一次HTTP操作，就建立一次连接。2、</strong></em>*缓存处理*<em><strong>：在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如</strong></em>*Entity tag*<strong><strong><strong>*，If-*</strong></strong></strong>*Unmodified-Since, If-Match, If-None-Match*<em><strong>等更多可供选择的缓存头来控制缓存策略。3、Host头处理：1.0请求的url并没有传递主机名(服务器与IP地址绑定)，1.1请求和响应都支持Host头域(虚拟主机共享IP地址)4、1.1新增24个错误状态响应码。409：请求的资源和资源的当前状态冲突，410：服务器资源永久性删除。5、带宽优化以及网络连接的使用：</strong></em>*1.1允许只请求资源的某个部分.****</p><p><em><strong>*HTTP2.0和HTTP1.X相比的新特性*</strong></em></p><p>​    1、<em><strong>*新的二进制格式：*</strong>***</em>*1.x的解析是基于文本的，而2.0的协议解析是采用二进制格式。2、多路复用*<em><strong>，即连接共享，即每一个request都是是用作连接共享机制的；。一个request对应一个id，这样一个连接上可以有多个request。</strong></em>*3、header压缩。4、服务端推送。****</p><h2 id="1-10、HTTP与HTTPS"><a href="#1-10、HTTP与HTTPS" class="headerlink" title="1.10、HTTP与HTTPS"></a>1.10、HTTP与HTTPS</h2><p>​    1、HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。</p><p>​    2、HTTP协议运行在TCP之上，传输的内容都是明文。HTTPS运行在SSL/TLS(运行在TCP之上)之上，内容加密。</p><p>​    3、连接端口不一样，http是80，https是443.</p><p>​    4、http连接简单，没有状态，https是ssl加密的传输，身份认证的网络协议，更安全。</p><p>HTTPS在传统的HTTP和TCP之间加了一层用于<em><strong>*加密解密的SSL/TLS层*<em><strong>；</strong></em>*采用 对称加密和非对称加密结合的方式来保护浏览器和服务端之间的通信安全。对称加密：加密和解密都是同一个密钥。非对称加密：密钥成对出现，分为公钥和私钥，公钥和私钥之间不能互相推导，公钥加密需要私钥解密，私钥加密需要公钥解密。*</strong></em></p><p>浏览器使用Https的URL访问服务器，建立SSL链接；</p><p>1、发送非对称加密的公钥A给浏览器</p><p>2、****客户端(SSL/TLS)解析证书****（无效会弹出警告）</p><p>3<em><strong>*、生成随机值(这个相当于传送数据的密钥)，作为对称加密的密钥B。*</strong></em></p><p>4、<em><strong>*浏览器使用服务器返回的公钥A，对自己生成的对称加密密钥B进行加密，得到密钥C。*</strong></em></p><p>5、<em><strong>*浏览器将密钥C发送给服务器*</strong></em></p><p>6、<em><strong>*务器使用自己的私钥D对接受的密钥C进行解密，得到对称加密密钥B。*</strong></em></p><p>7、将信息和****密钥B****混合在一起进行对称加密</p><p>8、将加密的内容发送给客户端</p><p>9、客户端用****密钥B****解密信息</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps3.jpg" alt="img"> </p><p><em><strong>*加密过程使用了对称加密和非对称加密。*</strong></em></p><p><em><strong>*对称加密: 客户端和服务端采用相同的密钥经行加密*</strong></em></p><p>  encrypt(明文，秘钥) = 密文</p><p>  decrypt(密文，秘钥) = 明文</p><p><em><strong>*非对称加密：客户端通过公钥加密。服务端通过私钥解密*</strong></em></p><p>  encrypt(明文，公钥) = 密文</p><p>decrypt(密文，私钥) = 明文</p><p><em><strong>*验证证书：*</strong></em></p><p>客户端获取到了站点证书，拿到了站点的公钥</p><p>客户端找到其站点<em><strong>*证书颁发者的信息*</strong></em></p><p>站点证书的<em><strong>*颁发者验证服务端站点是否可信*</strong></em></p><p>   <em><strong>*非对称加密算法：*</strong>***</em>*RSA****<em><strong>*，DSA/DSS*</strong></em> </p><p>   <em><strong>*对称加密算法：*</strong>***</em>*AES****<em><strong>*，RC4，3DES*</strong></em> </p><p>   <em><strong>*HASH算法：MD5，SHA1，SHA256*</strong></em></p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps4.jpg" alt="img"> </p><h2 id="1-11、HTTP请求有哪些，get和post的差别"><a href="#1-11、HTTP请求有哪些，get和post的差别" class="headerlink" title="1.11、HTTP请求有哪些，get和post的差别"></a>1.11、HTTP请求有哪些，get和post的差别</h2><p>请求报文由请求行、请求头部，请求体三部分组成，请求行主要包括：请求方法、请求URL，协议三部分</p><p>响应报文由响应行、响应头部、响应体三部分组成，响应行主要包括协议、状态码，状态三部分</p><p><code>GET</code>：<strong>获取资源</strong>，用来请求访问已被URI识别的资源</p><p><code>POST</code>：用来<strong>传输实体的主体</strong></p><ul><li>请求参数长度限制：get最多1M，Post没有限制，这个不同浏览器有不同的规范</li><li>get不可以用请求体传数据，服务器不一定会接收</li><li>安全性：post比get高。get提交数据显示在URL上，会被浏览器缓存，其他人可以看到，而post是放在请求体里；此外get还可能遭到CSRF攻击</li><li>get产生一个TCP数据包，而post会产生两个</li></ul><p>*<strong>*状态码：*</strong></p><p>1xx：指示信息–表示请求已接收，继续处理 </p><p>​    100 –客户端必须继续发出请求 101-客户端要求服务器转换HTTP协议版本。</p><p>2xx：成功–表示请求已被成功接收、理解、接受</p><p>​    200—OK  204–请求收到，但返回信息为空 206–服务器已经完成了部分用户的GET请求</p><p>3xx：重定向–信息不完整需要进一步补充</p><p>​    300 — 请求资源在多处可得到。</p><p>​    301—永久重定向，隐式重定向。302 临时重定向，显示重定向。</p><p>​    304—请求的资源没有改变，可以使用缓存。</p><p>4xx：客户端错误–请求有语法错误或请求无法实现</p><p>​    401—未授权  403—禁止访问。 404 –找不到。409：对当前资源状态，请求不能完成</p><p>5xx：服务器端错误–服务器未能实现合法的请求</p><p>​    500内部服务器错误，501未实现， 502网关错误，503服务不可用，504 网关超时。</p><h2 id="1-12、转发和重定向的区别"><a href="#1-12、转发和重定向的区别" class="headerlink" title="1.12、转发和重定向的区别"></a>1.12、转发和重定向的区别</h2><p>​    <em><strong>*转发（forward）是服务器行为，重定向是客户端行为。*</strong></em></p><p>​    转发是服务器直接向目标地址访问URL,将相应内容读取之后发给浏览器，地址栏URL不变，转发页面和转发到的页面可以共享request里面的数据。效率高，可用于用户登录之后将角色转发到相应的模块。</p><p>​    重定向是利用服务器返回的状态码来实现的，<em><strong>*如果服务器返回301或者302，*</strong>***</em>*浏览器到新的网址重新请求资源****。地址栏url会发生改变，而且不能共享数据。效率低，可用于用户注销之后，跳转到其他网站。</p><h2 id="1-13、Session和Cookie的区别"><a href="#1-13、Session和Cookie的区别" class="headerlink" title="1.13、Session和Cookie的区别"></a>1.13、Session和Cookie的区别</h2><ul><li><p>Cookie：是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p><ul><li>用途<ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul></li></ul></li><li><p>Session：代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p></li></ul><ul><li><p>两者区别</p><ul><li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li></ul></li><li><p>两者联系</p><p>说起来为什么需要 Cookie ，这就需要从浏览器开始说起，我们都知道浏览器是没有状态的(HTTP 协议无状态)，这意味着浏览器并不知道是张三还是李四在和服务端打交道。这个时候就需要有一个机制来告诉服务端，本次操作用户是否登录，是哪个用户在执行的操作，那这套机制的实现就需要 Cookie 和 Session 的配合。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528164014567.png" alt="image-20210528164014567"></p></li></ul><p>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。</p><p>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</p><p>根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态。</p><ul><li><p>cookie被浏览器禁用了怎么办？</p><ul><li>每次请求中都携带一个 SessionID 的参数，可以 Post 的方式提交，也可以在请求的地址后面拼接 <code>xxx?SessionID=123456...</code>。</li><li>Token 机制：当用户第一次登录后，服务器根据提交的用户信息生成一个 Token，响应时将 Token 返回给客户端，以后客户端只需带上这个 Token 前来请求数据即可，无需再次登录验证。</li></ul></li><li><p>如何考虑分布式 Session 问题？</p><p>在互联网公司为了可以支撑更大的流量，后端往往需要多台服务器共同来支撑前端用户请求，那如果用户在 A 服务器登录了，第二次请求跑到服务 B 就会出现登录失效问题。分布式 Session 一般会有以下几种解决方案：</p><ul><li><p>Nginx ip_hash 策略，服务端使用 Nginx 代理，每个请求按访问 IP 的 hash 分配，这样来自同一 IP 固定访问一个后台服务器，避免了在服务器 A 创建 Session，第二次分发到服务器 B 的现象。</p></li><li><p>Session 复制，任何一个服务器上的 Session 发生改变（增删改），该节点会把这个 Session 的所有内容序列化，然后广播给所有其它节点。</p></li><li><p><strong>共享 Session</strong>（建议的解决方案），服务端无状态话，将用户的 Session 等信息使用<strong>缓存中间件</strong>来统一管理，保障分发到每一个服务器的响应结果都一致。</p></li></ul></li><li><p>如何解决跨域请求？Jsonp 跨域的原理是什么？</p><p>说起跨域请求，必须要了解浏览器的同源策略，同源策略/SOP（Same origin policy）是一种约定，由 Netscape 公司 1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。</p><p>解决跨域请求的常用方法是：</p><ul><li><p>通过代理来避免，比如使用 Nginx 在后端转发请求，避免了前端出现跨域的问题。</p></li><li><p>通过 Jsonp 跨域</p><ul><li><p>Jsonp跨域原理</p><ul><li><p>浏览器的同源策略把跨域请求都禁止了，但是页面中的 <code>&lt;script&gt;</code>标签是例外，不受同源策略限制。Jsonp 就是利用 <code>&lt;script&gt;</code> 标签跨域特性进行跨域数据访问。</p></li><li><p>JSONP 的理念就是，与服务端约定好一个回调函数名，服务端接收到请求后，将返回一段 Javascript，在这段 Javascript 代码中调用了约定好的回调函数，并且将数据作为参数进行传递。当网页接收到这段 Javascript 代码后，就会执行这个回调函数，这时数据已经成功传输到客户端了。</p></li></ul></li><li><p>缺点：它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。</p></li></ul></li></ul></li></ul><h1 id="2、操作系统"><a href="#2、操作系统" class="headerlink" title="2、操作系统"></a>2、操作系统</h1><h2 id="2-1、进程线程区别"><a href="#2-1、进程线程区别" class="headerlink" title="2.1、进程线程区别"></a>2.1、进程线程区别</h2><p>进程：是并发执行的<em><strong>*程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。*</strong></em></p><p><em><strong>*线程：是进程的一个执行单元，是进程内部的调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。*</strong></em></p><p><em><strong>*一个程序至少一个进程，一个进程至少一个线程。*</strong></em></p><p><em><strong>*进程是程序运行的实例。运行一个Java程序的实质就是启动一个java虚拟机进程。进程是程序向操作系统申请资源的基本单位。线程是进程中可独立执行的最小单位。一个进程可以包括多个线程，同一个进程中的所有线程共享该进程的资源。*</strong></em></p><p>多线程编程的实质就是将任务的处理方式由串行改为并发。</p><p>进程是资源分配最小单位，线程是程序执行的最小单位；进程有自己独立的地址空间，每启动一个进程，系统都会为其分配地址空间。线程是进程的一个实体，一个进程至少有一个线程,同一个进程的所有线程，共享所属进程的资源。</p><p>线程占用的资源比线程少很多，所以创建线程和切换线程的开销相对来说很小。但多进程程序更安全，生命力更强。一个进程的死亡不会对其他进程造成影响。而一个线程死掉，（可能会锁住资源）造成整个进程都死掉了。</p><h2 id="2-2、多进程和多线程的对比"><a href="#2-2、多进程和多线程的对比" class="headerlink" title="2.2、多进程和多线程的对比"></a>2.2、多进程和多线程的对比</h2><p>多进程，****每个进程拥有自己的数据，互不干涉****，共享复杂需要IPC，同步简单。占用内存多，切换复杂，CPU利用率低，创建销毁、切换复杂，速度慢，    进程间不会相互影响。 </p><p>多线程，****共享所属进程的数据*<em><strong>，共享简单，</strong></em>*同步比较难*<em><strong>。</strong></em>*占用内存少，切换简单*<em><strong>，C</strong></em>*PU利用率高，创建销毁、切换简单****，速度快，一个线程挂掉将导致整个进程挂掉。</p><h2 id="2-3、协程"><a href="#2-3、协程" class="headerlink" title="2.3、协程"></a>2.3、协程</h2><p><em><strong>*协程*<em><strong>是一种用户态的轻量级线程，</strong></em>*协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈*<em><strong>。协程调度切换时，</strong></em>*将寄存器上下文和栈保存到其他地方。在切回来的时候，恢复先前保存的寄存器上下文和栈*<em><strong>，直接操作栈则</strong></em>*基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。进程线程都是同步机制，而协程则是异步。协程不需要多线程的锁机制。*</strong></em></p><h2 id="2-4、进程间通信（IPC，InterProcess-Communication）"><a href="#2-4、进程间通信（IPC，InterProcess-Communication）" class="headerlink" title="2.4、进程间通信（IPC，InterProcess Communication）"></a>2.4、进程间通信（IPC，InterProcess Communication）</h2><p>进程间通信方式：管道（包括无名管道和命名管道）、消息队列、信号量、共享存储、Socket、Streams等</p><p>管道:无名管道, 半双工的（即数据只能在一个方向上流动），具有固定的读端和写端。只能用于父子进程和兄弟进程。</p><p>FIFO，也称为命名管道，是一种文件类型。FIFO的通信方式类似于在进程中使用文件来传输数据，只不过****FIFO类型文件同时具有管道的特性。在数据读出时，FIFO管道中同时清除数据，并且“先进先出”。****可用于任何进程。</p><p>消息队列，是消息的链接表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标识。消息队列独立于发送与接收进程。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取。</p><p>信号量（semaphore）与已经介绍过的 IPC 结构不同，****它是一个计数器。信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。****信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作。每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数。</p><p><em><strong>*共享内存（Shared Memory），指两个或多个进程共享一个给定的存储区。共享内存是最快的一种 IPC，因为进程是直接对内存进行存取。因为多个进程可以同时操作，所以需要进行同步。信号量+共享内存通常结合在一起使用，信号量用来同步对共享内存的访问。*</strong></em></p><p>\1. 管道（pipe）：管道是一种****半双工的通信方式，数据只能单向流动****，而且只能在具有血缘关系的进程间使用。</p><p>进程的血缘关系通常指父子进程关系。<em><strong>*管道分为pipe（无名管道）和*</strong>***</em>*ﬁ********fo（命名管道）两种****，有名管道也是半双</p><p>工的通信方式，但是它允许无亲缘关系进程间通信。</p><p>​    管道是一个<em><strong>*固定大小的缓冲区。在Linux中，该缓冲区的大小为1页*<em><strong>，即4K字节，使得它的大小不象</strong></em>*文件那样不加检验地增长。从管道读数据是一次性操作，数据一旦被读，它就从管道中被抛弃.*</strong></em></p><p>2****. 信号量（semophore）：信号量是一个计数器，可以用来控制多个进程对共享资源的访问****。它通常作为一种锁</p><p>机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同</p><p>线程之间的同步手段。</p><p>\3. <em><strong>*消息队列（message queue）：*</strong>***</em>*消息队列是由消息组成的链表，存放在内核中 并由消息队列标识符标识****。消</p><p>息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。消息队列与管道通信相比，其优势是对每个消息指定特定的消息类型，接收的时候不需要按照队列次序，而是可以根据自定义条件</p><p>接收特定类型的消息。</p><p>4****信号（signal）：信号是一种比较复杂的通信方式，用于通知接收进程某一事件已经发生****。</p><p>\5. <em><strong>*共享内存（shared memory）：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进*</strong></em></p><p>****程创建，但多个进程都可以访问，****共享内存是最快的IPC方式，它是针对其他进程间的通信方式运行效率低而专</p><p>门设计的。它往往与其他通信机制，如信号量配合使用，来实现进程间的同步和通信。</p><p>\6. <em><strong>*套接字（socke*</strong></em>. <em><strong>*t）：socket，*</strong>***</em>*即套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）****</p><p>****系统的开发工作既可以在本地单机上进行，也可以跨网络进行****。也就是说它可以让不在同一台计算机但通过网</p><p>络连接计算机上的进程进行通信。也因为这样，套接字明确地将客户端和服务器区分开来。</p><h2 id="2-5、用户态与核心态"><a href="#2-5、用户态与核心态" class="headerlink" title="2.5、用户态与核心态"></a>2.5、用户态与核心态</h2><p>​    防止用户进程访问对操作系统的稳定运行造成破坏。对一些资源的访问进行了等级划分。<em><strong>*内核态和用户态是操作系统的两种运行级别，内核态权限高，用户态权限低。*</strong></em></p><p>​    <em><strong>*操作系统的很多操作会消耗系统的物理资源，*<em><strong>例如创建一个新进程时，要做很多底层的细致工作，如分配物理内存，从父进程拷贝相关信息，拷贝设置页目录、页表等，这些操作显然不能随便让任何程序都可以做，</strong></em>*于是就产生了特权级别的概念，与系统相关的一些特别关键性的操作必须由高级别的程序来完成，这样可以做到集中管理，减少有限资源的访问和使用冲突*</strong></em></p><p>​    <em><strong>*当一个进程在执行用户自己的代码时处于用户运行态（用户态），此时特权级最低，为3级，是普通的用户进程运行的特权级，*<em><strong>大部分用户直接面对的程序都是运行在用户态。Ring3状态不能访问Ring0的内核</strong></em>*地址空间，*<em><strong>包括代码和数据；</strong></em>*当一个进程因为系统调用陷入内核代码中执行时处于内核运行态（内核态），此时特权级最高，为0级。执行的内核代码会使用当前进程的内核栈，每个进程都有自己的内核栈。*</strong></em></p><h2 id="2-6、用户态和内核态的切换"><a href="#2-6、用户态和内核态的切换" class="headerlink" title="2.6、用户态和内核态的切换"></a>2.6、用户态和内核态的切换</h2><p>​    <em><strong>*进程大部分时间是运行在用户态下的，在其需要操作系统帮助完成一些用户态自己没有特权和能力完成的操作时就会切换到内核态*</strong>***</em>*。切换到内核的方式有：系统调用、发生异常、外围设备的中断。****</p><h2 id="2-7、进程空间"><a href="#2-7、进程空间" class="headerlink" title="2.7、进程空间"></a>2.7、进程空间</h2><p>​    <em><strong>*内核态内存空间、用户态的堆栈*</strong>***</em>*（一般8M，*<em><strong>从高地址向低地址增长</strong></em>*）、****<em><strong>*数据段、进程代码段、*</strong></em> </p><p><em><strong>*线程共享的有：进程代码段、进程共有数据、文件描述符、信号处理器、进程当前目录、进程用户ID、进程组ID.*</strong></em></p><p><em><strong>*线程私有的：线程ID、*</strong>***</em>*寄存器*<strong><strong><strong>*的值、*</strong></strong></strong>*线程的栈****<em><strong>*、线程优先级、错误返回码、线程信号屏蔽码。*</strong></em></p><h2 id="2-8、线程上下文切换开销"><a href="#2-8、线程上下文切换开销" class="headerlink" title="2.8、线程上下文切换开销"></a>2.8、线程上下文切换开销</h2><p>上下文切换的开销包括直接开销和间接开销。直接开销有如下几点：</p><p>​    操作系统<em><strong>*保存恢复上下文(CPU寄存器值，程序计数器值等)所需的开销*</strong></em></p><p>​    线程调度器<em><strong>*调度线程的开销*</strong></em></p><p>间接开销有如下几点：</p><p>​    处理器****高速缓存重新加载****的开销</p><p>​    ****上下文切换可能导致整个一级高速缓存中的内容被冲刷****，即被写入到下一级高速缓存或主存</p><h2 id="2-9、线程间的几种通信方式"><a href="#2-9、线程间的几种通信方式" class="headerlink" title="2.9、线程间的几种通信方式"></a>2.9、线程间的几种通信方式</h2><p>1、<em><strong>*锁机制*</strong></em></p><p>互斥锁：提供了以排它方式阻止数据结构被并发修改的方法。</p><p>读写锁：允许多个线程同时读共享数据，而对写操作互斥。</p><p>条件变量：可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行</p><p>的。条件变量始终与互斥锁一起使用。</p><p>2、****信号量机制****：包括无名线程信号量与有名线程信号量</p><p>3、****信号机制****：类似于进程间的信号处理。</p><p>****线程间通信的主要目的是用于线程同步****，所以线程没有象进程通信中用于数据交换的通信机制。</p><h2 id="2-10、死锁条件"><a href="#2-10、死锁条件" class="headerlink" title="2.10、死锁条件"></a>2.10、死锁条件</h2><p>互斥、不可剥夺、循环等待、请求与保持</p><h2 id="2-11、分页分段"><a href="#2-11、分页分段" class="headerlink" title="2.11、分页分段"></a>2.11、分页分段</h2><p>​    传统存储管理方式：作业必须一次全部加载到内存中，方可运行。当作业很大，就无法运行。而且多道作业运行时，内存不足容纳所有作业，导致多道程序性能下降。操作系统引入了虚拟内存的概念，利用计算机的空间局部性和时间局部性原理，将程序分的一部分装入内存运行，其余部分留在外存，等需要的时候再讲外村的程序装入内存继续运行。虚拟内存好像给用户提供了一个比实际内存大得多的存储器。叫，虚拟存储器，大小由计算机地址结构决定。</p><p>​    虚拟内存实现方式：请求分页，请求分段，请求段页式存储管理。请求分页存储管理中，将虚拟地址内存空间划分位大小相等的页块，同时内存地址空间，也划分位等大小的页块。系统维持一个页表，存储这虚拟页号到物理快块号的映射。程序中的逻辑地址由两部分组成：页号P和页内位移量W。相邻的页面在内存中不一定相邻，即分配给程序的内存块之间不一定连续。逻辑地址转化为物理地址时，根据页表将页号转化为块号，块号*块大小加上页内偏移得到物理地址。</p><p>如果程序执行时，调用到不再内存中的虚拟页面时，发生缺页中断，将页由外村调入内存。如果内存已满，采用页面置换算法将老的淘汰，载入新的。页面置换算法常见的有FIFO,LRU。</p><p>优点：没有外碎片，每个内碎片不超过页的大小。</p><p>缺点：程序全部装入内存，要求有相应的硬件支持，如地址变换机构缺页中断的产生和选择淘汰页面等都要求有相应的硬件支持。增加了机器成本和系统开销。</p><p>​    请求分段存储管理：将用户程序地址空间分成若干个大小不等的段，每段能够定义一组相对完整的逻辑信息。存储分配时，以段为单位，段内地址连续，段间不连续。虚拟地址由段号和段内地址组成，虚拟地址到实存地址的变换通过段表来实现。 分页对程序猿而言是不可见的。而分段通常对程序猿而言是可见的，因而分段为组织程序和数据提供了方便。段页式存储组织是分段式和分页式结合的存储组织方法。这样可充分利用分段管理和分页管理的长处。</p><p>优点：可以分别编写和编译，可以针对不同类型的段采取不同的保护，可以按段为单位来进行共享，包括通过动态链接进行代码共享。</p><p>缺点：会产生碎片。</p><p>用分段方法来分配和管理虚拟存储器。程序的地址空间按逻辑单位分成基本独立的段，而每一段有自己的段名，再把每段分成固定大小的若干页。用分页方法来分配和管理实存。</p><p>优点：段页式管理是段式管理和页式管理相结合而成，具有两者的优点。</p><p>缺点：由于管理软件的增加，复杂性和开销也增加。另外需要的硬件以及占用的内存也有所增加，使得执行速度下降。</p><p>操作系统虚拟内存换页的过程</p><p>在进程开始运行之前，不是全部装入页面，而是装入一个或者零个页面，之后根据进程运行的需要，动态装入其他页面；当内存已满，而又需要装入新的页面时，则根据某种算法淘汰某个页面，以便装入新的页面。</p><p>在使用虚拟页式存储管理时需要在页表中增加一些内容：</p><p><em><strong>*页号、驻留位（中断位）、内存块号、外存地址、访问号、修改位*</strong></em></p><p><em><strong>*驻留位：表示该页在外存还是内存；*</strong></em></p><p><em><strong>*访问位：表示该页在内存期间是否被访问过，又称R位；*</strong></em></p><p><em><strong>*修改位：表示该页在内存中是否被修改过，又称M位；*</strong></em></p><p>缺页本身是一种中断，与一般的中断一样，需要经过4个处理步骤：</p><p>1、保护CPU现场</p><p>2、分析中断原因</p><p>3、转入缺页中断处理程序进行处理</p><p>4、恢复CPU现场，继续执行</p><h2 id="2-12、虚拟内存换页的算法有哪些？"><a href="#2-12、虚拟内存换页的算法有哪些？" class="headerlink" title="2.12、虚拟内存换页的算法有哪些？"></a>2.12、虚拟内存换页的算法有哪些？</h2><p><em><strong>*最优页面置换算法*</strong>***</em>*、*<strong><strong><strong>*先进先出页面置换算法（FIFO）及其改进*</strong></strong></strong>*、*<strong><strong><strong>*最近最少使用页面置换算法（LRU）*</strong></strong></strong>*、*<strong><strong><strong>*时钟页面置换算法（clock）*</strong></strong></strong>*、*<strong><strong><strong>*最近未使用页面置换算法（NRU）*</strong></strong></strong>*;****</p><p>换页算法里面，FIFO有什么缺点？怎么改进？</p><p>先进先出实现简单，但并没有考虑局部性原理，最近访问过的数据不久之后很可能会再次被访问。性能可能会很差。还会发生Belady异常现象， 使用FIFO算法时，四个页框时缺页次数比三个页框时多。这种奇怪的情况称为Belady异常现象。</p><p>称为第二次机会算法。即给每个页面增加一个R位，表示最近访问过，每次先从链表头开始查找，如果R置1位，清除R位并且把该页面节点放到链表结尾；如果R是0，那么就是又老又没用到，替换掉。</p><h2 id="2-13、进程调度算法"><a href="#2-13、进程调度算法" class="headerlink" title="2.13、进程调度算法"></a>2.13、进程调度算法</h2><p><em><strong>*先来先服务调度算法、短作业(进程)优先调度算法、优先权调度算法的类型、高响应比优先调度算法、时间片轮转法、多级反馈队列调度算法、*</strong></em></p><h2 id="2-14、部分面试题"><a href="#2-14、部分面试题" class="headerlink" title="2.14、部分面试题"></a>2.14、部分面试题</h2><p>进程的内存空间是怎么样的？</p><p>堆快还是栈快？</p><p>​    JVM对堆栈只进行两种操作:以帧为单位的压栈和出栈操作。堆是应用程序在运行的时候请求操作系统分配给自己内存，由于从操作系统管理的内存分配,所以在分配和销毁时都要占用时间，因此用堆的效率非常低。</p><p>Java的同步机制有哪些：几种锁把。</p><p>Java中如果我有两个long数组，想要取他们的交集</p><p>Java有没有遇到过fullGC，触发fullGC的条件以及如何排查</p><p>网页跳转怎么实现，结合具体的场景 前端</p><p>301 和 302 什么区别？结合具体场景</p><p>​    301和302都是重定向状态码。说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取。301永久重定向，表示旧地址的资源永久性移除了，搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址。302临时重定向。表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。</p><p>​    网页目录结构调整，网页扩展名调整，网页被移动到一个新的地址，这些都要永久重定向301.</p><p>如果网页调整是临时的，之后会调整过来，就用临时重定向302；</p><p>504 什么意思？</p><p>​    网关超时。</p><p>怎么在前端实现网页跳转，用什么函数？</p><p><em><strong>*onclick跳转*</strong></em></p><p><em><strong>*设置window的location.href属性*</strong></em></p><p>  <em><strong>*οnclick=”window.location.href=’URL’”*</strong></em></p><p>  οnclick=”location=’URL’”</p><p><em><strong>*调用window的open方法*</strong></em></p><p>  ο<em><strong>*nclick=”window.open(‘URL’,’_blank’);” // 在新窗口打开*</strong></em></p><p>  οnclick=”window.open(‘URL’,’_self’);” // 覆盖当前页</p><p><em><strong>*a标签跳转*</strong></em></p><p>    <a href="URL" target="_blank">Preface</a> // 在新窗口打开</p><p><a href="URL" target="_self">Preface</a> // 覆盖当前页，target属性默认为_self，此处可省略</p><p>req.getRequestDispatcher(“ok.jsp”).forward(req,resp)</p><p>resp.sendRedirect(“ok.jsp”);//URL发生变化</p><p>任务处理时间 100ms，服务器 4 核 8G 如何设计线程池达到 1000qps？任务是 90ms 在 IO，10ms 在计算的情况下怎么弄？全在计算呢？</p><p>10G 数据，1G 内存，如何快速找到重复出现的数据？</p><p>10G 数据，1G 内存，如何快速找到重复出现次数最多的数据？</p><p>如何检测跳转页面的登录状态session,cookie</p><p>5.java 设计模式， jdk里用到了哪些设计模式。</p><p>6.NIO 讲一讲。</p><p>不用final还可以用什么办法使得这个类不被继承、</p><p>java初始化的顺序</p><p>自旋锁 是公平吗？不是</p><p>自旋锁 怎么才能公平。</p><p>客户抱怨你们网站太慢，怎么排查问题？</p><p>SDS优点，链表、跳表的实现与复杂度</p><p>内核态和用户态的切换</p><p>select poll epoll三连</p><p>虚拟内存的作用</p><p>CPU二级缓存</p><p>如何快速复用处于TIME_WAIT的连接</p><p>三种I/O多路复用</p><p>一个TCP报文从本机到对方主机的过程</p><p>路由表的结构是什么样的</p><p>海量数据(100亿)找最大的100w个数，时间复杂度nlogm，n时100亿，m是100w</p><p>衍生出堆排序过程讲一下</p><p>redis里几个常用命令？</p><p>linux常用命令？</p><p>解释XSS 和 CSRF，它们之间有什么区别，以及如何防范。</p><p>交换机和路由器区别</p><p>17、linux读文件的过程</p><p>18、ping 127.0.0.1经过哪些层</p><p>19、设置mtu有什么用</p><p>Linux 中能否删除一个正在运行的文件</p><p>Linux 常用的命令，如何排查 bug</p><h1 id="3、集合框架"><a href="#3、集合框架" class="headerlink" title="3、集合框架"></a>3、集合框架</h1><h2 id="3-1、ArrayList"><a href="#3-1、ArrayList" class="headerlink" title="3.1、ArrayList"></a>3.1、ArrayList</h2><p>​    底层实现是Object数组（transient Object[] elementData）;</p><p>​    默认长度是10, 扩容是变成1.5倍：int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</p><p>​    扩容是创建新的数组，elementData = Arrays.copyOf(elementData, newCapacity)</p><p>​    增减元素，会造成数组元素的移动，使用System.arraycopy();</p><p>​    支持随机访问;     </p><h2 id="3-2、LinkedList"><a href="#3-2、LinkedList" class="headerlink" title="3.2、LinkedList"></a>3.2、LinkedList</h2><p>​    LinkedList 实际上是通过双向链表去实现的,内部类Node(val,next,pre)是链表的节点;</p><p>  它也可以被当作堆栈、队列或双端队列进行操作。</p><p>  不支持随机访问，但删除、插入元素时间不受元素位置影响，近似O(1),而ArryList是O(n);</p><h2 id="3-3、Vector"><a href="#3-3、Vector" class="headerlink" title="3.3、Vector"></a>3.3、Vector</h2><p>  底层实现也是Object数组，线程安全,支持随机访问</p><p>  默认长度是10， capacityIncrement增长系数，如果设置，每次扩展都是增加这个数，否则扩容为2倍。</p><p>​    (01) 对于需要快速插入，删除元素，应该使用LinkedList。</p><p>  (02) 对于需要快速随机访问元素，应该使用ArrayList。</p><p>  (03) 对于“单线程环境” 或者 “多线程环境，但List仅仅只会被单个线程操作”，此时应该使用非同步的类(如ArrayList)。</p><p>对于“多线程环境，且List可能同时被多个线程操作”，此时，应该使用同步的类(如Vector)。</p><p><em><strong>*Collections.synchronizedList(new ArrayList&lt;Map&lt;String,Object&gt;&gt;());*</strong></em></p><h2 id="3-4、快速失败（fail—fast）"><a href="#3-4、快速失败（fail—fast）" class="headerlink" title="3.4、快速失败（fail—fast）"></a>3.4、快速失败（fail—fast）</h2><p>​    在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception;</p><p>​    迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。<em><strong>*每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。*</strong></em></p><p>​    <em><strong>*当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。这个机制是防止多线程并发访问list可能带来错误，所以抛出异常提醒一下。*</strong></em></p><p>​    <em><strong>*Fail-Fast : List维护一个modCount变量，add、remove、clear等涉及了改变list元素的个数的方法都会导致modCount的改变。如果判断出modCount != expectedModCount,*</strong></em> <em><strong>*抛出ConcurrentModificationException 异常，从而产生fail-fast机制。*</strong></em></p><p>​    <em><strong>*并发安全的解决方案：*</strong></em></p><p>****1、****Collections.synchronizedList。或者每个访问操作sychronized加锁。</p><p><em><strong>*2*</strong></em> <em><strong>*CopyOnWriteArrayList来替换ArrayList。推荐使用该方案。*</strong></em></p><p>CopyOnWriterArrayList所代表的核心概念就是****：任何对array在结构上有所改变的操作****（add、remove、clear等），CopyOnWriterArrayList都会copy现有的数据，再在copy的数据上修改，这样就不会影响COWIterator中的数据了，修改完成之后改变原有数据的引用即可。同时这样造成的代价就是产生大量的对象，同时数组的copy也是相当有损耗的。</p><h2 id="3-5、安全失败（fail—safe）"><a href="#3-5、安全失败（fail—safe）" class="headerlink" title="3.5、安全失败（fail—safe）"></a>3.5、安全失败（fail—safe）</h2><p>​    采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</p><p>​    <em><strong>*java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。*</strong></em></p><p><em><strong>*fail-safe机制有两个问题*</strong></em></p><p>（1）需要复制集合，产生大量的无效对象，开销大</p><p>（2）无法保证读取的数据是目前原始数据结构中的数据。</p><h2 id="3-6、HashMap"><a href="#3-6、HashMap" class="headerlink" title="3.6、HashMap"></a>3.6、HashMap</h2><p>​    HashMap底层是数组和链表结合在一起，也就是链表散列；  怎么更通顺的说出来？？？</p><p>​    hashMap底层是数组+链表+红黑树。首先是table数组，每个数组存放的是链表，链表的每一个节点都是&lt;Key,Value&gt;型的Node节点。</p><p>  JDK1.8之后，当链表长度超过阈值，默认为8时，为加快检索速度，将链表转化成红黑树。</p><p>默认加载因子是 0.75, 默认的初始容量是16，容量就是数组长度，如果size大于容量*加载因子，就进行rehash;</p><p>容量扩容成两倍;</p><p>  如果初始化时指定初始容量，要向上取到2的N次方。因为对key的hashCode进行扰动函数处理之后，是根据（n-1）&amp; hash判断元素在数组中的位置的。</p><p>  使用(n-1) &amp; hash是为了效率考虑，而只有数组长度为2的N次方，才能使n-1 &amp; hash起到取余操作的作用。</p><p>  hash(key) —-&gt; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);—–key的扰动函数;减少碰撞;</p><p>  (n-1) &amp; hash—判断元素在数组中的位置。数组中存放的是Node&lt;k,v&gt;节点。</p><p>  查询get(key)时，先判断在数组中的位置，key的hashCode无符号右移16，再异或，取余;然后在链表中搜索;</p><p>put,也是先查询在数组中的问题，然后判断链表中，key是否存在，存在就更新， 不存在头插法，插入链表;</p><p>​    红黑树的平均查找长度是log(n)，长度为8，查找长度为log(8)=3，链表的平均查找长度为n/2，当长度为8时，平均查找长度为8/2=4，这才有转换成树的必要；链表长度如果是小于等于6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。中间有个差值7可以防止链表和树之间频繁的转换。</p><p>​    而且理想情况下，<em><strong>*在随机哈希代码下，桶中的节点频率遵循泊松分布*<em><strong>，文中给出了桶长度k的频率表。<br>由频率表可以看出，</strong></em>*桶的长度超过8的概率非常非常小（千万分之一）。所以作者应该是根据概率统计而选择了8作为阀值。*</strong></em></p><p>​    <em><strong>*TreeMap是基于红黑树实现的一个保证有序性的Map 基于红黑树，所以TreeMap的时间复杂度是O(log n)，*</strong></em></p><p><em><strong>*Hash*</strong>***</em>*Map****<em><strong>*冲突解决方法：开发地址法，当冲突发生时，使用某种探查(亦称探测)技术（线性探测，随机探测，不同的关键字使用不同的探测距离）在散列表中形成一个探查(测)序列。沿此序列逐个单元地查找，直到找到给定的关键字，或者找到空。*</strong></em></p><p><em><strong>*2、拉链法*</strong></em></p><p><em><strong>*多线程PUT可能发生的问题：*</strong></em></p><p><em><strong>*1、当多个线程同时执行addEntry(hash,key ,value,i)时，如果产生哈希碰撞，导致两个线程得到同样的bucketIndex去存储，就可能会发生元素覆盖丢失的情况*</strong></em></p><p><em><strong>*2、JDK*</strong>***</em>*1.7****<em><strong>*以前。在向HashMap put元素时，会检查HashMap的容量是否足够，如果不足，则会新建一个比原来容量大两倍的Hash表，然后把数组从老的Hash表中迁移到新的Hash表中，迁移的过程就是一个rehash()的过程，多个线程同时操作就有可能会形成循环链表。*</strong></em></p><p><em><strong>*扩容方式：遍历*</strong>***</em>*【】****尾插法将节点插入到新的hashmap中。</p><p>当然，他们都不是线程安全的，线程安全还是得用ConcurrentHashMap;</p><h2 id="3-7、红黑树的特性"><a href="#3-7、红黑树的特性" class="headerlink" title="3.7、红黑树的特性"></a>3.7、红黑树的特性</h2><p>  （1）每个节点或者是黑色，或者是红色。</p><p>  （2）根节点是黑色。</p><p>  （3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</p><p>  （4）如果一个节点是红色的，则它的子节点必须是黑色的。</p><p>  （5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。（确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。）</p><p>   它的时间复杂度是O(lgn)，一棵含有n个节点的红黑树的高度至多为2log(n+1).</p><h2 id="3-8、HashTable与hashMap的不同"><a href="#3-8、HashTable与hashMap的不同" class="headerlink" title="3.8、HashTable与hashMap的不同"></a>3.8、HashTable与hashMap的不同</h2><p>  HashTable线程安全，方法都是sychronized修饰;hashMap线程不安全；</p><p>  HashTable,Key和Value都不能为null;而hashMap可以有一个null可以，value是否为null无所谓;</p><p>  HashTable初始容量11，扩展2*n+1,HashMap,初始16，扩容加倍；初始容量向上取到2的N次方;</p><p>HashMap当链表长度大于阈值时，转化成红黑树，而HashTable没有。</p><h2 id="3-9、ConcurrentHashMap的底层实现！！！！！！！！！！！！！！！"><a href="#3-9、ConcurrentHashMap的底层实现！！！！！！！！！！！！！！！" class="headerlink" title="3.9、ConcurrentHashMap的底层实现！！！！！！！！！！！！！！！"></a>3.9、ConcurrentHashMap的底层实现！！！！！！！！！！！！！！！</h2><p>  HashMap多线程情况下，可能造成死循环，当扩容时，头插法+没有同步控制，很可能造成循环链表，造成死循环</p><p>  JDK1.8声明两对指针，维护两个链表，依次在末端添加新的元素,解决了死循环，但依然存在很多问题，例如数据丢失：</p><p>​    HashTable是线程安全的，使用synchronized来保证线程安全，锁住整个hash表，并发效率低下;</p><p>  JUC中的ConcurrentHashMap,1.5-1.7使用分段锁机制，将整个数组分割分段，每一把锁只锁定segment,</p><p>将整个Hash表切分多个Segment；而每个Segment元素，类似于一个Hashtable;</p><p><em><strong>*Segment的数量由所谓的concurrentcyLevel决定， 默认是16； 和HashMap的初始容量一致， 也可以在相应构造函数直接指定。 同样是2的幂数值;*</strong></em></p><p>  当一个线程占用锁访问其中一个segment的时候，其他segment也能被其他线程访问</p><p>  ConcurrentHashMap 定位一个元素的过程需要进行两次Hash操作，第一次 Hash 定位到 Segment，第二次 Hash 定位到元素所在的链表的头部</p><p>  JDK1.8之后，抛弃了segment的概念，直接用Node数组+链表+红黑树的数据结构实现，并发控制采用CAS+synchronize;</p><p>  <em><strong>*put的时候, 判断是否kv为null, hash定位桶位置之后，如果为空，cas写入，否则synchronize加锁写入(更新或插入)如果链表长度达到8，将链表转化成红黑树；*</strong></em></p><p>  get的时候，没有并发控制；在链表查询的时候，会判断是红黑树还是链表，两种查询方式；</p><p><em><strong>*synchronize只锁定当前链表或红黑二叉树的首节点。*</strong></em></p><p>　　<strong>①</strong> <strong>判断存储的key、value是否为空，若为空，则抛出异常，否则，进入步骤****②</strong></p><p>　　<strong>②</strong> <strong>计算key的hash值，随后进入无限循环，该无限循环可以确保成功插入数据，若table表为空或者长度为0，则初始化table表，否则，进入步骤****③</strong></p><p>　　<strong>③</strong> <strong>根据key的hash值取出table表中的结点元素，若取出的结点为空（该桶为空），则使用CAS将key、value、hash值生成的结点放入桶中。否则，进入步骤****④</strong></p><p>　　<strong>④</strong> <strong>若该结点的的hash值为MOVED，则对该桶中的结点进行转移，否则，进入步骤****⑤</strong></p><p>　　<strong>⑤</strong> <strong>对桶中的第一个结点（即table表中的结点）进行加锁，对该桶进行遍历，桶中的结点的hash值与key值与给定的hash值和key值相等，则根据标识选择是否进行更新操作（用给定的value值替换该结点的value值），若遍历完桶仍没有找到hash值与key值和指定的hash值与key值相等的结点，则直接新生一个结点并赋值为之前最后一个结点的下一个结点。进入步骤****⑥</strong></p><p>　　<strong>⑥</strong> <strong>若binCount值达到红黑树转化的阈值，则将桶中的结构转化为红黑树存储，最后，增加binCount的值。</strong></p><h2 id="3-10、面试题"><a href="#3-10、面试题" class="headerlink" title="3.10、面试题"></a>3.10、面试题</h2><h3 id="3-10-1、常⽤的集合类有哪些？"><a href="#3-10-1、常⽤的集合类有哪些？" class="headerlink" title="3.10.1、常⽤的集合类有哪些？"></a>3.10.1、常⽤的集合类有哪些？</h3><p>主要分为三类，Map、Set、List</p><ul><li><p>Map: HashMap、LinkedHashMap、TreeMap、ConcurrentHashMap</p></li><li><p>Set：HashSet、LinkedHashSet、TreeSet</p></li><li><p> List: ArrayList、LinkedList</p></li></ul><h3 id="3-10-2、-ArrayList和LinkedList内部实现⼤致是怎样的？他们之间的区别和优缺点？"><a href="#3-10-2、-ArrayList和LinkedList内部实现⼤致是怎样的？他们之间的区别和优缺点？" class="headerlink" title="3.10.2、 ArrayList和LinkedList内部实现⼤致是怎样的？他们之间的区别和优缺点？"></a>3.10.2、 ArrayList和LinkedList内部实现⼤致是怎样的？他们之间的区别和优缺点？</h3><ul><li> ArrayList</li><li>底层实现是Object数组（transient Object[] elementData），随机访问速度快</li><li>默认长度是10, 扩容是变成1.5倍：int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);扩容⽅式是利⽤数组的复制，因此有⼀定的开销。</li><li>增减元素，会造成数组元素的移动，使用System.arraycopy();</li><li>LinkedList：<ul><li>LinkedList 实际上是通过双向链表去实现的,内部类Node(val,next,pre)是链表的节点;</li><li>属性first，last分别用来指向首尾节点，size用来记录链表长度</li><li>可以被当作堆栈、队列或双端队列进行操作</li></ul></li><li>ArrayList查找较快，插⼊、删除较慢，LinkedList查找较慢，插⼊、删除较快。</li></ul><h3 id="3-10-3、-Collections-工具类和-Arrays-工具类常见方法"><a href="#3-10-3、-Collections-工具类和-Arrays-工具类常见方法" class="headerlink" title="3.10.3、 Collections 工具类和 Arrays 工具类常见方法"></a>3.10.3、 Collections 工具类和 Arrays 工具类常见方法</h3><ul><li><p>Collections</p><ul><li><p>排序</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//反转</span><span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//随机排序</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按自然排序的升序排序</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Comparator c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定制排序，由Comparator控制排序逻辑</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> <span class="token keyword">int</span> i <span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//交换两个索引位置的元素</span><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查找,替换操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对List进行二分查找，返回索引，注意List必须是有序的</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">,</span> Comparator c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span><span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用指定的元素代替指定list中的所有元素。 </span><span class="token keyword">int</span> <span class="token function">frequency</span><span class="token punctuation">(</span>Collection c<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//统计元素出现次数</span><span class="token keyword">int</span> <span class="token function">indexOfSubList</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> List target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//统计targe在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target).</span><span class="token keyword">boolean</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> Object oldVal<span class="token punctuation">,</span> Object newVal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用新元素替换旧元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同步控制</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">synchronizedCollection</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span>  c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回指定 collection 支持的同步（线程安全的）collection。</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回指定列表支持的同步（线程安全的）List。 </span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回由指定映射支持的同步（线程安全的）Map。</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>T<span class="token operator">></span> s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回指定 set 支持的同步（线程安全的）set。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>该方法可以将指定集合包装成线程同步的集合，从而解决多线程并发访问集合时的线程安全问题。</p><p><strong>最好不要用下面这些方法，效率非常低，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合</strong></p></li></ul></li><li><p>Arrays</p><pre class="line-numbers language-java"><code class="language-java">排序 <span class="token operator">:</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>查找 <span class="token operator">:</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>比较<span class="token operator">:</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>填充 <span class="token operator">:</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>转列表<span class="token operator">:</span> <span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>转字符串 <span class="token operator">:</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>复制 <span class="token operator">:</span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="4、JVM"><a href="#4、JVM" class="headerlink" title="4、JVM"></a>4、JVM</h1><h2 id="4-1、JVM内存"><a href="#4-1、JVM内存" class="headerlink" title="4.1、JVM内存"></a>4.1、JVM内存</h2><p>​    线程私有：PC程序计数器，虚拟机栈，本地方法栈   线程共享：堆，方法区，直接内存</p><p>  ****PC：****下一条执行字节码指令的地址，唯一不会发生OutOfMemory的地方；</p><p>  <em><strong>*虚拟机栈*<em><strong>：线程私有，</strong></em>*生命周期和线程一致；*<em><strong>存在</strong></em>*局部变量表（基本数据类型和引用类型变量），操作数栈，动态链接，方法出口信息。*</strong></em></p><p>  两种异常：当栈的深度超过最大申请申请深度时，StackOverFlowError;内存不够Java虚拟机栈动态扩展时，OutOfMemory;</p><p>  栈中存放的是栈帧，一个函+数一个栈帧;</p><p>​    ****本地方法栈****，存放本地方法的栈，其他和虚拟机栈一样。</p><p>​    ****堆****：唯一作用：存储对象内存；几乎所有的对象和数组都在这分配内存；是垃圾回收的主要地方；为更好的回收内存和分配内存，将对堆进行分代，分为新生代和老年代，不同的代采用不同的垃圾回收算法；老年代基本采用标记整理，只有cms采用标记清除。</p><p>  新生采用复制算法，为提高内存利用率，将新生代分为Eden（伊甸）区，survivor([səˈvaɪvə(r)]) s0, s1，比例为8:1:1。每次留1块s区作为复制的备份内存，同时将老年代作为分配担保区。</p><p>  <em><strong>*方法区*<em><strong>：</strong></em>*存储已被虚拟机加载*</strong>***</em>*的类信息、常量、静态变量、即时编译器编译后的代码等********数据****。线程共享。JDK1.8被元空间取代，元空间位于直接内存；</p><p>  替换的一个原因是，方法区有JVM设置固定大小上限，而元空间直接使用内容，只受限于直接内存，不会发生OutOfMemory;</p><p>  <em><strong>*常量池*<em><strong>，1.8之前，放在方法区，大小受限于方法区。</strong></em>*而1.8存放堆中*<em><strong>。主要有</strong></em>*字面量(字符串基本数据类型，final常量值)和符号引用.*</strong></em></p><p>  ****直接内存****，不是运行时数据区的一部分，也不是虚拟机规范定义的内存，也可能OutOfMemory;</p><h2 id="4-2、堆内存分配策略"><a href="#4-2、堆内存分配策略" class="headerlink" title="4.2、堆内存分配策略"></a>4.2、堆内存分配策略</h2><p>1、对象优先在新生代伊甸区分配内存。2、大对象直接进去老年代(长字符串和数组)3、长期存活的对象进入老年代。一次Minor[ˈmaɪnə(r)]GC，年龄加一，默认年龄15进入老年代。4、动态年龄判定。相同年龄所有对象大小的总和大于 Survivor 空间的一半，大于等于该年龄的对象进入老年代。</p><p>  新生代 GC（Minor GC）,发生在新生代的垃圾回收动作，频繁且快。 </p><p>  老年代 GC（Major GC/Full GC，发生在老年代的垃圾回收，通常伴随着至少一次的minor gc。速度慢。</p><h2 id="4-3、Full-GC触发"><a href="#4-3、Full-GC触发" class="headerlink" title="4.3、Full GC触发"></a>4.3、Full GC触发</h2><p><em><strong>*1、老年代空间不足2、方法区空间不足。3、调用System.gc(),建议JVM进行full gc. 4、没有足够的连续空间分配给大对象。5、长期存活的对象转入老年代，空间不足。6、新生代垃圾回收存活的对象太多，S1放不下，老年代担保空间不足。*</strong></em></p><h2 id="4-4、判断对象是否存活"><a href="#4-4、判断对象是否存活" class="headerlink" title="4.4、判断对象是否存活"></a>4.4、判断对象是否存活</h2><p>  1引用计算法，给对象添加一个引用计数器，每次被引用，计算器加一，引用失效，计算减一。当引用数为0时，表示对象不存活。但无法解决循环引用问题。</p><p>  2、可达性分析法。以****GC Roots****对象为起点，向下搜索，节点所走的路径成为引用链。当一个对象和引用链没有相连时，表示这个对象不可达。主要方法。GC Roots: 虚拟机栈引用的对象，本地方法栈引用的对象，方法区静态属性引用的对象，方法区常量引用的对象。</p><p>​    对象的存活都和引用有关，引用类型分为强引用，软引用，弱引用，虚引用。</p><p>  强引用，new的对象。垃圾回收器绝不会回收它。软引用，空间不足，回收这些对象的内存。弱引用，只要发现，马上回收。虚引用，形同虚设，任何时候都可能被回收</p><p>  很少用虚和弱，软引用很多，可以加快jvm对垃圾内存的回收速度。</p><h2 id="4-5、回收对象的两次标记过程"><a href="#4-5、回收对象的两次标记过程" class="headerlink" title="4.5、回收对象的两次标记过程"></a>4.5、回收对象的两次标记过程</h2><p>可达性分析的不可达对象，并不马上回收。真正死亡至少经过两次标记：对可达性分析不可达的对象进行第一次标记，并进行筛选。筛选条件是重写finalize方法且没有调用的对象，将其放入队列中，进行第二次标记。在执行finalize方法时，该对象依然没有被引用，才会被真正回收掉。finalize方法只能被调用一次。</p><p>  判断常量是否是****废弃常量****？  运行时常量池是主要的回收对象。常量不被引用，就可以被回收。</p><p>  判断一个类是否是****无用的类****？ 1，类的实例对象全被回收。2.加载类的ClassLoader被回收。3，堆中的Class对象(在运行时期提供或者获得某个对象的类型信息)没有被引用。</p><h2 id="4-6、垃圾回收算法"><a href="#4-6、垃圾回收算法" class="headerlink" title="4.6、垃圾回收算法"></a>4.6、垃圾回收算法</h2><p>标记-清除：先标记需清除的对象，统一回收—-效率不高，会产生大量不连续的碎片。</p><p>  复制算法：将内存分块，每次只使用一块，使用完后，将存活的对象复制到另一块上。</p><p>  标记整理：先标记存活对象，然后让所有存活对象向一端移动，直接清理端边界以外的内存。</p><p>  分代算法，堆分为新生代和老年代，新生代每次收集都会有大量的对象死去，选择复制算法。将新生代分为伊甸区，和s0,s1.大小比例为8:1:1</p><p>  老年代存活率比较高，且没有额外空间进行分配担保，选择标记清除或者标记整理算法。</p><h2 id="4-7、垃圾回收器"><a href="#4-7、垃圾回收器" class="headerlink" title="4.7、垃圾回收器"></a>4.7、垃圾回收器</h2><p>  serial[ˈsɪriəl],串行收集器。单线程，垃圾回收的时候，必须暂停其他工作。新生复制，老年标记整理。简单高效。</p><p>  ParNew 收集器。serial的多线程版本。</p><p>  Parallel Scavenge [ˈpærəlel] [ˈskævɪndʒ] 收集器,复制算法的多线程收集器。注重吞吐量，cpu运行代码时间/cpu耗时总时间。新生复制，老年标记整理</p><p>  Serial Old 收集器，老年代版本。</p><p>  Parallel Old 收集器，Parallel老年代版本。</p><p>  CMS 收集器，注重最短时间停顿。并发收集器，垃圾收集线程与用户线程（基本上）同时工作。  标记清除算法。</p><p>  ****初始标记：****暂停其他线程，标记与GC roots直接关联的对象。并发标记,可达性分析过程。重新标记，对并发标记过程中，用户线程修改的对象再次标记一下。并发清除：标记完成之后，和用户线程并发清除死亡对象。</p><p>  主要优点：<em><strong>*并发收集、低停顿。*</strong></em></p><p>  缺点，<em><strong>*无法处理浮动垃圾，使用标记清除算法，导致大量不连续碎片产生。对CPU资源敏感，可能导致用户线程变慢。*</strong></em></p><p><em><strong>*G1收集器，低停顿， 高吞吐。*</strong></em></p><p>可预测停顿（让使用者指定垃圾回收时间），空间整合（标记整理算法），分代收集：分代概念保留，但不需要和其他收集器配合就能独立管理整个堆。并行和并发：并行：利用多CPU、多核环境下的硬件优势。并发：两个阶段的垃圾回收能和用户线程并发。</p><p>  <em><strong>*垃圾回收时，*</strong>***</em>*对新生代和老年代一视同仁。将整个堆划分成多个大小相等的Region。G1能跟踪每个Region的回收价值和停顿时间成本*<strong><strong><strong>*。步骤，初始标记，标记与GC roots直接关联的对象，并发标记，可达性分析过程。最终标记，对并发标记过程中，用户线程修改的对象再次标记一下。*</strong></strong></strong>*筛选回收：对各个Region的回收价值和成本进行排序，然后根据用户所期望的GC停顿时间制定回收计划并回收。****</p><h2 id="4-8、创建一个对象的步骤"><a href="#4-8、创建一个对象的步骤" class="headerlink" title="4.8、创建一个对象的步骤"></a>4.8、创建一个对象的步骤</h2><p>  Step1,类加载检查，先检查对象所属类是否已被加载、解析、初始化过，如果没有，先进行类加载过程；</p><p>  Step2,分配内存，为对象分配内存(两种分配方式指针碰撞(标记整理)和空闲列表(标记清除))。</p><p>  Step3,初始化为0值，将内存空间除了对象头都初始化为0值。</p><p>  Step4,设置对象头，类的元数据信息，对象哈希码，对象年龄等</p><p>  Step5,执行init方法，对对象真正初始化。</p><h2 id="4-9、对象的内存布局"><a href="#4-9、对象的内存布局" class="headerlink" title="4.9、对象的内存布局"></a>4.9、对象的内存布局</h2><p>在内存中主要分为三部分：对象头，实例数据和对象对齐。实例数据时对象真正的有效信息，对其填充部分起占位作用。</p><p>  对象头一是<em><strong>*运行时数据（哈希码，GC年龄，锁状态等）二是类型指针，指向类元数据。*</strong></em></p><h2 id="4-10、对象访问形式"><a href="#4-10、对象访问形式" class="headerlink" title="4.10、对象访问形式"></a>4.10、对象访问形式</h2><p>1、使用句柄、2直接使用指针。使用句柄：在内存中开辟句柄池，栈中的引用变量，指向句柄池中的句柄地址，指向堆中的实例对象数据，和方法区的对象类型数据。</p><p>  直接指针，栈中的引用对象变量，直接指向堆中的对象，其中堆中的对象头又指向方法区中的对象类型数据。</p><h2 id="4-11、类加载过程"><a href="#4-11、类加载过程" class="headerlink" title="4.11、类加载过程"></a>4.11、类加载过程</h2><p>虚拟机将Class文件加载到虚拟机中，并初始化。主要三步，加载，链接，初始化。链接又分验证，准备，解析。</p><p>  <em><strong>*加载*<em><strong>：</strong></em>*主要完成三件事：通过全类名获取类的二进制字节流。2，将类的静态存储结构转化为方法区的运行时数据结构。3,在内存中生成类的Class对象，作为方法区数据的入口。*</strong></em></p><p>  ****验证****，对文件格式，元数据，字节码，符号引用等验证正确性。</p><p>  ****准备****，在方法区内为类变量分配内存并设置为0值。</p><p>  ****解析****，将符号引用转化为直接引用。</p><p>  ****初始化****，执行类构造器clinit方法，真正初始化。</p><p>类加载过程的加载的第一步，将.class文件加载到内存是由类加载器完成的。</p><h2 id="4-12、类加载器"><a href="#4-12、类加载器" class="headerlink" title="4.12、类加载器"></a>4.12、类加载器</h2><p>  BootstrapClassLoader启动类加载器,除了他其他类加载器都继承Java.lang.ClassLoader。  /lib下的jar包和类。</p><p>  ExtensionClassLoader扩展类加载器， /lib/ext目录下的jar包和类。</p><p>  AppClassLoader应用类加载器，当前classPath下的jar包和类。</p><h2 id="4-13、双亲委派机制"><a href="#4-13、双亲委派机制" class="headerlink" title="4.13、双亲委派机制"></a>4.13、双亲委派机制</h2><p>  一个类加载器收到类加载请求之后，首先判断当前类是否被加载过。已经被加载的类会直接返回，如果没有被加载，首先将类加载请求转发给父类加载器，一直转发到启动类加载器，只有当父类加载器无法完成时才尝试自己加载。</p><p>  ****好处****1、可以避免类的重复加载。(相同的类被不同的类加载器加载会产生不同的类)，双亲委派保证了java程序的稳定运行。2、保证核心API不被修改。</p><p>  自定义类加载器:（1）继承ClassLoader（2）重写findClass（）方法 （3）调用defineClass（）方法</p><p><em><strong>*破坏双亲委派机制，重载loadClass() 方法。*</strong></em></p><h2 id="4-14、创建对象的几种方式"><a href="#4-14、创建对象的几种方式" class="headerlink" title="4.14、创建对象的几种方式"></a>4.14、创建对象的几种方式</h2><p>​    用new关键字创建</p><p>​    调用对象的clone方法</p><p>​    利用反射，调用Class类的或者是Constructor类的newInstance（）方法</p><p>​    用反序列化，调用ObjectInputStream类的readObject（）方法</p><h2 id="4-15、jvm面试题"><a href="#4-15、jvm面试题" class="headerlink" title="4.15、jvm面试题"></a>4.15、jvm面试题</h2><h3 id="4-15-1、-jvm内存结构？为什么需要GC？"><a href="#4-15-1、-jvm内存结构？为什么需要GC？" class="headerlink" title="4.15.1、 jvm内存结构？为什么需要GC？"></a>4.15.1、 jvm内存结构？为什么需要GC？</h3><ul><li><p>内存结构</p><ul><li><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528153133388.png" alt="image-20210528153133388"></li></ul></li><li><p>垃圾回收：垃圾回收可以有效的防⽌内存泄漏，有效的使⽤可以使⽤的内存。</p><ul><li>垃圾回收器通常是作为⼀个<strong>单独的低优先级的线程</strong>运⾏，<strong>不可预知</strong>的情况下对内存堆中<strong>已经死亡的或者⻓时间没有使⽤的对象</strong>进⾏清除和回收，程序员不能实时的调⽤垃圾回收器对某个对象或所有对象进⾏垃圾回收。</li><li>垃圾回收算法有标记-清除、  复制算法、标记-整理算法、分代回收算法等</li><li>垃圾收集器常见有CMS和G1<ul><li>CMS<ul><li>优点：并发收集、低停顿。</li><li>缺点：无法处理浮动垃圾，使用标记清除算法，导致大量不连续碎片产生。对CPU资源敏感，可能导致用户线程变慢。</li></ul></li><li>G1：  对新生代和老年代一视同仁。将整个堆划分成多个大小相等的Region。G1能跟踪每个Region的回收价值和停顿时间成本，优先处理回收价值收益最大的那些region<ul><li>优点：低停顿， 高吞吐</li><li>流程<ul><li>初始标记：标记与GC roots直接关联的对象</li><li>并发标记：从GC root开始对对堆中对象进行可达性分析</li><li>最终标记：对并发标记过程中，用户线程修改的对象再次标记一下</li><li>筛选回收：对各个Region的回收价值和成本进行排序，然后根据用户所期望的GC停顿时间制定回收计划并回收</li></ul></li></ul></li></ul></li></ul></li></ul><h1 id="5、多线程并发"><a href="#5、多线程并发" class="headerlink" title="5、多线程并发"></a>5、多线程并发</h1><p>​    多线程相关问题</p><p>​    <em><strong>*进程是程序运行的实例。运行一个Java程序的实质就是启动一个java虚拟机进程。进程是程序向操作系统申请资源的基本单位。线程是进程中可独立执行的最小单位。一个进程可以包括多个线程，同一个进程中的所有线程共享该进程的资源。*</strong></em></p><p>​    <em><strong>*竞态：多线程编程中一个问题，对于同样的输入，程序的输出有时是正确的，有时是错误的，这种计算结果的正确性与时间有关的现象被成为竞态。*</strong></em></p><p>​    <em><strong>*线程安全和非线程安全： 一个类在单线程环境下能够正常运行，并且在多线程环境下，使用方不做特别处理也能运行正常，我们就称其实线程安全的。反之，一个类在单线程环境下运行正常，而在多线程环境下无法正常运行，这个类就是非线程安全的。*</strong></em></p><h2 id="5-1、线程状态"><a href="#5-1、线程状态" class="headerlink" title="5.1、线程状态"></a>5.1、线程状态</h2><p>新建（new之后），就绪（start之后），运行（run之后），阻塞（等待，wait/sleep,阻塞IO/申请锁，有限等待），死亡。</p><h2 id="5-2、多线程实现方式"><a href="#5-2、多线程实现方式" class="headerlink" title="5.2、多线程实现方式"></a>5.2、多线程实现方式</h2><p>1、实现Runnable接口</p><p>2、继承Thread类。因为java不支持多重继承，但可以实现多个接口。所有实现Runnable有更好的扩展性；还可以实现资源个共享，即多个线程基于一个Runnable对象，和共享Runnable的资源。</p><p>3、实现Callable接口;将实现类当做线程中运行的任务，然后用Thread来调用。callable的call方法有返回值，通过FutureTask进行封装。</p><p>  A.<em><strong>*start*</strong></em>()是启动一个新线程A,进入就绪状态。start方法只能被调用一次。</p><p>  ****Run()****方法，是就绪状态的线程获取cpu之后调用的，线程进入运行状态。如果手动调用，相当于执行一个普通方法。</p><p>  Java中，每个对象有且只有一个同步锁。调用synchronized方法就获取了对象的锁。</p><p>  当一个线程访问对象的同步方法或者同步代码块，其他线程不能再访问该对象的同步方法或者同步代码块，但可以访问该对象的非同步方法或者非同步代码块。</p><p>t1.<em><strong>*wait*</strong></em>(),让当前线程进入阻塞状态，释放t1对象的锁，直到其他线程调用t1.notify()方法，当前运行线程才可能被唤醒。</p><p>****wait()和notify()****方法必须出现在同步代码块中，等待和唤醒是依赖于同步锁实现的，同步锁是对象持有，每个对象有且只有一个。所以wait要释放锁，因为之后他释放了该锁，其他对象才能获取该锁，然后进入同步代码中，notify该对象上等待的对象。所以这也就是wait和notify方法为什么出现在Object对象上。</p><p>  ****yield()****：Thread静态方法，表示当前线程从运行状态转入就绪状态，给其他线程竞争的机会。不会释放任何锁。</p><p>  ****sleep()：****Thread静态方法，当前线程从运行状态进入等待阻塞状态，不释放任何锁，休眠一段时间后，该线程进入就绪状态。单位毫秒</p><p>  A.****join()****：当前线程进入阻塞状态，等线程A执行完之后，当前线程从阻塞状态进入就绪状态。</p><p>  线程优先级，1-10，默认5.用户线程，<strong>守护线程，</strong>isDaemon() t1.setDaemon(true);用户线程运行时，jvm不得关闭。gc线程是守护线程。</p><p>  ****中断****：调用线程的A.interrupt()方法，会设置线程A的中断标记为true。如果线程A处于wait(),join(),sleep()等阻塞状态时（不是io阻塞和锁阻塞），清除中断标记，抛出InterruptedException,线程结束。</p><p>  A.interrupted()方法，查看线程是否处于中断状态。且清除中断标记，而isInterrupted则查看中断标记，不会清除。</p><p>  Executor的中断，shutdown()，不再接受新任务，等待线程池中所有的任务完成。shutdownNow(),不接受新的，和未处理的。调用每个正在执行线程的interrupt()；</p><p>   中断线程池中的一个线程：使用submit方法提交线程，会返回一个future对象，调用该对象的cancel(true)方法中断线程。</p><h2 id="5-3、锁机制"><a href="#5-3、锁机制" class="headerlink" title="5.3、锁机制"></a>5.3、锁机制</h2><p>​    <em><strong>*悲观锁和乐观锁*</strong></em></p><p>  ****乐观锁****：每次访问数据的时候都认为其他线程不会修改数据，所以直接访问数据，更新的时候再判断在此期间其他线程是否修改数据。CAS和版本号机制是乐观锁的实现。</p><p>  乐观锁适合多读场景，悲观锁适合多写情况。</p><p>  版本号机制:数据有个version字段，表示被修改的次数。</p><p><em><strong>*CAS*</strong></em>:无琐算法，非阻塞同步，需要读写的内存值V和旧的期望值A相同时，更新为B.一般都是自旋CAS,不断的重试。乐观锁缺点：1、ABA问题（加入版本号机制）。2、自旋CAS如果一直不成功，开销大。3、只对单变量有效，当涉及多个共享变量时，无效。</p><p>乐观锁就是，<em><strong>*每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁用到的机制就是CAS，Compare and Swap。CAS 操作包含三个操作数 ——*</strong></em> <em><strong>*内存位置（V）、预期原值（A）和新值(B)。*</strong></em> <em><strong>*如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值 。否则，处理器不做任何操作。*</strong>***</em>*CAS是通过硬件命令保证了原子性。****</p><p>​    ****悲观锁****：每次访问数据的时候都会认为其他线程会修改数据，所以先获取锁，再访问数据。synchronized和ReentrantLock都是悲观锁思想的实现。</p><h2 id="5-4、Synchronized关键字三种实现方式"><a href="#5-4、Synchronized关键字三种实现方式" class="headerlink" title="5.4、Synchronized关键字三种实现方式"></a>5.4、Synchronized关键字三种实现方式</h2><p>  修饰实例方法，对当前实例对象加锁，进入同步代码前要获取对象实例的锁。修饰静态方法，对当前类对象加锁，修饰代码块，指定加锁对象，给对象加锁。</p><p>  具体实例，<strong>双重校验锁实现对单例模式;</strong></p><p> ****Synchronized同步的实现*<em><strong>，是基于</strong></em>*进入退出监视器Monitor对象实现*<em><strong>的，无论是同步代码块还是同步方法，都是如此；</strong></em>*同步代码块，是根据monitorenter 和 monitorexit 指令实现的****，同步方法，是通过设置方法的 <em><strong>*ACC_SYNCHRONIZED 访问标志*</strong></em>;监视器Monitor对象存在于每个对象的对象头中。</p><h2 id="5-5、synchronized和ReenTrantLock的区别"><a href="#5-5、synchronized和ReenTrantLock的区别" class="headerlink" title="5.5、synchronized和ReenTrantLock的区别"></a>5.5、synchronized和ReenTrantLock的区别</h2><p>  两者都是可重入锁(自己可以再次获取自己的内部锁)，锁计数器加1;</p><p>  synchronized只能是是非公平锁，而ReenTrantLock默认实现非公平锁，也支持公平锁(先等先得)</p><p>  synchronized依赖于JVM实现，而ReenTrantLock是基于JDK实现的;</p><p>  ReenTrantLock功能加多：1、<em><strong>*等待可中断*<em><strong>，2、</strong></em>*支持公平锁*<em><strong>，3、</strong></em>*基于Condition实现选择性唤醒;*</strong></em></p><p>synchronized经过一系列的优化，性能已得到大大的提升，和ReenTrantLock相差无几。</p><p>ReentrantLock,可重入互斥锁，独占锁。互斥锁：同一时间只能被一个线程持有。可重入锁：可以被单个线程多次获取。ReentrantLock支持公平锁和非公平锁，Synchronized只支持非公平锁。公平锁：线程依次排队获取锁。非公平锁：不管是不是队头都能获取。公平锁和非公平锁，它们尝试获取锁的方式不同：公平锁在尝试获取锁时，即使“锁”没有被任何线程锁持有，它也会判断自己是不是CLH等待队列的表头；是的话，才获取锁。而非公平锁在尝试获取锁时，如果“锁”没有被任何线程持有，则不管它在CLH队列的何处，它都直接获取锁。</p><p>公平锁要维护一个队列，后来的线程要加锁，即使锁空闲，也要先检查有没有其他线程在 wait，如果有自己要挂起，加到队列后面，然后唤醒队列最前面的线程。这种情况下相比较非公平锁多了一次挂起和唤醒。</p><p>线程切换的开销，其实就是非公平锁效率高于公平锁的原因，因为非公平锁减少了线程挂起的几率，后来的线程有一定几率逃离被挂起的开销。</p><h2 id="5-6、JDK1-6引入了大量的锁优化"><a href="#5-6、JDK1-6引入了大量的锁优化" class="headerlink" title="5.6、JDK1.6引入了大量的锁优化"></a>5.6、JDK1.6引入了大量的锁优化</h2><p>偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术减少开销。</p><p>  锁主要存在4种状态：<strong>无锁状态，偏向锁状态，轻量级锁状态，重量级锁状态</strong> 。锁可升级不可降级，提供获取锁和释放锁的效率。</p><ul><li><p>自旋锁:进程进入阻塞的开销很大，为防止进入阻塞状态，在线程请求共享数据锁的时候循环自旋一段时间，如果在这段时间内获取到锁，就避免进入阻塞状态了。</p><ul><li>1.6引入****自适应自旋锁****，自旋次数不再固定：由锁拥有者状态和上次获取锁的自旋次数决定。</li></ul></li><li><p>锁消除：对于被检测出不可能存在竞争的共享数据的锁进行消除。(逃逸分析)</p></li></ul><ul><li>锁粗化:虚拟机探测到一系列连续操作都对同一个对象加锁解锁，就将加锁的范围粗化到整个操作系列的外部。</li></ul><ul><li>偏向锁：<em><strong>*当锁对象第一次被线程获取的时候，进入偏向状态，标记为101，同时CAS将线程ID进入到对象头的Mark Word中，如果成功，*</strong>***</em>*这个线程以后每次获取锁就不再需要进行同步操作，甚至CAS不都需要。*<strong><strong><strong>*当*</strong></strong></strong>*另一个线程尝试获取这个锁，偏向状态结束****<em><strong>*，恢复到未锁定状态或者轻量级状态。*</strong></em></li></ul><ul><li>轻量级锁：轻量级锁相对重量级锁而言，使用CAS去避免重量级锁使用互斥量的开销。线程尝试获取锁时，如果锁处于无琐状态，先采用CAS去尝试获取锁，如果成功，锁状态更新为轻量级锁状态。如果有两条以上的线程争用一个锁，状态重为重量级锁。</li></ul><h2 id="5-7、volatile"><a href="#5-7、volatile" class="headerlink" title="5.7、volatile"></a>5.7、volatile</h2><p>​    ****Volatile****变量在汇编阶段，会多出一条lock前缀指令，这会导致当前处理器缓存的数据写回到系统内存中，且让其他改数据的处理器缓存失效。这就保障了可见性</p><p>  Volatile的修饰的变量，<em><strong>*虚拟机会使用内存屏障禁止指令重排序保障其有序性。但volatile变量不能保证其原子性。所以volatile是线程同步的轻量级实现，性能好，多线程访问volatile变量不会发生阻塞，volatile变量主要用于变量在多线程之间的可见性。但并不能保障原子性，不可替代synchronized.synchronized解决的是多线程之间访问共享资源的同步性。*</strong></em></p><h2 id="5-8、ThreadLocal"><a href="#5-8、ThreadLocal" class="headerlink" title="5.8、ThreadLocal"></a>5.8、ThreadLocal</h2><p>线程本地存储，提供了一个线程局部变量，让访问某个变量的线程都拥有自己的线程局部变量，这样线程对变量的访问就不存在竞争问题，也不需要同步。每个线程都有一个ThreadLocal.ThreadLocalMap对象。map的键是ThreadLocal t = new ThreadLocal()，值是value。ThreadLocalMap的Entry节点的key指向ThreadLocal是弱引用，虚拟机只要发现就可以垃圾回收。</p><p>  Thread -&gt; ThreadLocalMap -&gt; Entry&lt;ThreadLocal,value&gt; —&gt; ThreadLocal(key弱引用到ThreadLocal);</p><p>  ThreadLocal只有弱引用，可以被回收，但value存在强引用，不能被回收。当回收时，会将key的ThreadLocal设置为null，但是value还是强引用，无法回收，从而导致ThreadLocal一直无法被回收，这时候就有可能造成内存泄漏。 </p><p>  如何避免内存泄漏？事实上，ThreadLocalMap的get,set方法中，会对key（ThreadLocal）进行null判断，如果为null,value也设置为null.也可以手动条调用ThreadLocal.remove()方法。</p><h2 id="5-9、AQS与JUC"><a href="#5-9、AQS与JUC" class="headerlink" title="5.9、AQS与JUC"></a>5.9、AQS与JUC</h2><p>AQS(AbstactQueuedSynchronizer<em><strong>*)*</strong>***</em>*同步队列器，是一个构建锁和同步器的框架****，使用AQS能够简单有效的构造出应用广泛的大量同步器。如ReentrantLock, Semphore&gt;</p><p>AQS原理：<em><strong>*如果被请求的共享资源空闲，则将当前请求线程设为有效的工作线程，并且将共享资源设置为锁定状态。如果请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的。即将暂时获取不到的线程放入队列中*<em><strong>。CLH,是虚拟的双向队列，即不存在队列实例，</strong></em>*仅存在节点与节点之间的pre和next关系。*</strong>***</em>*AQS将每条请求共享资源的线程封装成一个CLH锁队列的一个节点来实现锁的分配。****</p><p>​    AQS属性(Node head, Node tail, int ****state****（这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁）, Thread 持有独占锁的线程)；</p><p>​    等待队列中每个线程被封装为一个Node实例（thread + waitStatus(-1: 当前node的后继节点对应的线程需要被唤醒,) + pre + next）；</p><p>​    <em><strong>*State:表示当前锁的状态，等于0时，表示没有被线程占用。当大于0时，表示被线程占用。*</strong></em></p><p>​    <em><strong>*Node节点的属性 watiStatus:默认为0，*</strong>***</em>*当大于0时，表示放弃等待*<strong><strong><strong>*，ReentrantLock是可以指定timeouot的。*</strong></strong></strong>*等于-1，表示当前node的后继节点对应的线程需要被唤醒。当等于-2时，标志着线程在Condition条件上等待的线程唤醒。等于-3时，用于共享锁，标志着下一个acquireShared方法线程应该被允许。****</p><p><em><strong>*公平锁，只有处于队头的线程才被允许去获取锁。非公平性锁模式下线程上下文切换的次数少，因此其性能开销更小。公平性锁保证了锁的获取按照FIFO原则，而代价是进行大量的线程切换。非公平性锁虽然可能造成线程“饥饿”，但极少的线程切换，保证了其更大的吞吐量。*</strong></em></p><h2 id="5-10、AQS组件"><a href="#5-10、AQS组件" class="headerlink" title="5.10、AQS组件"></a>5.10、AQS组件</h2><p>AQS类别：独占锁和共享锁。</p><p>​    共享锁有ReentrantReadWriteLock、CountDownLatch、CyclicBarrier、Semaphore:</p><p>  <strong>ReadWriteLock读写锁</strong>。维护了一对相关联的读取锁和写入锁。读取锁用于只读操作，共享。写入锁用于写入操作，是独占锁。不能同时存在读取锁和写入锁。</p><p>   <strong>闭锁***</strong>*CountDownLatch*<strong><strong><strong>*(*</strong></strong></strong>*lætʃ)****是通过共享锁实现的;CountDownLatch doneSignal = new CountDownLatch(LATCH_SIZE);</p><p>   <em><strong>*CountDownLatch对象维护一个count,执行一次doneSignal.countDown()时，count减一直到count为0时， doneSignal.await()的等待线程才能运行。所以countDownLatch可以让一个线程等待一组线程完成之后才执行。*</strong></em></p><p>​    <em><strong>*栅栏*</strong>***</em>*CyclicBarrier*<em><strong><em><strong>*(ˈsaɪklɪk  ˈbæriər)*</strong></em> cb = new CyclicBarrier(SIZE)</strong></em>*;调用线程创建N个齐头并进的CyclicBarrier对象。每个线程执行cb.await()时，参与者数量加一，当参与者数量达到SIZE，阻塞的参与线程继续运行。****</p><p>  (01) CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待,直到到达某个公共屏障点.</p><p>  (02) CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier。</p><p>  <em><strong>*信号量*</strong>***</em>*Semaphore****<em><strong>*(ˈseməfɔːr) sem = new Semaphore(SEM_MAX);建立N个信号量。 sem.acquire(count);获取count个信号量。如果有就给予，没有就阻塞。sem.release(count);释放信号量。*</strong></em></p><p>​    </p><h2 id="5-11、JUC原子类"><a href="#5-11、JUC原子类" class="headerlink" title="5.11、JUC原子类"></a>5.11、JUC原子类</h2><p>基本类型：[əˈtɒmɪk]<em><strong>*AtomicInteger*</strong></em>,<em><strong>*AtomicLong*</strong></em>,AtomicBoolean;数组类型AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray;引用类型AtomicReference，对象属性修改类型AtomicIntegerFieldUpdater。在32位操作系统中，64位的long 和 double 变量由于会被JVM当作两个分离的32位来进行操作，所以不具有原子性；</p><p>​    原子类基本通过****自旋CAS****来实现，期望的值和现在的值是否一致，如果一致就更新。</p><p>​    public final boolean <em><strong>*compareAndSet*</strong></em>(long expect, long update) {</p><p>​      return unsafe.compareAndSwapLong(this, valueOffset, expect, update);</p><p>​    }</p><p>​    <em><strong>*主要利用CAS+volatile + native方法来保证操作的原子性，从而避免同步方法的高开销。CAS原理是那期望的值和现在的值进行比较，如果相同则更新成新的值。*</strong></em></p><p>​    </p><h2 id="5-12、集合框架的多线程实现类"><a href="#5-12、集合框架的多线程实现类" class="headerlink" title="5.12、集合框架的多线程实现类"></a>5.12、集合框架的多线程实现类</h2><p><em><strong>*CopyOnWriteArrayList*</strong></em>(volatile数组来保持数据、增删改会新建数组，然后copy到volatile数组。只有查找效率高)线程安全机制是通过volatile和互斥锁实现的。增删改时，先获取互斥锁，然后创建新数组，复制到volatile数组中，释放锁。</p><p>1、****CopyOnWriteArrayList****相当于线程安全的ArrayList，它实现了List接口。CopyOnWriteArrayList是支持高并发的。</p><p>2、****CopyOnWriteArraySet****相当于线程安全的HashSet，它继承于AbstractSet类。CopyOnWriteArraySet内部包含一个CopyOnWriteArrayList对象，它是通过CopyOnWriteArrayList实现的。</p><p><em><strong>*1、*</strong>***</em>*ConcurrentHashMap****是线程安全的哈希表(相当于线程安全的HashMap)</p><p>****2、ConcurrentSkipListMap****是线程安全的有序的哈希表(相当于线程安全的TreeMap)</p><p>****3、ConcurrentSkipListSet****是线程安全的有序的集合(相当于线程安全的TreeSet)</p><p>1、 ****ArrayBlockingQueu(kjuː)*<em><strong>是数组实现的线程安全的</strong></em>*有界****的阻塞队列。</p><p>2、 ****LinkedBlockingQueue*<em><strong>是</strong></em>*单向链表实现的(指定大小)阻塞队列****，该队列按 FIFO（先进先出）排序元素。</p><p>3、 ****LinkedBlockingDeque****是双向链表实现的(指定大小)双向并发阻塞队列，该阻塞队列同时支持FIFO和FILO两种操作方式。</p><p>4、 ****ConcurrentLinkedQueue*<em><strong>是单向链表实现的</strong></em>*无界队列****，该队列按 FIFO（先进先出）排序元素。</p><p>5、 ****ConcurrentLinkedDeque*<em><strong>是双向链表实现的</strong></em>*无界队列****，该队列同时支持FIFO和FILO两种操作方式。</p><h2 id="5-13、线程池"><a href="#5-13、线程池" class="headerlink" title="5.13、线程池"></a>5.13、线程池</h2><p>​    线程池则是为了<em><strong>*减少线程建立和销毁带来的性能消耗*<em><strong>。线程池的使用可以帮助我们</strong></em>*更合理的使用系统资源.*</strong></em></p><p>​    Executors是个静态工厂类。它通过静态工厂方法返回ExecutorService、ScheduledExecutorService、ThreadFactory 和 Callable 等类的对象。</p><p>  Executor <em><strong>*ɪ*</strong>***</em>*ɡ********ˈzekjətər*<em><strong>只提供了execute()</strong></em>*ˈeksɪkjuːt****方法来执行已提交的 Runnable 任务的对象。</p><p>  ExecutorService接口，继承Executor；AbstractExecutorService抽象类实现了ExecutorService接口。   ThreadPoolExecutor，真正线程池实现类，继承自AbstractExecutorService。</p><p>  ****ThreadPoolExecutor****是线程池类。对于线程池，可以通俗的将它理解为”存放一定数量线程的一个线程集合。线程池允许若个线程同时运行;</p><p>  当添加的到线程池中的线程超过它的容量时，会有一部分线程阻塞等待。线程池会通过相应的调度策略和拒绝策略，对添加到线程池中的线程进行管理。</p><p>  关闭线程池：调用线程池的shutdown()接口时，线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。</p><p>   调用线程池的shutdownNow()接口时，线程池切换为STOP状态，不接收新任务，不处理已添加的任务，并且通过调用每个线程的interrupt()方法尝试中断正在处理的任务。</p><p><em><strong>*一定要通过 ThreadPoolExecutor(xx,xx,xx…) 来明确线程池的运行规则，指定更合理的参数。*</strong></em></p><h2 id="5-14、ThreadPoolExecutor线程池的7大参数"><a href="#5-14、ThreadPoolExecutor线程池的7大参数" class="headerlink" title="5.14、ThreadPoolExecutor线程池的7大参数"></a>5.14、ThreadPoolExecutor线程池的7大参数</h2><p>​    <em><strong>*kɔːr*</strong></em> <em><strong>*corePoolSize*</strong>***</em>*：核心池的大小：*<em><strong>创建线程池之后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；调用了prestartAllCoreThreads()或者prestartCoreThread()方法，可以在任务来之前预创建线程。</strong></em>*核心线程会一直存活，及时没有任务需要执行****；</p><p><em><strong>*设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭；*</strong></em></p><p><em><strong>*maximumPoolSize*</strong>***</em>*：线程池最大线程数****，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</p><p><em><strong>*keepAliveTime*</strong>***</em>*：非核心线程的最大空闲时间。****</p><p><em><strong>*TimeUnit*</strong>***</em>*：空闲时间的单位。****</p><p><em><strong>*BlockingQueue*</strong>***</em>*<Runnable>**** <em><strong>*workQueue*</strong></em> ****：等待执行的任务队列，队列分为有界队列和无界队列。****有界队列：队列的长度有上限，当核心线程满载的时候，新任务进来进入队列，当达到上限，有没有核心线程去即时取走处理，这个时候，就会创建临时线程。（警惕临时线程无限增加的风险）</p><p>无界队列：队列没有上限的，当没有核心线程空闲的时候，新来的任务可以无止境的向队列中添加，而永远也不会创建临时线程。（警惕任务队列无限堆积的风险）</p><p><em><strong>*ThreadFactory*</strong>***</em>*：线程工厂，用来创建线程****</p><p><em><strong>*RejectedExecutionHandler*</strong>***</em>*：队列已满，而且任务量大于最大线程的异常处理策略****</p><h2 id="5-15、线程池属性"><a href="#5-15、线程池属性" class="headerlink" title="5.15、线程池属性"></a>5.15、线程池属性</h2><p>****largestPoolSize，记录了曾经出现的最大线程个数****。因为setMaximumPoolSize()可以改变最大线程数。</p><p>****poolSize：线程池中当前线程的数量****。</p><p>当提交一个新任务时：</p><p><em><strong>*（1）如果poolSize&lt;corePoolSize，新增加一个线程处理新的任务。无论是否有空闲的线程新增一个线程处理新提交的任务；*</strong></em></p><p><em><strong>*（2）如果poolSize=corePoolSize，新任务会被放入阻塞队列等待。*</strong></em></p><p><em><strong>*（3）如果阻塞队列的容量达到上限，且这时poolSize&lt;maximumPoolSize，新增线程来处理任务。*</strong></em></p><p><em><strong>*（4）如果阻塞队列满了，且poolSize=maximumPoolSize，那么线程池已经达到极限，会根据饱和策略RejectedExecutionHandler拒绝新的任务。*</strong></em></p><p>* 当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize</p><p>* 如果allowCoreThreadTimeout=true，则会直到线程数量=0</p><p>****workQueue：一个阻塞队列****：ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和SynchronousQueue；</p><p>workQueue的类型为BlockingQueue<Runnable>，通常可以取下面三种类型：</p><p>　　1）****ArrayBlockingQueue****：基于数组的先进先出队列，此队列创建时必须指定大小；</p><p>　　2）****LinkedBlockingQueue****：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</p><p>　　3）****synchronousQueue****：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。</p><p>​    4）<strong>PriorityBlockingQueue</strong>：优先级阻塞队列</p><p>线程拒绝策略：</p><p>ThreadPoolExecutor<em><strong>*.*</strong>***</em>*AbortPolicy*<strong><strong><strong>*（中止）*</strong></strong></strong>*:丢弃任务并抛出RejectedExecutionException异常。**** </p><p>ThreadPoolExecutor<em><strong>*.*</strong>***</em>*DiscardPolicy*<strong><strong><strong>*（抛弃）*</strong></strong></strong>*：也是丢弃任务****，但是不抛出异常。 </p><p>ThreadPoolExecutor.D<em><strong>*iscardOldestPolicy*</strong>***</em>*（抛弃最旧）********：丢弃队列最前面的任务****，然后重新尝试执行任务（重复此过程）</p><p>ThreadPoolExecutor.<em><strong>*CallerRunsPolicy*</strong>***</em>*（调用者运行）****：由调用线程处理该任务</p><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()，其中：</p><p>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务</p><p>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务</p><p>动态调整大小：</p><p>setCorePoolSize：设置核心池大小</p><p>setMaximumPoolSize：设置线程池最大能创建的线程数目大小</p><p>其他种类的：<em><strong>*Executor框架的工具类Execuors来实现。*</strong></em></p><p><em><strong>*newFixedThreadPool*<em><strong>：</strong></em>*建立一个*</strong>***</em>*线程数量固定的线程池****，规定的最大线程数量，超过这个数量之后进来的任务，会放到等待队列中，如果有空闲线程，则在等待队列中获取，遵循先进先出原则。corePoolSize 和 maximumPoolSize 要一致，Executors 默认使用的是 LinkedBlockingQueue 作为等待队列，这是一个无界队列。</p><p><em><strong>*newSingleThreadExecutor*<em><strong>：</strong></em>*建立一个*</strong>***</em>*只有一个线程的线程池****，如果有超过一个任务进来，只有一个可以执行，其余的都会放到等待队列中，如果有空闲线程，则在等待队列中获取，遵循先进先出原则。使用 LinkedBlockingQueue 作为等待队列。等待队列无限长的问题，容易造成 OOM。</p><p><em><strong>*newCachedThreadPool*<em><strong>：</strong></em>*缓存型线程池*</strong>***</em>*，在核心线程达到最大值之前，有任务进来就会创建新的核心线程，并加入核心线程池，即时有空闲的线程，也不会复用。达到最大核心线程数后，新任务进来，如果有空闲线程，则直接拿来使用，如果没有空闲线程，则新建临时线程****。并且线程的允许空闲时间都很短，如果超过空闲时间没有活动，则销毁临时线程。关键点就在于它使用 <em><strong>*SynchronousQueue*</strong></em> <em><strong>*作为等待队列，它不会保留任务，新任务进来后，直接创建临时线程处理。容易造成无限制的创建线程，造成 OOM。*</strong></em></p><p>****newScheduledThreadPool****：计划型线程池，可以设置固定时间的延时或者定期执行任务，同样是看线程池中有没有空闲线程，如果有，直接拿来使用，如果没有，则新建线程加入池。使用的是 DelayedWorkQueue 作为等待队列，这中类型的队列会保证只有到了指定的延时时间，才会执行任务。容易造成无限制的创建线程，造成 OOM。</p><h2 id="5-16、线程池大小如何设置？"><a href="#5-16、线程池大小如何设置？" class="headerlink" title="5.16、线程池大小如何设置？"></a>5.16、线程池大小如何设置？</h2><p>对于计算密集型的任务，一个有Ncpu个处理器的系统通常通过使用一个Ncpu + 1个线程的线程池来获得最优的利用率.</p><p>对于包含了 I/O和其他阻塞操作的任务，不是所有的线程都会在所有的时间被调度，因此你需要一个更大的池。2*Ncpu</p><p>　　Nthreads = Ncpu x Ucpu x (1 + W/C)，其中</p><p>　　Ncpu = CPU核心数</p><p>　　Ucpu = CPU使用率，0~1</p><p><em><strong>*W/C = 等待时间与计算时间的比率*</strong></em></p><p>****线程数****<strong>maxsize</strong> <em><strong>*= Ncpu /（1 - 阻塞系数）=*</strong></em> <em><strong>*Ncpu *(1 + W/C)*</strong></em></p><p>线程数设置过大有什么缺点：</p><p>​    如果maxsize过大会占****用更多资源****，cpu会频繁地进行上下文切换，会导致cpu缓存的数据失效和重新加载，结果就是上下文切换和reload的时间变多，也就是说cpu将更多的时间花费到对线程的管理上去了，这时候更多的线程反而更慢</p><h1 id="6、MySQL"><a href="#6、MySQL" class="headerlink" title="6、MySQL"></a>6、MySQL</h1><h2 id="6-1、事务相关"><a href="#6-1、事务相关" class="headerlink" title="6.1、事务相关"></a>6.1、事务相关</h2><p>数据库的<em><strong>*事务*</strong></em></p><p>  ****事务****：一组数据库操作，要么全都执行，要么都不执行;</p><p>  ****事务特性****：ACID. 原子性：事务是最小的执行单位，不可分割，保证事务要么都完成，要么都不完成。</p><p>一致性：？？？执行事务前后，数据保持一致。隔离性：并发访问数据库时：一个事务不被其他事务干扰。持久性：事务一    旦提交，对数据库的改变是持久的</p><h2 id="6-2、并发事务带来的问题"><a href="#6-2、并发事务带来的问题" class="headerlink" title="6.2、并发事务带来的问题"></a>6.2、并发事务带来的问题</h2><p>****脏读****：一个事务读取了另一个事务修改但未提交的数据。</p><p>****丢失修改****：数据被两个事务连续修改，第一个事务的修改丢失了。</p><p>  ****不可重复读****，一个事务连续读两次数据，但结果不一样。(两次读之间，数据被其他事务修改)。</p><p>****幻读****：一个事务连续读两次数据，读取数据量不一样。(两次读之前，数据被其他事务删除或新增)。</p><h2 id="6-3、事务隔离级别"><a href="#6-3、事务隔离级别" class="headerlink" title="6.3、事务隔离级别"></a>6.3、事务隔离级别</h2><p>​    ****1*<em><strong>、</strong></em>*读未提交****。可以读取尚未提交的数据。能导致脏读，不可重复读，幻读。</p><p>  ****2、读已提交****。允许读取并发事务已经提交的数据。导致不可重复读，幻读。</p><p><em><strong>*3、*</strong>***</em>*可重复读****。意义在哪？？？？对同一字段，多次读取结果一致。导致幻读。</p><p>不可重复读很容易让人陷入一个思维定式那就是 我干嘛需要多次读取一个值还要保证一致</p><p>要跳出这个思维看本质：我在事务中会不会受到其他事务的影响？</p><p>举个简单的例子 数据校对（只是举个例子体现意思 不用太在意具体的业务）</p><p>我要取当前的余额 当前的账单 上个月的余额 我要检验一下数据对不对</p><p>我在事务中取了当前的账单和上个月的余额，好嘛，这时候又有新的订单提交了，我再获取余额是不是就不一致了？</p><p>  <em><strong>*4、串行化*<em><strong>。所有事务，依次执行。没啥问题。</strong></em>*（这个串行化是针对行锁的，不同行的事务可以并发）*</strong></em></p><p>​    设置隔离级别之后，并不是不能并发，而是并发的时候，一个事务的修改数据(绝对读到，提交的才能读到。提交不提交，更新的数据都读不到。提交不提交，增删的数据都读不到)，什么时候才能被另一个事务读到。但彼此的逻辑操作没有影响。</p><p>​    MySQL InnoDB****默认支持可重复读*<em><strong>，但使用了</strong></em>*Next-Key Lock算法避免了幻读的发生****。完全达到了保保证事务的隔离要求。但在分布式事务下，一般可串行化。</p><h2 id="6-4、Innodb和Myisam的区别"><a href="#6-4、Innodb和Myisam的区别" class="headerlink" title="6.4、Innodb和Myisam的区别"></a>6.4、Innodb和Myisam的区别</h2><p>  1、MyISAM不支持事务，而Innodb支持事务。2、Myisam是表级锁，而Innodb是行级锁。3外键支持：mysiam表不支持外键，而InnoDB支持。4、count运算：myisam缓存有表的行数，这种缓存只是表行的总数，where筛选无效。而Innodb没有。</p><p>  MyISAM适合：(1)做很多count 的计算；(2)读密集；(3)没有事务。</p><p>InnoDB适合：(1)要求事务；(2)写密集（3）高并发</p><h2 id="6-5、锁机制"><a href="#6-5、锁机制" class="headerlink" title="6.5、锁机制"></a>6.5、锁机制</h2><p>​    三种并发控制机制：悲观并发控制、乐观并发控制和多版本并发控制。悲观并发控制其实是最常见的并发控制机制，也就是锁；乐观并发控制其实也有另一个名字：乐观锁. MVCC多版本并发控制机制，可以与前两者中的任意一种机制结合使用，以提高数据库的读性能。</p><p>​    ****乐观锁****：在访问数据之前，默认不会有其他事务对此数据进行修改，所以先访问数据，然后再查找在此期间是否有事务修改数据。这不是数据库自带的，需要我们自己去实现，一般基于版本去实现。</p><p>​    <em><strong>*悲观锁：*</strong></em></p><p>​    <em><strong>*按照锁的粒度把数据库锁分为表级锁和行级锁。*</strong></em></p><p>​    表级锁: 对当前操作的整张表加锁,实现简单，加锁快，不死锁，但并发能力低。</p><p>​    行级锁: ****只针对当前操作的行进行加锁*<em><strong>。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的</strong></em>*开销也最大，加锁慢，会出现死锁****。</p><p>​    <em><strong>*Record Lock*</strong>***</em>*记录锁****<em><strong>*:*</strong></em> ****锁住某一行*<em><strong>，如果表存在索引，</strong></em>*那么记录锁是锁在索引上的*<em><strong>，如果表没有索引，那么 InnoDB 会创建一个隐藏的</strong></em>*聚簇索引加锁****。</p><p>​    <em><strong>*Gap LocK*</strong>***</em>*间隙锁****: ****间隙锁是一种记录行与记录行之间存在空隙或在第一行记录之前或最后一行记录之后产生的锁****。间隙锁可能占据的单行，多行或者是空记录。 ****对索引项之间的“间隙”加锁，锁定记录的范围,不包含索引项本身*<em><strong>。</strong></em>*其他事务不能在锁范围内插入数据****，这样就防止了别的事务新增幻影行。</p><p>​    <em><strong>*Next-key Lock：*</strong></em> <em><strong>*锁定索引项本身和索引范围。*</strong>***</em>*NK 是一种记录锁和间隙锁的组合锁。既锁住行也锁住间隙。*<em><strong>即Record Lock和Gap Lock的结合。</strong></em>*可解决幻读问题。****</p><p>​    <em><strong>*根据是否独占，锁又可以分为*</strong>***</em>*共享锁和排他锁****。</p><p>​    <em><strong>*共享锁*<em><strong>（Share Locks，简记为S）又被称为读锁，</strong></em>*其他用户可以并发读取数据，*</strong>***</em>*但任何事务都不能获取数据上的排他锁*<em><strong>，</strong></em>*直到已释放所有共享锁。****</p><p>​    ****排它锁（(Exclusive lock,简记为X锁)）又称为写锁*<em><strong>，</strong></em>*若事务T对数据对象A加上X锁，则只允许T读取和修改A****，其它任何事务都不能再对A加任何类型的锁，直到T释放A上的锁。</p><p>​    <em><strong>*Innodb同时支持行锁和表锁。*</strong>***</em>*但行锁和表锁的同时存在会发生冲突，如A申请了行共享锁，而B再申请表互斥锁。*<strong><strong><strong>*这时B不仅需要查看是否已经存在其他表锁，以及逐个查看是否存在行锁，效率太低。于是又引入了意向锁。意*<em><strong>向锁是一种表级锁，用来指示</strong></em>*接下来的一个事务将要获取的是什么类型的锁（共享还是独占）。*</strong></strong></strong>*意向锁分为意向共享锁（IS）和意向独占锁（IX），依次表示接下来一个事务将会获得共享锁或者独占锁。****</p><p>意向共享锁（IS）：事务打算给数据行加共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</p><p>意向排他锁（IX）：事务打算给数据行加排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</p><p><em><strong>*在意向锁存在的情况下，事务A必须先申请表的意向共享锁，成功后再申请一行的行锁。而事务B发现表上有意向共享锁，说明表中有些行被共享行锁锁住了，因此，事务B申请表的写锁会被阻塞。*</strong></em></p><p><em><strong>*而且，*</strong>***</em>*申请意向锁的动作是数据库自动完成的，不需要我们手动申请。****</p><p>​    </p><h2 id="6-6、MVCC多版本并发控制（Multiversion-Concurrency-Control）"><a href="#6-6、MVCC多版本并发控制（Multiversion-Concurrency-Control）" class="headerlink" title="6.6、MVCC多版本并发控制（Multiversion Concurrency Control）"></a>6.6、MVCC多版本并发控制（Multiversion Concurrency Control）</h2><p><em><strong>*多版本控制: 指的是一种提高并发的技术。最早的数据库系统，*</strong>***</em>*只有读读之间可以并发，读写，写读，写写都要阻塞。*<strong><strong><strong>*引入多版本之后，*</strong></strong></strong>*只有写写之间相互阻塞，其他三种操作都可以并行****<em><strong>*，这样大幅度提高了InnoDB的并发度。*</strong></em></p><p>​    <em><strong>*每一个*</strong>***</em>*写操作都会创建一个新版本的数据，读操作会从有限多个版本的数据中挑选一个最合适的结果直接返回；****在这时，读写操作之间的冲突就不再需要被关注，而管理和快速挑选数据的版本就成了 MVCC 需要解决的主要问题。</p><p>​    各数据库中MVCC实现并不统一，MVCC只在 READ COMMITTED 和 REPEATABLE READ 两个隔离级别下工作;</p><p>对于使用InnoDB存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列：(t<em><strong>*rx_id*</strong>***</em>*事务ID、roll_pointer上个版本指针********,****其实还有一个row_id的隐藏列但这里用不着); </p><p><em><strong>*每次对记录进行改动，都会把对应的事务id赋值给trx_id隐藏列，也会把旧的版本写入到undo日志中；*</strong></em></p><p><em><strong>*所以在并发情况下，*</strong>***</em>*一个记录可能存在多个版本，通过*<strong><strong><strong>*roll_pointer*</strong></strong></strong>*形成一个版本链*<strong><strong><strong>*。MVCC的核心任务就是：判断一下版本链中的哪个版本是当前事务可见的。这就有了*</strong></strong></strong>*ReadView*<strong><strong><strong>*的概念，这个ReadView中主要包含当前系统中还有哪些活跃的读写事务，把它们的*</strong></strong></strong>*事务id放到一个列表中，我们把这个列表命名为为m_ids****<em><strong>*；根据ReadView的活跃事务ID列表和版本链事务ID进行比较找出可见的事务ID最大的版本：*</strong></em></p><p><em><strong>*1、如果版本的trx_id属性值小于m_ids列表中最小的事务id，表明生成该版本的事务在生成ReadView前已经提交，所以该版本可以被当前事务访问。*</strong></em></p><p><em><strong>*2、如果版本的trx_id属性值大于m_ids列表中最大的事务id，表明生成该版本的事务在生成ReadView后才生成，所以该版本不可以被当前事务访问。*</strong></em></p><p><em><strong>*3、被访问版本的trx_id属性值在m_ids列表中最大的事务id和最小事务id之间，那就需要判断一下trx_id属性值是不是在m_ids列表中，如果在，说明创建ReadView时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建ReadView时生成该版本的事务已经被提交，该版本可以被访问。*</strong></em></p><p><em><strong>*MVCC只在读已提交和可重复读这两个隔离机制下运行。这*</strong>***</em>*两个隔离机制下MVCC实现方式的区别就在于：读已提交是每次读取数据前都生成一个ReadView；而可重复读，是在第一次读取数据时生成一个ReadView，后序的重复查询就不再生产ReadView了。****</p><p>​    <em><strong>*总结：*</strong></em></p><p>​    <em><strong>*多版本并发控制指的就是在使用READ COMMITTD、REPEATABLE READ这两种隔离级别的事务在执行普通的SEELCT操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能。READ COMMITTD、REPEATABLE READ这两个隔离级别的一个很大不同就是生成ReadView的时机不同，READ COMMITTD在每一次进行普通SELECT操作前都会生成一个ReadView，而REPEATABLE READ只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复这个ReadView就好了。*</strong></em></p><h2 id="6-7、Mysql死锁处理方式"><a href="#6-7、Mysql死锁处理方式" class="headerlink" title="6.7、Mysql死锁处理方式"></a>6.7、Mysql死锁处理方式</h2><p>1、等待，直到超时，事务自动回滚。2、发起死锁检测， 回滚一个事务，让其他事务执行。</p><p>死锁检测，构建一个以事务为起点，锁为边的有向图，看是否存在环。</p><h2 id="6-8、索引相关"><a href="#6-8、索引相关" class="headerlink" title="6.8、索引相关"></a>6.8、索引相关</h2><p>​    ****索引优缺点****：(1) 优点：加快检索速度(2)缺点：(a)创建索引和维护索引需要耗费时间(b)索引需要占用空间 (c)进行数据的增删改时候需要动态维护索引</p><p>​    ****索引类型****：主键索引，唯一索引，全文索引，普通索引，复合索引。</p><p>​    ****哈希索引****就是采用一定的哈希算法，把键值换算成新的哈希值，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。但是有缺点。1、不能使用范围查询。2、无法利用索引的数据来避免任何排序运算；3、不支持多列联合索引的最左匹配规则；4、任何时候都不能避免表扫描。5、存在所谓的哈希碰撞问题。</p><p>​    所以我们都用****B+树****，只有叶子节点存储数据，其他的节点只是起到索引的作用。平衡，性能稳定，每次查询的次数都是树的高度。</p><p>​    索引是一种数据结构。<em><strong>*索引本身很大，不可能全部存储在内存中，因此索引以索引表的形式存储在磁盘中*<em><strong>。这样的话，</strong></em>*索引查找过程中就要产生磁盘I/O消耗*<em><strong>，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为</strong></em>*索引的优劣最重要的指标就是在查找过程中*</strong>***</em>*磁盘I/O操作次数的渐进复杂度*<em><strong>。换句话说，索引的结构组织要尽量</strong></em>*减少查找过程中磁盘I/O的存取次数。****</p><h2 id="6-9、M阶B树"><a href="#6-9、M阶B树" class="headerlink" title="6.9、M阶B树"></a>6.9、M阶B树</h2><p>1、 ****树中每个结点至多有m个子结点****（即M阶）； </p><p>2、 ****若根结点不是叶子结点,则至少有2个子结点****；</p><p>3、 除根结点和叶子结点外,<em><strong>*其*</strong>***</em>*它每个结点至少有ceil(m/2)个子结点；即中间节点最少有ceil(m/2)个子结点。****</p><p>4、 <em><strong>*所有叶子结点都出现在同一层，叶子结点不包含任何关键字信息；*</strong></em></p><p>5、 <em><strong>*有k个子结点的非终端结点恰好包含有k-1个关键字*</strong>***</em>*(单节点里元素).****</p><p>每个节点中元素个数n必须满足： <em><strong>*[ceil(m / 2)-1]&lt;= n &lt;= m-1。*</strong></em>(即M阶树单节点最多有M-1个元素)</p><p>每个结点中关键字从小到大排列，并且当该结点的孩子是非叶子结点时，该k-1个关键字正好是k个孩子包含的关键字的值域的分划.</p><p>​    B+树的不同之处：<em><strong>*非叶子节点只存储键值信息。数据记录都存放在叶子节点中。所有叶子节点之间都有一个链指针。*</strong></em></p><h2 id="6-10、B-树的优点"><a href="#6-10、B-树的优点" class="headerlink" title="6.10、B+树的优点"></a>6.10、B+树的优点</h2><p>​    1、B+树中间节点不存放数据，所以同样大小的磁盘页上可以容纳更多节点元素，IO次数更少。</p><p>​    2、B+树的查询必须最终找到叶子节点，而B-树只需要找到匹配的元素即可。B+树性能稳定。</p><p>​    3、范围查询方便。B-树只能依靠繁琐的中序遍历，而B+树只需要在链表上遍历即可。</p><p><em><strong>*磁盘数据地址：*</strong>***</em>*柱面号、盘面号、块号****</p><p><em><strong>*因为普通的全表查询时间复杂度是O(n);如果是平衡二叉树，或者红黑树，查找时间变成*<em><strong>O(log2N)，但他们依然不适合做索引。因为索引通常比较大，存于磁盘中，无法一次将全部的索引加载到内存中，每次只能从磁盘中读取一个页到内存中，而平衡二叉树底层实现是数组，逻辑上相邻的节点在物理结构上可能相差很远，因此磁盘IO次数可能很大，平衡二叉树没能充分利用磁盘预读功能。</strong></em>*磁盘往往不是严格按需读取，而是每次都会*</strong>***</em>*预读********，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存****。这样做的理论依据是计算机科学中著名的局部性原理。红黑树这种结构，h明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的I/O渐进复杂度也为O(h)，效率明显比B-Tree差很多。    </p><p>B树的每个节点可以存储多个关键字，<em><strong>*它将节点大小设置为磁盘页的大小，充分利用了*</strong>***</em>*磁盘预读的功能。每次读取磁盘页时就会读取一整个节点。********也正因每个节点存储着非常多个关键字，树的深度就会非常的小。进而要执行的磁盘读取操作次数就会非常少****，更多的是在内存中对读取进来的数据进行查找。</p><p>logm(n+1)&lt;= h &lt;=log(ceil(m/2)) (n+1)/2 + 1</p><p>B+树的关键字全部存放在叶子节点中，非叶子节点用来做索引，而叶子节点中有一个指针指向一下个叶子节点。做这个优化的目的是为了提高区间访问的性能。而正是这个特性决定了B+树更适合用来存储外部数据。</p><p>****二叉查找树BST：*<em><strong>查找最好时间复杂度</strong></em>*O(logN)，最坏时间复杂度O(N)。****插入删除的实现简单，时间复杂度一致。</p><p>平衡二叉查找树AVL：查找的时间复杂度维持在O(logN)，不会出现最差情况 .AVL树在执行每个插入操作时最多需要1次旋转，其时间复杂度在O(logN)左右。 AVL树在执行删除时代价稍大，一次删除操作最多需要O(logN)次旋转,执行每个删除操作的时间复杂度需要O(2logN)。</p><p>查找 效率最好情况下时间复杂度为O(logN).</p><p>插<em><strong>*入和删除操作改变树的平衡性的概率要远远小于AVL*<em><strong>（RBT不是高度平衡的）。因此需要的旋转操作的可能性要小，</strong></em>*而且一旦需要旋转，*</strong>***</em>*插入一个结点最多只需要旋转2次，删除最多只需要旋转3次****<em><strong>*(*<em><strong>小于AVL的删除操作所需要的旋转次数)。</strong></em>*虽然变色操作的时间复杂度在O(logN)，但是实际上，这种操作由于简单所需要的代价很小。*</strong></em></p><p>​    <em><strong>*聚簇索引的解释是:聚簇索引的顺序就是数据的物理存储顺序；*</strong></em></p><p>​    <em><strong>*非聚簇索引的解释是:索引顺序与数据物理排列顺序无关；*</strong></em></p><p>​    MyISAM使用的是非聚簇索引：非聚簇索引的数据表和索引表是分开存储的。主索引和辅助索引几乎是一样的，叶子节点存储的是指向数据的物理地址。</p><p>​    Innodb使用的是聚簇索引。<em><strong>*聚簇索引的主键索引的叶子结点存储的是键值对应的数据本身，辅助索引的叶子结点存储的是键值对应的数据的主键键值。*</strong></em></p><p>​     B+树有主键索引和辅助索引两种；；主键索引就是按照表中主键的顺序构建一颗B+树，并在叶节点中存放表中的行记录数据，一个表只能有一个主键索引。<em><strong>*而辅助索引，叶节点并不存储行记录数据，仅仅是主键。通过辅助索引查找到对应的主键，最后在聚集索引中使用主键获取对应的行记录。（这个叫回表查询？？?）*</strong></em></p><p>​    </p><p>​    </p><p>****最左前缀原则*<em><strong>：mysql索引可以引用多列，叫联合索引，如果查询条件精确匹配联合索引的左边连续一列或者多列，则查询命中索引。a,b,c的联合索引，(a,c)可以</strong></em>*命中a,c不能命中****。</p><p>联合索引并不是全部不中，或者全部中。可以只命中一部分，例如单单命中A.</p><p><em><strong>*MySQL 的查询优化器会自动调整 where 子句的条件顺序以使用适合的索引，不过建议 where 后的字段顺序和联合索引保持一致，养成好习惯。*</strong></em></p><p><em><strong>*组合索引*</strong>***</em>*(*<strong><strong><strong>*大于等于2小于等于3*</strong></strong></strong>*)****<em><strong>*也是建立一个B+树，只不过非叶子节点存储的是第一个列。叶子节点组合的列都有，中了第一列之后，然后安装其他的列索引搜查。*</strong></em></p><p><em><strong>*联合索引的好处：利用覆盖索引，避免回表操作。*</strong></em></p><p><em><strong>*而且对于两个单列查询返回行较多，同时查返回行较少，联合索引更高效。*</strong></em></p><h2 id="6-11、Explain语句的字段"><a href="#6-11、Explain语句的字段" class="headerlink" title="6.11、Explain语句的字段"></a>6.11、Explain语句的字段</h2><p>​    ID: SELECT的查询序列号;</p><p>​    <em><strong>*select_type:*<em><strong>示查询中</strong></em>*每个select子句的类型*</strong></em></p><p>(1) SIMPLE(简单SELECT，****不使用UNION或子查询****等)</p><p>(2) PRIMARY(****子查询中最外层查询****，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p><p>(3) UNION(UNION中的第二个或后面的SELECT语句)</p><p>(4) DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p><p>(5) UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p><p>(6) ****SUBQUERY(子查询中的第一个SELECT****，结果不依赖于外部查询)</p><p>(7) DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p><p>(8) DERIVED(派生表的SELECT, FROM子句的子查询)</p><p>(9) UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p><p>​    ****Table:****显示这一步所访问数据库中表名称,</p><p><em><strong>*Type*<em><strong>对表访问方式</strong></em>*，表示MySQL在表中找到所需行的方式，又称“访问类型”。*</strong></em></p><p>ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好）</p><p>All:全表扫描。index: full index scan,遍历索引树。range:只检索给定范围的行，使用一个索引来选择行</p><p>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p><p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p><p>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system</p><p>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p><p>****possible_keys：*<em><strong>指出MySQL能使用哪个索引在表中找到记录</strong></em>*，查询涉及到的字段上若存在索引，则该索引将被列出，****但不一定被查询使用</p><p>****Key：显示MySQL实际决定使用的键（索引），****必然包含在possible_keys中</p><p>****key_len：表示索引中使用的字节数，*<em><strong>可通过该列计算查询中使用的索引的长度</strong></em>*（key_len显示的值为索引字段的最大可能长度****，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</p><p><em><strong>*ref：列与索引的比较，*<em><strong>表示上述表的连接匹配条件，</strong></em>*即哪些列或常量被用于查找索引列上的值*</strong></em></p><p>****rows：估算出结果集行数，*<em><strong>表示MySQL根据表统计信息及索引选用情况，</strong></em>*估算的找到所需的记录所需要读取的行数****、</p><p><em><strong>*xtra: 含MySQL解决查询的详细信息,有以下几种情况：*</strong></em></p><p>****Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据****，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p><p>Using temporary：表示MySQL需要使用****临时表来存储结果集，常见于排序和分组查询****，常见 group by ; order by</p><p>****Using filesort****：当Query中包含 <em><strong>*order by 操作*<em><strong>，而且无法利用索引完成的排序操作称为“</strong></em>*文件排序”*</strong></em></p><p>Using join buffer****：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果****。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p><p>Impossible where：这个值强调了****where语句会导致没有符合条件的行****（通过收集统计信息不可能存在结果）。</p><p>Select tables optimized away：这个值意味着仅通过使用索引，<em><strong>*优化器可能仅从聚合函数结果中返回一行*</strong></em></p><p>No tables used：Query语句中使用from dual <em><strong>*或不含任何from子句*</strong></em></p><h2 id="6-12、其他优化地方"><a href="#6-12、其他优化地方" class="headerlink" title="6.12、其他优化地方"></a>6.12、其他优化地方</h2><p><em><strong>*强制类型转换会全表扫描。Varchar 的 phone = ‘123344’，别用 123345数字。*</strong></em></p><p><em><strong>*使用短索引（又叫前缀索引）来优化索引。*</strong></em></p><p><em><strong>*存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。范围列可以用到索引（联合索引必须是最左前缀），但是范围列后面的列无法用到索引，索引最多用于一个范围列，如果查询条件中有两个范围列则无法全用到索引。*</strong></em></p><p><em><strong>*利用覆盖索引来进行查询操作，避免回表。*</strong></em></p><h2 id="6-13、什么时候要使用索引？"><a href="#6-13、什么时候要使用索引？" class="headerlink" title="6.13、什么时候要使用索引？"></a>6.13、什么时候要使用索引？</h2><p>​    主键自动建立唯一索引；</p><p>​    ****经常作为查询条件在WHERE或者ORDER BY 语句中出现的列要建立索引****；</p><p>​    作为<em><strong>*排序的列*<em><strong>要建立索引；</strong></em>*(单纯的order by 不会用到索引，但如果在where中出现，就可以用索引了。)*</strong></em></p><p>​    查询中与其他<em><strong>*表关联的字段，外键关系建立索引*</strong></em></p><p>​    高并发条件下倾向****组合索引****；</p><p>​    用于****聚合函数的列可以建立索引****，例如使用了max(column_1)或者count(column_1)时的column_1就需要建立索引</p><h2 id="6-14、什么时候不要使用索引？"><a href="#6-14、什么时候不要使用索引？" class="headerlink" title="6.14、什么时候不要使用索引？"></a>6.14、什么时候不要使用索引？</h2><p>​    ****经常增删改的列****不要建立索引；</p><p>​    有****大量重复的列****不建立索引；</p><p>​    <em><strong>*表记录太少不要建立索引。*<em><strong>只有当 数据库里已经有了足够多的测试数据时，它的性能测试结果才有实际参考价值。如果在测试数据库里只有几百条数据记录，它们往往在执行完第一条查询命令之后就被全部加载到内存里，这将使后续的查询命令都执行得非常快–不管有没有使用索引。</strong></em>*只有当数据库里的记录超过了1000条*<em><strong>、</strong></em>*数据总量也超过了MySQL服务器上的内存总量时，数据库的性能测试结果才有意义。*</strong></em></p><h2 id="6-15、覆盖索引"><a href="#6-15、覆盖索引" class="headerlink" title="6.15、覆盖索引"></a>6.15、覆盖索引</h2><p>​    <em><strong>*如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称 之为“覆盖索引”。*</strong>***</em>*我们知道在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次,这样就会比较慢。覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！InnoDB存储引擎支持覆盖索引，即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。SQL只需要通过索引就可以返回查询所需要的数据，而不必通过二级索引查到主键之后再去查询数据。****</p><p><em><strong>*解释一：*</strong></em> <em><strong>*就是select的数据列只用从索引中就能够取得，不必从数据表中读取，*</strong>***</em>*换句话说查询列要被所使用的索引覆盖。****</p><p><em><strong>*解释二： 索引是高效找到行的一个方法，当能通过检索索引就可以读取想要的数据，那就不需要再到数据表中读取行了。如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引。*</strong></em></p><p><em><strong>*解释三：是非聚集组合索引的一种形式，它包括在查询里的Select、Join和Where子句用到的所有列（即建立索引的字段正好是覆盖查询语句[select子句]与查询条件[Where子句]中所涉及的字段，也即，索引包含了查询正在查找的所有数据）。*</strong></em></p><h2 id="6-16、聚集索引"><a href="#6-16、聚集索引" class="headerlink" title="6.16、聚集索引"></a>6.16、聚集索引</h2><p>​    <em><strong>*聚集索引就是按照每张表的主键构造一棵B+树，同时叶子节点中存放的即为整张表的行记录数据。*</strong></em></p><h2 id="6-17、辅助索引"><a href="#6-17、辅助索引" class="headerlink" title="6.17、辅助索引"></a>6.17、辅助索引</h2><p>​    <em><strong>*辅助索引，也叫非聚集索引。和聚集索引相比，叶子节点中并不包含行记录的全部数据。*</strong></em></p><h2 id="6-18、SQL优化的一些部分"><a href="#6-18、SQL优化的一些部分" class="headerlink" title="6.18、SQL优化的一些部分"></a>6.18、SQL优化的一些部分</h2><h3 id="6-18-1、SQL优化的30条建议"><a href="#6-18-1、SQL优化的30条建议" class="headerlink" title="6.18.1、SQL优化的30条建议"></a>6.18.1、SQL优化的30条建议</h3><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486461&amp;idx=1&amp;sn=60a22279196d084cc398936fe3b37772&amp;chksm=cea24436f9d5cd20a4fa0e907590f3e700d7378b3f608d7b33bb52cfb96f503b7ccb65a1deed&amp;token=1987003517&amp;lang=zh_CN%23rd">https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486461&amp;idx=1&amp;sn=60a22279196d084cc398936fe3b37772&amp;chksm=cea24436f9d5cd20a4fa0e907590f3e700d7378b3f608d7b33bb52cfb96f503b7ccb65a1deed&amp;token=1987003517&amp;lang=zh_CN%23rd</a></p><h2 id="6-19、数据库相关操作语句"><a href="#6-19、数据库相关操作语句" class="headerlink" title="6.19、数据库相关操作语句"></a>6.19、数据库相关操作语句</h2><p>​    <em><strong>*数据库范式：1NF:每个关系的属性都是原子的，不可能分割。每一个列只有一个值。*</strong></em></p><p>​    <em><strong>*2NF:*</strong></em> 如果关系模式R是1NF，且每一个<em><strong>*非主属性*</strong>***</em>*完全依赖********(而不能部分依赖)于候选建****，那么就称R是第二范式。</p><p>​    <em><strong>*3NF：如果关系模式R是2NF，且关系模式R（U,F）中的所有*</strong>***</em>*非主属性对任何候选关键字都不存在传递依赖****<em><strong>*，则称关系R是属于第三范式。*</strong></em></p><p>​    <em><strong>*BCNF:*</strong></em> <em><strong>*BC范式（BCNF）：符合3NF，并且，*</strong>***</em>*主属性不依赖于主属性****</p><p>​    </p><p>​    <em><strong>*内连接NNER JOIN：*</strong>***</em>*内连接是一种一一映射关系，就是两张表都有的才能显示出来****</p><p>​    <em><strong>*左连接LEFT JOIN:*</strong></em> <em><strong>*左连接是左边表的所有数据都有显示出来*</strong>***</em>*，右边的表数据只显示共同有的那部分，没有对应的部分只能补空显示.****</p><p>​    <em><strong>*右连接RIGHT JOIN:右连接，*</strong>***</em>*右边表的所有数据都会显示出来****<em><strong>*，左边的只会出现共同的那部分，其他的空。*</strong></em></p><p>​    <em><strong>*全连接、外连接Outer Join :*</strong></em> <em><strong>*查询出左表和右表所有数据，但是去除两表的重复数据*</strong></em></p><h2 id="6-20、MySQL中一条SQL语句的执行过程"><a href="#6-20、MySQL中一条SQL语句的执行过程" class="headerlink" title="6.20、MySQL中一条SQL语句的执行过程"></a>6.20、MySQL中一条SQL语句的执行过程</h2><p>​    <em><strong>*查询sql的执行语句：*</strong></em></p><p>1、客户端通过TCP连接发送连接请求到mysql连接器，连接器会对该请求进行权限验证及连接资源分配。</p><p>2、建立连接后客户端发送一条语句，mysql收到该语句后，通过命令分发器判断其是否是一条select语句，如果是，在开启查询缓存的情况下，先在查询缓存中查找****该SQL是否完全匹配*<em><strong>，如果完全匹配，</strong></em>*验证当前用户是否具备查询权限****，如果权限验证通过，直接返回结果集给客户端，该查询也就完成了。如果不匹配继续向下执行。</p><p>3、如果在查询缓存中未匹配成功，则将语句交给****分析器作语法分析****，MySQL需要知道到底要查哪些东西，如果语法不对，就会返回语法错误中断查询。</p><p>4、分析器的工作完成后，****将语句传递给预处理器，检查数据表和数据列是否存在****，解析别名看是否存在歧义等。</p><p>5、语句解析完成后，MySQL就知道要查什么了，之后会将<em><strong>*语句传递给优化器进行优化*<em><strong>（通过索引选择最快的查找方式），</strong></em>*并生成执行计划。*</strong></em></p><p>6、****之后交给执行器去具体执行该语句，在执行之前，会先检查该用户是否具有查询权限，如果有，继续执行该语句。****执行器开始执行后，会逐渐将数据保存到结果集中，同时会逐步将数据缓存到查询缓存中，最终将结果集返回给客户端。</p><p>group by语法可以根据给定数据列的每个成员对查询结果进行分组统计，最终得到一个分组汇总表。</p><p>SELECT DEPT, <em><strong>*MAX(SALARY)*</strong></em> AS MAXIMUM FROM STAFF <em><strong>*GROUP BY DEPT ：每个部分的最高薪水*</strong></em></p><p>SELECT DEPT, <em><strong>*sum( SALARY )*</strong></em> AS total FROM STAFF <em><strong>*GROUP BY DEPT，每个部门的总薪水*</strong></em></p><p>having字句可以让我们筛选成组后的各种数据，where字句在聚合前先筛选记录，也就是说作用在group by和having字句前。而 having子句在聚合后对组记录进行筛选。我的理解就是真实表中没有此数据，这些数据是通过一些函数生存。</p><p>SELECT region, SUM(population), SUM(area) FROM bbc GROUP BY region <em><strong>*HAVING SUM(area)&gt;1000000*</strong></em></p><p>SELECT DEPT, MAX( SALARY ) AS MAXIMUM, MIN( SALARY ) AS MINIMUM FROM staff GROUP BY DEPT</p><p><em><strong>*HAVING COUNT( * ) &gt;2*</strong></em> ORDER BY DEPT</p><p>查询最近N天(不超过30天)某一款产品的订单。从第10条开始取5条，ID从大到小倒序。</p><p>select * from table limit 9,5;#从0开始</p><p>写代码 创建索引</p><p>CREATE (UNIQUE/FULLTEXT/) INDEX indexName ON mytable(username(length)); </p><p>ALTER table tableName ADD INDEX indexName(columnName)</p><p>CREATE TABLE mytable(  </p><p>ID INT NOT NULL,  </p><p>username VARCHAR(16) NOT NULL,  </p><p>INDEX [indexName] (username(length)) );</p><h2 id="6-21、主从复制架构相关"><a href="#6-21、主从复制架构相关" class="headerlink" title="6.21、主从复制架构相关"></a>6.21、主从复制架构相关</h2><p><em><strong>*数据库主从复制：*</strong></em></p><p><em><strong>*复制的用途：*<em><strong>1、</strong></em>*读写分离，提供数据库性能和并发能力。2、实时备灾，用于故障切换。*</strong></em></p><p><em><strong>*复制存在的问题：*<em><strong>1、主库宕机后，数据可能丢失。2、主库写压力大时，复制可能延时。</strong></em>*复制延迟怎么解决？？？*</strong></em></p><p><em><strong>*复制原理：*<em><strong>主从复制是myql内带功能，是一个异步的过程，</strong></em>*把主库的二进制日志文件binlog,复制到从库上，然后从库在本地完全顺序的执行日志中的各种操作。*</strong></em></p><p>****复制过程*<em><strong>：1、</strong></em>*主节点log dump线程：*<em><strong>当从节点连接主节点时，主节点会创建一个log dump 线程，用于发送bin-log的内容。</strong></em>*在读取bin-log中的操作时，此线程会对主节点上的bin-log加锁，当读取完成，甚至在发动给从节点之前，锁会被释放。2、从节点I/O线程：*<em><strong>当从节点上执行<code>start slave</code>命令之后，从节点会</strong></em>*创建一个I/O线程用来连接主节点，请求主库中更新的bin-log。I/O线程接收到主节点bin log dump 进程发来的更新之后，保存在本地relay-log中*<em><strong>。</strong></em>*3、从节点SQL线程：SQL线程负责读取relay log中的内容，解析成具体的操作并执行，最终保证主从数据的一致性****。</p><p>从节点上的I/O 进程连接主节点，****并请求从指定日志文件的指定位置（或者从最开始的日志）之后的日志内容*<em><strong>；主节点接收到来自从节点的I/O请求后，通过负责复制的I/O进程根据请求信息读取指定日志指定位置之后的日志信息，返回给从节点。返回信息中除了日志所包含的信息之外，还</strong></em>*包括本次返回的信息的bin-log file 的以及bin-log position；****从节点的I/O进程接收到内容后，将接收到的日志内容更新到本机的relay log中，并将读取到的binary log文件名和位置保存到master-info 文件中，Slave 的 SQL线程检测到relay-log 中新增加了内容后，会将relay-log的内容解析成在祝节点上实际执行过的操作，并在本数据库中执行。</p><p>MySQL <em><strong>*主从复制默认是异步的模式：*</strong></em></p><p>****异步复制：主库在执行完客户端提交的事务后会立即将结果返给给客户端，并不关心从库是否已经接收并处理****；主节点不会主动push bin log到从节点；</p><p><em><strong>*半同步模式*</strong>***</em>*：这种模式下主节点只需要接收到其中一台从节点的返回信息，就会commit****；否则需要等待直到超时时间然后切换成异步模式再提交；这样做的目的可以使主从数据库的数据延迟缩小，可以提高数据安全性。半同步模式不是mysql内置的，需要装插件开启半同步模式。</p><p><em><strong>*全同步模式*<em><strong>：</strong></em>*全同步模式是指主节点和从节点全部执行了commit并确认才会向客户端返回成功。*</strong></em></p><p>****binlog记录格式：1、基于SQL语句的复制：*<em><strong>记录会修改数据的sql语句到binlog中，减少了binlog日志量，节约IO,提高性能。某些情况：会导致主从节点中数据不一致。</strong></em>*2、基于行的复制*<em><strong>：将SQL语句分解为基于Row更改的语句并记录在bin log中，也就是只记录哪条数据被修改了，修改成什么样。优点</strong></em>*：解决了特定情况下的存储过程、或者函数、或者trigger的调用或者触发无法被正确复制的问题。缺点日志量太大。3、混合方式****：能语句就语句，不能语句就切换行。</p><p>数据库用到了****读写分离****，那你知不知道这样做会有什么问题：</p><p>在从库上会读到系统的一个过期状态”的现象，暂且称之为“过期读”。</p><p><em><strong>*强制走主库方案*<em><strong>其实就是，将查询请求做分类，</strong></em>*对于必须要拿到最新结果的请求，强制将其发到主库上。*</strong></em></p><p><em><strong>*sleep 方案*<em><strong>：</strong></em>*主库更新后，读从库之前先 sleep 一下。具体的方案就是，类似于执行一条 select sleep(1) 命令。*</strong></em></p><p><em><strong>*mysql主从复制存在的问题：*</strong></em></p><p>​    主库宕机后，数据可能丢失</p><p>​    从库只有一个sql Thread，主库写压力大，<em><strong>*复制很可能延时*</strong></em></p><p><em><strong>*解决方法：*</strong></em></p><p>​    <em><strong>*半同步复制—解决数据丢失的问题*</strong></em></p><p>​    <em><strong>*并行复制—-解决从库复制延迟的问题（并行是指从库多线程apply binlog库级别并行应用binlog，同一个库数据更改还是串行的(5.7版并行复制基于事务组)设置）*</strong></em></p><p>Mysql逻辑架构可以分为两层：服务层和存储引擎。服务层：Mysql的核心服务功能，查询语句解析，缓存，词法语法分析。</p><h1 id="7、Redis"><a href="#7、Redis" class="headerlink" title="7、Redis"></a>7、Redis</h1><p>​    常见问题</p><p>​    Redis,key-Value类型的内存数据库，整个数据库系统在内存中操作，定期异步flush到硬盘上进行保存。常用于缓存，也可以作分布式锁。redis提供多种数据类型，支持事务，两种持久化方式，多种集群方案。</p><h2 id="7-1、Redis为什么要作为缓存？-高性能和高并发"><a href="#7-1、Redis为什么要作为缓存？-高性能和高并发" class="headerlink" title="7.1、Redis为什么要作为缓存？ 高性能和高并发"></a>7.1、Redis为什么要作为缓存？ 高性能和高并发</h2><p>  ****高性能****：用户第一次访问数据库时，是从硬盘上读取的，过程比较慢，效率比较低。redis作为缓存，将用户访问的诗句存在缓存中，下一次再访问这些数据时就可以直接从缓存中读取了，操作缓存就是直接存在内存，速度特别快。</p><p>  ****高并发:****直接操作缓存所能承受的请求远远大于直接访问数据库的。把数据库的部分数据存在缓存中，可提供并发能力。</p><h2 id="redis-memcached分布式缓存和map-guava本地缓存的区别"><a href="#redis-memcached分布式缓存和map-guava本地缓存的区别" class="headerlink" title="*redis/memcached分布式缓存和map/guava本地缓存的区别:*"></a><em><strong>*redis/memcached分布式缓存和map/guava本地缓存的区别:*</strong></em></h2><p>  缓存分为本地缓存和分布式缓存，使用map或guava的是本地缓存，轻量而快速，随着jvm的销毁而结束，<em><strong>*多实例情况下，每个实例都保存一份缓存，缓存不具有一致性。*</strong></em></p><p>  ****分布式缓存，多实例情况下，各实例共用一份缓存数据，缓存具有一致性****。缺点，架构复杂，要保证服务的高可用。</p><h2 id="7-2、redis和memcached的区别"><a href="#7-2、redis和memcached的区别" class="headerlink" title="7.2、redis和memcached的区别"></a>7.2、redis和memcached的区别</h2><p>  1、****redis支持更丰富的数据类型****：redis不仅仅支持简单的k/v类型的数据，同时还提供list,set,zset,hash等数据结构的存储，memcached仅支持简单的数据类型，string.</p><p>  2、****reids支持数据的持久化，****可以将内存中的数据保存到磁盘中，重启的时候可以再次加载使用，而memcached不支持持久化。</p><p>  3、集群模式，memcached没有原生的集群模式，****redis目前是原生支持cluster模式的****。</p><p>  4、memcached<em><strong>*是多线程*<em><strong>，非阻塞IO复用的网络模型;</strong></em>*Redis使用单线程的多路IO复用模型。*</strong></em></p><h2 id="7-3、redis常用数据结构以及场景"><a href="#7-3、redis常用数据结构以及场景" class="headerlink" title="7.3、redis常用数据结构以及场景"></a>7.3、redis常用数据结构以及场景</h2><p>  string,hash,list,set,zset;key都是string,但value是多种数据结构的。</p><p>​    数据类型：</p><p>​    <em><strong>*String*</strong></em>:  <em><strong>*set、get、*</strong>***</em>*decr、incr、****</p><p>​    <em><strong>*hash*</strong></em>(将结构化的数据，比如一个对象（前提是这个对象没嵌套其他的对象）给缓存在redis里);<em><strong>*hget,hset,*</strong>***</em>*hgetall****</p><p>​    <em><strong>*List*</strong></em>,粉丝列表；存储一些列表型的数据结构，类似粉丝列表了、文章的评论列表。<em><strong>*以通过lrange命令，就是从某个元素开始读取多少个元素*<em><strong>，可以基于list实现分页查询。）</strong></em>*lpush,rpush,lpop,rpop*</strong>***</em>*,lrange****</p><p>​    <em><strong>*Set：无序集合，自动去重set玩儿交集、并集、差集的操作*<em><strong>，比如交集吧，可以把两个人的粉丝列表整一个交集，看看俩人的共同好友是谁。</strong></em>*Sadd, Spop, Sunion, sinterstore*</strong>***</em>*(交集)****</p><p>​    <em><strong>*Sorted Se*<em><strong>t，</strong></em>*去重但是可以排序*<em><strong>；最大的特点是有个分数可以自定义排序规则。</strong></em>*Zadd,Zrange,zcard*</strong></em></p><p>​    底层实现：</p><p>​    <em><strong>*简单动态字符串SDS:char[]数组加len属性和free属性（记录数组中未使用的字节数）；直接获取长度，防止溢出，*</strong></em></p><p>​    <em><strong>*Redis还实现了双端链表，双端，无环，带长度属性len;*</strong></em></p><p>​    ****Redis 的字典使用哈希表作为底层实现。链地址法解决冲突的哈希表实现的****。</p><p>​    跳跃表（skiplist）是一种有序数据结构，<em><strong>*它通过在每个节点中维持多个指向其它节点的指针，从而达到快速访问节点的目的。跳跃表通常是有序集合的底层实现之一，表中的节点按照分值大小进行排序。*</strong></em></p><p>  1、<em><strong>*由很多层结构组成；*</strong></em></p><p>　　    2、<em><strong>*每一层都是一个有序的链表*</strong>***</em>*，****排列顺序为由高层到底层，都至少包含两个链表节点，分别是前面的head节点和后面的nil节点；</p><p>　　3、<em><strong>*最底层的链表包含了所有的元素*</strong>***</em>*；****</p><p> 　4、如果一个元素出现在某一层的链表中，那么在该层之下的链表也全都会出现（上一层的元素是当前层的元素的子集）；</p><p>　　5、<em><strong>*链表中的每个节点都包含两个指针，一个指向同一层的下一个链表节点，另一个指向下一层的同一个链表节点；*</strong></em></p><h2 id="7-4、跳跃表的操作过程"><a href="#7-4、跳跃表的操作过程" class="headerlink" title="7.4、跳跃表的操作过程"></a>7.4、跳跃表的操作过程</h2><p>​    ①、搜索：从最高层的链表节点开始，****如果比当前节点要大和比当前层的下一个节点要小，那么则往下找****，也就是和当前层的下一层的节点的下一个节点进行比较，以此类推，一直找到最底层的最后一个节点，如果找到则返回，反之则返回空。</p><p>　　②、插入：<em><strong>*首先确定插入的层数，有一种方法是假设抛一枚硬币，如果是正面就累加，直到遇见反面为止，最后记录正面的次数作为插入的层数。当确定插入的层数k后，*</strong>***</em>*则需要将新元素插入到从底层到k层。****</p><p>　　<em><strong>*③*</strong>***</em>*、删除：在各个层中找到包含指定值的节点，然后将节点从链表中删除即可，如果删除以后只剩下头尾两个节点，则删除这一层。****</p><p>​    ziplist编码的有序集合使用紧挨在一起的压缩列表节点来保存，第一个节点保存member，第二个保存****score****。ziplist内的集合元素按score从小到大排序，score较小的排在表头位置。</p><p>​    skiplist编码的有序集合底层是一个命名为zset的结构体，而一个<em><strong>*zset结构同时包含一个字典和一个跳跃表*<em><strong>。跳跃表</strong></em>*按score从小到大保存所有集合元素。而字典则保存着从member到score的映射*<em><strong>，</strong></em>*这样就可以用O(1)的复杂度来查找member对应的score值。*<em><strong>虽然同时使用两种结构，但它们会通过</strong></em>*指针来共享相同元素的member和score，因此不会浪费额外的内存。跳表也是链表的一种，只不过它在链表的基础上增加了跳跃功能，正是这个跳跃的功能，使得在查找元素时，跳表能够提供O(logN)的时间复杂度。*</strong></em></p><p>  redis可以为key设置过期时间,对过期的key,采用定期删除和惰性删除的方式。</p><p>  定期****删除*<em><strong>：每100ms，</strong></em>*随机抽取一些设置过期时间的key,检查是否过期，****如过期，则删除。</p><p>惰性删除：一些过期的key,并没有被定性删除删除掉，****只有当系统使用并检查其过期了****，才会将其删除。</p><p>  大量key到内存中，达到redis内存最大值，会进行内存****淘汰机制****。</p><h2 id="7-5、Redis数据淘汰策略"><a href="#7-5、Redis数据淘汰策略" class="headerlink" title="7.5、Redis数据淘汰策略"></a>7.5、Redis数据淘汰策略</h2><p><em><strong>*noeviction,内存达到最大值，直接返回错误*<em><strong>。</strong></em>*allkeys-lru:所有键里最近最少使用;*</strong></em></p><p>  <em><strong>*allkeys-random:所有键随机回收*<em><strong>；</strong></em>*volatile-lru:设置过期时间的键中，回收最近最少使用的*<em><strong>，</strong></em>*volatile-random:设置过期集合键中，随机回收。*</strong></em></p><p>  <em><strong>*volatile-ttl:设置过期时间的键中，回收存活时间较短的键。*</strong></em></p><h2 id="7-6、redis持久化机制"><a href="#7-6、redis持久化机制" class="headerlink" title="7.6、redis持久化机制"></a>7.6、redis持久化机制</h2><p>redis持久化就是将内存中的数据写入到硬盘中，为了备份重用数据。支持两种持久化方式，快照RDB和只追加文件AOF;</p><p>  快照RDB,通过创建快照获得某个时间点的数据副本，可以对快照进行备份，或者复制到其他机器重用数据。默认的持久化方式。<em><strong>*save 900 20,在15分钟之后，有20个key变化，触发快照。*</strong></em></p><p>****AOF,实时性更好*<em><strong>，</strong></em>*主流方案，默认没有开启****。开启后，每执行一条更改redis数据的命令，都将该命令写入磁盘的AOF中。三种AOF方式， always,每次修改都写入AOF; everysec,每秒钟同步一次，多个命令一次写入。 no,操作系统决定何时同步。</p><p><em><strong>*RDB优缺点：每个RDB都代表了某一时刻redis的数据，适合做冷备份，且恢复数据速度快。缺点：实时性不好，可能会丢失部分数据，如果文件过大， 可能会导致提供的服务暂停几秒。*</strong></em></p><p><em><strong>*AOF优缺点：实时性好，一般1s一写入，而且写入性能比较好。缺点:AOF文件更大，开启后QDS相对来说比较低，恢复速度慢。*</strong></em></p><p>​    综合AOF和RDB两种持久化方式，用AOF来保证数据不丢失，作为恢复数据的第一选择；用RDB来做不同程度的冷备，在AOF文件都丢失或损坏不可用的时候，可以使用RDB进行快速的数据恢复。</p><h2 id="7-7、redis事务"><a href="#7-7、redis事务" class="headerlink" title="7.7、redis事务"></a>7.7、redis事务</h2><p>redis使用MULTI、EXEC、WATCH等命令实现事务功能。MULTI开始事务，EXEC，执行事务。DISCARD取消事务，WATCH监视key;</p><p>  <em><strong>*单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以*</strong></em> <em><strong>*Redis 事务的执行并不是原子性的。*</strong></em></p><p>  事务可以理解为一<em><strong>*个打包的批量执行脚本，但批量指令并非原子化的操作*</strong>***</em>*，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。****</p><h2 id="7-8、缓存雪崩和缓存穿透"><a href="#7-8、缓存雪崩和缓存穿透" class="headerlink" title="7.8、缓存雪崩和缓存穿透"></a>7.8、缓存雪崩和缓存穿透</h2><p>  缓存雪崩，缓存在同一时间内大面积失效，所有的请求都落在数据库中，数据库短时间内承受大量请求而崩掉。</p><p>  缓存同一时间内失效课可能是****服务器宕机或者设置了相同时间过期的key同时失效****。</p><p>  事前，****尽量保证redis集群的高可用性，key的过期时间尽可能错开****。</p><p>  事中，本地ehcache缓存(先查本地缓存再查redis,然后数据库)+hystrix限流(每秒就接受一定量的请求)&amp;降级(多余的请求走降级组件);</p><p>  <em><strong>*事后，*</strong>***</em>*利用持久化机制恢复缓存。****</p><p>  <em><strong>*缓存穿透，查询一个根本不存在的数据，缓存层和数据库都不命中，失去了缓存的意义。*</strong></em></p><p>  解决方案1、<em><strong>*对空结果作缓存*</strong>***</em>*，****意味着设置更多的键，占用更多的内存，所以要过期时间设置很短。</p><p>  <em><strong>*2*</strong>***</em>*、布隆过滤器****：将所有可能存在数据哈希到一个bitMap中，拦截不存在的数据访问，缺点有一定的误识别率。</p><h2 id="7-9、并发竞争key问题"><a href="#7-9、并发竞争key问题" class="headerlink" title="7.9、并发竞争key问题"></a>7.9、并发竞争key问题</h2><p>多个系统同时对一个key进行操作,执行顺序不同导致与期望结果不同。使用分布式锁解决。</p><p>  redis实现分布式锁。</p><p>  zookeeper实现分布式锁。</p><h2 id="7-10、如何保证缓存和数据库双写时的数据一致性？"><a href="#7-10、如何保证缓存和数据库双写时的数据一致性？" class="headerlink" title="7.10、如何保证缓存和数据库双写时的数据一致性？"></a>7.10、如何保证缓存和数据库双写时的数据一致性？</h2><p>  当发生数据修改时，是先更新数据库还是先更新缓存。缓存的更改是更新缓存还是直让原有缓存失效。</p><p><em><strong>*一般来说是先更新数据库，然后让缓存失效，将失效信息发送到mq中，mq不断的重试让缓存失效，保证缓存和数据库的数据一致性。*</strong></em></p><p><em><strong>*先删除缓存，再更新数据库：A写然后删除缓存，然而B查询缓存不存在，查询数据库得到旧值，然后缓存旧值。然后A更新数据库。这就造成了数据库和缓存不一致。*</strong>***</em>*这时采用延时双删策略：先删除缓存，然后更新数据库，然后休眠一段时间内如1s，再删除缓存。淘汰这一段时间的缓存脏数据。****</p><p>​    <em><strong>*如果mysql采用了读写分离：也会造成数据不一致。A想写，先删缓存，然后写入数据库。B读请求，没有缓存，读取从库旧值，然后缓存旧值，数据库主从同步。还可以采用延时双删的策略，延时的时间长点，完成主从同步。*</strong></em></p><p>采用这种同步淘汰策略，吞吐量降低怎么办？第二步的删除作为异步，启动一个线程去删除。</p><p><em><strong>*第二次删除,如果删除失败怎么办？*</strong></em></p><p><em><strong>*先更新数据库，再删除缓存*</strong></em></p><p><em><strong>*缓存更新套路：*</strong></em></p><p>​    失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</p><p>命中：应用程序从cache中取数据，取到后返回。</p><p><em><strong>*更新：先把数据存到数据库中，成功后，再让缓存失效。*</strong></em></p><p>缓存刚好失效，<em><strong>*A做查询，得到旧值，B做更新，让缓存失效。A将旧值缓存。但由于B是更新然后让缓存失效，这一耗时明显大于A查询然后缓存旧值，所以出现不一致的概率很低。如果非要解决，就用延时双删，再删除一次呗。*</strong></em></p><p><em><strong>*所以，如果删除缓存失败怎么办？*</strong></em></p><p>​    <em><strong>*提供一个保障的重试机制即可。一、将需要删除的key发送给消息队列，保证其删除成功。*</strong></em></p><p>二、降低耦合性的方案：（1）更新数据库数据（2）数据库会将操作信息写入****binlog日志*<em><strong>当中（3）</strong></em>*订阅程序提取出所需要的数据以及key*<em><strong>（4）</strong></em>*另起一段非业务代码，获得该信息****（5）尝试删除缓存操作，发现删除失败（6）将这些信息发送至消息队列（7）重新从消息队列中获得该数据，重试操作。</p><h2 id="7-11、redis是单线程的，为什么还那么快？"><a href="#7-11、redis是单线程的，为什么还那么快？" class="headerlink" title="7.11、redis是单线程的，为什么还那么快？"></a>7.11、redis是单线程的，为什么还那么快？</h2><p>  <em><strong>*1、操作完全基于内存，速度快。*</strong></em></p><p>  <em><strong>*2、数据结构简单，对数据的操作也简单。*</strong></em></p><p>  <em><strong>*3、采用单线程，避免了不必要的上下文切换开销。*</strong></em></p><p>  <em><strong>*4、使用非阻塞的多路IO复用模型。*</strong></em></p><p>​    I/O 多路复用模型是****利用select、poll、epoll可以同时监察多个流的 I/O 事件的能力*<em><strong>，在空闲的时候，会把当前线程阻塞掉，</strong></em>*当有一个或多个流有I/O事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流*<em><strong>（epoll是只轮询那些真正发出了事件的流），</strong></em>*并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。*<em><strong>这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。</strong></em>*采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快****（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了Redis具有很高的吞吐量。</p><p>​    <em><strong>*I/O多路复用（multiplexing）的本质是通过一种机制（系统内核缓冲I/O数据），*</strong>***</em>*让单个进程可以监视多个文件描述符，一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作。****<em><strong>*与多进程和多线程技术相比，I/O多路复用技术的最大优势是系统开销小，系统不必创建进程/线程，也不必维护这些进程/线程，从而大大减小了系统的开销。*</strong></em></p><h2 id="7-12、Select、poll、epoll"><a href="#7-12、Select、poll、epoll" class="headerlink" title="7.12、Select、poll、epoll"></a>7.12、Select、poll、epoll</h2><p>​    <em><strong>*select缺点：每次调用select，都需要把fd_set集合从用户态拷贝到内核态，都需要在内核遍历传递进来的所有fd_set，且内核对被监控的fd_set集合大小做了限制，为1024。*</strong></em></p><p>​    <em><strong>*poll缺点：poll没有最大文件描述符数量的限制，其他缺点和select一样。数据结构变成了pollfd*</strong></em></p><p>​    <em><strong>*epoll:*</strong></em> <em><strong>*最大连接数没有限制，采用事件通知方式，每当fd就绪，系统注册的回调函数就会被调用，将就绪fd放到readyList里面*</strong></em></p><h2 id="7-13、Unix五种IO模型"><a href="#7-13、Unix五种IO模型" class="headerlink" title="7.13、Unix五种IO模型"></a>7.13、Unix五种IO模型</h2><p><em><strong>*阻塞IO*</strong>***</em>*,**** <em><strong>*网络编程中，读取客户端的数据需要调用recvfrom。在默认情况下，这个调用会一直阻塞直到数据接收完毕，就是一个同步阻塞的IO方式。内核准备数据，并将数据从内核拷贝到用户内存，内核返回结果，用户进程再解除阻塞状态，重新运行起来。*</strong>***</em>*非阻塞IO*<strong><strong><strong>*：用户进程调用recvfrom之后，如果内核数据没有准备好，并不会阻塞用户进程，而是立即返回数据未准备好的结果，*</strong></strong></strong>*用户进程以后不断调用recvfrom来轮询内核是否准备好数据*<strong><strong><strong>*。*</strong></strong></strong>*信号驱动IO,*<strong><strong><strong>*调用之后，不等待数据就绪立即返回，*</strong></strong></strong>*等内核准备好数据之后，发送信号给用户进程*<strong><strong><strong>*。异步IO,**</strong> *<strong>*读取操作(aio_read)会通知内核进行读取操作并将数据拷贝至进程中，完事后通知进程整个操作全部完成（绑定一个回调函数处理数据）。读取操作会立刻返回，程序可以进行其它的操作，所有的读取、拷贝工作都由内核去做，做完以后通知进程，进程调用绑定的回调函数来处理数据。对比信号驱动IO，异步IO的主要区别在于*</strong></strong></strong>*：信号驱动由内核告诉我们何时可以开始一个IO操作(数据在内核缓冲区中)，而异步IO则由内核通知IO操作何时已经完成(数据已经在用户空间中)****<em><strong>*。IO多路复用：可以处理多个连接。这里的select相当于一个“代理”，调用select以后进程会被select阻塞，这时候在内核空间内select会监听指定的多个datagram (如socket连接)，如果其中任意一个数据就绪了就返回。此时程序再进行数据读取操作，将数据拷贝至当前进程内。由于select可以监听多个socket，我们可以用它来处理多个连接。*</strong></em></p><p>​    </p><h2 id="7-14、redis热key问题"><a href="#7-14、redis热key问题" class="headerlink" title="7.14、redis热key问题"></a>7.14、redis热key问题</h2><p><em><strong>*某个key被大量访问，对redis服务器造成了很大的压力。*</strong></em></p><p><em><strong>*解决方案：*</strong></em></p><p>1、服务端缓存：即将热点数据缓存至服务端的内存中，利用 ehcache ，或者一个 HashMap 都可以。在你发现热key以后，把热key加载到系统的JVM中。针对这种热key请求，会直接从jvm中取，而不会走到redis层。这个可能发生缓存和redis数据不一致的情况。利用Redis自带的消息通知机制，对于热点Key建立一个监听，当热点Key有更新操作的时候，缓存也随之更新。</p><p>2、备份热key, 即将热点Key+随机数，随机分配至Redis其他节点中。这样访问热点key的时候就不会全部命中到一台机器上了。（Redis集群中包含了****16384*<em><strong>个哈希槽(Hash slot)，集群使用公式</strong></em>*CRC16(key) % 16384来计算Key属于哪个槽。*<em><strong>那么同一个Key计算出来的值应该都是一样的，如何将Key分到其他机器上呢？</strong></em>*只要再后面加上随机数就行了****，这样就能保证同一个Key分布在不同机器上）</p><h2 id="7-15、如何发现热key"><a href="#7-15、如何发现热key" class="headerlink" title="7.15、如何发现热key?"></a>7.15、如何发现热key?</h2><p><em><strong>*1*</strong>***</em>*、经验预估****<em><strong>*。*</strong></em></p><p>****2、R****edis自带命令查询：Redis4.0.4版本提供了redis-cli –hotkeys就能找出热点Key.</p><p>****3、****客户端收集：在操作Redis之前对数据进行统计。</p><h2 id="7-16、redis集群数据迁移方式"><a href="#7-16、redis集群数据迁移方式" class="headerlink" title="7.16、redis集群数据迁移方式"></a>7.16、redis集群数据迁移方式</h2><p>  redis集群并没有使用一致性hash,<em><strong>*而是使用数据分片引入哈希槽来实现。*</strong></em></p><p>  <em><strong>*redis集群共有16384个哈希槽，所有的键都将映射到哈希槽中，使用CRC16(key)%16384=哈希槽，集群按槽分片，每个节点指派不同数量的槽。*</strong></em></p><p>一致性hash,是<em><strong>*将整个hash值空间0-2^32-1组成一个虚拟圆环，key的哈希函数对2^32取模得到哈希值，在圆环上顺时针转，遇到的第一个服务器就是定位到的服务器。这样即使增加或减去一个服务器，对数据的影响比较小，数据迁移也比较简单。缺点：在某些极端情况下，可能数据扎堆分布在一个服务器上，当这个服务器出现问题，对整个系统的影响依然很大。*</strong>***</em>*针对分配不均的情况下，提出了虚拟节点，将服务器后面的ip或主机名后面增加编号，生成多个虚拟节点，分配到虚拟节点的数据实际上是分配到了该服务器上。****</p><p><em><strong>*普通的分布式缓存策略是：hash(obj)%N。当其中一个服务器宕机或者需要新增一个服务器时，缓存策略变为hash(obj)%(N-1);就意味着，所有的缓存都将失效。必定会造成缓存数据的丢失，会去向后端的服务器去请求。*</strong>***</em>*增加删除服务器时，代价比较大，所有的数据不得不根据id再次计算哈希值，然后%N*<strong><strong><strong>*,*</strong></strong></strong>*进行重新分配和大规模数据迁移。****</p><h2 id="7-17、分布式与集中式"><a href="#7-17、分布式与集中式" class="headerlink" title="7.17、分布式与集中式"></a>7.17、分布式与集中式</h2><p>​    ****CAP:C一致性，A可用性，P分区容错性****。这三个基本需求，最多能满足两个。</p><p><em><strong>*BASE: 基本可用，软状态，最终一致性。*</strong></em></p><p>​    </p><h2 id="7-18、分布式锁"><a href="#7-18、分布式锁" class="headerlink" title="7.18、分布式锁"></a>7.18、分布式锁</h2><p><em><strong>*惯用关系数据库固有的排他性实现不同进程之间的互斥，但关系数据库瓶颈所在，别啥都交给人家。*</strong></em></p><p><em><strong>*redis的SETNX命令可以方便的实现分布式锁。*</strong></em>  <em><strong>*setNX（SET if Not eXists）+ expire;*</strong></em></p><p>如果是为了效率(efficiency)而使用分布式锁，允许锁的偶尔失效，那么使用单Redis节点的锁方案就足够了，简单而且效率高；****如果是为了正确性(correctness)在很严肃的场合使用分布式锁，那么不要使用Redlock****；应该考虑类似Zookeeper的方案，或者支持事务的数据库。</p><p><em><strong>*1.获取当前时间戳*</strong></em></p><p>****2.client尝试按照顺序使用相同的key,value获取所有redis服务的锁****，在获取锁的过程中的获取时间比锁过期时间短很多，这是为了不要过长时间等待已经关闭的redis服务。并且试着获取下一个redis实例。</p><p>比如：TTL为5s,设置获取锁最多用1s，所以如果一秒内无法获取锁，就放弃获取这个锁，从而尝试获取下个锁</p><p><em><strong>*3.client通过获取所有能获取的锁后的时间减去第一步的时间，这个时间差要小于TTL时间并且至少有3个redis实例成功获取锁，才算真正的获取锁成功*</strong></em></p><p><em><strong>*4.如果成功获取锁，则锁的真正有效时间是 TTL减去第三步的时间差 的时间；比如：TTL 是5s,获取所有锁用了2s,则真正锁有效时间为3s(其实应该再减去时钟漂移);*</strong></em></p><p><em><strong>*5.如果客户端由于某些原因获取锁失败，便会开始解锁所有redis实例；因为可能已经获取了小于3个锁，必须释放，否则影响其他client获取锁*</strong></em></p><h2 id="7-19、Zookeeper分布式锁"><a href="#7-19、Zookeeper分布式锁" class="headerlink" title="7.19、Zookeeper分布式锁"></a>7.19、Zookeeper分布式锁</h2><p><em><strong>*竞争分布式锁，在一个节点下，创建临时序列节点，找出最小的序列节点，获取分布式锁，程序执行完成之后此序列节点消失，通过watch来监控节点的变化，从剩下的节点的找到最小的序列节点，获取分布式锁，执行相应处理，依次类推……*</strong></em></p><h2 id="7-20、架构相关"><a href="#7-20、架构相关" class="headerlink" title="7.20、架构相关"></a>7.20、架构相关</h2><p><em><strong>*主从+哨兵：*</strong></em></p><p>​    <em><strong>*通过持久化功能，Redis能把内存中数据保存到硬盘上，保证了即使在服务器重启的情况下也不会损失（或少量损失）数据。数据是存储在一台服务器上的，如果这台服务器出现硬盘故障等问题，也会导致数据丢失。为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上。Redis 提供了复制（replication）功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上。在复制的概念中，数据库分为两类，一类是主数据库（master），另一类是从数据库[1] （slave）。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。*</strong></em></p><p>​    <em><strong>*当从数据库启动时，*</strong>***</em>*会向主数据库发送sync命令****<em><strong>*，主数据库接收到sync后开始在后台保存快照rdb，在保存快照期间受到的命令缓存起来，当快照完成时，主数据库会将快照和缓存的命令一块发送给从数据库。从数据库依据快照和命令和主节点保持同步。之后，主每受到1个命令就同步发送给从数据库。*</strong></em></p><p><em><strong>*当出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库、增量复制。*</strong></em></p><p><em><strong>*master每次接收到写命令之后，先在内部写入数据，然后异步发送给slave node*</strong></em></p><p><em><strong>*如果采用了主从架构，那么建议必须开启master node的持久化！否则重启之后，认为自己没有数据，会把从节点清空，丢失数据。*</strong></em></p><p><em><strong>*slave node主要用来进行横向扩容，做读写分离，扩容的slave node可以提高读的吞吐量。*</strong></em></p><p><em><strong>*Slave node不会设置过期key，如果主节点一个key过期了，或者通过LRU淘汰了一个key,发送del命令给从节点。*</strong></em></p><p><em><strong>*master和slave都要知道各自的数据的offset，才能知道互相之间的数据不一致的情况。*</strong></em></p><p><em><strong>*哨兵：*</strong></em></p><p><em><strong>*Redis 2.8中提供了哨兵工具来实现自动化的系统监控和故障恢复功能。*</strong></em></p><p><em><strong>*哨兵的作用就是监控redis主、从数据库是否正常运行，主出现故障自动将从数据库转换为主数据库。*</strong></em></p><p>  <em><strong>*（1）监控主数据库和从数据库是否正常运行。*</strong></em> </p><p><em><strong>*（2）主数据库出现故障时自动将从数据库转换为主数据库。*</strong></em></p><p><em><strong>*主从切换过程：*</strong></em></p><p><em><strong>*（1） slave leader升级为master*</strong></em> </p><p><em><strong>*（2） 其他slave修改为新master的slave*</strong></em> </p><p><em><strong>*（3） 客户端修改连接*</strong></em> </p><p><em><strong>*（4） 老的master如果重启成功，变为新master的slave*</strong></em></p><p><em><strong>*1、两种数据丢失的情况*</strong></em></p><p><em><strong>*（1）异步复制导致的数据丢失，数据还没复制到slave，master就宕机了。*</strong></em></p><p><em><strong>*（2）脑裂导致的数据丢失。集群里就会有两个master，*</strong></em></p><p><em><strong>*解决方法：要求至少有1个slave，数据复制和同步的延迟不能超过10秒*</strong></em></p><p><em><strong>*如果不能继续给指定数量的slave发送数据，而且slave超过10秒没有给自己ack消息，那么就直接拒绝客户端的写请求。*</strong></em></p><p><em><strong>*哨兵：*</strong>***</em>*sdown是主观宕机，就一个哨兵如果自己觉得一个master宕机了，那么就是主观宕机****</p><p>​     <em><strong>*odown是客观宕机，如果quorum数量的哨兵都觉得一个master宕机了，那么就是客观宕机。*</strong></em></p><p><em><strong>*如果一个master被认为odown了，*</strong>***</em>*而且majority哨兵都允许了主备切换，那么某个哨兵就会执行主备切换操作，****</p><p><em><strong>*接下来会对slave进行排序*</strong></em></p><p><em><strong>*（*</strong>***</em>*1）按照slave优先级进行排序，slave priority越低，优先级就越高****</p><p><em><strong>*（2）如果slave priority相同，那么看replica offset，哪个slave复制了越多的数据，offset越靠后，优先级就越高*</strong></em></p><p><em><strong>*（3）如果上面两个条件都相同，那么选择一个run id比较小的那个slave*</strong></em></p><p><em><strong>*集群：*</strong></em></p><p><em><strong>*主从架构+哨兵机制虽然保证了Redis的高可用性，但每个Redis实例都是全量保存，浪费内存。为了最大化的利用内存，可以使用集群，也就是分布式存储，每台redis存储不同的内容。*</strong></em></p><p><em><strong>*Reids分布式数据存储算法不是一致性哈希，而是哈希槽算法。*</strong></em></p><p><em><strong>*redis cluster有固定的16384个hash slot，对每个key计算CRC16值，然后对16384取模，可以获取key对应的hash slot。*</strong></em></p><p><em><strong>*redis cluster中每个master都会持有部分slot，比如有3个master，那么可能每个master持有5000多个hash slot。*</strong></em></p><p><em><strong>*hash slot让node的增加和移除很简单，增加一个master，就将其他master的hash slot移动部分过去，减少一个master，就将它的hash slot移动到其他master上去。移动成本很低。*</strong></em></p><p><em><strong>*Redis集群集成了主从复制和哨兵的功能。集群支撑N个redis master node，每个master node都可以挂载多个slave node*</strong></em></p><p><em><strong>*读写分离的架构，对于每个master来说，写就写到master，然后读就从mater对应的slave去读。*</strong></em></p><p><em><strong>*高可用，因为每个master都有salve节点，那么如果mater挂掉，redis cluster这套机制，就会自动将某个slave切换成master。redis cluster（多master + 读写分离 + 高可用）；*</strong></em></p><p><em><strong>*在redis cluster架构下，每个redis要放开两个端口号，比如一个是6379，另外一个就是加10000的端口号，比如16379。16379端口号是用来进行节点间通信的，也就是cluster bus的东西，集群总线。cluster bus的通信，用来进行故障检测，配置更新，故障转移授权。*</strong></em></p><p><em><strong>*集群是如何判断是否有某个节点挂掉：*</strong></em></p><p>​    每一个节点都存有这个集群所有主节点以及从节点的信息。它们之间通过互相的ping-pong判断是否节点可以连接上。****如果有一半以上的节点去ping一个节点的时候没有回应，集群就认为这个节点宕机了****，然后去连接它的备用节点。</p><p><em><strong>*集群进入fail状态的必要条件：*</strong></em></p><p>​    <em><strong>*1、*</strong>***</em>*某个主节点和所有从节点全部挂掉，我们集群就进入faill状态。****</p><p>​    <em><strong>*2、如果集群*</strong>***</em>*超过半数以上master挂掉****<em><strong>*，无论是否有slave，集群进入fail状态.*</strong></em></p><p>​    <em><strong>*3、如果集群*</strong>***</em>*任意master挂掉,且当前master没有slave.集群进入fail状态****<em><strong>*。*</strong></em></p><p>​    主节点宕机之后，从节点发起投票，投票过程是集群中所有master参与。选举的依据依次是：网络连接正常-&gt;5秒内回复过INFO命令-&gt;10*down-after-milliseconds内与主连接过的-&gt;从服务器优先级-&gt;复制偏移量-&gt;运行id较小的。</p><h1 id="8、Java-框架"><a href="#8、Java-框架" class="headerlink" title="8、Java 框架"></a>8、Java 框架</h1><h2 id="8-1、Spring-IOC"><a href="#8-1、Spring-IOC" class="headerlink" title="8.1、Spring IOC"></a>8.1、Spring IOC</h2><p>​    IOC（Inversion Of Controll，控制反转）是一种设计思想，将原本在程序中手动创建对象的控制权，交由给Spring框架来管理。IOC容器是Spring用来实现IOC的载体，IOC容器实际上就是一个Map(key, value)，Map中存放的是各种对象。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。IOC容器就像是一个工厂，当需要创建一个对象，只需要配置好配置文件/注解即可，不用考虑对象是如何被创建出来的，大大增加了项目的可维护性且降低了开发难度。</p><p>​    IOC就是控制反转，指创建对象控制权的转移，原本创建对象的主动权和时机由自己把控，而现在这种权利转移到Spring容器中。Spring根据配置文件或注解创建实例和管理实例之间的依赖关系，在程序运行时动态的创建对象以及管理对象之间的依赖应用。Spring的IOC有三种注入方式：<em><strong>*构造器注入、setter方法注入、接口注入。*</strong></em></p><h2 id="8-2、Spring-AOP"><a href="#8-2、Spring-AOP" class="headerlink" title="8.2、Spring AOP"></a>8.2、Spring AOP</h2><p>​    AOP（Aspect-Oriented Programming，面向切面编程）能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可扩展性和可维护性。使用AOP之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样可以大大简化代码量，提高了系统的扩展性。</p><p>​    <em><strong>*Spring AOP是基于动态代理的，如果要代理的对象实现了某个接口，那么Spring AOP就会使用JDK动态代理去创建代理对象；而对于没有实现接口的对象，就无法使用JDK动态代理，转而使用CGlib动态代理生成一个被代理对象的子类来作为代理。*</strong></em></p><p>​    <em><strong>*Spring AOP / AspectJ AOP 的区别？*</strong></em></p><p>​    Spring AOP属于运行时增强，而AspectJ是编译时增强。</p><p>​    Spring AOP基于代理（Proxying），而AspectJ基于字节码操作（Bytecode Manipulation）。</p><p>​    AspectJ相比于Spring AOP功能更加强大，但是Spring AOP相对来说更简单。如果切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择AspectJ，它比SpringAOP快很多。</p><h2 id="8-3、AOP相关概念"><a href="#8-3、AOP相关概念" class="headerlink" title="8.3、AOP相关概念"></a>8.3、AOP相关概念</h2><p>​    <em><strong>*1.通知（Advice）*</strong></em></p><p>　　就是你想要的功能，也就是上面说的安全，事物，日志等。</p><p>  2.连接点（JoinPoint）</p><p>　　<em><strong>*spring允许你使用通知的地方，*</strong></em> <em><strong>*spring只支持方法连接点*</strong></em>.<em><strong>*只要记住，和方法有关的前前后后（抛出异常），都是连接点。*</strong></em></p><p>  <em><strong>*3.切入点（Pointcut）*</strong></em></p><p>　　<em><strong>*在连接点中选取几个点作为切入点，真正的放入通知*<em><strong>。</strong></em>*让切点来筛选连接点，选中那几个你想要的方法。*</strong></em></p><p>  4.切面（Aspect）</p><p>　　****切面是通知和切入点的结合*<em><strong>。</strong></em>*通知说明了干什么和什么时候干（什么时候通过方法名中的before,after，around等就能知道），而切入点说明了在哪干（指定到底是哪个方法），****这就是一个完整的切面定义。</p><p>  5.引入（introduction）</p><p>　　****允许我们向现有的类添加新方法属性。****把切面引用到新方法。</p><p>  6.目标（target）</p><p>　　引入中所提到的目标类，也就是要被通知的对象，也就是真正的业务逻辑。 </p><p>  7.代理(proxy)</p><p>　　怎么实现整套aop机制的，都是通过代理，这个一会给细说。</p><p>  8.织入(weaving)</p><p>　　<em><strong>*把切面应用到目标对象来创建新的代理对象的过程。*</strong></em></p><p>****前置通知[Before advice]****：在连接点前面执行，前置通知不会影响连接点的执行，除非此处抛出异常。 </p><p>****正常返回通知[After returning advice]****：在连接点正常执行完成后执行，如果连接点抛出异常，则不会执行。 </p><p>****异常返回通知[After throwing advice]****：在连接点抛出异常后执行。 </p><p>****返回通知[After (finally) advice]：****在连接点执行完成后执行，不管是正常执行完成，还是抛出异常，都会执行返回通知中的内容。 </p><p>****环绕通知[Around advice]：****环绕通知围绕在连接点前后，比如一个方法调用的前后。这是最强大的通知类型，能在方法调用前后自定义一些操作。环绕通知还需要负责决定是继续处理join point(调用ProceedingJoinPoint的proceed方法)还是中断执行。</p><h2 id="8-4、Bean的生命周期"><a href="#8-4、Bean的生命周期" class="headerlink" title="8.4、Bean的生命周期"></a>8.4、Bean的生命周期</h2><p>​    1、根据配置情况调用Bean构造方法或者工厂方法实例化bean对象;</p><p>​    2、利用依赖注入完成Bean中所有属性值的配置注入。</p><p>​    3、如果Bean实现了BeanNameAware接口，则调用Bean的setBeanName()方法传递Bean的ID。</p><p>​    4、如果Bean实现了BeanFactoryAware接口，则调用setBeanFactory()方法传入当前工厂实例的引用。</p><p>​    5、如果Bean实现了ApplicationContextAware接口，则调用setApplicationContex ()方法传入当前ApplicationContex的引用。    </p><p>​    6、如果有BeanPostProcessor 和Bean关联，则调用该接口的预初始化方法postProcessBeforeInitialzation()bean进行加工操作。</p><p>​    7、如果bean 实现了 InitializingBean 接口，将调用 afterPropertiesSet()方法。</p><p>​    8、如果Bean 指定了 init-method 方法，它将被调用。</p><p>​    9、如果有BeanPsotProcessor 和 Bean 关联，则该接口的后置初始化方法 postProcessAfterInitialization() 方法将被调用。</p><p>​    10、如果bean的作用域scope=”prototype”,则调用者管理该 bean 的生命周期。如果作用范围为单例模型，将bean放入IOC缓存池，触发 spring 对该 bean 的生命周期管理。</p><p>​    11、程序使用bean</p><p>​    12、如果 Bean 实现了 DisposableBean 接口，Spring会调用destory()方法将bean销毁。如果配置文件中指定了destory-method，那将调用该方法销毁bean.</p><h2 id="8-5、Spring中的bean的作用域有哪些"><a href="#8-5、Spring中的bean的作用域有哪些" class="headerlink" title="8.5、Spring中的bean的作用域有哪些?"></a>8.5、Spring中的bean的作用域有哪些?</h2><p>​    <em><strong>*singleton:[*</strong>***</em>*ˈ*<strong><strong><strong>*s*</strong></strong></strong>*ɪ*<strong><strong><strong>*ŋɡlt*</strong></strong></strong>*ə********n]单例模式****，在整个Spring IoC容器中，只有一个bean实例，默认都是单例。</p><pre><code>  ***\*prototype:原型模式\****，每次从容器中请求bean,都会产生一个新的bean实例。    ***\*request\****:每次HTTP请求，都会创建一个新的bean;    ***\*session\****:同一个HTTP session共享一个bean,不同的session使用不同的bean.    ***\*globalSessi\****on:同一个全局Session共享一个bean.   &lt;后面这三个只用应用到web应用时，作用域才有效&gt;</code></pre><p><em><strong>*Spring MVC中的controller是默认单例的，为啥还线程安全？*</strong></em></p><p>  因为controller基本不定义属性(成员变量)，****属于无状态Bean，线程安全****。如果定义属性的话，最好scope=prototype;</p><p>  <em><strong>*Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身;*</strong></em></p><p>  对于有状态的bean，Spring官方提供的bean，一般提供了通过ThreadLocal去解决线程安全的方法,比如RequestContextHolder; 它通过为每个线程提供一个独立的变量副本解决了变量并发访问的冲突问题。</p><h2 id="8-6、spring的事务管理方式"><a href="#8-6、spring的事务管理方式" class="headerlink" title="8.6、spring的事务管理方式"></a>8.6、spring的事务管理方式</h2><p>1、编程式事务，代码中硬编码 2、声明式事务。推荐使用。</p><p>  声明式事务，有基于xml的声明式事务，基于注解的声明式事务。</p><h2 id="8-7、Spring的事务隔离级别-5种"><a href="#8-7、Spring的事务隔离级别-5种" class="headerlink" title="8.7、Spring的事务隔离级别:5种"></a>8.7、Spring的事务隔离级别:5种</h2><p>  1:TransactionDefinition.ISOLATION_<em><strong>*DEFAULT*</strong></em>: 后端数据库默认隔离级别.Mysql-REPEATABLE_READ。Oracle-READ_COMMITTED;</p><p>  2:ISOLATION_<em><strong>*READ*</strong></em>_<em><strong>*UNCOMMITTED*</strong></em>:读未提交，允许读取未提交的数据变更。可能导致脏读、幻读或不可重复读。</p><p>  3:ISOLATION_<em><strong>*READ*</strong></em>_<em><strong>*COMMITTED*</strong></em>:读已提交，允许读取并发事务已经提交的数据。阻止脏读，可能导致幻读，或不可重复读。</p><p>  4:ISOLATION_<em><strong>*REPEATABLE*</strong></em>_<em><strong>*READ*</strong></em>:可重复读：可重复读，对同一字段的读取结果是一致的。可能发生幻读。</p><p>  5:ISOLATION_<em><strong>*SERIALIZABLE*</strong></em>:串行化，事务依次执行，不并发，但影响性能。</p><p><em><strong>*Spring的事务传播行为*<em><strong>：事务传播行为（propagation behavior）</strong></em>*指*</strong>***</em>*的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行。****</p><p>  <em><strong>*支持当前事务的情况：*</strong></em></p><p>  PROPAGATION_REQUIRED：****当前存在事务就加入事务****，没有就创建。</p><p>  PROPAGATION_SUPPORTS：  ****当前存在事务就加入事务****，没有就以非事务的方式继续运行。</p><p>  PROPAGATION_MANDATORY：****当前存在事务就加入事务****，没有就抛出异常。</p><p>  不支持当前事务的情况：</p><p>  PROPAGATION_REQUIRES_NEW：创建一个新事务，<em><strong>*如果当前存在事务，把当前事务挂起。*</strong></em></p><p>  PROPAGATION_NOT_SUPPORTED：以非事务的情况继续运行，****如果当前存在事务，挂起当前事务****。</p><p>PROPAGATION_NEVER：以非事务的方式运行，<em><strong>*如果当前存在事务，抛出异常*</strong></em> </p><p>  PROPAGATION_NESTED： <em><strong>*如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行*<em><strong>；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED,</strong></em>*创建一个事务自己运行？*</strong></em></p><h2 id="8-8、将一个类声明spring-bean的注解有哪些"><a href="#8-8、将一个类声明spring-bean的注解有哪些" class="headerlink" title="8.8、将一个类声明spring bean的注解有哪些"></a>8.8、将一个类声明spring bean的注解有哪些</h2><p>  将类标识成可用于****@Autowired注解自动装配的bean,****注解的方式有：</p><p>  1、@<em><strong>*component*</strong></em>:通用注解，不知道是哪一层就用这个。</p><p>  2、@****Repository****：对应持久层，主要用于数据库相关操作。</p><p>  3、@<em><strong>*Service*</strong></em>:对应服务层，主要涉及操作持久层，进行逻辑;</p><p>  4、@****Controller****：对应控制层，主要用户接受用户请求并调用Service层返回数据给前端页面；</p><p><em><strong>*@Component 和 @Bean 的区别是什么？*</strong></em></p><p>  两者的目的一样，都是注册bean到Spring容器中</p><p>  1、作用对象不同: <em><strong>*@Component 注解作用于类，而@Bean注解作用于方法。*</strong></em></p><p>  2、@Component注解表明一个类会作为<em><strong>*组件类，并告知Spring要为这个类创建bean。*</strong></em></p><p>  ****@Bean注解告诉Spring这个方法将会返回一个对象，这个对象要注册为Spring应用上下文中的bean****。通常方法体中包含了最终产生bean实例的逻辑。</p><p>  3、<em><strong>*@Bean 注解比Component注解的自定义性更强。*</strong></em></p><h2 id="8-9、Spring-MVC的理解"><a href="#8-9、Spring-MVC的理解" class="headerlink" title="8.9、Spring MVC的理解"></a>8.9、Spring MVC的理解</h2><p>  Model1时代：jsp+javaBean,jsp既是控制层又是表现层， 前后端依赖严重，控制逻辑和表现逻辑混杂，代码重用率第，开发效率低。</p><p>  Model2时代：JavaBean+JSP+Servlet,这就是早期的 JavaWeb MVC开发模式,但抽象和封装程度还远远不够，程度可维护性和复用性低。</p><p>  Spring MVC 可以帮助我们进行更简洁的Web层的开发,天然与Spring集成，一般把后端项目分为Service层（处理业务）、Dao层（数据库操作）、Entity层（实体类）、Controller层(控制层，返回数据给前台页面)。</p><h2 id="8-10、Spring-MVC工作原理"><a href="#8-10、Spring-MVC工作原理" class="headerlink" title="8.10、Spring MVC工作原理"></a>8.10、Spring MVC工作原理</h2><p>​    （1）客户端（浏览器）发送请求，直接请求到****DispatcherServlet****。(前端控制器本质是一个servlet,是SPringMVC提供的所有请求的的统一入口)</p><p>​    （2）DispatcherServlet根据请求信息<em><strong>*调用HandlerMapping，解析请求对应的Handler。*</strong></em></p><p>  （3）解析到对应的Handler后，开始由HandlerAdapter适配器处理。</p><p>  （4）****HandlerAdapter会根据Handler来调用真正的处理器开处理请求，并处理相应的业务逻辑****。</p><p>  （5）处理器处理完业务后，会返回一个M<em><strong>*odelAndView对象，Model是返回的数据对象，View是个逻辑上的View。*</strong></em></p><p>  （6）<em><strong>*ViewResolver会根据逻辑View查找实际的View。*</strong></em></p><p>  （7）<em><strong>*DispaterServlet把返回的Model传给View。*</strong></em></p><p>（8）通过View返回给请求者（浏览器）</p><p>DispatcherServlet,前端控制器本质是一个servlet,是SPringMVC提供的所有请求的的统一入口;</p><h2 id="8-11、mybatis中-的区别"><a href="#8-11、mybatis中-的区别" class="headerlink" title="8.11、mybatis中$#的区别"></a>8.11、mybatis中$#的区别</h2><p>​    <em><strong>*#{} 这种取值是编译好SQL语句再取值,*</strong></em> <em><strong>*解析成一个参数标记符?*</strong></em></p><p>​    <em><strong>*${}会直接进行字符串替换。*</strong></em></p><p>​    <em><strong>*#{}是编译好SQL中有一个占位符，然后将参数值填充到SQL*</strong></em></p><p><em><strong>*所以：*</strong></em></p><p>​    <em><strong>*#{}方式能够很大程度防止sql注入。*</strong></em></p><p>​    <em><strong>*$方式无法防止Sql注入。*</strong></em></p><p>​    <em><strong>*$方式一般用于传入数据库对象，例如传入表名.*</strong></em></p><p>​    <em><strong>*一般能用#的就别用$.*</strong></em></p><h2 id="8-12、常用的spring注解"><a href="#8-12、常用的spring注解" class="headerlink" title="8.12、常用的spring注解"></a>8.12、常用的spring注解</h2><p>@Component , @Repository , @ Controller ,@Service , @Configration，@Bean  注册类</p><p>@<em><strong>*Autowired*</strong></em> ,  <em><strong>*@Resource默认安照名称进行装配，名称可以通过name属性进行指定，*</strong></em> </p><p>如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找</p><p><em><strong>*@autowired和@resource的区别，一个接口有两个类实现时怎么指定注入哪一个*</strong></em></p><p>@Autowired按<em><strong>*byType*<em><strong>自动注入, 而</strong></em>*@Resource默认按 byName自动注入罢了*</strong></em>;</p><p>如果当Spring上下文中存在不止一个UserDao类型的bean时，就会抛出****BeanCreationException*<em><strong>异常;如果Spring上下文中不存在UserDao类型的bean，也会抛出</strong></em>*BeanCreationException*<em><strong>异常。我们可以使用</strong></em>*@Qualifier配合@Autowired****来解决这些问题.</p><p>SpringMVC注解：</p><p>​    @RequestMapping、</p><p>​    @****PathVariable****：用于将请求URL中的模板变量映射到功能处理方法的参数上</p><p>​    @<em><strong>*ResponseBody*</strong></em> ：</p><p>​    @****RequestHeader****：</p><p>​    @<em><strong>*RequestParam*</strong></em></p><h1 id="9、Java基础知识"><a href="#9、Java基础知识" class="headerlink" title="9、Java基础知识"></a>9、Java基础知识</h1><h2 id="9-1、ThreadLocal"><a href="#9-1、ThreadLocal" class="headerlink" title="9.1、ThreadLocal"></a>9.1、ThreadLocal</h2><p>​    ThreadLocal类用来提供线程内部的局部变量，这种变量在多线程环境下访问时能保证各个线程里的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是private static 类型，用于关联线程。static的ThreadLocal变量是一个与线程相关的静态变量，即一个线程内，static变量是被各个实例共同引用的，但是不同线程内，static变量是隔开的。</p><p>​    使用方法：一个class中定义了一个ThreadLocal变量。通过重写方法initialValue()初始化值。然后设置get()方法得到threadLocal.get();通过设置set()方法设置threadLoca.set(threadLocal.get()+10);然后一个线程任务对这个类的变量进行修改或者查找时，每个线程的变量使用的都是线程局部变量，互不影响。</p><p>​    </p><p>​    每个线程对象：Thread t = Thread.currentThread();每个线程对象都有自己的ThreadLocalMap的变量，Map变量，key值为ThreadLocal，value为值。所以每个线程都有自己的一个ThreadLocal变量，且各自的值独立。</p><p>Get的时候，先获取线程的ThreadLocalMap对象，如果存在的话，就获取他的值。</p><p>Set的时候，先获取线程的ThreadLocalMap对象，如果存在，就更新。不存在，就新建Map,key为ThreadLocal,值为value;</p><p>​    <em><strong>*总的来说，每个线程对象，都有自己的ThreadLocalMap变量，这个map变量，key就是自己维持的ThreadLocal对象,值为ThreadLocal的值。*</strong></em></p><p>​    因为线程必然要访问threadLocal变量，然后调用threadLocal.get()方法，这个方法的实现就是：先获取当前线程，然后获取当前线程的ThreadLocalMap对象，map对象的key就是维持的ThreadLocal对象，value就是变量的值。</p><p>public T get() {</p><p>​    <em><strong>*Thread t = Thread.currentThread();//获取当前线程*</strong></em></p><p>​    <em><strong>*ThreadLocalMap map = getMap(t);//获取当前线程的ThreadLocalMap对象*</strong></em></p><p>​    if (map != null) {</p><p>​      <em><strong>*ThreadLocalMap.Entry e = map.getEntry(this); //当前线程Map对象，是否含有此TreadLocal对象实例最为key,如果有，取值。*</strong></em></p><p>​      if (e != null) {</p><p>​        @SuppressWarnings(“unchecked”)</p><p>​        T result = (T)e.value;</p><p>​        return result;</p><p>​      }</p><p>​    }</p><p>​    return setInitialValue();</p><p>  }</p><h2 id="9-2、内存溢出是怎么回事？举个例⼦。"><a href="#9-2、内存溢出是怎么回事？举个例⼦。" class="headerlink" title="9.2、内存溢出是怎么回事？举个例⼦。"></a>9.2、内存溢出是怎么回事？举个例⼦。</h2><ul><li>内存溢出 out of memory，是指程序在申请内存时，没有⾜够的内存空间供其使⽤，出现out of memory。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>内存溢出可能的原因</p><ul><li><p>程序中存在死循环</p></li><li><p>静态变量和静态⽅法太多了</p></li><li><p> 内存泄漏：⽐如说⼀个静态的list，⼀直往⾥放值，⼜因为静态变量不会被释放，所以迟早是要内存溢出的</p></li><li><p>⼤对象过多：java中的⼤对象是直接进⼊⽼年代的，然后当多个⼤对象同时⼯作时造成程序的可⽤内存⾮常⼩，⽐如我</p><p>list中原本最多可以放1000个对象，因为可⽤内存太⼩，放了500个就放不下了。</p></li><li><p>程序分配内存过⼩：还有⼀种很常⻅的情况，在把⼀个很⼤的程序直接导⼊，直接就内存溢出了，原因就是内存相对这</p><p>个程序就是太⼩了，需要⼿动增加内存。</p></li></ul></li><li><p>内存泄漏：是指程序在申请内存后，⽆法释放已申请的内存空间，⼀次内存泄漏危害可以忽略，但内存泄漏堆</p><p>积后果很严重，⽆论多少内存,迟早会被占光。</p><ul><li>内存泄露的场景<ul><li><strong>使用静态的集合类</strong>：静态的集合类的生命周期和应用程序的生命周期一样长；</li><li><strong>单例模式可能会造成内存泄露</strong>：实例对象的生命周期和应用程序的生命周期一样长，如果单例对象中拥有另一个对象的引用的话，这个被引用的对象就不能被及时回收；</li><li><strong>数据库、网络、输入输出流，这些资源没有关闭</strong></li><li>非静态内部类对象的构建依赖于其外部类，内部类对象会持有外部类对象的this引用，即时外部类对象不再被使用了，其占用的内存可能不会被GC回收，因为内部类的生命周期可能比外部类的生命周期要长，从而造成外部类对象不能被及时回收。<ul><li>解决办法：尽量使用静态内部类</li></ul></li><li><strong>变量不合理的作用域</strong>：能声明局部变量，就不要整成成员变量。</li></ul></li></ul></li></ul><h2 id="9-3、反射"><a href="#9-3、反射" class="headerlink" title="9.3、反射"></a>9.3、反射</h2><p>​    定义：在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法，这种动态获取信息以及动态调用对象方法的功能成为Java反射机制。</p><p>​    提供的功能：在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时调用任意一个对象的方法；</p><p>​    原理：获取类的Class对象，然后反向获取类或对象的各种信息。（class对象和.class文件的构造？？？）</p><p>​    获取class对象的三种方法：Class.forName(“全类名”)；类名.class；对象.getClass()；</p><p>​    <em><strong>*然后根据class对象获取类的各种信息*</strong></em>    <em><strong>*:*</strong></em> ****getMethods()获取所有public方法，getConstructors()获取构造方法，获取getDeclaredFields()获取所有的属性。class.newInstance() ,并强转类型，然后就可以操作对象了。对私有方法和属性，可以setAccessible(true)，然后进行操作。****所以反射是能够改变单例模式的，只需要获取私有的构造方法，然后setAccessible(true),然后通过构造方法创建对象就行。但并不破坏封装。封装的含义和单例的含义不一样，封装是将一组程序封装起来，对外提供接口，让外部调用人员不必在意里面的实现环节，直接调用即可。而外部人员及时通过反射获取到了里面的一些私有，仍然是不能窥探其实现逻辑的，单纯的调用其私有方法， 没有任何的意义。</p><p>​    反射的应用场景：</p><p>​    我们在使用<em><strong>*JDBC连接数据库时使*</strong>***</em>*用Class.forName()通过反射加载数据库的驱动程序*<em><strong>；②Spring框架也用到很多反射机制，最经典的就是xml的配置模式。</strong></em>*Spring 通过 XML 配置模式装载 Bean 的过程*<em><strong>：1) 将程序内所有 XML 或 Properties 配置文件加载入内存中; 2)Java类里面解析xml或properties里面的内容，得到对应实体类的字节码字符串以及相关的属性信息; 3)</strong></em>*使用反射机制，根据这个字符串获得某个类的Class实例; 4)动态配置实例的属性。****</p><p>String是怎么扩容的（不知道，后来查的：2倍扩容，超出1M后每次扩大1M）</p><p>为什么会出现 4.0-3.6=0.40000001 这种现象？</p><p>​    <em><strong>*2进制的小数无法精确的表达10进制小数，*</strong>***</em>*计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差。****</p><h2 id="9-4、面向对象特性"><a href="#9-4、面向对象特性" class="headerlink" title="9.4、面向对象特性"></a>9.4、面向对象特性</h2><p>​    ****抽象****：就是把现实生活中的某一类东西提取出来，用程序代码表示，我们通常叫做类或者接口。抽象包括两个方面：一个是数据抽象，一个是过程抽象。数据抽象也就是对象的属性。过程抽象是对象的行为特征。</p><p>​    ****封装****：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行封装隐藏。封装分为属性的封装和方法的封装。核心思想就是“隐藏细节”、“数据安全”：将对象不需要让外界访问的成员变量和方法私有化，只提供符合开发者意愿的公有方法来访问这些数据和逻辑，保证了数据的安全和程序的稳定。好处：良好的封装能减少耦合，对成员变量更精确的控制。</p><p>​    ****继承：****子类可以继承父类的非私有方法和属性(默认属性和方法也不行)，达到复用代码的效果。Java是单继承，一个类只能继承一个父类。</p><p>​    <em><strong>*多态:*</strong></em> <em><strong>*不同类的对象对同一消息作出不同的响应叫做多态。同一消息可以根据发送对象的不同而采用多种不同的行为方式。*<em><strong>可以用于消除类型之间的耦合关系，Spring 的核心就是多态和面向接口编程。多态的分类，编译时多态，方法的重载，运行时多态，方法的覆盖。</strong></em>*多态存在的条件：存在继承关系，子类重写父类的方法，父类引用指向子类。*</strong></em></p><p>​    <em><strong>*Java 里对象方法的调用是依靠类信息里的方法表实现的。*</strong></em></p><p>重载：<em><strong>*发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。*</strong></em></p><p><em><strong>*重写：发生在父子类中，方法名、参数列表必须相同，返回值小于等于父类，抛出的异常小于等于父类，访问修饰符大于等于父类；如果父类方法访问修饰符为private则子类中就不是重写。*</strong></em></p><h2 id="9-5、抽象类和接口"><a href="#9-5、抽象类和接口" class="headerlink" title="9.5、抽象类和接口"></a>9.5、抽象类和接口</h2><ul><li>语法层次<ul><li>抽象类可以有构造函数，接口不可以有构造函数 </li><li>抽象类中可以有普通成员变量，接口中没有普通成员变量，只能有常量</li><li>抽象类中可以有普通方法和抽象方法，接口中的方法全是抽象方法–&gt; <strong>jdk 1.8 接口中的方法还有default和static修饰的方法</strong></li><li>一个类只能继承一个抽象类，接口可以被多实现</li></ul></li><li>设计层次<ul><li>抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</li><li>抽象类是自底向上抽象而来的，接口是自顶向下设计出来的。</li></ul></li><li>何时使用 <ul><li>如果要实现的类和该抽象类是同一类事物，则用继承抽象类的方法；不是同一类事物，就用接口；</li><li>要设计较小的功能模块，用接口，要设计较大的功能单元，用抽象类</li><li>如果大部分方法都不确定，用接口抽象所有方法；如果只有少部分方法不确定，另有部分方法是确定的，用抽象类，实现部分确定的方法，抽象部分不确定的方法</li></ul></li></ul><h2 id="9-6、static关键字和final关键字"><a href="#9-6、static关键字和final关键字" class="headerlink" title="9.6、static关键字和final关键字"></a>9.6、static关键字和final关键字</h2><p>static关键字：****static的主要作用在于创建独立于具体对象的域变量或者方法****。类变量随着类的加载而存在于方法区中。实例变量随着对象的建立而存在于堆内存中。类变量生命周期最长，随着类的消失而消失。实例变量生命周期随着对象的消失而消失。</p><p>​    ****static修饰方法****：静态方法。不依赖于对象就可以访问，可以直接类名.静态方法访问。静态方法不可以访问对象的非静态方法和非静态变量。</p><p>​    ****static变量****：静态变量被所有的对象所共享，在内存中只有一个副本，存在方法区中，当且仅当在类初次加载时会被初始化。</p><p>​    ****static静态代码块****：在类被初次加载时执行，且执行一次，通常将只需要进行一次的初始化操作都放在static代码块中进行。</p><p>​    <em><strong>*static静态内部类*</strong></em>:内部类：定义在类内部的类叫做内部类，内部类持有外部类的引用，所以能够访问外部类的所有变量和方法，内部类一般只为外部类使用，且内部类能够独立的继承接口。外部类对象通过‘外部类名.this.xxx’的形式访问内部类的属性与方法。static修饰之后就叫做静态内部类，或嵌套类 [1]要创建静态内部类的对象，并不需要其外部类的对象；也没有持有外部类的引用。 [2]不能够从静态内部类的对象中访问外部类的非静态成员。</p><p>​    每个类会产生一个.class文件，文件名即为类名。同样，内部类也会产生这么一个.class文件。内部类也会有class文件，文件名为外部类$内部类名称。</p><p>​    ****static静态导包***<em>：import static myClass.</em>;导入类的所有静态    方法或者调用特定静态方法。使用时直接使用方法名称就可以。</p><p>​    <em><strong>*final:*</strong></em></p><p>​    final修饰变量表示常量，只能被赋值一次，赋值后值不再改变.这里的不可变，是指引用不可变，如果修饰list,随便增删。如果修饰的类的成员变量，必须显示初始化，要么直接赋值，要么构造方法中初始化。否则就会报编译错误</p><p>​    final修饰方法，表示方法不可被重写。final方法编译的时候静态绑定，所以比非final方法快。private方法其实也是final的。final方法在编译阶段绑定，称为静态绑定(static binding)。</p><p>​    final修饰类，表示不可被继承。final类中的所有方法都是final方法。</p><p>​    不用final还可以用什么办法使得这个类不被继承、</p><p>​    将我们的类的构造器声明为private类型的。然后继承的子类，必须得调用父类的构造方法， 因为他是私有的构造函数，不能调用，出错。</p><h2 id="9-7、Java基础面试题"><a href="#9-7、Java基础面试题" class="headerlink" title="9.7、Java基础面试题"></a>9.7、Java基础面试题</h2><h3 id="9-7-1、-和equals的区别"><a href="#9-7-1、-和equals的区别" class="headerlink" title="9.7.1、==和equals的区别"></a>9.7.1、==和equals的区别</h3><ul><li>==是运算符，⽤于基本类型的数据的⽐较，或者是⽐较两个对象的引⽤是否相同；</li><li>⽽equals是Object的基本⽅法，⽤于⽐较两个对象的值是否相等，例如字符串的⽐较。</li></ul><h3 id="9-7-2、hashCode⽅法的作⽤"><a href="#9-7-2、hashCode⽅法的作⽤" class="headerlink" title="9.7.2、hashCode⽅法的作⽤"></a>9.7.2、hashCode⽅法的作⽤</h3><ul><li><p>hashCode是在散列存储结构中确定对象的存储地址的，主要是⽤于查找的快捷性，为了配合基于散列的集合正常运⾏，如Hashtable，HashMap等； </p></li><li><p>如果两个对象相同，就是适⽤于equals(java.lang.Object) ⽅法，那么这两个对象的hashCode⼀定要相同，即equals⽅法被重写，那么对象的hashCode也需要重写；</p></li><li><p>两个对象的hashCode相同，并不⼀定表示两个对象就相同，也就是不⼀定适⽤于equals(java.lang.Object) ⽅法，只能够说</p><p>明这两个对象在散列存储结构中，它们存放在<strong>同⼀个桶</strong>⾥⾯。</p></li></ul><h3 id="9-7-3、NIO是什么？适⽤于何种场景？"><a href="#9-7-3、NIO是什么？适⽤于何种场景？" class="headerlink" title="9.7.3、NIO是什么？适⽤于何种场景？"></a>9.7.3、NIO是什么？适⽤于何种场景？</h3><ul><li><p>NIO是为了弥补IO操作的不⾜⽽诞⽣的，NIO的⼀些新特性有：⾮阻塞I/O，选择器，缓冲以及管道。</p></li><li><p>如果需要管理同时打开的成千上万个连接，这些连接每次只是发送少量的数据，例如聊天服务器，这时候⽤NIO处理数据可</p><p>能是个很好的选择。(适⽤于<strong>⼩数据多连接</strong>)</p></li><li><p>⽽如果只有少量的连接，⽽这些连接每次要发送⼤量的数据，这时候传统的IO更合适。使⽤哪种处理数据，需要在数据的响</p><p>应等待时间和检查缓冲区数据的时间上作⽐较来权衡选择。</p></li><li><p>​    常见IO模型</p><ul><li><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528145003817.png" alt="image-20210528145003817"></li></ul></li><li><p>Java IO分类</p><ul><li><p>BIO（Blocking IO）</p><ul><li><p>通信模型</p><ul><li><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528145335341.png" alt="image-20210528145335341"></li></ul></li><li><p>采用 <strong>BIO 通信模型</strong> 的服务队，通常由一个独立的 <code>Acceptor</code> 线程负责监听客户端的连接。我们一般通过在 <code>while(true)</code> 循环中服务端会调用 <code>accept()</code> 方法等待客户端连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待当前连接的客户端的操作执行完成，不过可以通过多线程来支持多个客户端的连接</p></li><li><p>代码实例</p><ul><li><p>服务端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>niuh<span class="token punctuation">.</span>bio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待连接。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//阻塞方法</span>            <span class="token keyword">final</span> Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有客户端连接了。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 多线程处理</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token function">handler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 单线程处理</span>            <span class="token comment" spellcheck="true">//handler(socket);</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread id = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备read。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接收客户端的数据，阻塞方法，没有数据可读时就阻塞</span>        <span class="token keyword">int</span> read <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read完毕。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到客户端的数据："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread id = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HelloClient"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>客户端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>niuh<span class="token punctuation">.</span>bio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向服务端发送数据</span>        socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HelloServer"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向服务端发送数据结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接收服务端回传的数据</span>        socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到服务端的数据："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>NIO</p><ul><li><p>由⼀个专⻔的线程来处理所有的 IO 事件，并负责分发</p></li><li><p>事件驱动机制：事件到的时候触发，⽽不是同步的去监视事件。</p></li><li><p>线程通讯：线程之间通过 wait,notify 等⽅式通讯。保证每次上下⽂切换都是有意义的。减少⽆谓的线程切换。</p></li><li><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528151822391.png" alt="image-20210528151822391"></p></li><li><p>三大核心组件</p><ul><li><strong>Channel</strong>（<strong>通道</strong>）</li><li><strong>Buffer</strong>（<strong>缓冲区</strong>）</li><li><strong>Selector</strong>（<strong>选择器</strong>）</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528145856316.png" alt="image-20210528145856316"></p><ul><li><p>channel 类似于流，每个 channel 对应一个 buffer 缓冲区，buffer 底层就是个数组；</p></li><li><p>channel 会注册到 selector 上，由 selector 根据 channel 读写事件的发生将其交由某个空闲的线程处理；</p></li><li><p>selector 可以对应一个或多个线程</p></li><li><p>NIO 的 Buffer 和 channel 既可以读也可以写</p></li></ul></li><li><p>与IO的区别</p><ul><li>IO流是阻塞的，NIO流不是阻塞的</li><li>IO 面向流（Stream oriented），NIO 面向缓冲区（Buffer oriented）</li><li>NIO 通过 Channel（通道）进行读写<ul><li><strong>通道是双向的，可读也可以写</strong>，而流的读写是单向的。无论读写，<strong>通道只能和 Buffer 交互</strong>。因为 Buffer，通道可以异步地读写。</li><li>NIO读写数据<ul><li>从通道读数据：创建一个缓冲区，然后请求通道读取数据；</li><li>从通道写数据：创建一个缓冲区，填充数据，并要求通道写入数据。</li></ul></li></ul></li><li>NIO 有选择器，而 IO 没有<ul><li><strong>选择器用于使用单线程处理多个通道</strong>。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。因此，为了提供系统效率选择器是有用的。</li></ul></li></ul></li><li><p>代码实例</p><ul><li><p>服务端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>niuh<span class="token punctuation">.</span>nio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SelectionKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>ServerSocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOServer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//public static ExecutorService pool = Executors.newFixedThreadPool(10);</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个在本地端口进行监听的服务Socket通道.并设置为非阻塞方式</span>        ServerSocketChannel ssc <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须配置为非阻塞才能往selector上注册，否则会报错，selector模式本身就是非阻塞模式</span>        ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个选择器selector</span>        Selector selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把ServerSocketChannel注册到selector上，并且selector对客户端accept连接操作感兴趣</span>        ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待事件发生。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 轮询监听channel里的key，select是阻塞的，accept()也是阻塞的</span>            <span class="token keyword">int</span> select <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有事件发生了。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 有客户端请求，被轮询监听到</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SelectionKey key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//删除本次已处理的key，防止下次select重复处理</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">handle</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>SelectionKey key<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有客户端连接事件发生了。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ServerSocketChannel ssc <span class="token operator">=</span> <span class="token punctuation">(</span>ServerSocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//NIO非阻塞体现：此处accept方法是阻塞的，但是这里因为是发生了连接事件，所以这个方法会马上执行完，不会阻塞</span>            <span class="token comment" spellcheck="true">//处理完连接请求不会继续等待客户端的数据发送</span>            SocketChannel sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过Selector监听Channel时对读事件感兴趣</span>            sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有客户端数据可读事件发生了。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SocketChannel sc <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//NIO非阻塞体现:首先read方法不会阻塞，其次这种事件响应模型，当调用到read方法时肯定是发生了客户端发送数据的事件</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取到客户端发送的数据："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ByteBuffer bufferToWrite <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"HelloClient"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferToWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>            key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>SelectionKey<span class="token punctuation">.</span>OP_READ <span class="token operator">|</span> SelectionKey<span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SocketChannel sc <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"write事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// NIO事件触发是水平触发</span>            <span class="token comment" spellcheck="true">// 使用Java的NIO编程的时候，在没有数据可以往外写的时候要取消写事件，</span>            <span class="token comment" spellcheck="true">// 在有数据往外写的时候再注册写事件</span>            key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//sc.close();</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>客户端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>niuh<span class="token punctuation">.</span>nio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SelectionKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NioClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通道管理器</span>    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 启动客户端测试     *     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        NioClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">initClient</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得一个Socket通道，并对该通道做一些初始化的工作     *     * @param ip   连接的服务器的ip     * @param port 连接的服务器的端口号     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initClient</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得一个Socket通道</span>        SocketChannel channel <span class="token operator">=</span> SocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置通道为非阻塞</span>        channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得一个通道管理器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户端连接服务器,其实方法执行并没有实现连接，需要在listen（）方法中调</span>        <span class="token comment" spellcheck="true">//用channel.finishConnect() 才能完成连接</span>        channel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将通道管理器和该通道绑定，并为该通道注册SelectionKey.OP_CONNECT事件。</span>        channel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 采用轮询的方式监听selector上是否有需要处理的事件，如果有，则进行处理     *     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 轮询访问selector</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得selector中选中的项的迭代器</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SelectionKey key <span class="token operator">=</span> <span class="token punctuation">(</span>SelectionKey<span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 删除已选的key,以防重复处理</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 连接事件发生</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isConnectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    SocketChannel channel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果正在连接，则完成连接</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">isConnectionPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        channel<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 设置成非阻塞</span>                    channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//在这里可以给服务端发送信息哦</span>                    ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"HelloServer"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//在和服务端连接成功之后，为了可以接收到服务端的信息，需要给通道设置读的权限。</span>                    channel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">// 获得了可读的事件</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">read</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理读取服务端发来的信息 的事件     *     * @param key     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>SelectionKey key<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//和服务端的read方法一样</span>        <span class="token comment" spellcheck="true">// 服务器可读取消息:得到事件发生的Socket通道</span>        SocketChannel channel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建读取的缓冲区</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端收到信息："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Redis 就是典型的 NIO 线程模型，selector 收集所有的事件并且转给后端线程，线程连续执行所有事件命令并将结果写回客户端。</p></li></ul></li><li><p>AIO</p><ul><li><p>异步非阻塞， 由操作系统完成后回调通知服务端程序启动线程去处理， 一般适用于连接数较多且连接时间较长（重操作）的应用。</p></li><li><p>AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作</p></li><li><p>代码实例</p><ul><li><p>服务端</p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>niuh<span class="token punctuation">.</span>aio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>AsynchronousServerSocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>AsynchronousSocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>CompletionHandler<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AIOServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">final</span> AsynchronousServerSocketChannel serverChannel <span class="token operator">=</span>                AsynchronousServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CompletionHandler</span><span class="token operator">&lt;</span>AsynchronousSocketChannel<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completed</span><span class="token punctuation">(</span><span class="token keyword">final</span> AsynchronousSocketChannel socketChannel<span class="token punctuation">,</span> Object attachment<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 再此接收客户端连接，如果不写这行代码后面的客户端连接连不上服务端</span>                    serverChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>attachment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CompletionHandler</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> ByteBuffer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completed</span><span class="token punctuation">(</span>Integer result<span class="token punctuation">,</span> ByteBuffer buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"HelloClient"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">failed</span><span class="token punctuation">(</span>Throwable exc<span class="token punctuation">,</span> ByteBuffer buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            exc<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">failed</span><span class="token punctuation">(</span>Throwable exc<span class="token punctuation">,</span> Object attachment<span class="token punctuation">)</span> <span class="token punctuation">{</span>                exc<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>客户端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>niuh<span class="token punctuation">.</span>aio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>AsynchronousSocketChannel<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AIOClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        AsynchronousSocketChannel socketChannel <span class="token operator">=</span> AsynchronousSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"HelloServer"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer len <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端收到信息："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>对比</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528151504732.png" alt="image-20210528151504732"></p></li></ul><blockquote><p>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。（除了 AIO 其他的 IO 类型都是同步的）</p></blockquote><h3 id="9-7-4、Hashmap实现原理？如何保证HashMap线程安全？"><a href="#9-7-4、Hashmap实现原理？如何保证HashMap线程安全？" class="headerlink" title="9.7.4、Hashmap实现原理？如何保证HashMap线程安全？"></a>9.7.4、Hashmap实现原理？如何保证HashMap线程安全？</h3><ul><li><p>HashMap简单说就是它根据键的hashCode值存储数据，⼤多数情况下可以直接定位到它的值，因⽽具有很快的访问速度，</p><p>但遍历顺序却是不确定的。</p></li><li><p> HashMap基于哈希表，底层结构由数组来实现，存储时根据key的hash算法来决定其存储位置并以Entry形式保存到数组中</p></li><li><p>数组扩容需要重新计算扩容后每个元素在数组中的位置很耗性能，因此一般建议在初始化时指定初始容量；</p></li><li><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528152232130.png" alt="image-20210528152232130"></p></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">transient</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">final</span> K key<span class="token punctuation">;</span>      V value<span class="token punctuation">;</span>      Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>     …… <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>put方法</p><ul><li><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210528152455299.png" alt="image-20210528152455299"></li></ul></li><li><p> ConcurrentHashMap是HashMap的线程安全实现</p></li><li><p>允许多个修改操作同时进⾏(使⽤了锁分离技术)，它使⽤了多个锁来控制，对hash表的不同段进⾏的修改，每个段其实就是⼀个⼩的hashtable，它们有⾃⼰的锁。</p></li><li><p>允许多个读操作并发进⾏，读操作并不需要锁，因为它的HashEntry⼏乎是不可变的</p></li></ul><h3 id="9-7-5、NIO模型，select-epoll的区别，多路复⽤的原理？"><a href="#9-7-5、NIO模型，select-epoll的区别，多路复⽤的原理？" class="headerlink" title="9.7.5、NIO模型，select/epoll的区别，多路复⽤的原理？"></a>9.7.5、NIO模型，select/epoll的区别，多路复⽤的原理？</h3><ul><li><p>IO多路复⽤</p><ul><li>概念：IO多路复⽤是指内核⼀旦发现进程指定的⼀个或者多个IO条件准备读取，它就通知该进程。</li><li>优势：与多进程和多线程技术相⽐，I/O多路复⽤技术的最⼤优势是<strong>系统开销⼩</strong>，系统不必创建新进程/线程，也不必维护这些进程/线程，从⽽⼤⼤减⼩了系统的开销。</li><li>系统：⽬前⽀持I/O多路复⽤的系统调⽤有 select，pselect，poll，epoll。</li></ul></li><li><p>select： 允许应用程序监视一组文件描述符，等待一个或者多个描述符成为就绪状态，从而完成 I/O 操作。</p><ul><li><p>fd_set 使用数组实现，数组大小使用 FD_SETSIZE 定义，所以只能监听少于 FD_SETSIZE 数量的描</p><p>述符。有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的</p><p>描述符集合。</p></li><li><p>timeout 为超时参数，调用 select 会一直阻塞直到有描述符的事件到达或者等待的时间超过timeout。</p></li><li><p>成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0。</p><pre class="line-numbers language-cpp"><code class="language-cpp">fd_set fd_in<span class="token punctuation">,</span> fd_out<span class="token punctuation">;</span> <span class="token keyword">struct</span> timeval tv<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Reset the sets </span><span class="token function">FD_ZERO</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>fd_in <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">FD_ZERO</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>fd_out <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Monitor sock1 for input events </span><span class="token function">FD_SET</span><span class="token punctuation">(</span> sock1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_in <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Monitor sock2 for output events </span><span class="token function">FD_SET</span><span class="token punctuation">(</span> sock2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_out <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Find out which socket has the largest numeric value as select requires it </span><span class="token keyword">int</span> largest_sock <span class="token operator">=</span> sock1 <span class="token operator">></span> sock2 <span class="token operator">?</span> sock1 <span class="token operator">:</span> sock2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Wait up to 10 seconds </span>tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Call the select </span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span> largest_sock <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_in<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_out<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tv <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Check if select actually succeed </span><span class="token keyword">if</span> <span class="token punctuation">(</span> ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// report error and abort </span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> ret <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// timeout; no event detected </span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span> sock1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_in <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// input event on sock1 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span> sock2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_out <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// output event on sock2 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>poll：功能与 select 类似，也是等待一组描述符中的一个成为就绪状态。poll 中的描述符是 pollfd 类型的数组，pollfd 的定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> pollfd <span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* file descriptor */</span>     <span class="token keyword">short</span> events<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* requested events */</span>     <span class="token keyword">short</span> revents<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* returned events */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// The structure for two events</span><span class="token keyword">struct</span> pollfd fds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Monitor sock1 for input </span>fds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> sock1<span class="token punctuation">;</span> fds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Monitor sock2 for output</span>fds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> sock2<span class="token punctuation">;</span> fds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">=</span> POLLOUT<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Wait 10 seconds</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>fds<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Check if poll actually succeed </span><span class="token keyword">if</span> <span class="token punctuation">(</span> ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// report error and abort</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> ret <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// timeout; no event detected </span><span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// If we detect the event, zero it out so we can reuse the structure </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> fds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLIN <span class="token punctuation">)</span>         fds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// input event on sock1 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> fds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLOUT <span class="token punctuation">)</span>         fds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>revents <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// output event on sock2 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>select和poll比较</p><ul><li><p>select 会修改描述符，而 poll 不会；</p></li><li><p>select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听少于 1024个描述符。如果要监听更多描述符的话，需要修改FD_SETSIZE 之后重新编译；而 poll 没有描述符数量的限制；</p></li><li><p>poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高；</p></li><li><p>如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。</p></li></ul></li><li><p>epoll</p><ul><li><p>epoll_ctl() 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用epoll_wait() 便可以得到事件完成的描述符。</p></li><li><p>epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符、</p></li><li><p>仅适用于Linux</p></li><li><p>epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。</p></li><li><p>epoll对多线程编程友好，一个线程调用了epoll_wait，另一个线程关闭了同一个描述符也不会产生像select和poll那样不确定的情况</p></li><li><p>工作模式</p><ul><li><p>LT（level trigger）：当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用</p><p>epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。</p></li><li><p>ET（edge trigger）：通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。</p><ul><li>很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。</li><li>只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</li></ul></li></ul></li></ul></li></ul><pre class="line-numbers language-c++"><code class="language-c++">int epoll_create(int size);int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)； int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>应用场景比较<ul><li>select：适用于实时性要求比较高的场景，比如核反应堆的控制；可移植性比较好，几乎被所有主流平台所支持</li><li>poll：没有最大描述符数量限制，如果平台支持且对实时性要求不高，建议用poll而非select</li><li>epoll：运行在Linux平台，且有大量描述符需要同时轮询，并且这些连接最好是长连接时</li></ul></li></ul><h3 id="9-7-6、-java中⼀个字符占多少个字节？int，long，double占多少个字节？"><a href="#9-7-6、-java中⼀个字符占多少个字节？int，long，double占多少个字节？" class="headerlink" title="9.7.6、 java中⼀个字符占多少个字节？int，long，double占多少个字节？"></a>9.7.6、 java中⼀个字符占多少个字节？int，long，double占多少个字节？</h3><ul><li>1字节： byte , boolean</li><li>2字节： short , char</li><li>4字节： int , float</li><li>8字节： long , double</li></ul><h3 id="9-7-7、创建⼀个类的实例都有哪些⽅法？"><a href="#9-7-7、创建⼀个类的实例都有哪些⽅法？" class="headerlink" title="9.7.7、创建⼀个类的实例都有哪些⽅法？"></a>9.7.7、创建⼀个类的实例都有哪些⽅法？</h3><pre class="line-numbers language-java"><code class="language-java">Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Object o <span class="token operator">=</span> oo<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object o <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-7-8、final-finaly-finalize区别？"><a href="#9-7-8、final-finaly-finalize区别？" class="headerlink" title="9.7.8、final/finaly/finalize区别？"></a>9.7.8、final/finaly/finalize区别？</h3><ul><li><p>final是定义类、⽅法、字段的修饰符，表示<strong>类不可被继承，⽅法不能被重写，字段值不能被修改</strong></p></li><li><p>finally是异常处理机制的关键字，表示最后一定会执⾏的操作</p></li><li><p>finalize是Object的⼀个⽅法，在对象被虚拟机回收时会判断是否执⾏该⽅法，当对象没有覆盖finalize⽅法，或者finalize⽅法已经被虚拟机调⽤过，虚拟机<strong>将这两种情况都视为“没有必要执⾏”</strong></p></li></ul><h3 id="9-7-9、String-StringBuffer-StringBuilder的区别以及实现？"><a href="#9-7-9、String-StringBuffer-StringBuilder的区别以及实现？" class="headerlink" title="9.7.9、String/StringBuffer/StringBuilder的区别以及实现？"></a>9.7.9、String/StringBuffer/StringBuilder的区别以及实现？</h3><p>重排序情况：编译器优化的重排序、指令并行重排序，内存系统重排序。</p><p>​    在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。</p><p>​    1. <em><strong>*如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。*</strong></em></p><p>​    2. 两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行。<em><strong>*如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。*</strong></em></p><p>​    规则八种：程序次序规则（****在一个线程内一段代码的执行结果是有序的****。就是还会指令重排，但是随便它怎么排，结果是按照我们代码的顺序生成的不会变！）、锁定规则、volatile变量规则、传递规则、线程启动规则、线程中断规则、线程终结规则、对象终结规则。</p><p>ArrayList 和 LinkedList 区别？三种方式访问集合中的元素，ArrayList遍历删除会出的问题？Foreach原理以及Fail-fast机制！</p><p>为什么会出现 4.0-3.6=0.40000001 这种现象？</p><p>为什么HashMap长度大于8才转换为红黑树，而不是6？</p><p>HashMap和TreeMap比较？</p><p>任务缓存队列及排队策略，如何自定义拒绝策略？</p><p>配置线程池大小，根据CPU密集和IO密集划分</p><p>阻塞队列以及生产者消费者的实现</p><p>设计模式的单例和工厂是面得最多的</p><p>为什么需要破坏双亲委派？自己写个String能加载吗？类初始化时机？</p><p>JVM调优</p><p>Redis 的缺点？</p><p>Redis的并发竞争问题如何解决？</p><p>集群是如何判断是否有某个节点挂掉？集群进入fail状态的必要条件？</p><p>减库存然后下订单，但是服务器宕机？</p><p>负载均衡实现方式，策略？</p><p>单拎出来的缓存问题，结合状态码 304 可能问到，相关头字段，<em><strong>*If-Modified-Since 和 Last-Modified，If-None-Match 和 ETag，它们的区别等；*</strong></em></p><p>有序性的先行发生原则（happens-before）。</p><p>虚引用有哪些应用场景</p><p>介绍下JDBC的过程</p><p>JDBC的Statement对象有哪几类</p><h2 id="9-8、多态的实现原理"><a href="#9-8、多态的实现原理" class="headerlink" title="9.8、多态的实现原理"></a>9.8、多态的实现原理</h2><p>​    多态是指一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>​    Java多态允许父类引用变量指向子类对象，引用变量发出的方法调用到底是哪个对象实现的方法，必须在由程序运行期间才能决定。java中的方法调用有静态绑定和动态绑定之分，静态绑定指的是我们在编译期就已经确定了会执行那个方法的字节码，而动态绑定只有在运行时才能知晓。Java中的静态方法、私有方法以及final修饰的方法的调用，都属于静态绑定，对于重载的实例方法的调用，也是采用静态绑定。方法调用动作会被编译成静态调用指令，该指令对应常量池中方法的符号引用。</p><p>​    Java 对于方法调用动态绑定的实现主要依赖于****方法表*<em><strong>，但通过</strong></em>*类引用调用和接口引用调用*<em><strong>的实现则有所不同。总体而言，当某个方法被调用时，JVM 首先要查找相应的</strong></em>*常量池*<em><strong>，得到</strong></em>*方法的符号引用*<em><strong>，并查找调用类的方法表以确定该</strong></em>*方法的直接引用****，最后才真正调用该方法。以下分别对该过程中涉及到的相关部分做详细介绍。</p><p>​    动态绑定：JVM有个方法表：记录当前类以及所有父类的可见方法字节码在内存中的直接地址。</p><h2 id="9-9、异常体系"><a href="#9-9、异常体系" class="headerlink" title="9.9、异常体系"></a>9.9、异常体系</h2><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210528111300708.png" alt="image-20210528111300708"></p><p>​    Java语言设计者将异常划分为两类：<strong>Error和Exception</strong></p><ul><li><p>Error（错误）：是程序中无法处理的错误，表示运行应用程序中出现了严重的错误。此类错误一般表示代码运行时<strong>JVM出现问题</strong>。通常有Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）<strong>StackOverflowError，OutOfMemoryError</strong>等。</p></li><li><p>Exception（异常）：程序本身可以捕获并且可以处理的异常</p><ul><li>​    运行时异常(<strong>免检异常</strong>)：RuntimeException类极其子类表示JVM在运行期间可能出现的错误。比如空指针异常<strong>NullPointerException</strong>、数组下标越界（<strong>ArrayIndexOutBoundException</strong>）。此类异常属于不可查异常，一般是由<strong>ClassCastException</strong>、<strong>llegalArgumentException</strong>。</li><li>​    编译异常(<strong>受检异常</strong>)：Exception中除RuntimeException极其子类之外的异常。如果程序中出现此类异常，比如说<strong>IOException，必须对该异常进行处理，否则编译不通过。</strong>在程序中，通常不会自定义该类异常，而是直接使用系统提供的异常类。<strong>ClassNotFoundException</strong>，<strong>InterruptedException</strong>、SQLException。</li></ul></li></ul><h2 id="9-10、排序：快速，归并，堆排序"><a href="#9-10、排序：快速，归并，堆排序" class="headerlink" title="9.10、排序：快速，归并，堆排序"></a>9.10、排序：快速，归并，堆排序</h2><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps5.jpg" alt="img"> </p><p>  //快速排序,快速排序是不稳定的，其时间平均时间复杂度是O(nlgn)。</p><p>  // 快速排序、堆排序、希尔排序等时间性能较好的排序方法都是不稳定的。稳定性需要根据具体需求选择。</p><p>  // 先从序列中取出一个数作为基准数；先选择数组的最左边;</p><p>  //分区过程：将把这个数大的数全部放到它的右边，小于或者等于它的数全放到它的左边；</p><p>  //递归地对左右子序列进行不走2，直到各区间只有一个数</p><p>  private  static void quickStart(int[] arr,int left, int right){</p><p>​    if(arr == null || left &gt;= right || arr.length &lt; 1)</p><p>​    return;</p><p>​    int mid = partition(arr,left,right);</p><p>​    quickStart(arr,left,mid-1);</p><p>​    quickStart(arr,mid+1,right);</p><p>  }</p><p>  private static int partition(int[] arr, int left, int right){</p><p>​    int pivotKey = arr[left];</p><p>​    while(left &lt; right) {</p><p>​      while(left &lt; right &amp;&amp; arr[right] &gt;= pivotKey)</p><p>​        right –;</p><p>​      arr[left] = arr[right]; //把小的移动到左边</p><p>​      while(left &lt; right &amp;&amp; arr[left] &lt;= pivotKey)</p><p>​        left ++;</p><p>​      arr[right] = arr[left]; //把大的移动到右边</p><p>​    }</p><p>​    arr[left] = pivotKey; //最后把pivot赋值到中间</p><p>​    return left;</p><p>  }</p><p>  private static void swap1(int[] arr, int left, int rihgt){</p><p>​    int temp = arr[left];</p><p>​    arr[left] = arr[rihgt];</p><p>​    arr[rihgt] = temp;</p><p>  }</p><p>  //归并排序：</p><p>  //二路归并排序，让数组分成2组，然后递归多分几组，知道每组只有一个，然后对每2有序小组进行排序合并。</p><p>  //归时，要创建新数组，暂存结果</p><p>  public static int[] sortMerge(int[] array,int left,int right){</p><p>​    int mid = left + (right-left)/2;</p><p>​    if (left &lt; right){</p><p>​      sortMerge(array,left,mid);</p><p>​      sortMerge(array,mid+1,right);</p><p>​      merge(array,left,mid,right);</p><p>​    }</p><p>​    return array;</p><p>  }</p><p>  //将有序的left-mid和mid+1 — right这两个有序数组排序;</p><p>  public static void merge(int[] array,int left,int mid,int right){</p><p>​    //String s = “sdd”;</p><p>​    //s.indexOf()</p><p>​    int[] temp = new int[right-left+1];</p><p>​    int i = left;</p><p>​    int j = mid +1;</p><p>​    int k = 0;</p><p>​      while (i&lt;=mid &amp;&amp; j &lt;= right){</p><p>​        if (array[i] &lt; array[j])</p><p>​          temp[k++] = array[i++];</p><p>​        else</p><p>​          temp[k++] = array[j++];</p><p>​    }</p><p>​    while (i &lt;= mid)</p><p>​      temp[k++] = array[i++];</p><p>​    while (j&lt;=right)</p><p>​      temp[k++] = array[j++];</p><p>​    for(int x=0;x&lt;temp.length;x++){</p><p>​      array[x+left] = temp[x];</p><p>​    }</p><p>  }</p><h2 id="9-11、序列化和反序列化"><a href="#9-11、序列化和反序列化" class="headerlink" title="9.11、序列化和反序列化"></a>9.11、序列化和反序列化</h2><p>​    java序列化是指把java对象转换为字节序列的过程，而java反序列化是指把字节序列恢复为java对象的过程。</p><p>​    序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。反序列化：客户端从文件中或网络上获得序列化后的对象字节流后，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</p><p>​    （利用序列化实现远程通信，可以在网络上传送对象的字节序列。在进程间传递对象，永久性保存对象）</p><p>—-JDK类库中序列化的步骤 ：只有实现了Serializable或Externalizable接口的对象才能被序列化，否则抛出异常！</p><p>如果类a仅仅实现了Serializable接口，则</p><p>ObjectOutputStream采用默认的序列化方式，对a对象的非transient实例变量进行序列化</p><p>ObjectInputStream采用默认的反序列化方式，对a对象的非transient实例变量进行反序列化</p><p>反序列化失败: 没有添加 serialVersionUID 可能会导致反序列化失败.</p><p>继承了一个已经实现序列化接口的父类,并且与父类有重复的属性,在反序列化的时候就会导致重复的属性数据丢失.</p><p>–1–创建一个对象输出流，它可以包装一个奇特类型的目标输出流，如文件输出流：</p><p>objectOutputStream oos=new objectOutputStream(new FileOutStream(c:\object.out));</p><p>–2–通过对象输出流writeObject()方法写对象：</p><p>oos.writeObject(new a(“xiaoxiao”,”145263”,”female”));</p><p>—-JDK类库中反序列化的步骤</p><p>–1–创建一个对象输入流，它可以包装一个其他类型输入流，如文件输入流：</p><p>objectInputStream ois=new ObjectInputStream(new FileInputStream(“object.out”));</p><p>–2–通过对象输出流的readObject()方法读取对象：</p><p>a aa=(a)ois.readObject();</p><p>–3–为了正确读数据，完成反序列化，必须保证向对象输出流写对象的顺序与从对象输入流中读对象的顺序一致</p><h2 id="9-12、int和Integer有什么区别"><a href="#9-12、int和Integer有什么区别" class="headerlink" title="9.12、int和Integer有什么区别"></a>9.12、int和Integer有什么区别</h2><p>​    为了编程方法， Java有八大基本数据类型。又为了能将这些基本数据类型当做对象处理，又为每个基本数据类型引入了对应的包装类型。JDK1.5之后，引入自动拆箱机制，基本数据类型和包装类可以互换。</p><p>​    Integer是int的包装类，必须实例化为才能使用，Integer变量实际是对象的引用，指向对象，默认值为null;</p><p>​    int是基本数据类型,不必实例化就能用，它直接存数据值，默认是0.</p><p>​    Integer变量和int变量比较时，只要两个变量的值是向等的，则结果为true。因为自动拆箱。</p><p>​    非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。</p><p>​    对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false。</p><p>​    <em><strong>*Integer缓存池大小：-128 —-127*</strong></em></p><h2 id="9-13、Java语言有哪些特点"><a href="#9-13、Java语言有哪些特点" class="headerlink" title="9.13、Java语言有哪些特点"></a>9.13、Java语言有哪些特点</h2><p>1、简单易学、有丰富的类库</p><p>2、面向对象（Java最重要的特性，让程序耦合度更低，内聚性更高）</p><p>3、与平台无关性（JVM是Java跨平台使用的根本）</p><p>4、可靠安全</p><p>5、支持多线程</p><h2 id="9-14、为什么Java是跨平台的、C语言却不是？"><a href="#9-14、为什么Java是跨平台的、C语言却不是？" class="headerlink" title="9.14、为什么Java是跨平台的、C语言却不是？"></a>9.14、为什么Java是跨平台的、C语言却不是？</h2><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps6.png" alt="img"> </p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps7.png" alt="img"> </p><p>第一，C语言是编译执行的，编译器与平台相关，编译生成的可执行文件与平台相关；</p><p>第二，Java是解释执行的，编译为中间码的编译器与平台无关，编译生成的中间码也与平台无关（一次编译，到处运行），中间码再由解释器解释执行，解释器是与平台相关的，也就是不同的平台需要不同的解释器.</p><h2 id="9-15、Java和C语言的区别在哪里？"><a href="#9-15、Java和C语言的区别在哪里？" class="headerlink" title="9.15、Java和C语言的区别在哪里？"></a>9.15、Java和C语言的区别在哪里？</h2><p> C是面向过程的，执行效率高;Java是面向对象的语言，执行效率比C语言低。</p><p> C语言最关键的是比Java多了指针，这也说明了Java的健壮性，还有Java的多线程机制使程序可以并行运行，Java程序多用于网络。</p><p> C的安全性不如Java，C没有Java的垃圾回收机制，申请的空间要手动释放。</p><p> Java的通用性好，可以跨平台直接移植，有安装Java虚拟机(JVM)就可以了，但是速度没有c语言快。</p><p> C比Java更“底层”，因此可以用C编写例如硬件的驱动，而Java却不行。</p><p> 在C语言中，char类型占一个字节，在Java中char类型占2个字节。</p><p> Java中可以将类组织起来用Package打包，而C语言没有。Java有public、private、protected权限管理，C没有。</p><h2 id="9-16、面向对象和面向过程的区别"><a href="#9-16、面向对象和面向过程的区别" class="headerlink" title="9.16、面向对象和面向过程的区别"></a>9.16、面向对象和面向过程的区别</h2><p><strong>面向过程：</strong>是分析解决问题的步骤，然后用函数把这些步骤一步一步地实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发</p><p><strong>面向对象：</strong>是把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。 但是性能上来说，比面向过程要低</p><h2 id="9-17、面向对象有啥好处？"><a href="#9-17、面向对象有啥好处？" class="headerlink" title="9.17、面向对象有啥好处？"></a>9.17、面向对象有啥好处？</h2><p><strong>可维护：</strong>采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的。</p><p><strong>可复用：</strong>代码复用，在设计时，可重用现有的，在以前的项目的领域中已被测试过的类使系统满足业务需求并具有较高的质量。</p><p><strong>可扩展：</strong>由于继承、封装、多态的特性，自然设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展</p><p><strong>灵活性好：</strong>数据和方法（方法可以理解为函数）被封装在一起，这样做改动的时候对整个程序的影响不大。</p><h2 id="9-18、JDK、JRE、JVM的区别"><a href="#9-18、JDK、JRE、JVM的区别" class="headerlink" title="9.18、JDK、JRE、JVM的区别"></a>9.18、JDK、JRE、JVM的区别</h2><p>JDK是 Java 语言的软件开发工具包(SDK)。在JDK的安装目录下有一个jre目录，jre是java运行时环境，有两个文件夹bin和lib，可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib合起来就称为jre。</p><p>利用JDK（调用JAVA API）开发了JAVA程序后，通过JDK中的编译程序（javac.exe）将我们的文本java文件编译成JAVA字节码，在JRE上运行这些JAVA字节码，JVM解析这些字节码，映射到CPU指令集或OS的系统调用。</p><h3 id="1、JDK：开发，运行-编译"><a href="#1、JDK：开发，运行-编译" class="headerlink" title="*1、JDK：开发，运行+编译*"></a><em><strong>*1、JDK：开发，运行+编译*</strong></em></h3><p>JDK是整个JAVA的核心，包括了Java运行环境（Java Runtime Envirnment），一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar）。</p><p>包含了几个重要的文件夹：</p><p>bin:最主要的是编译器(javac.exe)</p><p>   include:java和JVM交互用的头文件</p><p>   lib：类库</p><p>   jre:java运行环境</p><h3 id="2、JRE：运行，不能编译"><a href="#2、JRE：运行，不能编译" class="headerlink" title="*2、JRE：运行，不能编译*"></a><em><strong>*2、JRE：运行，不能编译*</strong></em></h3><p>JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）</p><p>光有JVM还不能完成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib。（jre里有运行.class的java.exe）</p><h3 id="3、JVM：解释字节码为机器指令"><a href="#3、JVM：解释字节码为机器指令" class="headerlink" title="*3、JVM：解释字节码为机器指令*"></a><em><strong>*3、JVM：解释字节码为机器指令*</strong></em></h3><p>Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。</p><h2 id="9-19、面向对象4大特性：抽象、封装、继承、多态"><a href="#9-19、面向对象4大特性：抽象、封装、继承、多态" class="headerlink" title="9.19、面向对象4大特性：抽象、封装、继承、多态"></a>9.19、面向对象4大特性：抽象、封装、继承、多态</h2><h3 id="1-、抽象："><a href="#1-、抽象：" class="headerlink" title="*1*****、抽象：****"></a><em><strong>*1*</strong>***</em>*、抽象：****</h3><p>抽象是将一类对象的共同特征总结出来构造类的过程,包括数据抽象和行为抽象两方面,抽象只关注对象的哪些属性和行为,并不关注这此行为的细节是什么</p><h3 id="2、封装："><a href="#2、封装：" class="headerlink" title="*2、封装：*"></a><em><strong>*2、封装：*</strong></em></h3><p>利用抽象数据类型将<strong>数据和基于数据的操作</strong>封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外的接口使其与外部发生联系。用户无需关心对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点：</p><p>· 减少耦合：可以独立地开发、测试、优化、使用、理解和修改</p><p>· 减轻维护的负担：可以更容易被理解，并且在调试的时候可以不影响其他模块</p><p>· 有效地调节性能：可以通过剖析来确定哪些模块影响了系统的性能</p><p>· 提高软件的可重用性</p><p>· 降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</p><p>以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。</p><p>注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。</p><p>public class Person {   private String name;  private int gender;  private int age;   public String getName() {    return name;  }   public String getGender() {    return gender == 0 ? “man” : “woman”;  }   public void work() {    if (18 &lt;= age &amp;&amp; age &lt;= 50) {      System.out.println(name + “ is working very hard!”);    } else {      System.out.println(name + “ can’t work any more!”);    }  }}</p><h3 id="3、继承："><a href="#3、继承：" class="headerlink" title="*3、继承：*"></a><em><strong>*3、继承：*</strong></em></h3><p>继承实现了 IS-A 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p><p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p><p>3.1 原则：</p><p>、子类拥有父类非private的属性和方法。</p><p>、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p><p>、子类可以用自己的方式实现父类的方法。</p><p>3.2 向上转型：</p><p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 <strong>向上转型</strong> 。</p><p>Animal animal = new Cat();</p><p>3.3继承的缺点：</p><p>、父类变，子类就必须变。</p><p>、继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。</p><p>、继承是一种强耦合关系。</p><p>那么到底要不要使用继承呢？《Think in java》中提供了解决办法：问一问自己<strong>是否需要从子类向父类进行向上转型</strong>。如果必须向上转型，则继承是必要的，但是如果不需要，则应当好好考虑自己是否需要继承。</p><p>3.4 构造器：</p><p>对于构造器而言，它只能够被调用，而不能被继承。父类有默认构造器的话，编译器会默认给子类调用父类的构造器，如果父类没有默认构造器，我们就要必须显示的使用super()来调用父类构造器，而且必须是在子类构造器中的第一行代码中，否则编译器会报错：无法找到符合父类形式的构造器。</p><p>3.5 protected关键字：</p><p>对于protected而言，它指明就类用户而言，他是private，但是对于任何继承与此类的子类而言或者其他任何位于同一个包的类而言，他却是可以访问的。</p><h3 id="4、多态："><a href="#4、多态：" class="headerlink" title="*4、多态：*"></a><em><strong>*4、多态：*</strong></em></h3><p>4.1、定义：不同类的对象对同一消息作出不同的响应叫做多态</p><p>4.2、多态的分类：</p><p>编译时多态，方法的重载；</p><p>运行时多态，方法的重写。</p><p>4.3、运行时多态存在的三个条件：</p><p>有继承关系、子类重写了父类方法、父类引用指向子类对象（向上转型）</p><p>4.4、注意：</p><p>因为多态存在必须要有“子类重写父类方法”这个条件，那么下面三种类型的方法没办法表现出多态的特性(因为不能被重写)</p><p>static方法：static修饰的方法是属于类的，而不属于实例</p><p>final方法：因为被final修饰的方法无法被子类重写</p><p>private方法：被private修饰的发那个法对子类不可见，</p><p>protected方法：被protected修饰的方法可以被子类见到，也可以被重写，但无法被外部所引用，无法引用，就没有多态</p><p>4.5、分析多态问题的几条原则</p><p>比如有一个父类Father,有一个子类Children</p><p>（1）向上转型是自动的。Father f=new Children()是自动的，不需要强转</p><p>（2）向下转型要强转。即Children c=new Father()是无法编译通过的，必须要Children c=(Children)new Father(),让父类知道它要转成具体哪个子类</p><p>（3）父类引用指向子类对象，子类重写了父类的方法，调用父类的方法，实际调用的是子类重写了父类的该方法。即Father f=new Children()；f.toString()；实际上调用的是Children中的toString()方法</p><h2 id="9-20、C-和Java中的多态有什么区别"><a href="#9-20、C-和Java中的多态有什么区别" class="headerlink" title="9.20、C++和Java中的多态有什么区别"></a>9.20、C++和Java中的多态有什么区别</h2><p>1、在构造函数时Java会发生多态，即使子类此时还没有构造完全。而C++则不会发生多态，待父类构造完全，再构造子类。初始化的过程也不相同。java在还未初始化子类的时候，子类的同名函数就已经覆盖了父类的。</p><p>2、java中的类对象在构造前（调用构造函数之前）就已经存在了，其函数表和对象类型也已经确定了，没出生就确定。而C++中只有在构造完毕后（所有的构造函数都被成功调用）才存在，其函数表和对象的实际类型才会确定。</p><p>3、C++中，如果父类中的函数前边标有virtual，才显现出多态。Java中，不管写不写virtual都是多态的，子类的同名函数会override父类的。</p><h2 id="9-21、面向对象设计的类图"><a href="#9-21、面向对象设计的类图" class="headerlink" title="9.21、面向对象设计的类图"></a>9.21、面向对象设计的类图</h2><h3 id="1、泛化关系-Generalization"><a href="#1、泛化关系-Generalization" class="headerlink" title="*1、泛化关系 (Generalization)*"></a><em><strong>*1、泛化关系 (Generalization)*</strong></em></h3><p>用来描述继承关系，在 Java 中使用 extends 关键字。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps8.jpg" alt="img"> </p><h3 id="2、实现关系-Realization"><a href="#2、实现关系-Realization" class="headerlink" title="*2、实现关系 (Realization)*"></a><em><strong>*2、实现关系 (Realization)*</strong></em></h3><p>用来实现一个接口，在 Java 中使用 implements 关键字。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps9.jpg" alt="img"> </p><h3 id="3、聚合关系-Aggregation"><a href="#3、聚合关系-Aggregation" class="headerlink" title="*3、聚合关系 (Aggregation)*"></a><em><strong>*3、聚合关系 (Aggregation)*</strong></em></h3><p>表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps10.jpg" alt="img"> </p><h3 id="4、组合关系-Composition"><a href="#4、组合关系-Composition" class="headerlink" title="*4、组合关系 (Composition)*"></a><em><strong>*4、组合关系 (Composition)*</strong></em></h3><p>和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps11.jpg" alt="img"> </p><h3 id="5、关联关系-Association"><a href="#5、关联关系-Association" class="headerlink" title="*5、关联关系 (Association)*"></a><em><strong>*5、关联关系 (Association)*</strong></em></h3><p>表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps12.jpg" alt="img"> </p><h3 id="6、依赖关系-Dependency"><a href="#6、依赖关系-Dependency" class="headerlink" title="*6、依赖关系 (Dependency)*"></a><em><strong>*6、依赖关系 (Dependency)*</strong></em></h3><p>和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式：</p><p>A 类是 B 类方法的局部变量；</p><p>A 类是 B 类方法的参数；</p><p>A 类向 B 类发送消息，从而影响 B 类发生变化。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps13.jpg" alt="img"> </p><h2 id="9-22、面向对象的设计原则"><a href="#9-22、面向对象的设计原则" class="headerlink" title="9.22、面向对象的设计原则"></a>9.22、面向对象的设计原则</h2><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps14.jpg" alt="img"> </p><h3 id="1-单一责任原则"><a href="#1-单一责任原则" class="headerlink" title="*1. 单一责任原则*"></a><em><strong>*1. 单一责任原则*</strong></em></h3><p>修改一个类的原因应该只有一个。</p><p>换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。</p><h3 id="2-开放封闭原则"><a href="#2-开放封闭原则" class="headerlink" title="*2. 开放封闭原则*"></a><em><strong>*2. 开放封闭原则*</strong></em></h3><p>类应该对扩展开放，对修改关闭。</p><p>扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。</p><p>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</p><h3 id="3-里氏替换原则"><a href="#3-里氏替换原则" class="headerlink" title="*3. 里氏替换原则*"></a><em><strong>*3. 里氏替换原则*</strong></em></h3><p>子类对象必须能够替换掉所有父类对象。</p><p>继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。</p><p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度。</p><h3 id="4-接口分离原则"><a href="#4-接口分离原则" class="headerlink" title="*4. 接口分离原则*"></a><em><strong>*4. 接口分离原则*</strong></em></h3><p>不应该强迫客户依赖于它们不用的方法。</p><p>因此使用多个专门的接口比使用单一的总接口要好。</p><h3 id="5-依赖倒置原则"><a href="#5-依赖倒置原则" class="headerlink" title="*5. 依赖倒置原则*"></a><em><strong>*5. 依赖倒置原则*</strong></em></h3><p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p><p>高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p><p>依赖于抽象意味着：</p><p>· 任何变量都不应该持有一个指向具体类的指针或者引用；</p><p>· 任何类都不应该从具体类派生；</p><p>· 任何方法都不应该覆写它的任何基类中的已经实现的方法。</p><h3 id="6、其它常见原则"><a href="#6、其它常见原则" class="headerlink" title="*6、其它常见原则*"></a><em><strong>*6、其它常见原则*</strong></em></h3><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps15.jpg" alt="img"> </p><h2 id="9-23、基本数据类型"><a href="#9-23、基本数据类型" class="headerlink" title="9.23、基本数据类型"></a>9.23、基本数据类型</h2><p>32位系统：char是1字节，short是2字节，int、float、long 占4字节，double占8字节</p><p>64位：char是1字节，short是2字节，int、float占4字节，double、long占8字节</p><h2 id="9-24、final，finally，finalize关键字"><a href="#9-24、final，finally，finalize关键字" class="headerlink" title="9.24、final，finally，finalize关键字"></a>9.24、final，finally，finalize关键字</h2><p><strong>F****inal：</strong></p><p>1、final用于修饰类、成员变量和成员方法。</p><p>2、final修饰的类，不能被继承（String、StringBuilder、StringBuffer、Math，不可变类），其中所有的方法都不能被重写(这里需要注意的是<strong>不能被重写</strong>，但是<strong>可以被重载</strong>，这里很多人会弄混)，所以不能同时用abstract和final修饰类（abstract修饰的类是抽象类，抽象类是用于被子类继承的，和final起相反的作用）；</p><p>3、final修饰的方法不能被重写，但是子类可以用父类中final修饰的方法；</p><p>4、final修饰的成员变量是不可变的，如果成员变量是基本数据类型，初始化之后成员变量的值不能被改变，如果成员变量是引用类型，那么它只能指向初始化时指向的那个对象，不能再指向别的对象，但是对象当中的内容是允许改变的。</p><p>5、final关键字的好处：</p><p>final方法比非final快一些</p><p>final关键字提高了性能。JVM和Java应用都会缓存final变量。</p><p>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</p><p>使用final关键字，JVM会对方法、变量及类进行优化。</p><p><strong>Finally:</strong></p><p>通常和try catch搭配使用，保证不管有没有发生异常，资源都能够被释放（释放连接、关闭IO流）。当try中有return时执行顺序：return语句并不是函数的最终出口，如果有finally语句，这在return之后还会执行finally（return的值会暂存在栈里面，等待finally执行后再返回）</p><p><strong>Finalize：</strong></p><p>Finalize是object类中的一个方法，子类可以重写finalize()方法实现对资源的回收。垃圾回收只负责回收内存，并不负责资源的回收，资源回收要由程序员完成，Java虚拟机在垃圾回收之前会先调用垃圾对象的finalize方法用于使对象释放资源（如关闭连接、关闭文件），之后才进行垃圾回收，这个方法一般不会显示的调用，在垃圾回收时垃圾回收器会主动调用。</p><h2 id="9-25、System-out-print-中的三个参数分别是什么类型"><a href="#9-25、System-out-print-中的三个参数分别是什么类型" class="headerlink" title="9.25、System.out.print()中的三个参数分别是什么类型"></a>9.25、System.out.print()中的三个参数分别是什么类型</h2><h3 id="1、源码探究："><a href="#1、源码探究：" class="headerlink" title="*1、源码探究：*"></a><em><strong>*1、源码探究：*</strong></em></h3><p>System：是Java.lang包中的一个类，自动导入，不用import；</p><p>out：是System的一个成员变量，用static修饰的，可用System类名直接调用</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps16.jpg" alt="img"> </p><p>out的类型是引用数据类型中的PrintStream，所以out可以使用PrintStream中的println( )方法；</p><p>println()：并不是System类中的一个方法，而是PrintStream中的一个成员方法。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps17.jpg" alt="img"> <img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps18.jpg" alt="img"> <img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps19.jpg" alt="img"></p><p>总结就是：System类中静态的、且为PrintStream类型的字段out去调用了PrintStream类中的print( )和println( )两个方法也就有了System.out.println( )形式的输出语句。</p><h3 id="2、为什么不直接使用PrintStream，而要用System-out呢"><a href="#2、为什么不直接使用PrintStream，而要用System-out呢" class="headerlink" title="*2、为什么不直接使用PrintStream，而要用System.out呢*"></a><em><strong>*2、为什么不直接使用PrintStream，而要用System.out呢*</strong></em></h3><p>PrintStream类并没有无参构造，而其有参构造函数不是要流，就是要File文件，想要直接通过new一个PrintStream类的方式来创建实例，将变得非常麻烦。因此，通过System.out获取一个PrintStream实例的方式才会成为实际使用的。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps20.jpg" alt="img"> </p><h3 id="3、为什么println-和print-这两个方法什么数据类型都可以输出"><a href="#3、为什么println-和print-这两个方法什么数据类型都可以输出" class="headerlink" title="*3、为什么println( )和print( )这两个方法什么数据类型都可以输出*"></a><em><strong>*3、为什么println( )和print( )这两个方法什么数据类型都可以输出*</strong></em></h3><p>因为在PrintStream类中重载了 Println( )方法，包含了相关的数据类型。</p><h3 id="4、-System-out-println-的意思"><a href="#4、-System-out-println-的意思" class="headerlink" title="*4、*****System.out::println*****的意思*"></a><em><strong>*4、*</strong>***</em>*System.out::println****<em><strong>*的意思*</strong></em></h3><p>函数式编程：可以使用“函数式接口 变量名 = 类实例::方法名” 的方式对该方法进行引用，System.out::println其实是Consumer<T>接口的一个实现方式</p><p>eg1：</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps21.jpg" alt="img"> </p><p>eg2：</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps22.jpg" alt="img"><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps23.jpg" alt="img">  <img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps24.jpg" alt="img"></p><p>重点：</p><p> System.out是一个PrintStream实例的引用；System.out::println 是对一个实例方法的引用。该引用同时指定了对实例（System.out）的引用以及对方法（PrintStream::println）的引用</p><p> System.out::println不是 System.out.println 的等价物；前者是一个方法引用表达式，而后者不能单独作为一个表达式，而必须在后面跟上由圆括号包围的参数列表来构成方法调用表达式。</p><p> System.out::println 可以看作 lambda表达式 e -&gt; System.out.println(e) 的缩写形式。</p><h2 id="9-26、泛型"><a href="#9-26、泛型" class="headerlink" title="9.26、泛型"></a>9.26、泛型</h2><h3 id="1、定义：“泛型”意味着编写的代码可以被不同类型的对象所重用。"><a href="#1、定义：“泛型”意味着编写的代码可以被不同类型的对象所重用。" class="headerlink" title="*1、定义：“泛型”意味着编写的代码可以被不同类型的对象所重用。*"></a><em><strong>*1、定义：“泛型”意味着编写的代码可以被不同类型的对象所重用。*</strong></em></h3><p>泛型，即“参数化类型”。顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。</p><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p><h3 id="2、作用域"><a href="#2、作用域" class="headerlink" title="*2、作用域*"></a><em><strong>*2、作用域*</strong></em></h3><p>泛型只在编译阶段有效，泛型信息不会进入到运行时阶段。</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps25.jpg" alt="img"> </p><p>在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。</p><p>对此总结成一句话：<strong>泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</strong></p><h3 id="3、泛型的使用"><a href="#3、泛型的使用" class="headerlink" title="*3、泛型的使用*"></a><em><strong>*3、泛型的使用*</strong></em></h3><p><strong>3**</strong>.1**<strong>泛型类</strong></p><p>泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。</p><p>//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型//在实例化泛型类时，必须指定T的具体类型public class Generic<T>{   //key这个成员变量的类型为T,T的类型由外部指定    private T key;  public Generic(T key) { //泛型构造方法形参key的类型也为T，T的类型由外部指定    this.key = key;  }  public T getKey(){ //泛型方法getKey的返回值类型为T，T的类型由外部指定    return key;  }}</p><p><strong>3.2泛型接口</strong></p><p>泛型接口常被用在各种类的生产器中</p><p>//定义一个泛型接口public interface Generator<T> {  public T next();}</p><p><strong>3.3泛型方法</strong></p><p>泛型方法，是在调用方法的时候指明泛型的具体类型 。</p><p>/** * 泛型方法的基本介绍 * @param tClass 传入的泛型实参 * @return T 返回值为T类型 * 说明： *   1）public 与 返回值中间<T>非常重要，可以理解为声明此方法为泛型方法。 *   2）只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。 *   3）<T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。 *   4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。 */public <T> T genericMethod(Class<T> tClass)throws InstantiationException , IllegalAccessException{    T instance = tClass.newInstance();    return instance;}</p><h3 id="4、泛型的好处"><a href="#4、泛型的好处" class="headerlink" title="*4、泛型的好处*"></a><em><strong>*4、泛型的好处*</strong></em></h3><p> 泛化代码，代码可以更多的重复利用。不必因为添加元素类型的不同而定义不同类型的集合，如整型集合类，浮点型集合类，字符串集合类，我们可以定义一个集合来存放整型、浮点型，字符串型数据；</p><p> 消除强制类型转换。只要把底层存储设置了Object即可，添加的数据全部都可向上转型为Object。 </p><p> 类型安全，提供编译期间的类型检测。</p><p> 性能较高，用GJ(泛型JAVA)编写的代码可以为java编译器和虚拟机带来更多的类型信息，这些信息对java程序做进一步优化提供条件。</p><h3 id="5-、Java的泛型是如何工作的"><a href="#5-、Java的泛型是如何工作的" class="headerlink" title="*5*****、Java的泛型是如何工作的 ?****"></a><em><strong>*5*</strong>***</em>*、Java的泛型是如何工作的 ?****</h3><p>泛型是通过<strong>类型擦除</strong>来实现的，编译器在编译时擦除了所有类型相关的信息，在运行时不存在任何类型相关的信息。例如 List<String>在运行时仅用一个List来表示。这样做的目的，是确保能和Java 5之前的版本开发二进制类库进行兼容。无法在运行时访问到类型参数，因为编译器已经把泛型类型转换成了原始类型</p><h3 id="6-、什么是类型擦除"><a href="#6-、什么是类型擦除" class="headerlink" title="*6*****、什么是类型擦除 ?****"></a><em><strong>*6*</strong>***</em>*、什么是类型擦除 ?****</h3><p>所有类型参数都用他们的限定类型替换：</p><p>比如T-&gt;Object ? extends BaseClass-&gt;BaseClass</p><h3 id="7-、Java中List和原始类型List之间的区别"><a href="#7-、Java中List和原始类型List之间的区别" class="headerlink" title="*7*****、Java中List和原始类型List之间的区别?****"></a><em><strong>*7*</strong>***</em>*、Java中List<Object>和原始类型List之间的区别?****</h3><p>在编译时编译器不会对原始类型进行类型安全检查，却会对带参数的类型进行检查，通过使用Object作为类型，可以告知编译器该方法可以接受任何类型的对象，比如String或Integer。</p><p>它们之间的第二点区别是，你可以把任何带参数的类型传递给原始类型List，但却不能把List<String>传递给接受 List<Object>的方法，因为会产生编译错误。</p><h3 id="8、你可以把List传递给一个接受List参数的方法吗？"><a href="#8、你可以把List传递给一个接受List参数的方法吗？" class="headerlink" title="*8、你可以把List传递给一个接受List参数的方法吗？*"></a><em><strong>*8、你可以把List<String>传递给一个接受List<Object>参数的方法吗？*</strong></em></h3><p>不可以，会导致编译错误，因为List<Object>可以存储任何类型的对象包括String, Integer等等，而List<String>却只能用来存储String s</p><h3 id="9-、Java中List-lt-gt-和List之间的区别是什么"><a href="#9-、Java中List-lt-gt-和List之间的区别是什么" class="headerlink" title="*9*****、Java中List&lt;?&gt;和List之间的区别是什么?****"></a><em><strong>*9*</strong>***</em>*、Java中List&lt;?&gt;和List<Object>之间的区别是什么?****</h3><p>List<?> 是一个未知类型的List，而List<Object> 其实是任意类型的List。你可以把List<String>, List<Integer>赋值给List<?>，却不能把List<String>赋值给 List<Object>。</p><h3 id="10、泛型类型变量不能是基本数据类型"><a href="#10、泛型类型变量不能是基本数据类型" class="headerlink" title="*10、泛型类型变量不能是基本数据类型*"></a><em><strong>*10、泛型类型变量不能是基本数据类型*</strong></em></h3><p>没有ArrayList<double>，只有ArrayList<Double>。因为当类型擦除后，ArrayList的原始类中的类型变量（T）替换为Object，但Object类型不能存储double值。</p><h3 id="11、-什么是泛型中的限定通配符和非限定通配符"><a href="#11、-什么是泛型中的限定通配符和非限定通配符" class="headerlink" title="*11、*****什么是泛型中的限定通配符和非限定通配符 ?****"></a><em><strong>*11、*</strong>***</em>*什么是泛型中的限定通配符和非限定通配符 ?****</h3><p><strong>限定通配符</strong>对类型进行了限制。有两种限定通配符：</p><p>一种是&lt;? extends T&gt;它通过确保类型必须是T的子类来设定类型的上界，</p><p>另一种是&lt;? super T&gt;它通过确保类型必须是T的父类来设定类型的下界。</p><p>泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。另一方面**<?>表示了非限定通配符**，因为<?>可以用任意类型来替代。</p><h3 id="12-、List-lt-extends-T-gt-和List-lt-super-T-gt-之间有什么区别"><a href="#12-、List-lt-extends-T-gt-和List-lt-super-T-gt-之间有什么区别" class="headerlink" title="*12*****、List&lt;? extends T&gt;和List &lt;? super T&gt;之间有什么区别 ?****"></a><em><strong>*12*</strong>***</em>*、List&lt;? extends T&gt;和List &lt;? super T&gt;之间有什么区别 ?****</h3><p>这两个List的声明都是<strong>限定通配符</strong>的例子，List&lt;? extends T&gt;可以接受任何继承自T的类型的List，而List&lt;? super T&gt;可以接受任何T的父类构成的List。例如List&lt;? extends Number&gt;可以接受List<Integer>或List<Float>。</p><h3 id="1-3-、Array中可以用泛型吗"><a href="#1-3-、Array中可以用泛型吗" class="headerlink" title="*1*****3*****、Array中可以用泛型吗?*"></a><em><strong>*1*</strong>***</em>*3****<em><strong>*、Array中可以用泛型吗?*</strong></em></h3><p>Array事实上<strong>并不支持</strong>泛型，这也是为什么在Effective Java一书中建议使用List来代替Array，因为List可以提供编译期的类型安全保证，而Array却不能。</p><h2 id="9-27、反射相关问题"><a href="#9-27、反射相关问题" class="headerlink" title="9.27、反射相关问题"></a>9.27、反射相关问题</h2><h3 id="1、获取Class对象的方式（3种）"><a href="#1、获取Class对象的方式（3种）" class="headerlink" title="*1、获取Class对象的方式（3种）*"></a><em><strong>*1、获取Class对象的方式（3种）*</strong></em></h3><p>方式一: 通过Object类中的getClass()方法</p><p>Person p = new Person();Class c = p.getClass();</p><p>方式二: 通过 类名.class获取到字节码文件对象（任意数据类型都具备一个class静态属性,看上去要比第一种方式简单）。</p><p>Class c2 = Person.class;</p><p>方式三: 通过Class类中的方法（将类名作为字符串传递给Class类中的静态方法forName即可）。</p><p>Class c3 = Class.forName(“Person”);</p><p><strong>注意：第三种和前两种的区别</strong></p><p>前两种你必须明确Person类型，后面是指定这种类型的字符串就行.这种扩展更强.我不需要知道你的类.我只提供字符串，按照配置文件加载就可以了。</p><h3 id="2-、获取全部构造器方法、公有构造器方法，私有构造器方法，暴力私有、公有私有成员变量"><a href="#2-、获取全部构造器方法、公有构造器方法，私有构造器方法，暴力私有、公有私有成员变量" class="headerlink" title="*2*****、获取全部构造器方法、公有构造器方法，私有构造器方法，暴力私有、公有私有成员变量****"></a><em><strong>*2*</strong>***</em>*、获取全部构造器方法、公有构造器方法，私有构造器方法，暴力私有、公有私有成员变量****</h3><p><strong>公有的带参/不带参</strong></p><p>//1,获取到Class对象        Class c = Class.forName(“cn.itcast_01_Reflect.Person”);//包名.类名        //2,获取指定的构造方法        //public Person()        //Constructor con = c.getConstructor(null);//空参的构造方法        //public Person(String name, int age, String address)        Constructor con = c.getConstructor(String.class, int.class, String.class);        //3,通过构造方法类中Constructor的方法，创建对象        //Object obj = con.newInstance(null);        Object obj = con.newInstance(“小明”, 22, “哈尔滨”);        //显示        System.out.println(obj);</p><p><strong>私有的</strong></p><p>//1,获取到Class对象        Class c = Class.forName(“cn.itcast_01_Reflect.Person”);//包名.类名        //2,获取指定的构造方法        //private Person(String name, int age)        Constructor con = c.getDeclaredConstructor(String.class, int.class);        //3,暴力反射         con.setAccessible(true);//取消 Java 语言访问检查        //4,通过构造方法类中的功能，创建对象        Object obj = con.newInstance(“小明”, 23);        System.out.println(obj);</p><p><strong>成员变量</strong></p><p>//1,获取Class对象        Class c = Class.forName(“cn.itcast_01_Reflect.Person”);        //2，获取构造方法        //public Person(String name)         Constructor con = c.getConstructor(String.class);        //3，通过构造方法，创建对象        Object obj = con.newInstance(“小明”);        //4，获取指定的成员变量        //public String name;        Field nameField = c.getField(“name”);        //public int age;        Field ageField = c.getField(“age”);        //private String address;        Field addressField = c.getDeclaredField(“address”);        addressField.setAccessible(true); //取消 Java 语言访问检查        //5，赋值        ageField.set(obj, 23);        addressField.set(obj, “凯利广场”);        /,6，取值        System.out.println(“name = “+ nameField.get(obj));        System.out.println(“age = “+ ageField.get(obj));        System.out.println(“address = “+ addressField.get(obj));</p><h3 id="3-、一个私有的属性，没有set方法，如何改值-反射获取私有变量并赋值"><a href="#3-、一个私有的属性，没有set方法，如何改值-反射获取私有变量并赋值" class="headerlink" title="*3*****、一个私有的属性，没有set方法，如何改值****  *反射获取私有变量并赋值*"></a><em><strong>*3*</strong>***</em>*、一个私有的属性，没有set方法，如何改值****  <em><strong>*反射获取私有变量并赋值*</strong></em></h3><p>通过反射机制修改类中的私有属性的值</p><p>public class PrivateTest {  private String name = “hello”;  public String getName() {    return name;  }} public class ReflectionTest {public static void main(String[] args) throws Exception {  Class c = Class.forName(“包名.类名”);  Object obj = c.newInstance(); // 通过类名来获取该类的实例化对象    Field field = c.getDeclaredField(“name”); // 获得指定类的属性    field.setAccessible(true);    // 更改私有属性的值    field.set(obj, “world”);    System.out.println(pt.getName());  }}</p><h3 id="4、获取空参成员方法，有参成员方法"><a href="#4、获取空参成员方法，有参成员方法" class="headerlink" title="*4、获取空参成员方法，有参成员方法*"></a><em><strong>*4、获取空参成员方法，有参成员方法*</strong></em></h3><p><strong>公有的</strong></p><p>//1， 获取Class对象        Class c = Class.forName(“cn.itcast_01_Reflect.Person”);        //2,获取构造方法        //public Person(String name, int age, String address){        Constructor con = c.getConstructor(String.class, int.class, String.class);        //3，通过构造方法，创建对象        Object obj = con.newInstance(“小明”, 23, “哈尔滨”);        //4，获取指定的方法        //public void method1()  没有返回值没有参数的方法        //Method m1 = c.getMethod(“method1”, null);        //public String method4(String name)        Method m4 = c.getMethod(“method4”, String.class);        //5，执行找到的方法        //m1.invoke(obj, null);        Object result = m4.invoke(obj, “itcast”);        System.out.println(“result = “ + result);</p><p><strong>私有的</strong></p><p>//1， 获取Class对象        Class c = Class.forName(“cn.itcast_01_Reflect.Person”);        //2,获取构造方法        //public Person(String name, int age, String address){        Constructor con = c.getConstructor(String.class, int.class, String.class);        //3，通过构造方法，创建对象        Object obj = con.newInstance(“小明”, 23, “哈尔滨”);        //4，获取指定的方法        //private void method5(){        Method m5 = c.getDeclaredMethod(“method5”, null);        //5,开启暴力访问        m5.setAccessible(true);        //6，执行找到的方法        m5.invoke(obj, null);</p><h3 id="5、如何向ArrayList-里面添加一个Integer类型的量"><a href="#5、如何向ArrayList-里面添加一个Integer类型的量" class="headerlink" title="*5、如何向ArrayList**********里面添加一个Integer类型的量*"></a><em><strong>*5、如何向ArrayList*</strong>***</em>*<String>****<em><strong>*里面添加一个Integer类型的量*</strong></em></h3><p> <strong>泛型擦除（“伪泛型”）：</strong>编译后的class文件没有泛型</p><p>不对集合类操作，通过反射获取ArrayList类的class文件对象，调用add方法</p><p>public class ReflectionTest {public static void main(String[] args) throws Exception {  ArrayList<String> array = new ArrayList&lt;&gt;();  array.add(“name”);  Class c = array.getClass();  Method method = c.getMethod(“add”, Object.class);  method.invoke(array, 150);  method.invoke(array, 1000);    System.out.println(array);    for (Object obj : array)  // 要用obj类型的来遍历，既有String、Integer      System.out.println(obj);  }}打印结果：[name, 150, 1000]name1501000</p><h3 id="6-、JAVA的newInstance-和new的区别-JAVA反射机制，通过类名来获取该类的实例化对象"><a href="#6-、JAVA的newInstance-和new的区别-JAVA反射机制，通过类名来获取该类的实例化对象" class="headerlink" title="*6*****、JAVA的newInstance()和new的区别(JAVA反射机制，通过类名来获取该类的实例化对象)****"></a><em><strong>*6*</strong>***</em>*、JAVA的newInstance()和new的区别(JAVA反射机制，通过类名来获取该类的实例化对象)****</h3><p>Class c = Class.forName(“包名.类名”);Object obj = c.newInstance(); // 通过类名来获取该类的实例化对象</p><p>从jvm的角度看，我们使用new的时候，这个要new的类可以没有加载；</p><p>但是使用newInstance时候，就必须保证：1、这个类已经加载；2、这个类已经连接了。而完成上面两个步骤的正是class的静态方法forName（）方法，这个静态方法调用了启动类加载器。newInstance实际上是把new这个方式分解为两步。首先调用class的加载方法加载某个类，然后实例化。</p><p>newInstance: 弱类型。低效率。只能调用无参构造。</p><p>new: 强类型。相对高效。能调用任何public构造。</p><p>newInstance()是实现IOC、反射、面对接口编程和依赖倒置等技术方法的必然选择，new只能实现具体类的实例化，不适合于接口编程。</p><h2 id="9-28、Object类的方法"><a href="#9-28、Object类的方法" class="headerlink" title="9.28、Object类的方法"></a>9.28、Object类的方法</h2><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps26.jpg" alt="img"> </p><h3 id="1、Object构造方法"><a href="#1、Object构造方法" class="headerlink" title="*1、Object构造方法*"></a><em><strong>*1、Object构造方法*</strong></em></h3><h3 id="2、-clone"><a href="#2、-clone" class="headerlink" title="*2、*****clone*****()*"></a><em><strong>*2、*</strong>***</em>*clone****<em><strong>*()*</strong></em></h3><p>返回的对象为浅拷贝，clone()方法同样是一个被声明为native的方法，因此，我们知道了clone()方法并不是Java的原生方法，具体的实现是有C/C++完成的。clone函数返回的是一个引用，指向的是新的clone出来的对象，此对象与原对象分别占用不同的堆空间。</p><p>相关问题：</p><p>（1）new 和 clone的区别：</p><p>l clone()不会调用构造方法；new会调用构造方法</p><p>l clone()更快。clone()能快速创建一个已有对象的副本，即创建对象并且将已有对象中所有属性值克隆；new只能在JVM中申请一个空的内存区域，对象的属性值要通过构造方法赋值</p><p>（2）深拷贝和浅拷贝</p><p>l 浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><p>l 实现对象拷贝的类，必须实现Cloneable接口，并覆写clone()方法。</p><p>l 深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝比浅拷贝速度慢且花销较大。</p><p>l 若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</p><h3 id="3、-getClass"><a href="#3、-getClass" class="headerlink" title="*3、*****getClass()****"></a><em><strong>*3、*</strong>***</em>*getClass()****</h3><p>getClass()也是一个native方法，返回的是此Object对象的类对象/运行时类对象Class&lt;?&gt;。效果与Object.class相同。</p><h3 id="4、-equals"><a href="#4、-equals" class="headerlink" title="*4、*****equals()****"></a><em><strong>*4、*</strong>***</em>*equals()****</h3><p>l ==表示的是变量值相同（对于基本数据类型，地址中存储的是值，引用类型则存储指向实际对象的地址）；比地址</p><p>l equals是对象的内容是否相同，重写，则按重写比，否则按object的。比值</p><p><strong>l</strong> <em><strong>*重写equals()方法必须重写hasCode()方法*</strong></em></p><h3 id="5、hashcode"><a href="#5、hashcode" class="headerlink" title="*5、hashcode*****()****"></a><em><strong>*5、hashcode*</strong>***</em>*()****</h3><p>hashCode()方法返回一个整形数值，表示该对象的哈希码值。</p><p>l 如果两个对象相等（依据：调用equals()方法），那么这两个对象调用hashCode()返回的哈希码也必须相等；</p><p>l 判断现有集合中是否已经存在与此对象相等的对象，如果没有hashCode()方法，需要将Set进行一次遍历，并逐一用equals()方法判断两个对象是否相等，此种算法时间复杂度为o(n)。通过借助于hasCode方法，先计算出即将新加入对象的哈希码，然后根据哈希算法计算出此对象的位置，直接判断此位置上是否已有对象即可。result*31 = (result&lt;&lt;5) - result</p><p>l hashCode()相同的两个对象，不一定相等，换言之，不相等的两个对象，hashCode()返回的哈希码可能相同。</p><h3 id="6、-toString"><a href="#6、-toString" class="headerlink" title="*6、*****toString()****"></a><em><strong>*6、*</strong>***</em>*toString()****</h3><p>toString()方法返回该对象的字符串表示。</p><h3 id="7、wait"><a href="#7、wait" class="headerlink" title="*7、wait()*"></a><em><strong>*7、wait()*</strong></em></h3><p>wait()使当前线程阻塞，前提是 必须先获得锁，配合synchronized 关键字使用。当线程执行wait()方法时候，会释放当前的锁，然后让出CPU，进入等待状态。</p><h3 id="8-、notify-notifyAll"><a href="#8-、notify-notifyAll" class="headerlink" title="*8*****、notify()**** */* *notifyAll()*"></a><em><strong>*8*</strong>***</em>*、notify()**** <em><strong>*/*</strong></em> <em><strong>*notifyAll()*</strong></em></h3><p>notify()/notifyAll()方法调用后，其所在线程不会立即释放所持有的锁，直到其所在同步代码块中的代码执行完毕，此时释放锁，因此，如果其同步代码块后还有代码，其执行则依赖于JVM的线程调度。</p><p>JVM会为一个使用内部锁（synchronized）的对象维护两个集合，Entry Set和Wait Set，也有人翻译为锁池和等待池</p><p>l 对于Entry Set：如果线程A已经持有了对象锁，此时如果有其他线程也想获得该对象锁的话，它只能进入Entry Set，并且处于线程的BLOCKED状态。</p><p>l 对于Wait Set：如果线程A调用了wait()方法，那么线程A会释放该对象的锁，进入到Wait Set，并且处于线程的WAITING状态。</p><p>l 某个线程B想要获得对象锁，一般情况下有两个先决条件</p><p>一是对象锁已经被释放了（如曾经持有锁的前任线程A执行完了synchronized代码块或者调用了wait()方法等等）</p><p>二是线程B已处于RUNNABLE状态。</p><p>l 对于Entry Set中的线程，当对象锁被释放的时候，JVM会唤醒处于Entry Set中的某一个线程，这个线程的状态就从BLOCKED转变为RUNNABLE。</p><p>l 对于Wait Set中的线程，当对象的notify()方法被调用时，JVM会唤醒处于Wait Set中的某一个线程，这个线程的状态就从WAITING转变为RUNNABLE；或者当notifyAll()方法被调用时，Wait Set中的全部线程会转变为RUNNABLE状态。所有Wait Set中被唤醒的线程会被转到Entry Set中。</p><p>l 然后，每当对象的锁被释放后，那些所有处于RUNNABLE状态的线程会共同去竞争获取对象的锁，最终会有一个线程（具体哪一个取决于JVM实现，队列里的第一个？随机的一个？）真正获取到对象的锁，而其他竞争失败的线程继续在Entry Set中等待下一次机会。</p><p>l 尽量使用notifyAll()的原因就是，notify()非常容易导致死锁，但是notifyall唤醒全部也会造成开销。</p><h3 id="9、-finalize"><a href="#9、-finalize" class="headerlink" title="*9、*****finalize()****"></a><em><strong>*9、*</strong>***</em>*finalize()****</h3><p>finalize方法主要与Java垃圾回收机制有关。二次标记。</p><h2 id="9-29、权限修饰符"><a href="#9-29、权限修饰符" class="headerlink" title="9.29、权限修饰符"></a>9.29、权限修饰符</h2><p>private &lt; default &lt; protected &lt; public</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps27.jpg" alt="img"> </p><h2 id="9-30、jdk1-8改进"><a href="#9-30、jdk1-8改进" class="headerlink" title="9.30、jdk1.8改进"></a>9.30、jdk1.8改进</h2><h3 id="1、Lambda表达式"><a href="#1、Lambda表达式" class="headerlink" title="*1、Lambda表达式*"></a><em><strong>*1、Lambda表达式*</strong></em></h3><p>lambda表达式本质上是一段匿名内部类，也可以是一段可以传递的代码</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps28.jpg" alt="img"> </p><h3 id="2、函数式接口"><a href="#2、函数式接口" class="headerlink" title="*2、函数式接口*"></a><em><strong>*2、函数式接口*</strong></em></h3><p>函数式接口的提出是为了给Lambda表达式的使用提供更好的支持。</p><p>只定义了一个抽象方法的接口（Object类的public方法除外），就是函数式接口，并且还提供了注解：@FunctionalInterface</p><p> Consumer <T>：消费型接口，有参无返回值</p><p> Supplier<T>：供给型接口，无参有返回值</p><p> Function&lt;T，R&gt;：函数式接口，有参有返回值</p><p> Predicate<T>：断言型接口，有参有返回值，返回值是boolean类型</p><h3 id="3、方法引用"><a href="#3、方法引用" class="headerlink" title="*3、方法引用*"></a><em><strong>*3、方法引用*</strong></em></h3><p>若lambda体中的内容有方法已经实现了，那么可以使用“方法引用”，也可以理解为方法引用是lambda表达式的另外一种表现形式并且其语法比lambda表达式更加简单。</p><p>方法引用、构造器引用、数组引用</p><h3 id="4、-Stream-API"><a href="#4、-Stream-API" class="headerlink" title="*4、*****Stream API****"></a><em><strong>*4、*</strong>***</em>*Stream API****</h3><p>Stream操作的三个步骤：</p><p>创建stream </p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps29.jpg" alt="img"> </p><p>中间操作（过滤、map）</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps30.jpg" alt="img"> </p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps31.jpg" alt="img"> </p><p>终止操作</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps32.jpg" alt="img"> </p><h3 id="5、接口中可以定义默认实现方法和静态方法"><a href="#5、接口中可以定义默认实现方法和静态方法" class="headerlink" title="*5、接口中可以定义默认实现方法和静态方法*"></a><em><strong>*5、接口中可以定义默认实现方法和静态方法*</strong></em></h3><p>在接口中可以使用default和static关键字来修饰接口中定义的普通方法</p><p><img src="C:\Users\admin\AppData\Local\Temp\ksohtml6648\wps33.jpg" alt="img"> </p><p>当一个类继承父类又实现接口时，若后两者方法名相同，则优先继承父类中的同名方法，即“类优先”，如果实现两个同名方法的接口，则要求实现类必须手动声明默认实现哪个接口中的方法。</p><h3 id="6、新的日期API"><a href="#6、新的日期API" class="headerlink" title="*6、新的日期API*"></a><em><strong>*6、新的日期API*</strong></em></h3><p>LocalDate | LocalTime | LocalDateTime</p><p>新的日期API都是不可变的，更使用于多线程的使用环境中</p><h3 id="7、hashmap和concurrenthashmap结构"><a href="#7、hashmap和concurrenthashmap结构" class="headerlink" title="*7、hashmap和concurrenthashmap结构*"></a><em><strong>*7、hashmap和concurrenthashmap结构*</strong></em></h3><h1 id="10、RabbitMQ"><a href="#10、RabbitMQ" class="headerlink" title="10、RabbitMQ"></a>10、RabbitMQ</h1><h2 id="10-1、如何保证消息的可靠性传输（如何处理消息丢失的问题）？"><a href="#10-1、如何保证消息的可靠性传输（如何处理消息丢失的问题）？" class="headerlink" title="10.1、如何保证消息的可靠性传输（如何处理消息丢失的问题）？"></a>10.1、如何保证消息的可靠性传输（如何处理消息丢失的问题）？</h2><p>1）生产者弄丢了数据：可以开启confirm模式，每次写的消息都会分配一个唯一的id，然后如果写入了rabbitmq中，rabbitmq会给你回传一个ack消息，告诉你说这个消息ok了。如果rabbitmq没能处理这个消息，会回调你一个nack接口，告诉你这个消息接收失败，你可以重试。<em><strong>*confirm机制是异步的。*</strong></em></p><p><em><strong>*2）*<em><strong>rabbitmq弄丢了数据，</strong></em>*开启rabbitmq的持久化*<em><strong>，就是消息写入之后会</strong></em>*持久化到磁盘*<em><strong>。</strong></em>*创建queue的时候将其设置为持久化的，发送消息的时候将*</strong></em></p><p>****消息的deliveryMode设置为2，就是将消息设置为持久化的，此时rabbitmq就会将消息持久化到磁盘上去。*<em><strong>而且持久化</strong></em>*可以跟生产者那边的confirm机制配合起来****，只有消息被持久化到磁盘之后，才会通知生产者ack了。</p><p>3****）消费端弄丢了数据：手动调用rabbitmq提供的ack机制。每次你自己代码里确保处理完的时候，再程序里ack一把。****这样的话，如果你还没处理完，不就没有ack？那rabbitmq就认为你还没处理完，这个时候rabbitmq会把这个消费分配给别的consumer去处理。</p><h2 id="10-2、保证消息是有顺序的"><a href="#10-2、保证消息是有顺序的" class="headerlink" title="10.2、保证消息是有顺序的"></a>10.2、保证消息是有顺序的</h2><p><em><strong>*拆分多个queue，每个queue一个consumer，就是多一些queue而已，确实是麻烦点；或者就一个queue但是对应一个consumer，然后这个consumer内部用内存队列做排队，然后分发给底层不同的worker来处理。*</strong></em></p><h2 id="10-3、消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？"><a href="#10-3、消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？" class="headerlink" title="10.3、消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？"></a>10.3、消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？</h2><p>​    <em><strong>*可能你的消费端出了问题，不消费了。*</strong></em></p><p>​    <em><strong>*先修复consumer的问题，确保其恢复消费速度，临时紧急扩容，将queue资源和consumer资源扩大，增加消费能力，等快速消费完积压数据之后，得恢复原先部署架构。*</strong></em></p><p>​    <em><strong>*rabbitmq，rabbitmq是可以设置过期时间的，就是TTL，大量积压在mq里，而是大量的数据会直接搞丢。批量重导，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入mq里面去，把白天丢的数据给他补回来。*</strong></em></p><h2 id="10-4、如何保证消息不被重复消费"><a href="#10-4、如何保证消息不被重复消费" class="headerlink" title="10.4、如何保证消息不被重复消费"></a>10.4、如何保证消息不被重复消费</h2><p>​    <em><strong>*保证消息队列消费的幂等性就不怕，重复消费无所谓。主要是结合业务来谈：如写数据库，先根据主键查一下，如果这数据都有了，你就别插入了，update一下好吧。如果是写redis，那没问题了，反正每次都是set，天然幂等性。如果是下订单，让生产者发送每条数据的时候，里面加一个全局唯一的id，根据ID查询是否消费过了，如果已经处理，就忽视。*</strong></em></p><h2 id="10-5、RabbitMQ高可用性"><a href="#10-5、RabbitMQ高可用性" class="headerlink" title="10.5、RabbitMQ高可用性"></a>10.5、RabbitMQ高可用性</h2><p><em><strong>*rabbitmq有三种模式：单机模式，普通集群模式，镜像集群模式。单击模式，一个节点。普通集群，*<em><strong>多台机器上启动多个rabbitmq实例，每个机器启动一个。但是你创建的queue，只会放在一个rabbtimq实例上，但是每个实例都同步queue的元数据。实际上如果连接到了另外一个实例，那么那个实例会从queue所在实例上拉取数据过来。没做到所谓的分布式。</strong></em>*镜像集群模式: 你创建的queue，无论元数据还是queue里的消息都会存在于多个实例上，然后每次你写消息到queue的时候，都会自动把消息到多个实例的queue里进行消息同步。一，这个性能开销也太大了吧，消息同步所有机器，导致网络带宽压力和消耗很重！第二，这么玩儿，就没有扩展性可言了。*</strong></em></p><h1 id="11、项目相关"><a href="#11、项目相关" class="headerlink" title="11、项目相关"></a>11、项目相关</h1><p>秒杀项目的面试问题：</p><p>秒杀项目介绍：</p><p>​    <em><strong>*1：这个项目主要是针对处理高并发问题。主要考虑的问题有以下几个方面：*</strong></em></p><p><em><strong>*一、正确性。核心问题就是防止超卖，和重复下单。*</strong></em></p><p><em><strong>*二、*</strong>***</em>*高并发。主要是采用Redis进行缓存常用查询、消息队列异步下单、页面资源静态化等方面减去数据库压力。****</p><p><em><strong>*三、安全性。主要有动态地址生成和接口放刷，双重MD5加密密码。*</strong></em></p><p><em><strong>*四、高可用性。一方面使用Redis集群的主从复制和主从切换保证redis的高可用性，另一方面，为防止redsi服务器宕*</strong></em>    <em><strong>*机，使用限流来防止mysql承受过多的请求。*</strong></em></p><h2 id="11-1、如何防止超卖"><a href="#11-1、如何防止超卖" class="headerlink" title="11.1、如何防止超卖"></a>11.1、如何防止超卖</h2><p>​    1、利用数据库自带排他锁，当减库存的时候，进位where判断，只有库存余量大于0的时候才进行进库存; update goods set num = num - 1 WHERE id = 1001 and num &gt; 0; 2、也可以可用乐观锁CAS版本号机制。select version from goods WHERE id= 1001；update goods set num = num - 1, version = version + 1 WHERE id= 1001 AND num &gt; 0 AND version = @version(上面查到的version);</p><h2 id="11-2、服务器抗压思路"><a href="#11-2、服务器抗压思路" class="headerlink" title="11.2、服务器抗压思路"></a>11.2、服务器抗压思路</h2><p>​    一、使用消息队列、异步生成订单；</p><p>​    二、redis库存量预缓存。只将少量的请求流入到服务器。如果全部卖完，拦截请求。</p><p>​    三、生成订单前，进行一系列的检验：是否还有库存，是否重复下单，这些数据都可以缓存。</p><h2 id="11-3、前端设计"><a href="#11-3、前端设计" class="headerlink" title="11.3、前端设计"></a>11.3、前端设计</h2><p>​    ****静态资源缓存：****将活动页面上的所有可以静态的元素全部静态化，尽量减少动态元素；通过CDN缓存静态资源，来抗峰值。在url后面加上？即可。</p><p>​    ****禁止重复提交****：前端:用户提交之后按钮置灰，禁止重复提交；后端：在进入页面时，服务器生成token并存到缓存或者session中，form表单使用隐藏域来存储这个token，提交之后带有token.后端收到这个token,看是否与服务器生成的token一致，如果不一致就是重复提交。如果一致，处理完之后清除token.</p><p>服务器返回表单页面时，会先生成一个subToken保存于session，并把该subToen传给表单页面。当表单提交时会带上subToken，服务器拦截器Interceptor会拦截该请求，拦截器判断session保存的subToken和表单提交subToken是否一致。若不一致或session的subToken为空或表单未携带subToken则不通过。</p><p>首次提交表单时session的subToken与表单携带的subToken一致走正常流程，然后拦截器内会删除session保存的subToken。当再次提交表单时由于session的subToken为空则不通过。从而实现了防止表单重复提交。</p><p>​    <em><strong>*用户限流：某一时间段内只允许用户提交少数次请求，IP限流(Nginx设置IP地址限流)。*</strong></em></p><p>​    </p><p><em><strong>*中间代理层：*</strong></em></p><p>​    <em><strong>*利用负载均衡（例如反响代理Nginx等）使用多个服务器并发处理请求，减小服务器压力。*</strong></em>    </p><p>​    <em><strong>*(正向代理代理客户端VPN，反向代理代理服务器。NGINX)*</strong></em> </p><p>​    横向增加服务器数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。普通轮询算法、比例加权轮询、ip路由负载、基于服务器响应时间负载分配、根据域名负载。</p><p>轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><p>指定权重：指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><p>IP绑定ip_hash：每个请求按ip的hash结果分配，<em><strong>*这样每个访客固定访问一个后端服务器*<em><strong>，</strong></em>*可以解决session的问题。*</strong></em></p><p>url_hash：按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p><p>fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><p><em><strong>*服务层：*</strong></em></p><p>​    ****业务分离:****将秒杀业务系统和其他业务分离，单独放在高配服务器上。</p><p>​    采****用消息队列缓存请求****：将大流量请求写到消息队列缓存，利用服务器根据自己的处理能力主动到消息缓存队列中抓取任务处理请求。</p><p>​    ****利用缓存应对读请求****：对于读多写少业务，大部分请求是查询请求，所以可以读写分离，利用缓存分担数据库压力。</p><p><em><strong>*数据库层：*</strong></em></p><p>​    上游就需要把请求拦截掉，数据库层只承担“能力范围内”的访问请求。所以，上面通过在服务层引入队列和缓存，让最底层的数据库高枕无忧。可以对数据库进行优化，减少数据库压力。</p><p>​    如果redis挂掉的话，如果提高数据库的并发能力：</p><p>​    ****业务拆分****：将不同功能的模块拆分，使用不同的数据库。</p><p>​    MySQL****主从复制，读写分离****：</p><p>​    <em><strong>*分表分库：*</strong></em></p><p>****其他策略：为请求分配成功状态或者分配秒杀资格，将没有资格的请求全部过滤，****只有有资格的才能参与秒杀。说到底的秒杀这个高并发，并不是真正的处理高并发请求，而是如何应对高并发。将大量请求拦截然后放小量请求到数据库执行抢单是完全可以的，不用担心请求丢失的问题。</p><h2 id="11-4、怎么保证redis缓存和数据库的一致性"><a href="#11-4、怎么保证redis缓存和数据库的一致性" class="headerlink" title="11.4、怎么保证redis缓存和数据库的一致性"></a>11.4、怎么保证redis缓存和数据库的一致性</h2><p>​    <em><strong>*延时双删；*</strong></em></p><p>​    存在不一致问题的，基本都是库存量。秒杀系统的设计，最重要的是不能超卖，这个问题我们已经谈过，用mysql排他锁或者乐观CAS版本号机制可以防止。而即使redis库存量比实际mysql库存量大，依然不会超卖。而redis库存量比mysql库存量小，可能发生没少卖的情况。少卖，问题不大。如果不能少卖，可以将redis预库存调大，他主要起到拦截请求降流的作用，一致不一致问题不大。</p><h2 id="11-5、安全性问题"><a href="#11-5、安全性问题" class="headerlink" title="11.5、安全性问题"></a>11.5、安全性问题</h2><p>​    <em><strong>*1、动态地址生成*</strong></em>    </p><p>​    <em><strong>*2、接口防刷*</strong></em></p><h2 id="11-6、消息队列"><a href="#11-6、消息队列" class="headerlink" title="11.6、消息队列"></a>11.6、消息队列</h2><p>​    ****防止重复消费****：重复消费在消息队列所存在的问题中，从来都不是一个严重的问题。如果是消息是读，那多消费一次没啥影响。如果是写，例如我们这个订单生成，消费之前，查询一下是否之前已经存在用户ID商品ID构成的订单，我们可以将生成的订单存入缓存，所以查询一次也不费劲。</p><p>​    ****消息的消费结果如何返回给消息发送方****：客户端轮询订单生成结果。</p><p>​    ****消息丢失：****秒杀系统中，本来就是万中选一的，丢失无所谓。如果是重要的信息，我们可以从三个角度来避免。如果是发送者丢失，开启confirm机制，如果队列丢失，开始queue持久化和消息持久化。如果是消费者丢失，关闭自动ACK,当我们消费完之后，调用API给queue发送确认信息。</p><h2 id="11-7、秒杀流程、画架构图"><a href="#11-7、秒杀流程、画架构图" class="headerlink" title="11.7、秒杀流程、画架构图"></a>11.7、秒杀流程、画架构图</h2><p>​    1、登录进入商品列表页面，静态资源缓存</p><p>​    2、点击进入商品详情页面，静态资源缓存，ajax获取验证码(服务器生成三个数的预算，并将结果缓存到redis);</p><p>​    3、点击秒杀, 将验证码结果和商品ID传给后端，如果结果正确。动态生成随机串UUID,结合用户ID和商品ID存入redis，并将path传给前端。前端获取path后，再根据path地址调用秒杀服务；</p><p>​    4、服务端获取请求的path参数，去查缓存是否在；</p><p>​    5、如果存在，预减redis库存，如果还有库存，看是否已经生成订单，没有的话就将请求入消息队列。</p><p>​    6、从消息队列中取消息：获取商品Id和用户ID,判断库存，重复下单；然后下单。</p><p>​    7、下单：减库存，生成订单； </p><p>​    8、前端轮询订单生成结果。50ms继续轮询或者秒杀是否成功和失败;</p><h2 id="11-8、优化策略"><a href="#11-8、优化策略" class="headerlink" title="11.8、优化策略"></a>11.8、优化策略</h2><p>​    多服务器负载均衡</p><h2 id="11-9、其他"><a href="#11-9、其他" class="headerlink" title="11.9、其他"></a>11.9、其他</h2><p><em><strong>*Jmeter进行压力测试。*</strong></em></p><p><em><strong>*分布式seesion:*</strong></em></p><p>用户登录之后,随机生成UUID，作为token以Cookie的方式返回给浏览器。同时将token作为redis key的后缀，用户对象作为value存入redis中。下次浏览器再发送HTTP请求的时候，带有这个Cookie。服务器获取http中的cookie并解析，得到token，然后再redis中查询，如果命中，则返回对象。</p><p><em><strong>*MD5双重加密*</strong></em>: 用户填写的表单，在发送给服务器之前，先进行一次MD5加密。然后以Post的形式发送给服务器。服务器获取这个用户ID和密码之后，随机生成Sault，并进行MD5加密。将加密之后的存入数据库，随机salut也存入数据库。</p><p><em><strong>*如何解决卖超问题：*</strong></em></p><p>//当库存大于0的时候才成功下订单，数据库本身会有锁，那么就不会在数据库中同时多个线程更新一条记录，使用数据库特性来保证超卖的问题；</p><p>数据库加唯一索引防止用户重复购买；</p><p>redis预减库存减少数据库访问　内存标记减少redis访问　请求先入队列缓冲，异步下单，增强用户体验；</p><p>页面级缓存thymeleafViewResolver，手动渲染  使用模板引擎；将渲染的html页面直接存到redis缓存中。</p><p>对象缓存Reids</p><p>​    redis永久缓存对象减少压力</p><p>​    redis预减库存减少数据库访</p><p>​    内存标记方法减少redis访问</p><p>订单处理队列rabbitmq</p><p> 请求先入队缓冲，异步下单，增强用户体验</p><p> 请求出队，生成订单，减少库存</p><p> 客户端定时轮询检查是否秒杀成功</p><p><em><strong>*下订单的过程:*</strong></em></p><p>1、将商品库存数量缓存到数据库，</p><p>2、获取缓存中的商品库存量</p><p>3，判断减去1之后的库存量</p><p>4、判断这个秒杀订单形成没有</p><p>5、正常请求，入队，发送一个秒杀message到队列里面去，入队之后客户端应该进行轮询。</p><p>消息队列：利用Mqsender将用户ID和商品ID的对象作为Json字符串发送给queue,然后消息队列发给指定的接受者。</p><p>获取对象ID和商品ID,    判断库存是否不足，判断是否已经下单成功。如果没有，    //原子操作：1.库存减1，(只有减库存成功，说明还有剩余的，才能下单)2.下订单(生成普通订单，生成秒杀订单，将秒杀订单缓存)，3.写入秒杀订单(如果没有生成，秒杀失败，说明卖完了，将外卖的状态写入缓存。)—&gt;是一个事务。</p><p>商品的库存量写入缓存，预减库存，查找是否还有足够的量，判断是否重复秒杀，然后订单请求入队；</p><p>然后请求出队，获取商品ID和用户ID，判断库存是否不足，是否已经重复下单，如果没有，真正的减库存，然后下单同时将订单写入缓存。如果没有成功，将卖完的状态写入缓存。客户端轮询是否完成下单。            </p><p>setTimeout(function() {getMiaoshaResult(goodsId);}, 50);//50ms之后继续轮询</p><p>总之，生产者将消息按照转换模式，以交换机的模式选择，将消息发送给指定类型的queue，消费者从监听的queue获取消息;</p><p>比如有10件商品要秒杀，可以放到缓存中，读写时不要加锁。 当并发量大的时候，可能有25个人秒杀成功，这样后面的就可以直接抛秒杀结束的静态页面。进去的25个人中有15个人是不可能获得商品的。所以可以根据进入的先后顺序只能前10个人购买成功。后面15个人就抛商品已秒杀完。</p><p>假设我们的秒杀场景</p><p>比如某商品10件物品待秒. 假设有100台web服务器(假设web服务器是Nginx + Tomcat),n台app服务器,n个数据库</p><p>第一步 如果Java层做过滤, 可以在每台web服务器的业务处理模块里做个计数器AtomicInteger(10)=待秒商品总数,decreaseAndGet()&gt;＝0的继续做后续处理, &lt;0的直接返回秒杀结束页面，这样经过第一步的处理只剩下100台*10个=1000个请求。</p><p>第二步, memcached 里以商品id作为key的value放个10, 每个web服务器在接到每个请求的同时, 向memcached服务器发起请求, 利用memcached的decr(key,1)操作返回值&gt;=0的继续处理, 其余的返回秒杀失败页面，这样经过第二步的处理只剩下100台中最快速到达的10个请求。</p><p>第三步, 向App服务器发起下单操作事务。</p><p>第四步, App服务器向商品所在的数据库请求减库存操作(操作数据库时可以 “update table set count=count-1 where id=商品id and count&gt;0;” update 成功记录数为1, 再向订单数据库添加订单记录, 都成功后提交整个事务, 否则的话提示秒杀失败，用户进入支付流程。</p><p>看看淘宝的秒杀</p><p>一、前端</p><p><em><strong>*面对高并发的抢购活动，前端常用的三板斧是【扩容】【静态化】【限流】*</strong></em></p><p>扩容：加机器，这是最简单的方法，通过增加前端池的整体承载量来抗峰值。</p><p>****静态化：将活动页面上的所有可以静态的元素全部静态化，****并尽量减少动态元素。通过CDN来抗峰值。</p><p>****限流：一般都会采用IP级别的限流，即针对某一个IP，限制单位时间内发起请求数量。****或者活动入口的时候增加游戏或者问题环节进行消峰操作。</p><p>有损服务：最后一招，在接近前端池承载能力的水位上限的时候，<em><strong>*随机拒绝部分请求来保护活动整体的可用性。*</strong></em></p><p>二、那么后端的数据库在高并发和超卖下会遇到什么问题呢</p><p>首先MySQL自身对于高并发的处理性能就会出现问题，一般来说，MySQL的处理性能会随着并发thread上升而上升，但是到了一定的并发度之后会出现明显的拐点，之后一路下降，最终甚至会比单thread的性能还要差。</p><p>其次，超卖的根结在于减库存操作是一个事务操作，需要先select，然后insert，最后update -1。最后这个-1操作是不能出现负数的，但是当多用户在有库存的情况下并发操作，出现负数这是无法避免的。</p><p>最后，当减库存和高并发碰到一起的时候，由于操作的库存数目在同一行，就会出现争抢InnoDB行锁的问题，导致出现互相等待甚至死锁，从而大大降低MySQL的处理性能，最终导致前端页面出现超时异常。</p><p>针对上述问题，如何解决呢？ 淘宝的高大上解决方案：</p><p>I：关闭死锁检测，提高并发处理性能。</p><p>II：修改源代码，将排队提到进入引擎层前，降低引擎层面的并发度。</p><p>III：组提交，降低server和引擎的交互次数，降低IO消耗。</p><p>解决方案1：<em><strong>*将存库从MySQL前移到Redis中，所有的写操作放到内存中，由于Redis中不存在锁故不会出现互相等待，并且由于Redis的写性能和读性能都远高于MySQL，这就解决了高并发下的性能问题。然后通过队列等异步手段，将变化的数据异步写入到DB中。*</strong></em></p><p>优点：解决性能问题</p><p>缺点：没有解决超卖问题，同时由于异步写入DB，存在某一时刻DB和Redis中数据不一致的风险。</p><p>解决方案2：<em><strong>*引入队列，然后将所有写DB操作在单队列中排队，完全串行处理。当达到库存阀值的时候就不在消费队列，并关闭购买功能。这就解决了超卖问题。*</strong></em></p><p>优点：解决超卖问题，略微提升性能。</p><p>缺点：性能受限于队列处理机处理性能和DB的写入性能中最短的那个，<em><strong>*另外多商品同时抢购的时候需要准备多条队列。*</strong></em></p><p>解决方案3：将写操作前移到MC中，同时利用MC的轻量级的锁机制CAS来实现减库存操作。</p><p>优点：读写在内存中，操作性能快，引入轻量级锁之后可以保证同一时刻只有一个写入成功，解决减库存问题。</p><p>缺点：没有实测，基于CAS的特性不知道高并发下是否会出现大量更新失败？不过加锁之后肯定对并发性能会有影响。</p><p>解决方案4：将提交操作变成两段式，先申请后确认。然后利用Redis的原子自增操作，同时利用Redis的事务特性来发号，保证拿到小于等于库存阀值的号的人都可以成功提交订单。然后数据异步更新到DB中。</p><p>优点：解决超卖问题，库存读写都在内存中，故同时解决性能问题。</p><p>缺点：由于异步写入DB，可能存在数据不一致。另可能存在少买，也就是如果拿到号的人不真正下订单，可能库存减为0，但是订单数并没有达到库存阀值。</p><p>总结</p><p>Java用到的线程调度算法：</p><p>抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。</p><p><em><strong>*默认升序，数据库排序；ASC*</strong></em> </p><p><em><strong>*无法使用比较运算符来测试 NULL 值，比如 =, &lt;, 或者 &lt;&gt;。*</strong></em></p><p><em><strong>*我们必须使用 IS NULL 和 IS NOT NULL 操作符。*</strong></em></p><p>CREATE TABLE Person </p><p>(</p><p>LastName varchar(30),</p><p>FirstName varchar,</p><p>Address varchar,</p><p>Age int(3)</p><p>)</p><h1 id="12、Nginx"><a href="#12、Nginx" class="headerlink" title="12、Nginx"></a>12、Nginx</h1><p>​    Nginx是一款****轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器****。 ****Nginx 主要提供反向代理、负载均衡、动静分离(静态资源服务)等服务****。下面我简单地介绍一下这些名词。</p><p>​    正向代理：某些情况下，****代理我们用户去访问服务器*<em><strong>，</strong></em>*需要用户手动的设置代理服务器的ip和端口号。****正向代理比较常见的一个例子就是 VPN了。</p><p>​    反向代理：<em><strong>*是用来代理服务器的，代理我们要访问的目标服务器。代理服务器接受请求，然后将请求转发给内*</strong></em></p><p>****部网络的服务器，****并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个服务器。</p><h2 id="12-1、负载均衡"><a href="#12-1、负载均衡" class="headerlink" title="12.1、负载均衡"></a>12.1、负载均衡</h2><p>​    在高并发情况下需要使用，其原理就是将并发请求分摊到多个服务器执行，减轻每台服务器的压力，多台服务器(集</p><p>群)共同完成工作任务，从而提高了数据的吞吐量。Nginx支持的****weight轮询（默认）、ip_hash、fair、url_hash这四种负载均衡调度算法****，感兴趣的可以自行查阅。负载均衡相比于反向代理更侧重的时将请求分担到多台服务器上去，所以谈论负载均衡只有在提供某服务的服务器大于两台时才有意义。</p><h2 id="12-2、动静分离"><a href="#12-2、动静分离" class="headerlink" title="12.2、动静分离"></a>12.2、动静分离</h2><p>​    动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以</p><p>后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。</p><p>22.设计秒杀方案（从高并发、快速响应、高可用三方面回答，高并发（增加网络带宽、DNS域名解析分发多台服务器、使用前置代理服务器ngnix、CDN内容分发、数据库查询优化（读写分离、分库分表）），快速响应（缓存服务器（memcached、redis）、能使用静态页面就用静态页面，减少容器解析、把常访问的图片等内容缓存）、高可用（热备，如数据库服务器的热备、集群监控（如使用zabbix，重点关注IO、内存、带宽和机器load）））</p><p>服务器返回表单页面时，会先生成一个subToken保存于session，并把该subToen传给表单页面。当表单提交时会带上subToken，服务器拦截器Interceptor会拦截该请求，拦截器判断session保存的subToken和表单提交subToken是否一致。若不一致或session的subToken为空或表单未携带subToken则不通过。</p><p>首次提交表单时session的subToken与表单携带的subToken一致走正常流程，然后拦截器内会删除session保存的subToken。当再次提交表单时由于session的subToken为空则不通过。从而实现了防止表单重复提交。</p><h2 id="12-3、缓存、降级和限流"><a href="#12-3、缓存、降级和限流" class="headerlink" title="12.3、缓存、降级和限流"></a>12.3、缓存、降级和限流</h2><p><em><strong>*在开发高并发系统时，有三把利器用来保护系统：缓存、降级和限流：*</strong></em></p><p>​    <em><strong>*缓存：缓存的目的是提升系统访问速度和增大系统处理容量*</strong></em></p><p>​    <em><strong>*降级：*</strong>***</em>*降级是当服务出现问题或者影响到核心流程时，需要暂时屏蔽掉****<em><strong>*，待高峰或者问题解决后再打开*</strong></em></p><p>​    <em><strong>*限流：限流的目的是通过对并发访问/请求进行限速，或者*</strong>***</em>*对一个时间窗口内的请求进行限速来保护系统*<strong><strong><strong>*，一旦达到限制速率则可以*</strong></strong></strong>*拒绝服务、排队或等待、降级等处理****<em><strong>*。*</strong></em></p><p>​    计数器法：设置一个计数器counter，每当一个请求过来的时候，counter就加1，如果counter的值大于100并且该请求与第一个请求的间隔时间还在1分钟之内，那么说明请求数过多；如果该请求与第一个请求的间隔时间大于1分钟，且counter的值还在限流范围内，那么就重置 counter。缺点：统计的精度太低，无法处理临界问题。如果我在单位时间<em><strong>*1s内的前10ms，已经通过了100个请求，那后面的990ms，只能眼巴巴的把请求拒绝，我们把这种现象称为“突刺现象”*</strong></em></p><p> public boolean grant() {</p><p>​    long now = getNowTime();</p><p>​    if (now &lt; timeStamp + interval) {</p><p>​      // 在时间窗口内</p><p>​      reqCount++;</p><p>​      // 判断当前时间窗口内是否超过最大请求控制数</p><p>​      return reqCount &lt;= limit;</p><p>​    } else {</p><p>​      timeStamp = now;</p><p>​      // 超时后重置</p><p>​      reqCount = 1;</p><p>​      return true;</p><p>​    }</p><p>  }</p><h2 id="12-4、滑动窗口算法"><a href="#12-4、滑动窗口算法" class="headerlink" title="12.4、滑动窗口算法"></a>12.4、滑动窗口算法</h2><p>将窗口更加细分，每个窗口都有自己的计数器，当总计算达到限定时，限流。这个滑动窗口只是将计算法变得更平滑而已。本质一样。</p><p>漏斗法：将容器比作一个漏斗，当请求进来时，相当于水倒入漏斗，然后从下端小口慢慢匀速的流出。不管上面流量多大，下面流出的速度始终保持不变。这种算法，在使用过后也存在弊端：无法应对短时间的突发流量。</p><p>在****令牌桶算法****中，存在一个桶，用来存放固定数量的令牌。算法中存在一种机制，以一定的速率往桶中放令牌。每次请求调用需要先获取令牌，只有拿到令牌，才有机会继续执行，否则选择选择等待可用的令牌、或者直接拒绝。通过Google开源的guava包，我们可以很轻松的创建一个令牌桶算法的限流器。</p><p>Google开源工具包Guava提供了限流工具类<em><strong>*RateLimiter*<em><strong>，该类基于令牌桶算法(Token Bucket)来完成限流，非常易于使用。RateLimiter经常用于限制对一些物理资源或者逻辑资源的访问速率，它支持两种获取permits接口，一</strong></em>*种是如果拿不到立刻返回false（tryAcquire()），一种会阻塞等待一段时间看能不能拿到（tryAcquire(long timeout, TimeUnit unit)）。*</strong></em></p><p>缺点：传<em><strong>*统的方式整合RateLimiter 有很大的缺点*<em><strong>：</strong></em>*代码重复量特别大*</strong>***</em>*，而且本身不支持注解方式。****</p><h1 id="13、ElasticSearch"><a href="#13、ElasticSearch" class="headerlink" title="13、ElasticSearch"></a>13、ElasticSearch</h1><p>Elasticsearch是一个近乎实时的搜索平台。这意味着从索引文档到可以搜索的时间只有轻微的延迟（通常是1秒）.</p><p>集群是一个或多个节点(服务器)的集合. 节点是一个单独的服务器，它是集群的一部分，存储数据，并参与集群的索引和搜索功能。</p><p>索引是具有某种相似特征的文档的集合。例如，你可以有一个顾客数据索引，产品目录索引和订单数据索引。文档是可以被索引的基本信息单元。文档用JSON表示,有多个field,如年龄，性别，地址。</p><p>Elasticsearch提供了将你的索引细分为多个碎片（或者叫分片）的能力。在创建索引时，可以简单地定义所需的分片数量。每个分片本身就是一个功能完全独立的“索引”，可以驻留在集群中的任何节点上。Shards &amp; Replicas.每个分片又有副本。</p><p><em><strong>*正向索引是通过key找value，反向索引则是通过value找key。*</strong></em></p><p>首先将文本分割成一系列被称为语汇单元(token)的独立原子元素，此过程即为文档分析，然后建立倒排索引，也就是每个term关键词出现在哪些文档之中。ID TERM DOCUMENT List.，Elasticsearch分别为每个field都建立了一个倒排索引。</p><p>Elasticsearch为了能快速找到某个term，将所有的term排个序，二分法查找term，logN的查找效率，就像通过字典查找一样，这就是Term Dictionary。又有一个Term Index，就像字典里的索引页一样，A开头的有哪些term，分别在哪页，可以理<em><strong>*解term index是一颗树*<em><strong>：这棵树不会包含所有的term，它包含的是term的一些前缀。通过term index可以快速地定位到term dictionary的某个offset，然后从这个位置再往后顺序查找。再结合FST(Finite State Transducers)</strong></em>*的压缩技术，可以使term index缓存到内存中。从term index查到对应的term dictionary的block位置之后，再去磁盘上找term，大大减少了磁盘随机读的次数。*</strong></em></p><p><em><strong>*用FST压缩term index外，对posting list也有压缩技巧，如*</strong>***</em>*bitmap****<em><strong>*；*</strong></em></p><p><em><strong>*联合索引直接利用跳表(Skip list)的数据结构快速做“与”运算，或者利用上面提到的bitset按位“与”。*</strong></em></p><p><em><strong>*shard = hash(document_id) % (num_of_primary_shards)*</strong></em></p><h1 id="14、系统设计问题"><a href="#14、系统设计问题" class="headerlink" title="14、系统设计问题"></a>14、系统设计问题</h1><p>​    ****1、****让你系统的设计一个高并发的架构，你会从哪几个方面考虑？</p><p>​    <em><strong>*2、一个千万级的APP，你要搞定关注和粉丝列表，你用什么来做。要求最后一个关注的在最前面。新增和取关都要比较快的反馈你怎么做？如果一个人关注了之后，服务器宕机了怎么办？*</strong></em></p><p>​    ****3、****设计一个榨汁机类，面向对象怎么设计 </p><p>​    ****4、****OOD design：计费停车场</p><p>​    5、多个服务器间共享session的解决方案</p><p>​    问了new一个对象的加载顺序, 答了从父类到子类的加载过程 静态变量和静态块, 哪个先加载, 答了静态变量。</p><p>​    假设有这么一个场景，有一条新闻，新闻的评论量可能很大，如何设计评论的读和写</p><p>​    你如果写用InnoDB，读用Myisam的话，主从同步怎么做</p><p>​    假设如果有同一时间海量数据入库，你怎么做（期间扯到了鹿晗关晓彤，这种微博大 V给他安排上，还提了消息队列做削峰）</p><p>​    你对Elasticsearch有什么了解</p><p>  有一个巨大的ip白名单池子，判断一个ip是否命中白名单,散列表 hash一下或者字典树.</p><p>​    登录怎样校验密码，海量用户同时登录怎么优化</p><p>Cookie 和 Session 的区别，怎样存海量 Session</p><p>分布式 Session 问题</p><p>显示网站的用户在线数的解决思路</p><h1 id="15、大数据相关"><a href="#15、大数据相关" class="headerlink" title="15、大数据相关"></a>15、大数据相关</h1><p>1亿 = 10^8; 1KB = 2^10 = 1024 = 10^3; 1MB = 2^20 = 10 ^ 6 ; 1GB = 2^30 = 10^9；</p><p>IB = 8 bit;</p><p>2^32 = 40亿；</p><p><em><strong>*URL黑名单问题：判断值是否已经存在于集合中：*</strong>***</em>*hash(key) % m****  <em><strong>*哈希函数实现MD*</strong>***</em>*5;****</p><p><em><strong>*布隆过滤器解决：用长度为M的位数组*</strong>***</em>*b*<strong><strong><strong>*it*</strong></strong></strong>*Ma*<strong><strong><strong>*p*</strong></strong></strong>*;*<strong><strong><strong>*将所有的值经过K个哈希函数计算之后对m取余，得到在数组中的位置。将K个位置取1。对于新到的*</strong></strong></strong>*url,****<em><strong>*也经过K个哈希函数取余计算数组中的值是否为1，如果全为1，可能存在，有一个为0说明一定不存在。*</strong></em></p><p><em><strong>*m和k的大小问题以及容错率的计算：*</strong></em></p><p>​    <em><strong>*m*</strong></em> <em><strong>*= - n*</strong></em> <em><strong>***</strong></em> <em><strong>*ln*</strong></em> <em><strong>*p / (ln2)^2 ; m*</strong>***</em>*为位数组长度，n为样本数量，p为容错率**** <em><strong>*0.01%;*</strong></em></p><p><em><strong>*如：n*</strong></em> <em><strong>*= 100*</strong>***</em>*亿，p**** <em><strong>*= 0.0.1; m*</strong></em> <em><strong>*=*</strong></em> <em><strong>*20*</strong>***</em>*n**** <em><strong>*= 2000*</strong>***</em>*亿bit**** <em><strong>*= 25 GB;  k =ln2 *  m / n = 14;*</strong></em>  <em><strong>*l*</strong>***</em>*n2 = 0.7**** </p><p><em><strong>*2*</strong>***</em>*0*<strong><strong><strong>*亿个3*</strong></strong></strong>*2****<em><strong>*位整数中出现次数最多的数：*</strong></em></p><p><em><strong>*用哈希表记录每个整数出现的次数&lt;********key,value&gt;,*</strong>***</em>*一个记录是8B****<em><strong>*;*</strong></em></p><p><em><strong>*如果有2*</strong>***</em>*0*<strong><strong><strong>*亿个，就是1*</strong></strong></strong>*6*<strong><strong><strong>*GB*</strong></strong></strong>*;****</p><p><em><strong>*所以，我们先将2*</strong>***</em>*0*<strong><strong><strong>*亿的大文件，经过哈希函数，分割为1*</strong></strong></strong>*6****<em><strong>*个小文件。相同的数会分配到同一个文件之中。然后在用哈希表记录每个数出现的次数。然后求每个文件出现最多的次数或者每个文件出现最多的K次，top可以用小顶堆实现。*</strong></em></p><p>40亿个非负整数没出现的数：</p><p>​    40亿个，如果用哈希表记录每个出现的次数，一个8B，16GB，太大。</p><p>​    可以使用位数组，40亿长度的位数组，内存占用为500MB。将40亿个数，一个个的bitmap[indxe] = 1;然后将所有为0的index找出，就是没有出现的数。</p><p>​    如果说是10内存找出一个不存在的数呢？</p><p>​    500MB变成10内存，原本的40亿长度除以64，就是分割成64个长度为2^22的位数组。</p><p>int[] count = new int[64];将40亿个数，每个数 / 2^22，看看他落入哪个区间，count[i]++;</p><p>计算每个数的count,看看装满没有，2^22次方，谁大。找到之后，再申请8MB的空间；看看落入这个空间的哪个数少了。</p><p>找到100亿个URL重复的URL</p><p>​    分流：用哈希函数，将100亿的大文件，转化成小文件，如100个，那么每个近似100兆。然后对url进行哈希表统计，是否出现重复，每个记录8B,那么需要800MB。如果依然是变大了，那就再使用哈希函数分流。</p><p>TOPK</p><p>​    也是先用哈希函数将大文件转变成小文件，然后用哈希表统计每个数出现的次数。然后对每个小文件的哈希表，使用小顶堆计算topk。然后合在一起再计算topK.</p><p>40亿非负整数出现两次的数：</p><p>​    40亿<em>2长的位数字，1GB的内存。每两位表示这个树出现的情况。[2</em>num][2*num+1]</p><p>第一次出现，标记为01，第二次出现标记为10，第三次出现标记为11.求所有两次出现即标记为10的num;</p><p>大数据的中位数，桶排序：</p><p>​    长度为2MB（2^21）的整型数组占地8M;分割成大约2148个区间。申请一个arr[2148]的数组，遍历这么多数， num /2^21 看落到了哪个区间，然后count[index]++;从左到右开始数数，找到中位数落在的区间位置。然后再次遍历，对这个位置的数进行哈希统计。然后找到中位数。</p><p>​    </p><p>​    </p><p>​    </p><p><em><strong>*看到上述知乎用户iammutex关于如何正确生成短地址URL的探讨，我们知道了，可以通过发号器的方式正确的生成短地址，生成算法设计要点如下：*</strong></em></p><p><em><strong>*（1）利用放号器，初始值为0，对于每一个短链接生成请求，都递增放号器的值，再将此值转换为62进制（a-zA-Z0-9），比如第一次请求时放号器的值为0，对应62进制为a，第二次请求时放号器的值为1，对应62进制为b，第10001次请求时放号器的值为10000，对应62进制为sBc。*</strong></em></p><p><em><strong>*（2）将短链接服务器域名与放号器的62进制值进行字符串连接，即为短链接的URL，比如：t.cn/sBc。*</strong></em></p><p><em><strong>*（3）重定向过程：生成短链接之后，需要存储短链接到长链接的映射关系，即sBc -&gt; URL，浏览器访问短链接服务器时，根据URL Path取到原始的链接，然后进行302重定向。映射关系可使用K-V存储，比如Redis或Memcache。*</strong></em></p><p><em><strong>*七、生成短地址之后如何跳转哪？*</strong></em></p><p><em><strong>*对于该部分的讨论，我们可以认为他是整个交互的流程，具体的流程细节如下：*</strong></em></p><p><em><strong>*（1）用户访问短链接：<a href="http://t.cn/RuPKzRW%EF%BC%9B/">http://t.cn/RuPKzRW；\</a>*</strong></em></p><p><em><strong>*（2）短链接服务器t.cn收到请求，根据URL路径RuPKzRW获取到原始的长链接（KV缓存数据库中去查找）：<a href="https://blog.csdn.net/xlgen157387/article/details/79863301%EF%BC%9B/">https://blog.csdn.net/xlgen157387/article/details/79863301；\</a>*</strong></em></p><p><em><strong>*（3）服务器返回302状态码，将响应头中的Location设置为：<a href="https://blog.csdn.net/xlgen157387/article/details/79863301%EF%BC%9B/">https://blog.csdn.net/xlgen157387/article/details/79863301；\</a>*</strong></em></p><p><em><strong>*（4）浏览器重新向<a href="https://blog.csdn.net/xlgen157387/article/details/79863301%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%EF%BC%9B/">https://blog.csdn.net/xlgen157387/article/details/79863301发送请求；\</a>*</strong></em></p><p><em><strong>*（5）返回响应；*</strong></em></p><p><em><strong>*八、短地址发号器优化方案*</strong></em></p><p><em><strong>*1、算法优化*</strong></em></p><p><em><strong>*采用以上算法，如果不加判断，那么即使对于同一个原始URL，每次生成的短链接也是不同的，这样就会浪费存储空间（因为需要存储多个短链接到同一个URL的映射），如果能将相同的URL映射成同一个短链接，这样就可以节省存储空间了。主要的思路有如下两个：*</strong></em></p><p><em><strong>*方案1：查表*</strong></em></p><p><em><strong>*每次生成短链接时，先在映射表中查找是否已有原始URL的映射关系，如果有，则直接返回结果。很明显，这种方式效率很低。*</strong></em></p><p><em><strong>*方案2：使用LRU本地缓存，空间换时间*</strong></em></p><p><em><strong>*使用固定大小的LRU缓存，存储最近N次的映射结果，这样，如果某一个链接生成的非常频繁，则可以在LRU缓存中找到结果直接返回，这是存储空间和性能方面的折中。*</strong></em></p><p><em><strong>*2、可伸缩和高可用*</strong></em></p><p><em><strong>*如果将短链接生成服务单机部署，缺点一是性能不足，不足以承受海量的并发访问，二是成为系统单点，如果这台机器宕机则整套服务不可 用，为了解决这个问题，可以将系统集群化，进行“分片”。*</strong></em></p><p><em><strong>*在以上描述的系统架构中，如果发号器用Redis实现，则Redis是系统的瓶颈与单点，因此，利用数据库分片的设计思想，可部署多个发号器实例，每个实例负责特定号段的发号，比如部署10台Redis，每台分别负责号段尾号为0-9的发号，注意此时发号器的步长则应该设置为10（实例个数）。*</strong></em></p><p><em><strong>*另外，也可将长链接与短链接映射关系的存储进行分片，由于没有一个中心化的存储位置，因此需要开发额外的服务，用于查找短链接对应的原始链接的存储节点，这样才能去正确的节点上找到映射关系。*</strong></em></p><p><em><strong>*分布式全局唯一ID:雪花算法得出的ID,有序*<em><strong>，唯一，快速。</strong></em>*64位：最高位预留+*</strong>***</em>*毫秒级时间41位+机器ID 10位+毫秒内序列12位；41位时间能用69年。机器ID支持2^10=1024台机器分布。****</p><p>与之相对的数据库自增ID:缺陷：****高并发下插入数据需要事务机制，对数据库压力大。大表不能做水平分表****，否则增删容易出错。</p><p>UUID：<em><strong>*无序，太长、没法排序、使数据库性能降低s；*</strong></em></p><p>有一个无序整型数组，如何求出该数组排序后的任意两个相邻元素的最大差值？（桶排序，尽量分散，桶的数量为 （最大 - 最小）/ 元素个数）</p><p>.讲一下IOC和AOP。</p><p>Nginx</p><p>AVA异常，分类，具体都有哪些？</p><p>线程与进程的区别？为什么要有线程？</p><p>GMS 与 G1 的区别、应用场景</p><p>反射机制（原理、使用场景、Spring 注入）</p><p>消息队列，消费者运行速度不一，如何控制数据的同步（保证插入先于删除）</p><p>Tomcat的双亲模型，破坏双亲的的三种出现过的，OSGI的破坏双亲的模型</p><p>手写线程池需要哪些参数</p><p>核心 10 队列 1000 最大 100 的情况线程池怎么处理</p><p>JDK 8 与先前版本的区别</p><p>讲迭代的区别顺势还讲了快速失败和安全失败</p><p>线程间的通信方式（操作系统层面，信号量等等）</p><p>List有哪些，怎样做到线程安全：</p><p>ThreadLocal：</p><p>ThreadLocal 是安全的吗？讲讲原理分析与使用场景、内存泄漏、弱引用</p><p>Java怎么做到跨平台的</p><p>java怎么把.class文件进行反编译的</p><p>安装Java都需要安装哪些东西</p><p>Java虚拟机是如何找到类方法中的Main函数的</p><p>\1. hashmap 和hash table 和concurrent hashmap<br>\2. jmm模型<br>自己聊 volatile synclock reentreenlock aqs组件 cas automic原子类</p><p><em><strong>*线程池7大参数*</strong></em>  我给了个场景说明了参数的作用</p><p><em><strong>*corePoolSize：核心池的大小：*</strong></em></p><p>****maximumPoolSize：线程池最大线程数****，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</p><p><em><strong>*keepAliveTime：空闲的线程保留的时间。*</strong></em></p><p><em><strong>*TimeUnit：空闲线程的保留时间单位。*</strong></em></p><p><em><strong>*BlockingQueue<Runnable>：阻塞队列*</strong></em></p><p><em><strong>*ThreadFactory：线程工厂，用来创建线程*</strong></em></p><p><em><strong>*RejectedExecutionHandler：队列已满，而且任务量大于最大线程的异常处理策略*</strong></em></p><p>redis数据类型 zset怎么用</p><p><em><strong>*nginx集群怎么做 负载均衡算法有哪些，单点故障怎么办*</strong></em></p><p>****普通轮询算法、比例加权轮询、ip路由****负载、基于服务器响应时间负载分配、根据域名负载。</p><p>Nginx+keepalived双机实现nginx反向代理服务的高可用,一台nginx挂掉之后不影响应用也不影响内网访问外网。</p><p><em><strong>*用Keepalived搭建双Nginx server集群 防止单点故障*</strong></em></p><p>项目的 QPS 是多少：</p><p>讲讲 HashSet：</p><p>Spring AOP 有切点，切面，还有哪些</p><p>图的最短路径算法：</p><p>****深度或广度优先搜索算法****，</p><p>****费罗伊德算法****，最开始只允许经过1号顶点进行中转，接下来只允许经过1号和2号顶点进行中转…….允许经过1~n号所有顶点进行中转，</p><p>****迪杰斯特拉算法****，</p><p>Bellman-Ford 算法。</p><p><em><strong>*MySQL的MVCC：*</strong></em></p><p>Integer缓冲机制：</p><p>mybatis怎么防止sql注入</p><p><em><strong>*spring解决循环依赖*</strong></em></p><p><em><strong>*（1）构造器的循环依赖 构造器的循环依赖问题无法解决，只能抛出异常。*</strong></em></p><p>****（2）setter注入构成的循环依赖，****spring设计的机制主要就是解决这种循环依赖</p><p> <em><strong>*3、prototype作用域bean的循环依赖。无法解决*</strong></em></p><p>步骤一：b****eanA进行初始化，并且将自己进行初始化的状态记录下来，并提前向外暴露一个单例工程方法，****从而使其他bean能引用到该bean（可能读完这一句，您仍然心存疑惑，没关系，继续往下读）</p><p>步骤二：beanA中有beanB的依赖，<em><strong>*于是开始初始化beanB。*</strong></em></p><p>步骤三：初始化beanB的过程中又发现beanB依赖了beanA,于是又进行beanA的初始化，这时发<em><strong>*现beanA已经在进行初始化了，程序发现了存在的循环依赖，然后通过步骤一中暴露的单例工程方法拿到beanA的引用*<em><strong>（注意，此时的beanA只是完成了构造函数的注入但为完成其他步骤），从而beanB拿到beanA的引用，完成注入，完成了初始化，如此beanB的引用也就可以被beanA拿到，</strong></em>*从而beanA也就完成了初始化。*</strong></em></p><p>spring进行bean的加载的时候，首先进行bean的初始化（调用构造函数），然后进行属性填充。在这两步中间，spring对bean进行了一次状态的记录</p><p><em><strong>*不要使用基于构造函数的依赖注入，可以通过以下方式解决：*</strong></em></p><p>​    <em><strong>*1.在字段上使用@Autowired注解，让Spring决定在合适的时机注入*</strong></em></p><p>​    <em><strong>*2.用基于setter方法的依赖注入。*</strong></em></p><p><em><strong>*聚簇索引和非聚簇索引*</strong></em></p><p><em><strong>*对于聚簇索引存储来说，行数据和主键B+树存储在一起，辅助键B+树只存储辅助键和主键，主键和非主键B+树几乎是两种类型的树。对于非聚簇索引存储来说，主键B+树在叶子节点存储指向真正数据行的指针，而非主键。*</strong></em></p><p>1 spring aop</p><p><em><strong>*3. spring mvc 流程*</strong></em></p><p>4.mybatis分页</p><p>​    <em><strong>*sql分页 limit + offset 分页：*</strong></em></p><p>​    <em><strong>*pagehelper分页插件：拦截器分页。*</strong></em></p><p>\6. mysql支持大小写查询</p><p>​    <em><strong>*MySQL查询是不区分大小写的*<em><strong>！这可真的是惊呆我了，虽然知道一般情况下，关键字是不区分大小写的，但是没想到连</strong></em>*要查询的参数都是不区分大小写的：*</strong></em></p><p>​    <em><strong>*Mysql默认的字符检索策略：utf8_general_ci，表示不区分大小写；utf8_general_cs表示区分大小写，utf8_bin表示二进制比较，同样也区分大小写*</strong></em></p><p><em><strong>*7. innodb和 myisam的区别*</strong></em></p><p><em><strong>*8 solr或者es介绍一下（倒排索引；有哪些索引结构）*</strong></em></p><p>****项目中用到的算法****（排序  查找）， 设计模式</p><p>http常见请求头</p><p>mybatis传list时xml文件里怎么写，用哪个标签</p><p><em><strong>*线程池参数，什么情况下会达到最大线程数量*</strong></em></p><p>cookie包括哪两种</p><p><em><strong>*SpringMVC 工作原理、内部流程*</strong></em></p><p>MyBatis （缓存机制，一级、二级原理和作用，映射是怎么实现的，XML 怎么对应到 Mapper 代理模式）</p><p>****防止sql注入****：MyBatis启用了预编译功能，在SQL执行前，会先将上面的SQL发送给数据库进行编译；执行时，直接使用编译好的SQL，替换占位符“?”就可以了。因为SQL注入只能对编译过程起作用，所以这样的方式就很好地避免了SQL注入的问题。</p><p>mybatis的查询缓存分为一级缓存和二级缓存，一级缓存是SqlSession级别的缓存，二级缓存时mapper级别的缓存，二级缓存是多个SqlSession共享的;</p><p>当在同一个SqlSession中执行两次相同的sql语句时，第一次执行完毕会将数据库中查询的数据写到缓存（内存）中，第二次查询时会从缓存中获取数据，不再去底层进行数据库查询，从而提高了查询效率。如果SqlSession执行了DML操作（insert、update、delete），并执行commit（）操作，mybatis则会清空SqlSession中的一级缓存,避免脏读现象。</p><p>Mybatis 的二级缓存是 Mapper 级别的缓存，默认不开启，需手工配置。其存储作用域为 Mapper，也就是同一个 namespace 的 mappe.xml; 当一个sqlseesion执行了一次select后，在关闭此session的时候，会将查询结果缓存到二级缓存。当另一个sqlsession执行select时，首先会在他自己的一级缓存中找，如果没找到，就回去二级缓存中找，找到了就返回，就不用再去数据库了。</p><p>MySQL 怎么分页：</p><p><em><strong>*用limit + offset: SELECT * FROM table LIMIT 5,10; // 检索记录行 6-15*</strong></em></p><h1 id="16、Linux相关"><a href="#16、Linux相关" class="headerlink" title="16、Linux相关"></a>16、Linux相关</h1><p><em><strong>*查看进程PID*</strong></em>  </p><p><em><strong>*根据名称匹配*</strong>***</em>*：Ps -****<em><strong>*ef | grep xxxx*</strong></em></p><p><em><strong>*根据端口号 ：*</strong></em> <em><strong>*lsof -i:5000*</strong></em></p><p><em><strong>*关闭xxx的进程 ： kill -9 xxxx;*</strong></em> <em><strong>*9：SIGKILL，强制中断一个进程的进行;*</strong></em></p><p><em><strong>*top*</strong></em> <em><strong>*命令是Linux下常用的性能分析工具，*</strong>***</em>*能够实时显示系统中各个进程的资源占用状况****<em><strong>*，类似于Windows的任务管理器;*</strong></em></p><p><em><strong>*chmod命令,*</strong></em> <em><strong>*chown,chgrp*</strong></em></p><p><em><strong>*cat　用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示.more,less，按页查看，前翻后翻。*</strong></em></p><p><em><strong>*tail:*</strong></em> <em><strong>*从指定点开始将文件写到标准输出.使用tail命令的-f选项可以方便的查阅正在改变的日志文件,tail -f filename会把filename里最尾部的内容显示在屏幕上,并且不但刷新,使你看到最新的文件内容.*</strong></em></p><p><em><strong>*diff 命令用于比较两个文件或目录的不同*</strong></em></p><p><em><strong>*scp 命令是secure copy的简写，用于在Linux下进行远程拷贝文件的命令;*</strong></em></p><p><em><strong>*ssh远程登录；*</strong></em></p><p><em><strong>*ping;*</strong></em> <em><strong>*ifconfig*</strong></em></p><p><em><strong>*grep命令:该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来*</strong></em></p><p><em><strong>*grep -n ‘要查找的字符串’  被查的文件file:返回行数；*</strong></em></p><p><em><strong>*cp复制，rm删除，mv移动，tar解压缩，mkdir，rmdir,*</strong></em></p><h1 id="17、正则表达式"><a href="#17、正则表达式" class="headerlink" title="17、正则表达式"></a>17、正则表达式</h1><p>****^****匹配输入字符串开始的位置，$匹配输入字符串结尾的地方。</p><p>*，匹配前面字符0次或者多次。+，一次或多次匹配。？，零次或一次匹配。</p><p>{n},匹配前面n次，{n,}至少匹配n次。{n,m}至少匹配n次，至多匹配m次。</p><p>？：如果跟在其他通配符后面，表示非贪心搜索。其他的默认贪心匹配。O+?,表示只匹配一次o.而默认o+匹配所有o;</p><p>.，匹配任意字符。 X | Y，表示或，x或者y. [xyz]:字符集中的任意一个。[^xyz],反向字符集，匹配不包含字符的一个。</p><p>[a-z],匹配指定范围的任意字符。[^a-z]匹配非范围内的字符。 \d，数字字符匹配，[0-9]; \D,非数字字符匹配[^0-9];</p><p>\s,匹配任何空白字符。\S，匹配非空白字符。\w字母数字下划线，\W，非字符数字下划线。</p><p>常用正则表示式：</p><p>任意个数字：^[0-9]<em>$;  n位数字：^\d{n}$; 中文：[\u4e00-\u9fa5]；非零开头的最多带两位小数的数字：^([1-9][0-9]</em>)+(.[0-9]{1,2})?$；带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$；由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$ 。<em><strong>*Email地址：*</strong>***</em>*^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$****</p><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</p><p>强密码(必须包含****大小写字母和数字的组合***<em>，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.</em>[A-Z]).{8,10}$</p><p>IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用)</p><p>IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</p><h1 id="18、设计模式"><a href="#18、设计模式" class="headerlink" title="18、设计模式"></a>18、设计模式</h1><p><em><strong>*创建型模式、结构型模式和行为型模式 3 种。*</strong></em></p><p>****创建型模式：用于描述“怎样创建对象”*<em><strong>，它的主要特点是“</strong></em>*将对象的创建与使用分离”*<em><strong>。GoF 中提供了</strong></em>*单例、原型、工厂方法、抽象工厂、建造者****等 5 种创建型模式。</p><p>****结构型模式*<em><strong>：用于描述如何将</strong></em>*类或对象按某种布局组成更大的结构*<em><strong>，GoF 中提供了</strong></em>*代理、适配器、桥接、装饰****、外观、享元、组合等 7 种结构型模式。</p><p>****行为型模式*<em><strong>：用于描述类或</strong></em>*对象之间怎样相互协作共同完成单个对象都无法单独完成的任务*<em><strong>，以及怎样分配职责。GoF 中提供了模板方法、</strong></em>*策略*<em><strong>、命令、</strong></em>*职责链*<em><strong>、状态、</strong></em>*观察者*<em><strong>、中介者、</strong></em>*迭代器、****访问者、备忘录、解释器等 11 种行为型模式。</p><p>****单例（Singleton）模式：某个类只能生成一个实例****，该类提供了一个全局访问点供外部获取该实例，</p><p>****工厂方法（Factory Method）模式*<em><strong>：</strong></em>*定义一个用于创建产品的接口****，由子类决定生产什么产品。</p><p>****抽象工厂（AbstractFactory）模式*<em><strong>：提供一个创建</strong></em>*产品族的接口*<em><strong>，其</strong></em>*每个子类可以生产一系列相关的产品****。</p><p><em><strong>*代理（Proxy）模式*<em><strong>：为某对象提供一种代理以控制对该对象的访问。即</strong></em>*客户端通过代理间接地访问该对象，从而限制、*</strong>***</em>*增强或修改该对象的一些特性。****</p><p><em><strong>*适配器（Adapter）模式*<em><strong>：将一个类的接口转换成客户希望的另外一个接口，使得原本由于</strong></em>*接口不兼容而不能一起工作的那些类能一起工作。*</strong></em></p><p>****装饰（Decorator）模式：动态的给对象增加一些职责，****即增加其额外的功能。</p><p>****策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，****且算法的改变不会影响使用算法的客户。</p><p>****职责链（Chain of Responsibility）模式*<em><strong>：</strong></em>*把请求从链中的一个对象传到下一个对象，直到请求被响应为止****。通过这种方式去除对象之间的耦合。</p><p><em><strong>*观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。*</strong></em></p><p><em><strong>*迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。*</strong></em></p><p><em><strong>*UML图： 三格，上面类名，中间属性变量 -+#~表可见范围。下面是方法。接口有个O,没有正方形圈住。*</strong></em></p><p><em><strong>*依赖关系：——*</strong>***</em>*à**** <em><strong>*A中引用了B的对象。关联关系 ——&gt;如老师教学生这类关系*</strong></em></p><p><em><strong>*聚合关系：——白菱形。整体和部分关系，has-a;只不过部分可脱离整体存在，菱形的那边是整体。如汽车和轮子。*</strong></em></p><p><em><strong>*组合关系：——实体黑菱形。整体和部分的关系，部分不可脱离整体。黑菱形是整体。如头和嘴。*</strong></em></p><p><em><strong>*继承关系：——白三角，继承关系，老师继承人。*</strong></em></p><p><em><strong>*实现关系：——白三角：类实现了接口。*</strong></em></p><p><em><strong>*单例模式：*</strong>***</em>*生成单例的四种方式：懒汉模式，饿汉模式，多线程双重检验模式，静态内部类？****</p><p>1、当一个类只要求生成一个对象的是场景。2、当对象需要被共享的场合。3、类对象需要频繁实例化又被频繁销毁。</p><p>关键点在于：隐藏构造方法， 开放一个静态方法，返回实例对象。有懒汉模式，饿汉模式，和多线程双重检验模式。</p><p><em><strong>*工厂模式：定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体工厂实现类中。抽象工厂模式是工厂模式方法的升级版本，工厂方法模式只能产生一种产品，而抽象工厂模式可以生产多个等级的产品。*</strong></em></p><p><em><strong>*代理模式:在访问对象和目标对象之间创建一个代理对象，代理对象持有对代理对象的引用，访问对象通过代理对象间接访问目标对象。而且代理对象可以扩展目标对象的功能，还一定程度了降级了系统的耦合度。spring*</strong></em> <em><strong>*AOP*</strong>***</em>*是基于代理实现的，当被代理对象实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象， Spring AOP会使用 Cglib 生成一个被代理对象的子类来作为代理.****</p><p>****原型（Prototype）模式的定义如下：****用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。用Clone()方法直接赋值对象。</p><p>****工厂模式*<em><strong>：定义一个创建产品对象的</strong></em>*工厂接口*<em><strong>，将产品对象的</strong></em>*实际创建工作推迟到具体子工厂类当中****。可以随时增加新的具体产品类和对应的具体工厂类。</p><p><em><strong>*抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。*</strong></em></p><p>****代理模式的定义****：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。代理对象可以扩展目标对象的功能；客户端与目标对象分离，在一定程度上降低了系统的耦合度；代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</p><p>动态代理：</p><p>****适配器模式（Adapter）****包含以下主要角色。</p><p>​    ****目标（Target）接口：****当前系统业务所期待的接口，它可以是抽象类或接口。</p><p>​    ****适配者（Adaptee）类：****它是被访问和适配的现存组件库中的组件接口。</p><p>​    ****适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，****让客户按目标接口的格式访问适配者。</p><p>****装饰（Decorator）模式的定义*<em><strong>：指在不改变现有对象结构的情况下，</strong></em>*动态地给该对象增加一些职责****（即增加其额外功能）的模式，它属于对象结构型模式。</p><p>装饰模式主要包含以下角色。</p><p>抽象构件（Component）角色：定义一个抽象接口以规范准备<em><strong>*接收附加责任的对象。*</strong></em></p><p>具体构件（Concrete   Component）角色：实现抽象构件，<em><strong>*通过装饰角色为其添加一些职责。*</strong></em></p><p>抽象装饰（Decorator）角色：****继承抽象构件，并包含具体构件的实例****，可以通过其子类扩展具体构件的功能。</p><p>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</p><p><em><strong>*模板方法模式：*</strong></em></p><p>模板方法（Template Method）模式的定义如下：****定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中****，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。</p><h1 id="19、Spring中用到的设计模式"><a href="#19、Spring中用到的设计模式" class="headerlink" title="19、Spring中用到的设计模式"></a>19、Spring中用到的设计模式</h1><p><em><strong>*工厂设计模式*</strong></em></p><p>​    Spring使用工厂模式可以通过 BeanFactory 或 ApplicationContext 创建 bean 对象。</p><p>​    BeanFactory 采用了工厂设计模式，负责读取 bean 配置文档，管理 bean 的加载，实例化，维护 bean 之间的依赖关系，负责 bean 的生命周期。BeanFactroy采用的是****延迟加载形式来注入Bean的*<em><strong>，即只有在使</strong></em>*用到某个Bean*<em><strong>时(调用getBean())，</strong></em>*才对该Bean进行加载实例化****。</p><p>​    ApplicationContext 除了提供上述 BeanFactory 所能提供的功能之外，还提供了更完整的框架功能：国际化支持、资源访问，比如访问URL和文件、事件机制，同时加载多个配置文件等。ApplicationContext 在解析配置文件时对配置文件中的所有对象都初始化了，getBean() 方法只是获取对象的过程。</p><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="*单例设计模式*"></a><em><strong>*单例设计模式*</strong></em></h2><p>​    Spring 中 bean 的默认作用域就是 singleton(单例)的。单例的好处：对于频繁使用的对象，可以省略创建对象所花费的时间；new 操作的次数减少，这将减轻 GC 压力，缩短 GC 停顿时间。</p><p>​    Spring 通 过 ConcurrentHashMap 实现单例注册表的特殊方式实现单例模式。</p><p><em><strong>*简单来说使用单例模式可以带来下面几个好处:*</strong></em></p><p>​    <em><strong>*对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统*</strong></em></p><p><em><strong>*开销；*</strong></em></p><p>​    <em><strong>*由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。*</strong></em></p><p><em><strong>*class Singleton{*</strong></em></p><p>  <em><strong>*private volatile static Singleton instance;*</strong></em></p><p>  <em><strong>*private Singleton(){*</strong></em></p><p>  <em><strong>*}*</strong></em></p><p>  <em><strong>*public static Singleton getInstance(){*</strong></em></p><p>​    <em><strong>*if (instance == null){*</strong></em></p><p>​      <em><strong>*synchronized (Singleton.class){*</strong></em></p><p>​        <em><strong>*if (instance == null)*</strong></em></p><p>​          <em><strong>*instance = new Singleton();*</strong></em></p><p>​      <em><strong>*}*</strong></em></p><p>​    <em><strong>*}*</strong></em></p><p>​    <em><strong>*return instance;*</strong></em></p><p>  <em><strong>*}*</strong></em></p><p><em><strong>*}*</strong></em></p><p><em><strong>*//懒汉模式，等你调用的时候才开始创建实例；懒加载启动快，资源占用小，使用时才实例化，无锁。非线程安全*</strong></em></p><p><em><strong>*class Singleton1{*</strong></em></p><p>  <em><strong>*private static Singleton1 instance;*</strong></em></p><p>  <em><strong>*private Singleton1(){*</strong></em></p><p>  <em><strong>*}*</strong></em></p><p>  <em><strong>*private static Singleton1 getInstacne(){*</strong></em></p><p>​    <em><strong>*if (instance == null)*</strong></em></p><p>​      <em><strong>*instance = new Singleton1();*</strong></em></p><p>​    <em><strong>*return instance;*</strong></em></p><p>  <em><strong>*}*</strong></em></p><p><em><strong>*}*</strong></em></p><p><em><strong>*//饿汉模式：*</strong></em></p><p><em><strong>*//优点：饿汉模式天生是线程安全的，使用时没有延迟。*</strong></em></p><p><em><strong>*//缺点：启动时即创建实例，启动慢，有可能造成资源浪费。*</strong></em></p><p><em><strong>*class Singleton2{*</strong></em></p><p>  <em><strong>*private static Singleton2 instance = new Singleton2();*</strong></em></p><p>  <em><strong>*private Singleton2(){}*</strong></em></p><p>  <em><strong>*public Singleton2 getInstance(){*</strong></em></p><p>​    <em><strong>*return instance;*</strong></em></p><p>  <em><strong>*}*</strong></em></p><p><em><strong>*}*</strong></em></p><p><em><strong>*// Effective Java 第一版推荐写法*</strong></em></p><p><em><strong>*class Singleton23 {*</strong></em></p><p>  <em><strong>*private static class SingletonHolder {*</strong></em></p><p>​    <em><strong>*private static final Singleton23 INSTANCE = new Singleton23();*</strong></em></p><p>  <em><strong>*}*</strong></em></p><p>  <em><strong>*private Singleton23 (){}*</strong></em></p><p>  <em><strong>*public static final Singleton23 getInstance() {*</strong></em></p><p>​    <em><strong>*return SingletonHolder.INSTANCE;*</strong></em></p><p>  <em><strong>*}*</strong></em></p><p><em><strong>*}*</strong></em></p><h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="*代理设计模式*"></a><em><strong>*代理设计模式*</strong></em></h2><p>​    ****AOP*<em><strong>能够将那些与业务无关，</strong></em>*却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来*<em><strong>，便于</strong></em>*减少系统的重复代码*<em><strong>，</strong></em>*降低模块间的耦合度*<em><strong>，并</strong></em>*有利于未来的可拓展性和可维护性****。</p><p>​    <em><strong>*Spring AOP 就是基于动态代理的,*</strong></em> 如果要代理的对象，实现了某个接口，那么Spring AOP会使用****JDK Proxy****，去创建代理对象，而对于没有实现接口的对象， Spring AOP会使用 <em><strong>*Cglib*</strong></em> 生成一个被代理对象的子类来作为代理.</p><p>​    使用 AOP 之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样大大简化了代码量。我们需要增加新功能时也方便，这样也提高了系统扩展性。日志功能、事务管理等等场景都用到了 AOP 。</p><p>​    <em><strong>*Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。*</strong></em> Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作. Spring AOP 已经集成了 AspectJ , 如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比Spring AOP 快很多。</p><h2 id="模板方法"><a href="#模板方法" class="headerlink" title="*模板方法*"></a><em><strong>*模板方法*</strong></em></h2><p>​    <em><strong>*模板方法模式是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤的实现方式。*</strong></em></p><p>​    Spring 中 jdbcTemplate、hibernateTemplate <em><strong>*等以 Template 结尾的对数据库操作的类，*<em><strong>它们就使用到了模板模式。一般情况下，我们都是使用继承的方式来实现模板模式，但是 Spring 并没有使用这种方式，而是</strong></em>*使用Callback 模式与模板方法模式配合，既达到了代码复用的效果，同时增加了灵活性。*</strong></em></p><h2 id="观察者模式："><a href="#观察者模式：" class="headerlink" title="*观察者模式：*"></a><em><strong>*观察者模式：*</strong></em></h2><p>​    观察者模式是一种对象行为型模式。它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变的时候，这个对象所依赖的对象也会做出反应。Spring 事件驱动模型就是观察者模式很经典的一个应用。比如我们每次添加商品的时候都需要重新更新商品索引，这个时候就可以利用观察者模式来解决这个问题。</p><p><em><strong>*Spring 事件驱动模型中的三种角色：事件角色、事件监听者角色、事件发布角色、*</strong></em></p><p>****事件角色：****ApplicationEvent (org.springframework.context包下)充当事件的角色,这是一个抽象类。</p><p>****事件监听者角色：****ApplicationListener 充当了事件监听者角色，它是一个接口，里面只定义了一个 onApplicationEvent（ApplicationEvent E）方法来处理ApplicationEvent。</p><p><em><strong>*ApplicationEventPublisher 充当了事件的发布者，它也是一个接口。publishEvent(ApplicationEvent event)*</strong></em></p><p>流程：</p><p>定义一个事件: 实现一个继承自 ApplicationEv ent，并且写相应的构造函数；</p><p>定义一个事件监听者：实现 ApplicationListener 接口，重写 onApplicationEvent() 方法；</p><p>使用事件发布者发布消息: 可以通过 ApplicationEventPublisher 的 publishEvent() 方法发布消息</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="*适配器模式:*"></a><em><strong>*适配器模式:*</strong></em></h2><p>适配器模式(Adapter Pattern) 将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。</p><p><em><strong>*spring MVC中的适配器模式:*</strong></em> 在Spring MVC中，DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由HandlerAdapter 适配器处理。HandlerAdapter 作为期望接口，具体的适配器实现类用于对目标类进行适配，Controller 作为需要适配的类。</p><p>Spring AOP 的增强或通知(Advice)使用到了适配器模式，与之相关的接口是AdvisorAdapter。通知有很多类型：前置通知、后置通知、环绕通知、返回通知、异常通知。每种通知都有相对应的拦截器。Spring预定义的通知要通过对应的适配器，适配成 MethodInterceptor接口(方法拦截器)类型的对象（如：MethodBeforeAdviceInterceptor 负责适配 MethodBeforeAdvice）。</p><h2 id="装饰者模式："><a href="#装饰者模式：" class="headerlink" title="*装饰者模式：*"></a><em><strong>*装饰者模式：*</strong></em></h2><p>​    装饰者模式可以动态地给对象添加一些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。简单点儿说就是当我们需要修改原有的功能，但我们又不愿直接去修改原有的代码时，设计一个Decorator套在原有代码外面。其实在 JDK 中就有很多地方用到了装饰者模式，比如 InputStream家族，InputStream 类下有 FileInputStream (读取文件)、BufferedInputStream (增加缓存,使读取文件速度大大提升)等子类都在不修改InputStream 代码的情况下扩展了它的功能。Spring 中配置 DataSource 的时候，DataSource 可能是不同的数据库和数据源。我们能否根据客户的需求在少修改原有类的代码下动态切换不同的数据源？这个时候就要用到装饰者模式(这一点我自己还没太理解具体原理)。</p><p><em><strong>*集合重复问题:*</strong></em></p><p>​    <em><strong>*位图法：集合的最大元素max,创建max+1的数组，如果遇到元素5，设nums[6] = 1,下次还这样时，如果nums[i]=1,表示已经存在。还可以排序。*</strong></em></p><p>​    <em><strong>*布隆过滤器：检测一个元素是否属于一个集合。当他不属于这个集合时，那一定数不属于的。如果判断属于，那不一定。实现原理:位数组和Hash结合。M位的位数组，初始化为0.定义k个不同的hash函数，每个函数都将集合中的元素映射到位数组的一位。向集合中插入元素时，k个哈希得到k位。将这些位设为1.*</strong></em></p><p>​    <em><strong>*新的被检测元素时，看这k位是否全为1.有一个为0，说明不在集合中。*</strong></em></p><p>​    </p><h1 id="20、TOPK问题"><a href="#20、TOPK问题" class="headerlink" title="20、TOPK问题"></a>20、TOPK问题</h1><p>​    <em><strong>*最小堆，建立一个最小堆。一个个遍历。中序遍历最终的最小堆；mlogm建堆m大小。 时间复杂度nmlogm*</strong></em></p><p>​    <em><strong>*分治：将大文件分成小文件，每个小文件用快排算出topk, 然后合并一块求topk.*</strong></em></p><p><em><strong>*频率TOPK, 将数据集按照hash的方法分解成多个小数据集，然后用trie或者hash统计每个小数据集的频率，然后用小顶堆算出每个数据集中出现频率最高的K个，然后算出所有的topK.*</strong></em></p><p><em><strong>*去重：*</strong></em></p><p>​    <em><strong>*位图法： 9位数的话，99999999+1大小的位数组。*</strong></em></p><p><em><strong>*排序问题：*</strong></em></p><p>​    <em><strong>*数据库排序法：文本文件导入数据库，数据库索引排序。*</strong></em></p><p>​    <em><strong>*分治法：分治排序，然后集合。*</strong></em></p><p>​    <em><strong>*位图法：形成max+1的位数组，填入，然后从大到小开始排*</strong></em></p><h1 id="21、SpringBoot框架相关问题总结"><a href="#21、SpringBoot框架相关问题总结" class="headerlink" title="21、SpringBoot框架相关问题总结"></a>21、SpringBoot框架相关问题总结</h1><p>​    Spring Boot是Spring开源组织下的子项目，<em><strong>*是Spring组件一站式解决方法。主要是简化spring的使用难度，简化了配置复杂度，使开发者快速上手。优点有：独立运行，简化配置，自动配置，上手容易。*</strong></em></p><p>Spring Boot 的核心配置文件有哪几个？它们的区别是什么？</p><p>​    <em><strong>*application*</strong></em> 配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。</p><p>​    .properties 和 .yml</p><h2 id="Spring-Boot-的核心注解是哪个："><a href="#Spring-Boot-的核心注解是哪个：" class="headerlink" title="Spring Boot 的核心注解是哪个："></a>Spring Boot 的核心注解是哪个：</h2><p><em><strong>*@*</strong>***</em>*SpringBootApplication****<em><strong>*，他包含了三个注解：*</strong></em></p><p>@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。</p><p>​    从Spring3.0，@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。</p><p>​    <em><strong>*@SpringBootConfiguration 也是来源于 @Configuration，*</strong>***</em>*二者功能都是将当前类标注为配置类，并将当前类里以 @Bean 注解标记的方法的实例注入到srping容器中，实例名即为方法名。****</p><p>@ComponentScan：Spring组件扫描。</p><p>​    <em><strong>*用于将一些标注了特定注解的bean定义*</strong>***</em>*批量采集注册到Spring的IoC容器之中，这****<em><strong>*些特定的注解大致包括：@Controller@Entity@Component@Service@Repository*</strong></em></p><p>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项。</p><p><em><strong>*@EnableAutoConfiguration 注解启用自动配置，*</strong>***</em>*其可以帮助 SpringBoot 应用将所有符合条件的 @Configuration 配置都加载到当前 IoC 容器之中，****</p><h2 id="开启-Spring-Boot-特性有哪几种方式？"><a href="#开启-Spring-Boot-特性有哪几种方式？" class="headerlink" title="*开启 Spring Boot 特性有哪几种方式？*"></a><em><strong>*开启 Spring Boot 特性有哪几种方式？*</strong></em></h2><p><em><strong>*1）继承spring-boot-starter-parent项目2）导入spring-boot-dependencies项目依赖*</strong></em></p><p><em><strong>*SpringBoot内置Tomcat/Jetty容器，可以独立运行。*</strong></em></p><h2 id="运行-Spring-Boot-有哪几种方式？"><a href="#运行-Spring-Boot-有哪几种方式？" class="headerlink" title="*运行 Spring Boot 有哪几种方式？*"></a><em><strong>*运行 Spring Boot 有哪几种方式？*</strong></em></h2><p><em><strong>*1）打包用命令或者放到容器中运行*</strong></em></p><p><em><strong>*3）直接执行 main 方法运行*</strong></em></p><p>2）用 Maven/ Gradle 插件运行</p><h2 id="Spring-Boot-自动配置原理是什么？"><a href="#Spring-Boot-自动配置原理是什么？" class="headerlink" title="Spring Boot 自动配置原理是什么？"></a>Spring Boot 自动配置原理是什么？</h2><p>​    <em><strong>*扫描所有具有META-INF/spring.factories的jar包。spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样的spring.factories文件。*</strong></em></p><p>​    <em><strong>*这个spring.factories文件也是一组一组的key=value的形式，其中一个key是EnableAutoConfiguration类的全类名，而它的value是一个xxxxAutoConfiguration的类名的列表，这些类名以逗号分隔。*</strong></em></p><p>​    <em><strong>*这个@EnableAutoConfiguration注解通过@SpringBootApplication被间接的标记在了Spring Boot的启动类上。在SpringApplication.run(…)的内部就会执行selectImports()方法，找到所有JavaConfig自动配置类的全限定名对应的class，然后将所有自动配置类加载到Spring容器中。*</strong></em></p><p>​    <em><strong>*Spring Boot启动的时候会通过@EnableAutoConfiguration注解找到META-INF/spring.factories配置文件中的所有自动配置类，并对其进行加载，而这些自动配置类都是以AutoConfiguration结尾来命名的，它实际上就是一个JavaConfig形式的Spring容器配置类，它能通过以Properties结尾命名的类中取得在全局配置文件中配置的属性如：server.port，而XxxxProperties类是通过@ConfigurationProperties注解与全局配置文件中对应的属性进行绑定的。*</strong></em></p><h2 id="Starters"><a href="#Starters" class="headerlink" title="*Starters*"></a><em><strong>*Starters*</strong></em></h2><p>​    Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成Spring及其他技术，而不需要到处找示例代码和依赖包。Starters包含了许多项目中需要用到的依赖，它们能快速持续的运行，都是一系列得到支持的管理传递性依赖。</p><p>​    </p><h2 id="Spring-Boot读取配置的几种方式"><a href="#Spring-Boot读取配置的几种方式" class="headerlink" title="*Spring Boot读取配置的几种方式:*"></a><em><strong>*Spring Boot读取配置的几种方式:*</strong></em></h2><p>​    <em><strong>*@*</strong>***</em>*Value****注解读取方式: @Value(“${info.address}”)</p><p>​    <em><strong>*@*</strong>***</em>*ConfigurationProperties****注解读取方式: @ConfigurationProperties(prefix = “info”)</p><p>​        </p><p>​    <em><strong>*读取指定文件资源目录下建立config/db-config.properties:*</strong></em></p><p>@PropertySource+@ConfigurationProperties注解读取方式]</p><p>@PropertySource+@Value注解读取方式</p><p>Spring Boot支持Java Util Logging,Log4j2,Lockback作为日志框架，如果你使用starters启动器，S****pring Boot将使用Logback作为默认日志框架****。无论使用哪种日志框架，Spring <em><strong>*Boot都支持配置将日志输出到控制台或者文件中。*</strong></em></p><p>spring-boot-starter启动器包含spring-boot-starter-logging<em><strong>*启动器并集成了slf4j日志抽象及Logback日志框架。*</strong></em></p><h2 id="SpringBoot热部署："><a href="#SpringBoot热部署：" class="headerlink" title="*SpringBoot热部署：*"></a><em><strong>*SpringBoot热部署：*</strong></em></h2><p>Spring Boot提供了一个名为spring-boot-devtools的模块来使应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用。</p><p>添加依赖模块devtools,在配置文件中自定义。</p><p>\1. # 热部署开关，false即不启用热部署</p><p>\2. spring.devtools.restart.enabled: true</p><p>\3. </p><p>\4. # 指定热部署的目录</p><p>\5. #spring.devtools.restart.additional-paths: src/main/java</p><p>\6. </p><p>\7. # 指定目录不更新</p><p>\8. spring.devtools.restart.exclude: test/**</p><p><em><strong>*pring Boot 可以兼容老 Spring 项目吗，如何做？*</strong></em></p><p><em><strong>*可以兼容，使用 @ImportResource 注解导入老 Spring 项目配置文件*</strong></em></p><h1 id="22、Mybatis"><a href="#22、Mybatis" class="headerlink" title="22、Mybatis"></a>22、Mybatis</h1><p>​    Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，****开发时只需要关注SQL语句本身*<em><strong>，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。MyBatis 可以使用 XML 或注解来</strong></em>*配置和映射原生信息，将 POJO映射成数据库中的记录****。</p><p>​    通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并****通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句*<em><strong>，最后</strong></em>*由mybatis框架执行sql并将结果映射为java对象并返回****。（从执行sql到返回result的过程）。</p><p>Mybaits的优点：基于SQL语句编程，相当灵活；与JDBC相比，减少了50%以上的代码量。与Spring很好的集成。</p><h2 id="MyBatis框架的缺点："><a href="#MyBatis框架的缺点：" class="headerlink" title="*MyBatis框架的缺点：*"></a><em><strong>*MyBatis框架的缺点：*</strong></em></h2><p>****SQL语句的编写工作量较大*<em><strong>；SQL语句</strong></em>*依赖于数据库****，导致数据库移植性差，不能随意更换数据库。</p><p>MyBatis与Hibernate有哪些不同？半ORM框架，MyBatis需要程序员自己编写Sql语句。编写原生态sql，可以严格控制sql执行性能，灵活度高。Hibernate****对象/关系映射能力强*<em><strong>，</strong></em>*数据库无关性好*<em><strong>，对于关系模型要求高的软件，如果用hibernate开发可以</strong></em>*节省很多代码****，提高效率。</p><h2 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="*#{}和${}的区别是什么？*"></a><em><strong>*#{}和${}的区别是什么？*</strong></em></h2><p>****#{}是预编译处理，${}是字符串替换****。Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；使用#{}可以有效的防止SQL注入，提高系统安全性。$方式一般用于传入数据库对象，例如传入表名.</p><p>当实体类中的属性名和表中的字段名不一样 ，怎么办 </p><p>​    1、sql语句中定义字段名的别名2、通过<resultMap>来映射字段名和实体类属性名的一一对应的关系。</p><p>模糊查询：</p><p>​     string wildcardname = “%smi%”;</p><p>  list<name> names = mapper.selectlike(wildcardname);</p>  <select id=”selectlike”><p>   select * from foo where bar like #{value}</p>  </select><p>2、可能引起sql注入。</p><select id=”selectlike”><p>​     select * from foo where bar like “%”#{value}”%”</p></select><p>MyBatis插入数据返回插入对象的主键属性设置：</p><p>useGeneratedKeys=”true” keyProperty=”userId”</p><p><em><strong>*Dao接口即Mapper接口。接口的全限名，就是映射文件中的namespace的值；接口的方法名，就是映射文件中Mapper的Statement的id值；接口方法内的参数，就是传递给sql的参数。Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MapperStatement。在Mybatis中，每一个<select>、<insert>、<update>、<delete>标签，都会被解析为一个MapperStatement对象。*</strong></em></p><p><em><strong>*Mapper接口里的方法，是不能重载的，因为是使用 全限名+方法名 的保存和寻找策略。Mapper 接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Mapper接口生成代理对象proxy，代理对象会拦截接口方法，转而执行MapperStatement所代表的sql，然后将sql执行结果返回。*</strong></em></p><p>****Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页****，而非物理分页。</p><p><em><strong>*分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。*</strong></em></p><p>​    </p><p>使用sql的别名，或者ResultMap,逐一定义数据库列名和对象属性之间的映射关系。有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><p>动态sql：执行原理是根据表达式的值 完成逻辑判断并动态拼接sql的功能。：trim | where | set | foreach | if | choose | when | otherwise | bind。</p><p>Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</p><p>答：<resultMap>、<parameterMap>、<sql>、<include>、<selectKey>，加上动态sql的9个标签，其中<sql>为sql片段标签，通过<include>标签引入sql片段，<selectKey>为不支持自增的主键生成策略标签。</p><p> 不同的Xml映射文件，如果<em><strong>*配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；*</strong></em></p><p>原因****就是namespace+id是作为Map&lt;String, MapperStatement&gt;的key使用的****，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。</p><p>MyBatis实现一对多有几种方式,怎么操作的？</p><p>有联合查询和嵌套查询。联合查询是几个表联合查询,只查询一次,通过在resultMap里面的collection节点配置一对多的类就可以完成；嵌套查询是先查一个表,根据这个表里面的 结果的外键id,去再另外一个表里面查询数据,也是通过配置collection,但另外一个表的查询通过select节点配置。</p><p>接口绑定，****就是在MyBatis中任意定义接口,然后把接口里面的方法和SQL语句绑定, 我们直接调用接口方法就可以,****这样比起原来了SqlSession提供的方法我们可以有更加灵活的选择和设置。</p><p>接口绑定有两种实现方式,****一种是通过注解绑定，就是在接口的方法上面加上 @Select、@Update等注解，里面包含Sql语句来绑定；*<em><strong>另外一种就是</strong></em>*通过xml里面写SQL来绑定, 在这种情况下,要指定xml映射文件里面的namespace必须为接口的全路径名。****当Sql语句比较简单时候,用注解绑定, 当SQL语句比较复杂时候,用xml绑定,一般用xml绑定的比较多。</p><h2 id="ResultMap和ResultType："><a href="#ResultMap和ResultType：" class="headerlink" title="*ResultMap和ResultType：*"></a><em><strong>*ResultMap和ResultType：*</strong></em></h2><p>两者都是表示查询结果集与java对象之间的一种关系，处理查询结果集，映射到java对象。 </p><p><em><strong>*resultMap：表示将查询结果集中的列一一映射到bean对象的各个属性。*</strong></em></p><p>****ResultType:表示的是bean中的对象类****，此时可以省略掉resultMap标签的映射，但是必须保证查询结果集中的属性 和 bean对象类中的属性是一一对应的，此时大小写不敏感，但是有限制。</p><p>parameterType直接将查询结果列值类型自动对应到java对象属性类型上，不再配置映射关系一一对应。</p><h1 id="23、Spring-MVC"><a href="#23、Spring-MVC" class="headerlink" title="23、Spring MVC"></a>23、Spring MVC</h1><h2 id="1、组件"><a href="#1、组件" class="headerlink" title="*1、组件*"></a><em><strong>*1、组件*</strong></em></h2><p>（1）****前端控制器 DispatcherServlet****（不需要程序员开发）</p><p>作用：****接收请求、响应结果，相当于转发器****，有了DispatcherServlet 就减少了其它组件之间的耦合度。</p><p>（2）****处理器映射器HandlerMapping****（不需要程序员开发）</p><p>作用：<em><strong>*根据请求的URL来查找Handler*</strong></em></p><p>（3）处****理器适配器HandlerAdapte****r</p><p>注意：在编写Handler的时候要按照HandlerAdapter要求的规则去编写，这样适配器HandlerAdapter才可以正确的去执行Handler。</p><p>（4）****处理器Handler****（需要程序员开发）</p><p>（5）****视图解析器 ViewResolver****（不需要程序员开发）</p><p>作用：进行视图的解析，****根据视图逻辑名解析成真正的视图（****view）</p><p>（6）视图View（需要程序员开发jsp）</p><p>****View是一个接口， 它的实现类支持不同的视图类型（jsp****，freemarker，pdf等等）</p><h2 id="2-、-SpringMVC常用的注解有哪些？"><a href="#2-、-SpringMVC常用的注解有哪些？" class="headerlink" title="*2*****、*****SpringMVC常用的注解有哪些？*"></a><em><strong>*2*</strong>***</em>*、****<em><strong>*SpringMVC常用的注解有哪些？*</strong></em></h2><p>​    @RequestMapping：用于处理请求 url 映射的注解，可用于类或方法上。</p><p>​    @RequestBody：注解实现接收http请求的json数据，将json转换为java对象。</p><p>​    @ResponseBody：注解实现将conreoller方法返回对象转化为json对象响应给客户。</p><p>控制器注解：一般用@Controller注解,也可以使用@RestController,@RestController注解相当于@ResponseBody ＋ @Controller。方法无法返回到JSP页面，视图解析器不起作用。</p><h2 id="3、如果在拦截请求中，我想拦截get方式提交的方法-怎么配置？"><a href="#3、如果在拦截请求中，我想拦截get方式提交的方法-怎么配置？" class="headerlink" title="*3、如果在拦截请求中，我想拦截get方式提交的方法,怎么配置？*"></a><em><strong>*3、如果在拦截请求中，我想拦截get方式提交的方法,怎么配置？*</strong></em></h2><p>答：可以在@RequestMapping注解里面加上method=RequestMethod.GET。</p><h2 id="4、怎样在方法里面得到Request-或者Session？"><a href="#4、怎样在方法里面得到Request-或者Session？" class="headerlink" title="*4、怎样在方法里面得到Request,或者Session？*"></a><em><strong>*4、怎样在方法里面得到Request,或者Session？*</strong></em></h2><p>答：直接在方法的形参中声明request,SpringMvc就自动把request对象传入。</p><h2 id="5、如果想在拦截的方法里面得到从前台传入的参数-怎么得到？"><a href="#5、如果想在拦截的方法里面得到从前台传入的参数-怎么得到？" class="headerlink" title="*5、如果想在拦截的方法里面得到从前台传入的参数,怎么得到？*"></a><em><strong>*5、如果想在拦截的方法里面得到从前台传入的参数,怎么得到？*</strong></em></h2><p>答：直接在形参里面声明这个参数就可以,但必须名字和传过来的参数一样。</p><h2 id="6、如果前台有很多个参数传入-并且这些参数都是一个对象的-那么怎么样快速得到这个对象？"><a href="#6、如果前台有很多个参数传入-并且这些参数都是一个对象的-那么怎么样快速得到这个对象？" class="headerlink" title="*6、如果前台有很多个参数传入,并且这些参数都是一个对象的,那么怎么样快速得到这个对象？*"></a><em><strong>*6、如果前台有很多个参数传入,并且这些参数都是一个对象的,那么怎么样快速得到这个对象？*</strong></em></h2><p>答：直接在方法中声明这个对象,SpringMvc就自动会把属性赋值到这个对象里面。</p><h2 id="7、SpringMvc中函数的返回值是什么？"><a href="#7、SpringMvc中函数的返回值是什么？" class="headerlink" title="*7、SpringMvc中函数的返回值是什么？*"></a><em><strong>*7、SpringMvc中函数的返回值是什么？*</strong></em></h2><p>答：返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的一起的，但一般用String比较好。</p><h2 id="8、SpringMvc用什么对象从后台向前台传递数据的？"><a href="#8、SpringMvc用什么对象从后台向前台传递数据的？" class="headerlink" title="*8、SpringMvc用什么对象从后台向前台传递数据的？*"></a><em><strong>*8、SpringMvc用什么对象从后台向前台传递数据的？*</strong></em></h2><p>答：通过ModelMap对象,可以在这个对象里面调用put方法,把对象加到里面,前台就可以通过el表达式拿到。</p><h2 id="9、怎么样把ModelMap里面的数据放入Session里面？"><a href="#9、怎么样把ModelMap里面的数据放入Session里面？" class="headerlink" title="*9、怎么样把ModelMap里面的数据放入Session里面？*"></a><em><strong>*9、怎么样把ModelMap里面的数据放入Session里面？*</strong></em></h2><p>答：可以在类上面加上@SessionAttributes注解,里面包含的字符串就是要放入session里面的key。</p><h2 id="注解原理："><a href="#注解原理：" class="headerlink" title="*注解原理：*"></a><em><strong>*注解原理：*</strong></em></h2><p>​    ****注解本质是一个继承了Annotation的特殊接口，****其具体实现类是Java运行时生成的动态代理类。我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p><h1 id="24、Spring"><a href="#24、Spring" class="headerlink" title="24、Spring"></a>24、Spring</h1><h2 id="Spring的AOP理解："><a href="#Spring的AOP理解：" class="headerlink" title="*Spring的AOP理解：*"></a><em><strong>*Spring的AOP理解：*</strong></em></h2><p>OOP面向对象，允许开发者定义纵向的关系，但并适用于定义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。</p><p>AOP，一般称为面向切面，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理。</p><p>AOP实现的关键在于 代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ；动态代理则以Spring AOP为代表。</p><p>（1）AspectJ是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</p><p>（2）Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。</p><p>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：</p><p>​    ①JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例, 生成目标类的代理对象。</p><p>​    ②如果代理类没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p><p>（3）静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处理。</p><p><em><strong>*InvocationHandler 的 invoke(Object proxy,Method method,Object[] args)：proxy是最终生成的代理实例; method 是被代理目标实例的某个具体方法; args 是被代理目标实例某个方法的具体入参, 在方法反射调用时使用。*</strong></em></p><h2 id="Spring的IoC"><a href="#Spring的IoC" class="headerlink" title="*Spring的IoC*"></a><em><strong>*Spring的IoC*</strong></em></h2><p>（1）IOC就是控制反转，是指创建对象的控制权的转移，以前创建对象的主动权和时机是由自己把控的，而现在这种权力转移到Spring容器中，并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系，对象与对象之间松散耦合，也利于功能的复用。DI依赖注入，和控制反转是同一个概念的不同角度的描述，即 应用程序在运行时依赖IoC容器来动态注入对象需要的外部资源。</p><p>（2）最直观的表达就是，IOC让对象的创建不用去new了，可以由spring自动生产，使用java的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法的。</p><p>（3）Spring的IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入。</p><p>（1）BeanFactory：****是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。****ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：</p><p><em><strong>*①*</strong>***</em>*继承MessageSource，因此支持国际化****。</p><p>②****统一的资源文件访问方式****。</p><p><em><strong>*③*</strong>***</em>*提供在监听器中注册bean的事件。****</p><p><em><strong>*④*</strong>***</em>*同时加载多个配置文件。****</p><p>⑤载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。</p><p>（2）<em><strong>*①*</strong>***</em>*BeanFactroy采用的是延迟加载形式来注入Bean的****，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。而ApplicationContext是启动时创建所有的bean;</p><p>6、请解释Spring Bean的生命周期？</p><p> 首先说一下Servlet的生命周期：实例化，初始init，接收请求service，销毁destroy；</p><h2 id="Spring上下文中的Bean生命周期也类似，如下："><a href="#Spring上下文中的Bean生命周期也类似，如下：" class="headerlink" title="*Spring上下文中的Bean生命周期也类似，如下：*"></a><em><strong>*Spring上下文中的Bean生命周期也类似，如下：*</strong></em></h2><p><em><strong>*（1）实例化Bean：*</strong></em></p><p>对于BeanFactory容器，<em><strong>*当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。*<em><strong>对于ApplicationContext容器，当容器启动结束后，</strong></em>*通过获取BeanDefinition对象中的信息，实例化所有的bean。*</strong></em></p><p>（2）<em><strong>*设置对象属性（依赖注入）：*</strong></em></p><p>实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDefinition中的信息 以及 通过BeanWrapper提供的设置属性的接口<em><strong>*完成依赖注入。*</strong></em></p><p>（3）处理Aware接口：</p><p>接着，S<em><strong>*pring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean：*</strong></em></p><p>①如果这个Bean已经实现了****BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法****，此处传递的就是Spring配置文件中Bean的id值；</p><p>②如果这个Bean已经实现了****BeanFactoryAware接口，会调用它实现的setBeanFactory()方法****，传递的是Spring工厂自身。</p><p>③如果这个Bean已经实现了****ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法****，传入Spring上下文；</p><p>（4）BeanPostProcessor：</p><p>如果想对Bean进行一些<em><strong>*自定义的处理，那么可以让Bean实现了BeanPostProcessor接口*<em><strong>，那将会调用</strong></em>*postProcessBeforeInitialization(Object obj, String s)方法。*</strong></em></p><p>（5）InitializingBean 与 init-method：</p><p>如果Bean在Spring配置文件中配置了 <em><strong>*init-method 属性，则会自动调用其配置的初始化方法。*</strong></em></p><p>（6）如果这个Bean实现了<em><strong>*BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；*<em><strong>由于这个方法是在Bean初始化结束时调用的，</strong></em>*所以可以被应用于内存或缓存技术；*</strong></em></p><p>以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。</p><p><em><strong>*（7）DisposableBean：*</strong></em></p><p>当Bean不再需要时，会经过清理阶段，<em><strong>*如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；*</strong></em></p><p>（8）destroy-method：</p><p>最后，如果这个Bean的Spring配置中配置了<em><strong>*destroy-method属性，会自动调用其配置的销毁方法*</strong></em></p><h2 id="Spring的自动装配："><a href="#Spring的自动装配：" class="headerlink" title="*Spring的自动装配：*"></a><em><strong>*Spring的自动装配：*</strong></em></h2><p>（1）no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。</p><p>（2****）byName：通过bean的名称进行自动装配****，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。 </p><p>（3<em><strong>*）byType：通过参数的数据类型进行自动装配。*</strong></em></p><p>（4）constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</p><p>（5）autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。</p><p>@Autowired和@Resource之间的区别</p><p>(1) @Autowired****默认是按照类型装配注入的*<em><strong>，</strong></em>*默认情况下它要求依赖对象必须存在****（可以设置它required属性为false）。</p><p>(2) @Resource<em><strong>*默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。*</strong></em></p><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="*Spring事务*"></a><em><strong>*Spring事务*</strong></em></h2><p><em><strong>*本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。*</strong></em></p><h2 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="*AOP通知类型*"></a><em><strong>*AOP通知类型*</strong></em></h2><p><em><strong>*前置通知，后置通知，返回后通知，抛出异常通知，环绕通知。*</strong></em></p><h1 id="25、常用数据结构"><a href="#25、常用数据结构" class="headerlink" title="25、常用数据结构"></a>25、常用数据结构</h1><h2 id="25-1、字典树"><a href="#25-1、字典树" class="headerlink" title="25.1、字典树"></a>25.1、字典树</h2><p>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</p><p>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</p><p>每个节点的所有子节点包含的字符都不相同。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20210527</title>
      <link href="2021/05/27/20210527/"/>
      <url>2021/05/27/20210527/</url>
      
        <content type="html"><![CDATA[<h1 id="1、MySQL查询优化进一步学习"><a href="#1、MySQL查询优化进一步学习" class="headerlink" title="1、MySQL查询优化进一步学习"></a>1、MySQL查询优化进一步学习</h1><h2 id="1-1、子查询优化"><a href="#1-1、子查询优化" class="headerlink" title="1.1、子查询优化"></a>1.1、子查询优化</h2><p>MySQL支持的子查询优化策略如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526094636680.png" alt="image-20210526094636680"></p><p>使用MySQL trace工具，跟踪优化器对SQL的整个优化执行过程。</p><p>首先建三张表，并添加索引</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t1<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t1<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span><span class="token number">a1</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token number">b1</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>idx_a1<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">a1</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t2<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t2<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span><span class="token number">a2</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token number">b2</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>idx_a2<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">a2</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t3<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t3<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span><span class="token number">a3</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token number">b3</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>idx_a3<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">a3</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后每张表插入1万条数据</p><pre class="line-numbers language-SQL"><code class="language-SQL">CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_insert_data`()BEGIN        declare i int default 0;        set autocommit = 0;        while i < 10000        do            insert into t3(a3,b3) values(i+1, i+2);        set i=i+1;        if            i%2000=0        then            commit;        end if;        end while;END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行下面查询语句：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from t1 where t1.a1 in (select a2 from t2 where t2.a2 > 30);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询执行计划如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526143049348.png" alt="image-20210526143049348"></p><p>配置trace参数：</p><pre class="line-numbers language-shell"><code class="language-shell">set OPTIMIZER_TRACE="enabled=on",END_MARKERS_IN_JSON=on,optimizer_trace_max_mem_size=100000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后执行下面语句查看最新一条SQL的查询计划生成过程：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from information_schema.optimizer_trace\G;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部分截图如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526141723311.png" alt="image-20210526141723311"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526141746939.png" alt="image-20210526141746939"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142252352.png" alt="image-20210526142252352"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142316317.png" alt="image-20210526142316317"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142454699.png" alt="image-20210526142454699"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142540686.png" alt="image-20210526142540686"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142639264.png" alt="image-20210526142639264"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142711465.png" alt="image-20210526142711465"></p><p>分析trace记录，经查询优化器处理后的SQL如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select `t1`.`a1` AS `a1`,`t1`.`b1` AS `b1` from `t1` semi join (`t2`) where (`<subquery2>`.`a2` = `t1`.`a1`) and (`t2`.`a2` > 30)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结合查询计划可知t2表被物化之后被上拉到表t1层与t1执行了半连接，即<strong>MySQL支持将IN非相关子查询转换为半连接</strong>。</p><h2 id="1-2、条件化简"><a href="#1-2、条件化简" class="headerlink" title="1.2、条件化简"></a>1.2、条件化简</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526144355309.png" alt="image-20210526144355309"></p><p>例如对于如下SQL：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from t1,t2 where 0>1+2 and a1=20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 查询计划如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526144626708.png" alt="image-20210526144626708"></p><p>查询优化器处理后的SQL如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>t1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a1</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">a1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>t1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b1</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">b1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>t2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a2</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">a2</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>t2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b2</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">b2</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">`</span>t1<span class="token punctuation">`</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>t2<span class="token punctuation">`</span><span class="token keyword">where</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-3、消除外连接"><a href="#1-3、消除外连接" class="headerlink" title="1.3、消除外连接"></a>1.3、消除外连接</h2><p>当内表符合“空值拒绝”条件时，外连接可以转换为内连接。</p><p>首先建立三张表，并插入数据</p><pre class="line-numbers language-SQL"><code class="language-SQL">create table t_1(t_1_id int unique, t_1_col_1 int, t_1_col_2 varchar(10));create table t_2(t_2_id int unique, t_2_col_1 int, t_2_col_2 varchar(10));insert into t_1 values(1,11,'t_1_1');insert into t_1 values(2,12,NULL);insert into t_1 values(3,NULL,'t_1_3');insert into t_1 values(4,14,'t_1_4');insert into t_1 values(5,15,NULL);insert into t_1 values(7,NULL,NULL);insert into t_2 values(1,11,'t_2_1');insert into t_2 values(2,NULL,'t_2_2');insert into t_2 values(3,13,NULL);insert into t_2 values(4,14,'t_2_4');insert into t_2 values(6,16,'t_2_6');insert into t_2 values(7,NULL,NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比下面三条SQL和相应查询计划：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> <span class="token boolean">true</span> <span class="token keyword">where</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> t_1_id<span class="token operator">=</span>t_2_id <span class="token keyword">where</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> <span class="token boolean">true</span> <span class="token keyword">where</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> t_1_id<span class="token operator">=</span>t_2_id <span class="token keyword">where</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于查询1和3，结果是一样的，如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526151501757.png" alt="image-20210526151501757"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526151534435.png" alt="image-20210526151534435"></p><p>因为语句1和3都使用了where t_1_id=t_2_id，满足空值拒绝的条件，因此可以转换为内连接。</p><p>此外，他们的查询计划也是相同的：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526162535092.png" alt="image-20210526162535092"></p><p>查看trace可知优化后的查询语句如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select sql_no_cache `t_1`.`t_1_id` AS `t_1_id`,`t_1`.`t_1_col_1` AS `t_1_col_1`,`t_1`.`t_1_col_2` AS `t_1_col_2`,`t_2`.`t_2_id` AS `t_2_id`,`t_2`.`t_2_col_1` AS `t_2_col_1`,`t_2`.`t_2_col_2` AS `t_2_col_2` from `t_1` join `t_2` where (`t_1`.`t_1_id` = `t_2`.`t_2_id`) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>确实转成了内连接。</p><p>而对于第2条语句，因为没有where条件，只有join/on，对于t_id_1=5时，右表只有NULL进行匹配，并且不会拒绝。因此不满足空值拒绝的条件，从而不能转换为内连接。执行结果如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526162333738.png" alt="image-20210526162333738"></p><p>查询计划如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526162737388.png" alt="image-20210526162737388"></p><p>与上面唯一不同的是第一行的possible_keys为NULL</p><p>优化后的查询语句如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select sql_no_cache `t_1`.`t_1_id` AS `t_1_id`,`t_1`.`t_1_col_1` AS `t_1_col_1`,`t_1`.`t_1_col_2` AS `t_1_col_2`,`t_2`.`t_2_id` AS `t_2_id`,`t_2`.`t_2_col_1` AS `t_2_col_1`,`t_2`.`t_2_col_2` AS `t_2_col_2` from `t_1` left join `t_2` on(`t_1`.`t_1_id` = `t_2`.`t_2_id`)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到仍然是left join并没有转为内连接</p><h2 id="1-4、语义优化"><a href="#1-4、语义优化" class="headerlink" title="1.4、语义优化"></a>1.4、语义优化</h2><h3 id="1-4-1、检测空回答集"><a href="#1-4-1、检测空回答集" class="headerlink" title="1.4.1、检测空回答集"></a>1.4.1、检测空回答集</h3><p>首先，建表插入数据</p><pre class="line-numbers language-SQL"><code class="language-SQL">create table student(name varchar(30) not null, age int);insert into student values('antirez',23);insert into student values('James Gosling',22);insert into student values('Rod Johnson',19);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于下面查询语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">is</span> <span class="token boolean">NULL</span> <span class="token operator">and</span> age <span class="token operator">></span> <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看查询计划：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526165348791.png" alt="image-20210526165348791"></p><p>优化后的SQL如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select `student`.`name` AS `name`,`student`.`age` AS `age` from `student` where 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从查询计划上看，在列name上进行了过滤操作，因此extra是impossible where， 由此可知MySQL是可以对空值约束进行语义优化的</p><h3 id="1-4-2、利用索引优化排序操作"><a href="#1-4-2、利用索引优化排序操作" class="headerlink" title="1.4.2、利用索引优化排序操作"></a>1.4.2、利用索引优化排序操作</h3><p>建表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t4<span class="token punctuation">(</span><span class="token number">a</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">b</span> <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先看下面两条SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t4 tmp1<span class="token punctuation">,</span> t4 tmp2 <span class="token keyword">where</span> tmp1<span class="token number">.b</span> <span class="token operator">=</span> tmp2<span class="token number">.b</span> <span class="token keyword">order</span> <span class="token keyword">by</span> tmp1<span class="token number">.b</span> <span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t4 tmp1<span class="token punctuation">,</span> t4 tmp2 <span class="token keyword">where</span> tmp1<span class="token number">.a</span> <span class="token operator">=</span> tmp2<span class="token number">.a</span> <span class="token keyword">order</span> <span class="token keyword">by</span> tmp1<span class="token number">.a</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526171448264.png" alt="image-20210526171448264"></p><p>优化后的SQL分别如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select `tmp1`.`a` AS `a`,`tmp1`.`b` AS `b`,`tmp2`.`a` AS `a`,`tmp2`.`b` AS `b` from `t4` `tmp1` join `t4` `tmp2` where (`tmp1`.`b` = `tmp2`.`b`) order by `tmp1`.`b`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tmp2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tmp2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">`</span>t4<span class="token punctuation">`</span> <span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>t4<span class="token punctuation">`</span> <span class="token punctuation">`</span>tmp2<span class="token punctuation">`</span> <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>tmp2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从查询计划和优化后的SQL来看，对第一条语句，仍然是先连接后排序，MySQL对此没有进行优化；对第二条语句，连接之后用临时文件进行了排序操作，也没有进行优化。</p><p>再看下面两条SQL，只在单表的索引列上进行排序查询：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t4 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token number">b</span> <span class="token keyword">from</span> t4 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526172727865.png" alt="image-20210526172727865"></p><p>从查询计划看，对第一条SQL，type为ALL，即进行了全表扫描，extra为using  filesort表示进行了排序，没有利用索引进行排序优化；对第二条SQL，type为index，即进行了索引扫描，extra为using index，表示利用索引进行了排序优化。</p><p>分析以上实验可知：MySQL支持利用索引优化排序操作，但是条件很严格（选择列只有排序列，且为索引列）。</p><h2 id="1-5、非SPJ优化"><a href="#1-5、非SPJ优化" class="headerlink" title="1.5、非SPJ优化"></a>1.5、非SPJ优化</h2><h3 id="1-5-1、group-by优化"><a href="#1-5-1、group-by优化" class="headerlink" title="1.5.1、group by优化"></a>1.5.1、group by优化</h3><p>常规处理方法是创建一个临时表执行分组操作，对他的优化一般是利用索引，有loose index scan和tight index scan两种方式</p><p>建表：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_god<span class="token punctuation">(</span><span class="token number">a</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">b</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">c</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">d</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">e</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> t_god_idx_1 <span class="token keyword">on</span> t_god<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> t_god_idx_2 <span class="token keyword">on</span> t_god<span class="token punctuation">(</span><span class="token number">d</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行下面SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token number">a</span> <span class="token keyword">from</span> t_god <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526180449225.png" alt="image-20210526180449225"></p><p>type为index表示进行了索引扫描，extra为using index表示利用索引进行了分组优化。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_god <span class="token keyword">where</span> <span class="token number">c</span><span class="token operator">></span><span class="token number">2</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526180736247.png" alt="image-20210526180736247"></p><p>从查询计划看，使用索引对带有min聚合函数的分组进行了优化</p><h3 id="1-5-2、order-by优化"><a href="#1-5-2、order-by优化" class="headerlink" title="1.5.2、order by优化"></a>1.5.2、order by优化</h3><p>MySQL提供了两种排序算法，分别是双路排序算法和单路排序算法</p><ul><li>双路排序算法：只对order by子句包含的列进行排序，适用于blob和text类型列参与的排序</li><li>单路排序算法：除了order by子句包含的列，还利用查询目标列进行排序，适用于除blob和text类型外的所有类型的排序</li></ul><p>建表：</p><pre class="line-numbers language-SQL"><code class="language-SQL">create table t_o1(a1 int unique, b1 int);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看下面两条SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_o1 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a1</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token number">a1</span> <span class="token keyword">from</span> t_o1 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526191310674.png" alt="image-20210526191310674"></p><p>由查询计划可知，第一条SQL使用了全表扫描，并进行了排序（using filesort），但没有使用索引进行优化；第二条SQL使用索引扫描，且用索引对排序进行了优化。对比可知，<strong>MySQL支持用索引消除排序技术，但仅限于目标列是索引列</strong>。</p><h3 id="1-5-3、distinct优化"><a href="#1-5-3、distinct优化" class="headerlink" title="1.5.3、distinct优化"></a>1.5.3、distinct优化</h3><p>建表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t5<span class="token punctuation">(</span><span class="token number">a</span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token number">b</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行下面SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token number">a</span> <span class="token keyword">from</span> t5<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526192031048.png" alt="image-20210526192031048"></p><p>从查询计划看，在表t5上执行了索引扫描（type=index），并且利用索引（extra=using index）对distinct进行了优化</p><h3 id="1-5-4、limit优化"><a href="#1-5-4、limit优化" class="headerlink" title="1.5.4、limit优化"></a>1.5.4、limit优化</h3><p>MySQL支持对不带having语句的limit进行优化，主要优化点如下：</p><ul><li>对单表扫描的影响：索引扫描代价更小，使用索引扫描优化</li><li>对排序的影响：如果limit和order by一起使用，当取到limit设定的个数后，停止排序</li><li>对去重的影响：如果limit和distinct一起使用，当取到limit设定的个数后，停止去重操作</li><li>受分组的影响：如果limit和group by一起使用，group by按索引有序计算每个组的总数过程中，limit操作不必计数直到下一个分组开始计算</li><li>Limit 0：直接返回空结果集</li></ul><p>单表排序 + limit操作的格式如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> single_table <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">order</span> <span class="token keyword">by</span> non_index_column <span class="token punctuation">[</span><span class="token keyword">desc</span><span class="token punctuation">]</span> <span class="token keyword">limit</span> <span class="token punctuation">[</span>M<span class="token punctuation">,</span><span class="token punctuation">]</span>N<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>limit对排序算法的影响如下：</p><ul><li>通常排序算法：<ul><li>扫描表，重复以下步骤直到文件结束<ul><li>把扫描的元组放入排序的缓存直到缓存填满</li><li>把排序缓存中的前N（或者M+N）行写入一个“待归并文件”</li></ul></li><li>对归并文件排序</li><li>按序返回所有文件的前N行（指定M的话，就跳过M行再取N行）</li></ul></li><li>受limit操作影响改进的算法：（适用于N（M+N）行待排序的元素小于排序缓存）<ul><li>扫描表，把每一个满足条件的元组插入一个按排序有序的队列</li><li>如果队列满，则淘汰最后一个再插入新的</li><li>返回前N行（如果指定M，则跳过M行再取N行）</li></ul></li></ul><h1 id="2、和张柯学长的讨论"><a href="#2、和张柯学长的讨论" class="headerlink" title="2、和张柯学长的讨论"></a>2、和张柯学长的讨论</h1><h2 id="2-1、多表连接查询优化部分的代价估算怎么做？如何改？"><a href="#2-1、多表连接查询优化部分的代价估算怎么做？如何改？" class="headerlink" title="2.1、多表连接查询优化部分的代价估算怎么做？如何改？"></a>2.1、多表连接查询优化部分的代价估算怎么做？如何改？</h2><ul><li><p>多表连接里是否下推</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526203125342.png" alt="image-20210526203125342"></p></li><li><p>从MySQL出发，针对不同版本ma的特性，优化器代价估算应该做哪些调整</p><ul><li>分离版：写变快，读变慢，应该减少写代价，增加读代价，并且考虑网络代价和磁盘IO的关系（常数）</li><li>主从版：对于写操作，CE节点CPU代价变大；SE节点日志应用代价（同步）</li><li>多SE版：写变慢，raft比Quorum快，读目前和分离版一样</li></ul></li></ul><h2 id="2-2、查询重写-查询计划树下沉-和-SQL语句改写下沉，哪个方案更好？实现有什么问题"><a href="#2-2、查询重写-查询计划树下沉-和-SQL语句改写下沉，哪个方案更好？实现有什么问题" class="headerlink" title="2.2、查询重写-查询计划树下沉 和 SQL语句改写下沉，哪个方案更好？实现有什么问题"></a>2.2、查询重写-查询计划树下沉 和 SQL语句改写下沉，哪个方案更好？实现有什么问题</h2><table><thead><tr><th></th><th>下推查询树</th><th>下推SQL</th></tr></thead><tbody><tr><td>实现复杂性</td><td>非常复杂，工作量大</td><td>相对容易实现</td></tr><tr><td>网络传输代价</td><td>很大</td><td>较小（信息传输密度大）</td></tr><tr><td>CE计算代价</td><td>序列化代价</td><td>从查询计划树转换成SQL的代价</td></tr><tr><td>SE计算代价</td><td>反序列化代价</td><td>解析SQL生成查询计划树</td></tr><tr><td>可移植性</td><td>较差</td><td>较好</td></tr><tr><td>优势</td><td>表比较多</td><td>表较少</td></tr></tbody></table><h2 id="2-3-能不能做SE层带数据版本的查询？（把CE事务可见-对应为：SE数据版本-是否可行？）"><a href="#2-3-能不能做SE层带数据版本的查询？（把CE事务可见-对应为：SE数据版本-是否可行？）" class="headerlink" title="2.3. 能不能做SE层带数据版本的查询？（把CE事务可见 对应为：SE数据版本 是否可行？）"></a>2.3. 能不能做SE层带数据版本的查询？（把CE事务可见 对应为：SE数据版本 是否可行？）</h2><p>理论上可行。这个要参考MVCC和HTAP相关论文，进一步学习调研。</p><p>可能实现思路：</p><ul><li>延缓和OLAP请求的页相关的redo日志的应用（可能产生redo堆积）</li><li>为OLTP需要应用redo的页保留副本（可能产生较多副本，占用较大内存）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子查询优化 </tag>
            
            <tag> 条件化简 </tag>
            
            <tag> 消除外连接 </tag>
            
            <tag> 语义优化 </tag>
            
            <tag> 非SPJ优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210527</title>
      <link href="2021/05/27/20210527-1/"/>
      <url>2021/05/27/20210527-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1、MySQL查询优化进一步学习"><a href="#1、MySQL查询优化进一步学习" class="headerlink" title="1、MySQL查询优化进一步学习"></a>1、MySQL查询优化进一步学习</h1><h2 id="1-1、子查询优化"><a href="#1-1、子查询优化" class="headerlink" title="1.1、子查询优化"></a>1.1、子查询优化</h2><p>MySQL支持的子查询优化策略如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526094636680.png" alt="image-20210526094636680"></p><p>使用MySQL trace工具，跟踪优化器对SQL的整个优化执行过程。</p><p>首先建三张表，并添加索引</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t1<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t1<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span><span class="token number">a1</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token number">b1</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>idx_a1<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">a1</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t2<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t2<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span><span class="token number">a2</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token number">b2</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>idx_a2<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">a2</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t3<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t3<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span><span class="token number">a3</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token number">b3</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>idx_a3<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">a3</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后每张表插入1万条数据</p><pre class="line-numbers language-SQL"><code class="language-SQL">CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_insert_data`()BEGIN        declare i int default 0;        set autocommit = 0;        while i < 10000        do            insert into t3(a3,b3) values(i+1, i+2);        set i=i+1;        if            i%2000=0        then            commit;        end if;        end while;END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行下面查询语句：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from t1 where t1.a1 in (select a2 from t2 where t2.a2 > 30);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询执行计划如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526143049348.png" alt="image-20210526143049348"></p><p>配置trace参数：</p><pre class="line-numbers language-shell"><code class="language-shell">set OPTIMIZER_TRACE="enabled=on",END_MARKERS_IN_JSON=on,optimizer_trace_max_mem_size=100000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后执行下面语句查看最新一条SQL的查询计划生成过程：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from information_schema.optimizer_trace\G;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部分截图如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526141723311.png" alt="image-20210526141723311"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526141746939.png" alt="image-20210526141746939"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142252352.png" alt="image-20210526142252352"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142316317.png" alt="image-20210526142316317"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142454699.png" alt="image-20210526142454699"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142540686.png" alt="image-20210526142540686"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142639264.png" alt="image-20210526142639264"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526142711465.png" alt="image-20210526142711465"></p><p>分析trace记录，经查询优化器处理后的SQL如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select `t1`.`a1` AS `a1`,`t1`.`b1` AS `b1` from `t1` semi join (`t2`) where (`<subquery2>`.`a2` = `t1`.`a1`) and (`t2`.`a2` > 30)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结合查询计划可知t2表被物化之后被上拉到表t1层与t1执行了半连接，即<strong>MySQL支持将IN非相关子查询转换为半连接</strong>。</p><h2 id="1-2、条件化简"><a href="#1-2、条件化简" class="headerlink" title="1.2、条件化简"></a>1.2、条件化简</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526144355309.png" alt="image-20210526144355309"></p><p>例如对于如下SQL：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select * from t1,t2 where 0>1+2 and a1=20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 查询计划如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526144626708.png" alt="image-20210526144626708"></p><p>查询优化器处理后的SQL如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>t1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a1</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">a1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>t1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b1</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">b1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>t2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a2</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">a2</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>t2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b2</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">b2</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">`</span>t1<span class="token punctuation">`</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>t2<span class="token punctuation">`</span><span class="token keyword">where</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-3、消除外连接"><a href="#1-3、消除外连接" class="headerlink" title="1.3、消除外连接"></a>1.3、消除外连接</h2><p>当内表符合“空值拒绝”条件时，外连接可以转换为内连接。</p><p>首先建立三张表，并插入数据</p><pre class="line-numbers language-SQL"><code class="language-SQL">create table t_1(t_1_id int unique, t_1_col_1 int, t_1_col_2 varchar(10));create table t_2(t_2_id int unique, t_2_col_1 int, t_2_col_2 varchar(10));insert into t_1 values(1,11,'t_1_1');insert into t_1 values(2,12,NULL);insert into t_1 values(3,NULL,'t_1_3');insert into t_1 values(4,14,'t_1_4');insert into t_1 values(5,15,NULL);insert into t_1 values(7,NULL,NULL);insert into t_2 values(1,11,'t_2_1');insert into t_2 values(2,NULL,'t_2_2');insert into t_2 values(3,13,NULL);insert into t_2 values(4,14,'t_2_4');insert into t_2 values(6,16,'t_2_6');insert into t_2 values(7,NULL,NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比下面三条SQL和相应查询计划：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> <span class="token boolean">true</span> <span class="token keyword">where</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> t_1_id<span class="token operator">=</span>t_2_id <span class="token keyword">where</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> <span class="token boolean">true</span> <span class="token keyword">where</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_1 <span class="token keyword">left</span> <span class="token keyword">join</span> t_2 <span class="token keyword">on</span> t_1_id<span class="token operator">=</span>t_2_id <span class="token keyword">where</span> t_1_id<span class="token operator">=</span>t_2_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于查询1和3，结果是一样的，如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526151501757.png" alt="image-20210526151501757"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526151534435.png" alt="image-20210526151534435"></p><p>因为语句1和3都使用了where t_1_id=t_2_id，满足空值拒绝的条件，因此可以转换为内连接。</p><p>此外，他们的查询计划也是相同的：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526162535092.png" alt="image-20210526162535092"></p><p>查看trace可知优化后的查询语句如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select sql_no_cache `t_1`.`t_1_id` AS `t_1_id`,`t_1`.`t_1_col_1` AS `t_1_col_1`,`t_1`.`t_1_col_2` AS `t_1_col_2`,`t_2`.`t_2_id` AS `t_2_id`,`t_2`.`t_2_col_1` AS `t_2_col_1`,`t_2`.`t_2_col_2` AS `t_2_col_2` from `t_1` join `t_2` where (`t_1`.`t_1_id` = `t_2`.`t_2_id`) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>确实转成了内连接。</p><p>而对于第2条语句，因为没有where条件，只有join/on，对于t_id_1=5时，右表只有NULL进行匹配，并且不会拒绝。因此不满足空值拒绝的条件，从而不能转换为内连接。执行结果如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526162333738.png" alt="image-20210526162333738"></p><p>查询计划如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526162737388.png" alt="image-20210526162737388"></p><p>与上面唯一不同的是第一行的possible_keys为NULL</p><p>优化后的查询语句如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select sql_no_cache `t_1`.`t_1_id` AS `t_1_id`,`t_1`.`t_1_col_1` AS `t_1_col_1`,`t_1`.`t_1_col_2` AS `t_1_col_2`,`t_2`.`t_2_id` AS `t_2_id`,`t_2`.`t_2_col_1` AS `t_2_col_1`,`t_2`.`t_2_col_2` AS `t_2_col_2` from `t_1` left join `t_2` on(`t_1`.`t_1_id` = `t_2`.`t_2_id`)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到仍然是left join并没有转为内连接</p><h2 id="1-4、语义优化"><a href="#1-4、语义优化" class="headerlink" title="1.4、语义优化"></a>1.4、语义优化</h2><h3 id="1-4-1、检测空回答集"><a href="#1-4-1、检测空回答集" class="headerlink" title="1.4.1、检测空回答集"></a>1.4.1、检测空回答集</h3><p>首先，建表插入数据</p><pre class="line-numbers language-SQL"><code class="language-SQL">create table student(name varchar(30) not null, age int);insert into student values('antirez',23);insert into student values('James Gosling',22);insert into student values('Rod Johnson',19);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于下面查询语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">is</span> <span class="token boolean">NULL</span> <span class="token operator">and</span> age <span class="token operator">></span> <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看查询计划：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526165348791.png" alt="image-20210526165348791"></p><p>优化后的SQL如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select `student`.`name` AS `name`,`student`.`age` AS `age` from `student` where 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从查询计划上看，在列name上进行了过滤操作，因此extra是impossible where， 由此可知MySQL是可以对空值约束进行语义优化的</p><h3 id="1-4-2、利用索引优化排序操作"><a href="#1-4-2、利用索引优化排序操作" class="headerlink" title="1.4.2、利用索引优化排序操作"></a>1.4.2、利用索引优化排序操作</h3><p>建表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t4<span class="token punctuation">(</span><span class="token number">a</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">b</span> <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先看下面两条SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t4 tmp1<span class="token punctuation">,</span> t4 tmp2 <span class="token keyword">where</span> tmp1<span class="token number">.b</span> <span class="token operator">=</span> tmp2<span class="token number">.b</span> <span class="token keyword">order</span> <span class="token keyword">by</span> tmp1<span class="token number">.b</span> <span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t4 tmp1<span class="token punctuation">,</span> t4 tmp2 <span class="token keyword">where</span> tmp1<span class="token number">.a</span> <span class="token operator">=</span> tmp2<span class="token number">.a</span> <span class="token keyword">order</span> <span class="token keyword">by</span> tmp1<span class="token number">.a</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526171448264.png" alt="image-20210526171448264"></p><p>优化后的SQL分别如下：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select `tmp1`.`a` AS `a`,`tmp1`.`b` AS `b`,`tmp2`.`a` AS `a`,`tmp2`.`b` AS `b` from `t4` `tmp1` join `t4` `tmp2` where (`tmp1`.`b` = `tmp2`.`b`) order by `tmp1`.`b`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tmp2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tmp2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">`</span>t4<span class="token punctuation">`</span> <span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>t4<span class="token punctuation">`</span> <span class="token punctuation">`</span>tmp2<span class="token punctuation">`</span> <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>tmp2<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">`</span>tmp1<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从查询计划和优化后的SQL来看，对第一条语句，仍然是先连接后排序，MySQL对此没有进行优化；对第二条语句，连接之后用临时文件进行了排序操作，也没有进行优化。</p><p>再看下面两条SQL，只在单表的索引列上进行排序查询：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t4 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token number">b</span> <span class="token keyword">from</span> t4 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526172727865.png" alt="image-20210526172727865"></p><p>从查询计划看，对第一条SQL，type为ALL，即进行了全表扫描，extra为using  filesort表示进行了排序，没有利用索引进行排序优化；对第二条SQL，type为index，即进行了索引扫描，extra为using index，表示利用索引进行了排序优化。</p><p>分析以上实验可知：MySQL支持利用索引优化排序操作，但是条件很严格（选择列只有排序列，且为索引列）。</p><h2 id="1-5、非SPJ优化"><a href="#1-5、非SPJ优化" class="headerlink" title="1.5、非SPJ优化"></a>1.5、非SPJ优化</h2><h3 id="1-5-1、group-by优化"><a href="#1-5-1、group-by优化" class="headerlink" title="1.5.1、group by优化"></a>1.5.1、group by优化</h3><p>常规处理方法是创建一个临时表执行分组操作，对他的优化一般是利用索引，有loose index scan和tight index scan两种方式</p><p>建表：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_god<span class="token punctuation">(</span><span class="token number">a</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">b</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">c</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">d</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">e</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> t_god_idx_1 <span class="token keyword">on</span> t_god<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> t_god_idx_2 <span class="token keyword">on</span> t_god<span class="token punctuation">(</span><span class="token number">d</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行下面SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token number">a</span> <span class="token keyword">from</span> t_god <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526180449225.png" alt="image-20210526180449225"></p><p>type为index表示进行了索引扫描，extra为using index表示利用索引进行了分组优化。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_god <span class="token keyword">where</span> <span class="token number">c</span><span class="token operator">></span><span class="token number">2</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526180736247.png" alt="image-20210526180736247"></p><p>从查询计划看，使用索引对带有min聚合函数的分组进行了优化</p><h3 id="1-5-2、order-by优化"><a href="#1-5-2、order-by优化" class="headerlink" title="1.5.2、order by优化"></a>1.5.2、order by优化</h3><p>MySQL提供了两种排序算法，分别是双路排序算法和单路排序算法</p><ul><li>双路排序算法：只对order by子句包含的列进行排序，适用于blob和text类型列参与的排序</li><li>单路排序算法：除了order by子句包含的列，还利用查询目标列进行排序，适用于除blob和text类型外的所有类型的排序</li></ul><p>建表：</p><pre class="line-numbers language-SQL"><code class="language-SQL">create table t_o1(a1 int unique, b1 int);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看下面两条SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_o1 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a1</span><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token number">a1</span> <span class="token keyword">from</span> t_o1 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526191310674.png" alt="image-20210526191310674"></p><p>由查询计划可知，第一条SQL使用了全表扫描，并进行了排序（using filesort），但没有使用索引进行优化；第二条SQL使用索引扫描，且用索引对排序进行了优化。对比可知，<strong>MySQL支持用索引消除排序技术，但仅限于目标列是索引列</strong>。</p><h3 id="1-5-3、distinct优化"><a href="#1-5-3、distinct优化" class="headerlink" title="1.5.3、distinct优化"></a>1.5.3、distinct优化</h3><p>建表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t5<span class="token punctuation">(</span><span class="token number">a</span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token number">b</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行下面SQL：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token number">a</span> <span class="token keyword">from</span> t5<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526192031048.png" alt="image-20210526192031048"></p><p>从查询计划看，在表t5上执行了索引扫描（type=index），并且利用索引（extra=using index）对distinct进行了优化</p><h3 id="1-5-4、limit优化"><a href="#1-5-4、limit优化" class="headerlink" title="1.5.4、limit优化"></a>1.5.4、limit优化</h3><p>MySQL支持对不带having语句的limit进行优化，主要优化点如下：</p><ul><li>对单表扫描的影响：索引扫描代价更小，使用索引扫描优化</li><li>对排序的影响：如果limit和order by一起使用，当取到limit设定的个数后，停止排序</li><li>对去重的影响：如果limit和distinct一起使用，当取到limit设定的个数后，停止去重操作</li><li>受分组的影响：如果limit和group by一起使用，group by按索引有序计算每个组的总数过程中，limit操作不必计数直到下一个分组开始计算</li><li>Limit 0：直接返回空结果集</li></ul><p>单表排序 + limit操作的格式如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> single_table <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">order</span> <span class="token keyword">by</span> non_index_column <span class="token punctuation">[</span><span class="token keyword">desc</span><span class="token punctuation">]</span> <span class="token keyword">limit</span> <span class="token punctuation">[</span>M<span class="token punctuation">,</span><span class="token punctuation">]</span>N<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>limit对排序算法的影响如下：</p><ul><li>通常排序算法：<ul><li>扫描表，重复以下步骤直到文件结束<ul><li>把扫描的元组放入排序的缓存直到缓存填满</li><li>把排序缓存中的前N（或者M+N）行写入一个“待归并文件”</li></ul></li><li>对归并文件排序</li><li>按序返回所有文件的前N行（指定M的话，就跳过M行再取N行）</li></ul></li><li>受limit操作影响改进的算法：（适用于N（M+N）行待排序的元素小于排序缓存）<ul><li>扫描表，把每一个满足条件的元组插入一个按排序有序的队列</li><li>如果队列满，则淘汰最后一个再插入新的</li><li>返回前N行（如果指定M，则跳过M行再取N行）</li></ul></li></ul><h1 id="2、和张柯学长的讨论"><a href="#2、和张柯学长的讨论" class="headerlink" title="2、和张柯学长的讨论"></a>2、和张柯学长的讨论</h1><h2 id="2-1、多表连接查询优化部分的代价估算怎么做？如何改？"><a href="#2-1、多表连接查询优化部分的代价估算怎么做？如何改？" class="headerlink" title="2.1、多表连接查询优化部分的代价估算怎么做？如何改？"></a>2.1、多表连接查询优化部分的代价估算怎么做？如何改？</h2><ul><li><p>多表连接里是否下推</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210526203125342.png" alt="image-20210526203125342"></p></li><li><p>从MySQL出发，针对不同版本ma的特性，优化器代价估算应该做哪些调整</p><ul><li>分离版：写变快，读变慢，应该减少写代价，增加读代价，并且考虑网络代价和磁盘IO的关系（常数）</li><li>主从版：对于写操作，CE节点CPU代价变大；SE节点日志应用代价（同步）</li><li>多SE版：写变慢，raft比Quorum快，读目前和分离版一样</li></ul></li></ul><h2 id="2-2、查询重写-查询计划树下沉-和-SQL语句改写下沉，哪个方案更好？实现有什么问题"><a href="#2-2、查询重写-查询计划树下沉-和-SQL语句改写下沉，哪个方案更好？实现有什么问题" class="headerlink" title="2.2、查询重写-查询计划树下沉 和 SQL语句改写下沉，哪个方案更好？实现有什么问题"></a>2.2、查询重写-查询计划树下沉 和 SQL语句改写下沉，哪个方案更好？实现有什么问题</h2><table><thead><tr><th></th><th>下推查询树</th><th>下推SQL</th></tr></thead><tbody><tr><td>实现复杂性</td><td>非常复杂，工作量大</td><td>相对容易实现</td></tr><tr><td>网络传输代价</td><td>很大</td><td>较小（信息传输密度大）</td></tr><tr><td>CE计算代价</td><td>序列化代价</td><td>从查询计划树转换成SQL的代价</td></tr><tr><td>SE计算代价</td><td>反序列化代价</td><td>解析SQL生成查询计划树</td></tr><tr><td>可移植性</td><td>较差</td><td>较好</td></tr><tr><td>优势</td><td>表比较多</td><td>表较少</td></tr></tbody></table><h2 id="2-3-能不能做SE层带数据版本的查询？（把CE事务可见-对应为：SE数据版本-是否可行？）"><a href="#2-3-能不能做SE层带数据版本的查询？（把CE事务可见-对应为：SE数据版本-是否可行？）" class="headerlink" title="2.3. 能不能做SE层带数据版本的查询？（把CE事务可见 对应为：SE数据版本 是否可行？）"></a>2.3. 能不能做SE层带数据版本的查询？（把CE事务可见 对应为：SE数据版本 是否可行？）</h2><p>理论上可行。这个要参考MVCC和HTAP相关论文，进一步学习调研。</p><p>可能实现思路：</p><ul><li>延缓和OLAP请求的页相关的redo日志的应用（可能产生redo堆积）</li><li>为OLTP需要应用redo的页保留副本（可能产生较多副本，占用较大内存）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子查询优化 </tag>
            
            <tag> 条件化简 </tag>
            
            <tag> 消除外连接 </tag>
            
            <tag> 语义优化 </tag>
            
            <tag> 非SPJ优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210520</title>
      <link href="2021/05/19/20210520/"/>
      <url>2021/05/19/20210520/</url>
      
        <content type="html"><![CDATA[<h1 id="一、运行张轲学长代码"><a href="#一、运行张轲学长代码" class="headerlink" title="一、运行张轲学长代码"></a>一、运行张轲学长代码</h1><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519215255584.png" alt="image-20210519215255584"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519215341562.png" alt="image-20210519215341562"></p><h1 id="二、查询优化器系统学习"><a href="#二、查询优化器系统学习" class="headerlink" title="二、查询优化器系统学习"></a>二、查询优化器系统学习</h1><h1 id="1、数据管理系统的查询优化"><a href="#1、数据管理系统的查询优化" class="headerlink" title="1、数据管理系统的查询优化"></a>1、数据管理系统的查询优化</h1><h2 id="1-1、数据库调优"><a href="#1-1、数据库调优" class="headerlink" title="1.1、数据库调优"></a>1.1、数据库调优</h2><h3 id="1-1-1、目标"><a href="#1-1-1、目标" class="headerlink" title="1.1.1、目标"></a>1.1.1、目标</h3><p>使数据库有更高的吞吐量和更短的响应时间。</p><h3 id="1-1-2、常见调优方法"><a href="#1-1-2、常见调优方法" class="headerlink" title="1.1.2、常见调优方法"></a>1.1.2、常见调优方法</h3><ul><li><p>人工调优</p></li><li><p>基于案例的调优（静态）</p></li><li><p>自调优</p><ul><li><p>Oracle实现的自调优技术</p><ul><li><p>Redo Logfile Sizeing Advisor：系统自动推荐重做日志的文件大小</p></li><li><p>Auto checkpoint tuning</p></li><li><p>Auto shared memory tuning</p></li><li><p>transaction rollback and recovery monitoring</p></li><li><p>SQL tuning advisor：给出建立索引的建议，SQL重写的建议</p></li><li><p>SQL Analyzer：对SQL语句的不同查询执行计划进行性能比较和分析</p></li><li><p>SQL Access advisor</p></li><li><p>SQL plan management：使SQL能根据环境的变化选择稳定、高效的查询执行计划</p></li><li><p>undo advisor：为管理员恰当设置undo_retention提供建议，避免快照过于陈旧</p></li></ul></li></ul></li><li><p>应用情况的估算</p><ul><li>应用的使用方式（以读多写少或读写均衡来区分OLAP和OLTP；应用对数据库的并发情况；并发是否可以池化）</li><li>数据量</li><li>对数据库的压力和峰值压力</li></ul></li><li><p>系统选型策略</p></li><li><p>数据模型的设计</p><ul><li>E-R模型设计</li><li>数据逻辑分布策略：减少数据请求中不必要的数据传输，只返回用户需要的数据，如分区，分库分表</li><li>数据物理存储策略：目的是减少IO，如使用压缩技术将索引和表数据分开；将日志，索引，数据分布在不同物理存储上。</li><li>索引：在查询频繁的对象上建立适当的索引，使其正效应大于负效应（索引维护需要消耗）</li><li>SQL设计：依据查询重写规则，编写正确的，高效的SQL，要有意识地保障SQL能用到索引</li><li>数据库功能的启用<ul><li>查询重用：可缓存查询执行计划，查询结果</li><li>数据库参数的设置：如可以设置数据缓冲区</li></ul></li><li>模拟系统预运行：压测</li><li>系统监控与分析<ul><li>应用系统表现：收集用户意见</li><li>OS环境监控：实时监控CPU，内存，IO，并与历史正常情况对比</li><li>数据库内部状态监控：如实时监控锁的情况，与历史正常情况对比</li><li>日志分析：在数据库的日志和操作系统的日志中找出异常事件，定位问题</li><li><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515152036888.png" alt="image-20210515152036888"></li></ul></li></ul></li></ul><h2 id="1-2、查询优化技术"><a href="#1-2、查询优化技术" class="headerlink" title="1.2、查询优化技术"></a>1.2、查询优化技术</h2><p>查询优化技术是SQL层面的优化，属于局部优化，而数据库调优是全局优化。</p><h3 id="1-2-1、查询重用"><a href="#1-2-1、查询重用" class="headerlink" title="1.2.1、查询重用"></a>1.2.1、查询重用</h3><p>查询重用指尽可能多地利用先前的执行结果，已达到节约时间和减少资源消耗的目的。</p><ul><li>查询结果的重用：在缓冲区分配一块缓冲块存放SQL语句和最后的结果集，减少了查询执行全过程的资源的消耗</li><li>查询计划的重用：缓存查询语句的执行计划和相应的语法树结构，减少了查询计划生成的时间和资源消耗</li></ul><p>弊端：结果集很大会占用大量内存；同一条SQL不用用户查询结果可能不同。</p><h3 id="1-2-2、查询重写规则"><a href="#1-2-2、查询重写规则" class="headerlink" title="1.2.2、查询重写规则"></a>1.2.2、查询重写规则</h3><p>是查询语句的一种等价转换，即对于任何相关模式的任意状态都会产生相同的结果。其目标有两个：</p><ul><li>将查询转换为等价的，效率更高的形式，例如将效率低的谓词转为效率高的谓词、消除重复条件</li><li>尽量将查询重写为等价、简单且不受表顺序限制的形式，为物理查询优化阶段提供更多的选择，例如视图的重写，子查询的合并转换</li></ul><p>查询重写的依据是关系代数，关系代数的等价变换规则对查询重写提供了理论上的支持。查询重写之后，查询优化器可能生成多个连接路径，可以从候选者中择优。</p><p>对查询优化技术进行分类，有以下4个角度</p><ul><li>语法级：基于语法进行优化</li><li>代数级：运用关系代数进行优化</li><li>语义级：根据完整性约束，对查询语句进行语义理解，推知一些可优化的操作</li><li>物理级：基于代价估算模型，比较得出各种执行方式中代价最小的</li></ul><p>查询重写是基于前三个角度进行的优化，属于逻辑优化的范畴；而基于代价估算模型是物理层面的优化，是从连接路径中选择代价最小的路径的过程。</p><p>查询重写主要优化思路：</p><ul><li>将过程性查询转为描述性查询，如视图重写</li><li>将复杂查询（如嵌套子查询、外连接，嵌套连接）尽可能转为多表连接查询</li><li>将效率低的谓词转为等价的效率高的谓词，如等价谓词重写</li><li>利用等式和不等式的性质，简化where，having，on条件</li></ul><p>重写的核心是“<strong>等价转换</strong>”，只有等价才可以重写。</p><h3 id="1-2-3、查询算法优化"><a href="#1-2-3、查询算法优化" class="headerlink" title="1.2.3、查询算法优化"></a>1.2.3、查询算法优化</h3><ul><li><p>查询优化：即求解给定查询语句的高效执行计划的过程。</p></li><li><p>查询计划</p><ul><li>也称查询树，由一系列操作符按一定的运算关系构成查询的一个执行方案。</li><li>从形式上看是一颗二叉树，叶子是每个单表对象，两个叶子的父节点是一个连接操作符（如左外连接）连接后的中间结果（临时表），直到根节点</li><li>涉及的主要关系节点有：<ul><li>单表节点：考虑单表的数据获取方式，直接通过IO获取数据、通过索引获取数据、通过索引定位数据，再通过IO获取数据</li><li>两表节点：考虑两表以何种方式连接、代价有多大、连接路径有哪些<ul><li>哈希连接：数据量比较大</li><li>嵌套连接：外表数据量小，内表数据量大</li><li>归并连接：数据有序</li></ul></li><li>多表中间节点：考虑多表连接顺序如何构成代价最小的执行计划。如果判断连接方式太多，也会导致效率问题。目前很多数据库采用左深连接树，右深连接树，紧密树对多表进行连接，得到多种连接路径。</li></ul></li></ul></li><li><p>生成最优查询计划的策略通常有两个：</p><ul><li>基于规则优化：根据经验或一些已被证明有效的方式，定义为“规则”，用这些规则简化查询计划生成过程中符合可被化简的操作，使用启发式规则排除一些明显不好的存取路径。</li><li>基于代价优化：根据一个代价评估模型，在生成查询计划的过程中，计算每条存取路径的花费，然后选择代价最小的作为子路径，这样直到所有表连接完成得到一个完整的路径。目前主流数据库都采用了基于代价优化的策略</li></ul></li><li><p>查询优化器的实现，多是两种优化策略组合使用，如MySQL和PostgreSQL</p></li><li><p>多表连接的优化算法</p><ul><li>SYSTEM-R算法：近乎穷举的搜索算法</li><li>启发式搜索算法：基于启发式规则抛弃不好的存取路径挑选好的</li><li>贪心算法：根据某种优化方式，以当前情况为基础做出最优选择，并认为每次搜索的局部存取路径是最优的，然后继续搜索与其他表的连接路径</li><li>动态规划</li><li>遗传算法：一种启发式算法，模拟自然界生物进化过程，采用人工进化的方式对目标空间进行随机化搜索</li></ul></li><li><p>查询的基本操作有选择，投影和连接。</p><ul><li>选择和投影的优化规则适用于SPJ（select-project-join）和非SPJ（SPJ + group by）</li><li>连接分为两表连接和多表连接，n个表连接方式有n! 种，将导致搜索空间极度膨胀，这是查询优化器实现需要考虑的问题。</li></ul></li></ul><h3 id="1-2-4、并行查询优化"><a href="#1-2-4、并行查询优化" class="headerlink" title="1.2.4、并行查询优化"></a>1.2.4、并行查询优化</h3><p>单机数据库中，查询优化算法只需找到查询的一个具有最小执行话费的执行计划；而并行数据库中，查询优化目标是寻找具有最小响应时间的查询执行计划，这需要查询工作分解为一些可以并行运行的子工作。一个查询能否并行执行，取决于以下几个因素：</p><ul><li>系统中的可用资源，如内存，高速缓存数据量</li><li>CPU的数量</li><li>运算中的特定代数运算符，如A,B,C,D四个表连接，四个表的单表扫描可以并行执行，A,B连接的同时可以进行C,D的连接。</li></ul><p>在同一个SQL内，查询并行分为以下两种：</p><ul><li>查询内并行：将同一操作如单表扫描，两表连接，排序等分解为多个独立的子操作，由不同CPU同时执行。</li><li>查询间并行：将一条SQL语句分解成多个子操作，由多个CPU同时执行。</li></ul><h3 id="1-2-5、分布式查询优化"><a href="#1-2-5、分布式查询优化" class="headerlink" title="1.2.5、分布式查询优化"></a>1.2.5、分布式查询优化</h3><p>在分布式数据库中，<strong>查询优化策略</strong>（主要是<strong>数据传输策略</strong>，如A传到B或B传到A或进行过滤后再进行传输）和<strong>局部处理优化</strong>（传统单节点数据库优化技术）是查询优化的重点。</p><p>查询优化策略中，数据的网络通信开销是考虑的主要因素。分布式查询优化以<strong>减少传输的次数和数据量</strong>作为查询优化的目标。因此分布式数据库中的代价估算模型，除了考虑CPU和IO代价之外，还要考虑通信代价，即：</p><blockquote><p>总代价 = IO代价 + CPU代价 + 通信代价</p></blockquote><h3 id="1-2-6、其他优化"><a href="#1-2-6、其他优化" class="headerlink" title="1.2.6、其他优化"></a>1.2.6、其他优化</h3><p>数据库的查询性能，还与一些其他因素有关，如数据库集群系统总的SD（share disk）集群和SN（share nothing）集群，不同架构查询优化技术也不同。SD集群用的共享存储方式，在数据读写时可能产生读写冲突，因此单表扫描会收到影响；而SN集群采用的是非共享存储方式，因此在考虑了通信代价后单节点的优化方式依然适用。</p><h1 id="2、逻辑查询优化"><a href="#2、逻辑查询优化" class="headerlink" title="2、逻辑查询优化"></a>2、逻辑查询优化</h1><p>查询优化器在逻辑优化阶段主要解决的问题是：如何找出SQL语句的等价变换形式，使SQL执行更高效，可用优化思路有：</p><ul><li>子句局部优化：如等价谓词重写、where和having条件化简</li><li>子句间关联优化：如连接消除、子查询优化、视图重写</li><li>局部与整体的优化：如OR重写并集规则需要考虑UNION操作（变换后整体形式）的花费和OR操作（局部表达式）的花费</li><li>形式变化优化：如嵌套连接消除</li><li>语义优化：根据完整性约束、SQL表达式的含义等信息对语句进行语义优化</li><li>其他优化：根据一些规则对非SPJ做的其他优化、根据硬件环境进行的并行查询优化</li></ul><p>各种逻辑优化技术都基于关系代数和启发式规则</p><h2 id="2-1、查询优化技术的理论基础"><a href="#2-1、查询优化技术的理论基础" class="headerlink" title="2.1、查询优化技术的理论基础"></a>2.1、查询优化技术的理论基础</h2><h3 id="2-1-1、关系代数"><a href="#2-1-1、关系代数" class="headerlink" title="2.1.1、关系代数"></a>2.1.1、关系代数</h3><p>关系模型由关系数据结构、关系操作集合和关系完整性约束三部分组成。</p><ul><li><p>关系数据结构：即关系数据库中的二维表结构</p></li><li><p>关系是一种对象，也成为表</p></li><li><p>关系的元数据：即表结构</p></li><li><p>关系的数据，即表的行数据，也称为元组，记录</p></li><li><p>关系运算：将一定的运算符作用于一定的关系对象上，得到预期的运算结果</p><p>关系代数运算符包括以下4类：</p><ul><li>传统集合运算符：UNION（并），INTERSECTION（交）, DIFFERENCE（差）等</li><li>专门的关系运算符：SELECT（选择）, PROJECT（投影）, JOIN（连接）, DIVIDE（除）</li><li>辅助运算符：辅助专门的关系运算符进行操作，包括算术运算符和逻辑运算符</li><li>关系扩展运算符：SEMIJOIN（半连接）, SEMIDIFFERENCE（半差）, EXTEND（扩展）, COMPOSITION（合计）, TCLOSE（传递闭包）</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515165808023.png" alt="image-20210515165808023"></p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515165826899.png" alt="image-20210515165826899"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515165846607.png" alt="image-20210515165846607"></p><h3 id="2-1-2、关系代数等价变换规则对优化的指导意义"><a href="#2-1-2、关系代数等价变换规则对优化的指导意义" class="headerlink" title="2.1.2、关系代数等价变换规则对优化的指导意义"></a>2.1.2、关系代数等价变换规则对优化的指导意义</h3><p>查询语句可以表示为一颗二叉树（首先是语法分析得到一颗查询树；其次有语义分析等工作；再次是根据关系代数进行了数据库的逻辑查询优化；最后是根据代价估算算法进行物理查询优化。优化的结果被送到执行器执行），其中：</p><ul><li>叶子是单表</li><li>内部节点是运算符（或称算子，操作符），表示左右子树的运算方式</li><li>子树是子表达式或SQL片段</li><li>根节点是最后运算的操作符</li><li>根节点之后是查询优化后的结果</li><li>一棵树就是一个查询的路径</li><li>多个关系连接，连接顺序不同，可以得出多个类似的二叉树</li><li>查询优化就是找出代价最小的二叉树，即最优查询路径。每条路径的生成包括了单表扫描、两表连接、多表连接顺序、多表连接搜索空间等技术</li><li>基于代价估算的查询优化就是通过计算和比较，找出代价最少的最优二叉树</li></ul><h4 id="2-1-2-1、从运算符角度考虑优化"><a href="#2-1-2-1、从运算符角度考虑优化" class="headerlink" title="2.1.2.1、从运算符角度考虑优化"></a>2.1.2.1、从运算符角度考虑优化</h4><p>不同运算符根据其特点，可以对查询语句做不同的优化，减少中间生成物的大小和数量，节约IO，内存，从而提高执行速度。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515171038653.png" alt="image-20210515171038653"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515171126019.png" alt="image-20210515171126019"></p><h4 id="2-1-2-2、从运算规则角度考虑优化"><a href="#2-1-2-2、从运算规则角度考虑优化" class="headerlink" title="2.1.2.2、从运算规则角度考虑优化"></a>2.1.2.2、从运算规则角度考虑优化</h4><p>下面的运算规则是查询重写技术作等价转换的基础</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515171907978.png" alt="image-20210515171907978"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515172043157.png" alt="image-20210515172043157"></p><h2 id="2-2、查询重写规则"><a href="#2-2、查询重写规则" class="headerlink" title="2.2、查询重写规则"></a>2.2、查询重写规则</h2><p>OLTP采用基于选择，投影和连接3种基本操作相结合的查询，称为SPJ查询。数据库在查询优化过程中，会对这3种基本操作进行优化：</p><ul><li>选择操作：对应限制条件，优化方法是选择操作下推，目的是尽量减少连接操作前的元组数，使得中间临时表尽量少，这样就能减少IO，内存和CPU的消耗</li><li>投影操作：对应目的列对象，优化方法是投影操作下推，目的是尽量减少连接操作前的列数，从而减少连接以后的中间临时表元组大小，节约内存（不能减少IO，因为行存储，元组是读取的基本单位）</li><li>连接操作：对应连接条件，涉及两个子问题<ul><li>多表连接中表的连接顺序决定着效率</li><li>多表连接中表的连接顺序由语义决定：查询语句决定了多表连接的语义，如笛卡尔积、内连接、左外连接等</li></ul></li></ul><p>针对SQL语句特点，分为以下两类：</p><ul><li>针对SPJ的查询优化：基于选择，投影，连接三种基本操作相结合的查询</li><li>针对非SPJ的查询优化：在SPJ的基础上存在group by操作的查询，较复杂。</li></ul><p>选择和投影可以基于关系代数规则进行优化；表连接可以基于多表连接相关算法进行优化；其他操作多是基于索引和代价估算进行优化</p><h3 id="2-2-1、子查询的优化"><a href="#2-2-1、子查询的优化" class="headerlink" title="2.2.1、子查询的优化"></a>2.2.1、子查询的优化</h3><p>子查询出现位置不同，对优化影响不同</p><ul><li>目标列位置：只能是标量子查询</li><li>from子句位置：只能是非相关子查询，可以上拉子查询到父层，在多表连接时统一考虑连接代价后择优</li><li>where子句位置：是条件表达式的一部分，格式除了一般的操作符，也有用谓词指定的一些操作，如IN，BETWEEN, EXISTS等</li><li>join/on子句位置：join块类似from子句；on块类似where子句</li><li>group by子句位置：子查询写在此处无意义</li><li>order by子句位置：没有实用意义</li></ul><h4 id="2-2-1-1、子查询的分类"><a href="#2-2-1-1、子查询的分类" class="headerlink" title="2.2.1.1、子查询的分类"></a>2.2.1.1、子查询的分类</h4><p>根据子查询中涉及的关系对象与外层关系对象间的关系，子查询分为以下两类：</p><ul><li><p>相关子查询：子查询的执行依赖于外层父查询的一些属性值（查询优化器对相关子查询的优化有一定意义）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515180200702.png" alt="image-20210515180200702"></p></li><li><p>非相关子查询：子查询的执行不依赖外层父查询的任何属性值，子查询完全独立。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515180342372.png" alt="image-20210515180342372"></p></li></ul><p>从特定谓词看，子查询分为以下三类：</p><ul><li>[NOT]IN/ALL/ANY/SOME子查询：左边是操作数，右边是子查询，是最常见的子查询类型之一</li><li>[NOT]EXISTS子查询：没有左操作数，右边是子查询，也比较常见</li><li>其他子查询</li></ul><p>从语句构成复杂程度看，子查询可以分为以下三类：</p><ul><li>SPJ子查询</li><li>group by子查询：SPJ子查询加上分组，聚合操作</li><li>其他子查询：group by子查询加上其他子句如TOP-K、LIMIT/OFFSET、集合、排序等操作</li></ul><p>从结果集的角度看，子查询分为以下四种：</p><ul><li>标量子查询：返回结果集类型是一个单一值</li><li>列子查询：返回的结果集类型是一条单一元组</li><li>行子查询：返回的结果集类型是一个单一列</li><li>表子查询：返回的结果集类型是一个表（多行多列）</li></ul><h4 id="2-2-1-2、子查询的优化思路"><a href="#2-2-1-2、子查询的优化思路" class="headerlink" title="2.2.1.2、子查询的优化思路"></a>2.2.1.2、子查询的优化思路</h4><p>早期，查询优化器对子查询都采用嵌套执行的方式（即对父查询中的每一行，都执行一次子查询，这样效率很低），因此对其进行优化很有必要。将子查询转为连接操作之后，有如下好处：</p><ul><li>子查询不用执行很多次</li><li>优化器可以根据统计信息来选择不同的连接方法和不同的连接顺序</li><li>子查询中的连接条件、过滤条件分别变成了父查询的连接条件和过滤条件，优化器可以对这些条件进行下推，以提高执行效率</li></ul><p><strong>子查询优化</strong>思路如下：</p><ul><li><p>子查询合并：在语义等价条件下，多个子查询可以合并成一个子查询，这样多次表扫描，多次连接减少为单次表扫描和单次连接</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515195237030.png" alt="image-20210515195237030"></p></li><li><p>子查询展开：又称子查询反嵌套，子查询上拉。实质是把某些子查询重写为等价的多表连接操作。带来好处是，有关的访问路径、连接方法和连接顺序可能被有效使用，使得查询语句的层次尽可能地减少。常见的IN/ANY/SOME/ALL/EXISTS依据情况转为半连接（SEMI JOIN）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515195803605.png" alt="image-20210515195803605"></p></li><li><p>聚集子查询消除：聚合函数上推，将子查询变为一个新的不包含聚合函数的子查询，并与父查询的部分或全表做左外连接。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515200013724.png" alt="image-20210515200013724"></p></li><li><p>其他：利用窗口函数消除子查询、子查询推进等技术</p></li></ul><p><strong>子查询展开</strong>是一种最常用的子查询优化技术，有以下两种形式：</p><ul><li>如果子查询中出现了聚合、group by、distinct子句， 则子查询只能单独求解，不可以上拉到上层</li><li>如果子查询只是一个简单的SPJ格式语句，则可以上拉到上层。前提是上拉后的结果不能带来多余元组，需遵循以下规则：<ul><li>如果上层查询结果没有重复（select包含主键），则可以展开子查询，并且展开后的查询的select子句前应加上distinct标志</li><li>如果上层查询的select语句中有distinct标志，则可以直接子查询展开</li><li>如果内层查询结果没有重复元组，则可以展开</li></ul></li></ul><p>子查询展开具体步骤：</p><ul><li>将子查询和上层查询的from子句连接为同一个from子句，并且修改相应的运行参数</li><li>将子查询的谓词符号进行相应修改（如IN修改为ANY）</li><li>将子查询的where条件作为一个整体与上层查询的where条件进行合并，并用and连接，从而保证新生成的谓词与原谓词的上下文意思相同，成为一个整体</li></ul><h4 id="2-2-1-3、最常见的子查询类型的优化"><a href="#2-2-1-3、最常见的子查询类型的优化" class="headerlink" title="2.2.1.3、最常见的子查询类型的优化"></a>2.2.1.3、最常见的子查询类型的优化</h4><ul><li>IN类型</li><li>ALL/ANY/SOME类型</li><li>EXISTS类型</li></ul><h3 id="2-2-2、视图重写"><a href="#2-2-2、视图重写" class="headerlink" title="2.2.2、视图重写"></a>2.2.2、视图重写</h3><h3 id="2-2-3、等价谓词重写"><a href="#2-2-3、等价谓词重写" class="headerlink" title="2.2.3、等价谓词重写"></a>2.2.3、等价谓词重写</h3><p>数据库执行引擎对某些谓词的处理效率要比其他谓词高，基于此，把逻辑表达式重写成等价的且效率更高的形式，能有效提高查询执行效率。这就是等价谓词重写。其规则如下：</p><ul><li>LIKE规则</li><li>BETWEEN-AND规则</li><li>IN转换OR规则</li><li>IN转换ANY规则</li><li>OR转换ANY规则</li><li>ALL/ANY转换集函数规则</li><li>NOT规则</li><li>OR重写并集规则</li></ul><h3 id="2-2-4、条件化简"><a href="#2-2-4、条件化简" class="headerlink" title="2.2.4、条件化简"></a>2.2.4、条件化简</h3><p>利用等式和不等式的性质，将where，having和on条件进行化简，化简方式通常有如下几个：</p><ul><li>把having条件并入where条件</li><li>去除表达式中冗余的括号</li><li>常量传递</li><li>消除死码</li><li>表达式计算</li><li>等式变换</li><li>不等式变换</li><li>布尔表达式变换</li><li>谓词传递闭包</li><li>任何一个布尔表达式都能被转为一个合取范式（CNF）</li><li>索引的利用</li></ul><h3 id="2-2-5、外连接消除"><a href="#2-2-5、外连接消除" class="headerlink" title="2.2.5、外连接消除"></a>2.2.5、外连接消除</h3><h4 id="2-2-5-1、外连接消除的意义"><a href="#2-2-5-1、外连接消除的意义" class="headerlink" title="2.2.5.1、外连接消除的意义"></a>2.2.5.1、外连接消除的意义</h4><p>外连接分为左外连接，右外连接和全外连接，连接过程中，外连接的左右子树不能互换，并且外连接与其他连接交换连接顺序时，必须满足严格的条件进行等价变换。查询重写的一项技术就是把外连接转为内连接，转换意义如下：</p><ul><li><p>查询优化器在处理外连接操作所需时间多于内连接</p></li><li><p>优化器在选择表连接顺序时，可以有更多更灵活的选择，从而可以选择更好的表连接顺序，加快查询执行的速度</p></li><li><p>表的一些连接算法(如块嵌套连接和索引循环连接)将规模小的或筛选条件最严格的作为外表，可以减少不必要的IO开销，极大加快算法执行的速度</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515204036869.png" alt="image-20210515204036869"></p></li></ul><p>以下分三种情况讨论表2-8</p><ul><li>左外连接转为内连接</li><li>全外连接转为左外连接</li><li>右外连接转为内连接</li></ul><h4 id="2-2-5-2、外连接消除的条件"><a href="#2-2-5-2、外连接消除的条件" class="headerlink" title="2.2.5.2、外连接消除的条件"></a>2.2.5.2、外连接消除的条件</h4><p>外连接可以转为内连接的条件：where子句中与内表相关的条件满足空值拒绝（reject-NULL条件），一般认为满足以下任意一种情况，就满足空值拒绝：</p><ul><li>条件可以保证从结果中排除外连接右侧（右表）生成的值为NULL的行，所以能使该查询在语义上等效于内连接</li><li>外连接的提供空值的一侧为另一侧的每行只返回一行。如果该条件为真，则不存在提供空值的行，并且外连接等价于内连接</li></ul><h3 id="2-2-6、嵌套连接消除"><a href="#2-2-6、嵌套连接消除" class="headerlink" title="2.2.6、嵌套连接消除"></a>2.2.6、嵌套连接消除</h3><p>多表连接时有时会存在嵌套的情况，而嵌套连接不能够利用交换表的位置而获得优化。当执行连接操作的次序不是从左到右逐个进行时，就说这样的连接表达式存在嵌套。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515205708740.png" alt="image-20210515205708740"></p><p>先t2和t3连接得到中间结果{t2t3}后再与t1连接，这种方式就是嵌套连接，括号不可以去掉，没有去掉括号的等价形式。</p><p>另外，如下格式也是嵌套连接，即使括号去掉不影响语义，这种格式用括号对连接次序做了区分</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515210149035.png" alt="image-20210515210149035"></p><p>综上，我们可以得到下面两条结论：</p><ul><li>如果连接表达式只包括内连接，括号可以去掉，这意味着表之间的次序可以交换，这是关系代数中连接的交换律的应用</li><li>如果连接表达式包括外连接，括号不可以去掉，意味着表之间的次序只能按照原语义进行，至多能执行外连接向内连接转换的优化</li></ul><h3 id="2-2-7、连接消除"><a href="#2-2-7、连接消除" class="headerlink" title="2.2.7、连接消除"></a>2.2.7、连接消除</h3><p>连接分类</p><ul><li>根据连接语义方式的不同：内连接、外连接、半连接、反半连接</li><li>根据连接对象的不同：自连接和非自连接</li><li>根据连接条件的有无：笛卡尔积式的连接和带有限定条件的连接</li><li>根据连接条件形式的不同：等值连接和范围连接</li></ul><p>可能存在一些连接，连接对象可以被去掉，因为这样的连接对象存在只会带来连接计算的消耗，而对连接结果没有影响，如下面的情况一，二，三</p><p>情况一：主外键关系的表进行连接，可以消除主键表，这不会影响对外键表的查询</p><p>情况二：唯一键作为连接条件，三表内连接可以去掉中间表（中间表的列只作为连接条件）</p><p>情况三：其他一些特殊情况，可以去掉连接 操作（可消除的表除了作为连接对象之外，不出现在任何子句中）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516092941770.png" alt="image-20210516092941770"></p><h3 id="2-2-8、语义优化"><a href="#2-2-8、语义优化" class="headerlink" title="2.2.8、语义优化"></a>2.2.8、语义优化</h3><ul><li>语义转换：根据完整性约束等信息对某特定语义进行推理，进而得到一种查询效率不同但结果相同的查询</li><li>语义优化：因为语义转换形成的优化称为语义优化</li></ul><p>语义优化常见方式如下：</p><ul><li>连接消除：对一些连接操作先不必评估代价，根据已知信息能推知结果或得到一个简化的操作</li><li>连接引入：增加连接有助于原关系变小或原关系的选择率降低</li><li>谓词引入：根据完整性约束等信息引入新谓词，如引入基于索引的列，可能使查询更快</li><li>检测空回答集：查询语句中的谓词与约束相悖，如check约束限定score是60到100，而一个查询条件是score&lt;60，则能立刻推知条件不成立</li><li>排序优化：order by操作通常由索引或排序完成；如果能利用索引，则排序操作可以省略</li><li>唯一性使用：利用唯一性，索引等特点，检查是否存在不必要的distinct操作，如主键上的distinct可以消除掉</li></ul><h3 id="2-2-9、针对非SPJ的优化"><a href="#2-2-9、针对非SPJ的优化" class="headerlink" title="2.2.9、针对非SPJ的优化"></a>2.2.9、针对非SPJ的优化</h3><p>目前决策支持系统，数据仓库，OLAP系统的应用日益广泛，SQL语句中的group by、聚合函数、Windows函数（分析函数）等被广泛应用。早期的关系数据库System-R对group by和聚合等操作的处理放在完成所有的连接和选择操作之后进行，执行效率很低。因此，现代的商业和开源数据库，都使用了一些非SPJ的优化技术</p><h4 id="2-2-9-1、group-by的优化"><a href="#2-2-9-1、group-by的优化" class="headerlink" title="2.2.9.1、group by的优化"></a>2.2.9.1、group by的优化</h4><p>可考虑<strong>分组转换技术</strong>，即对分组操作、聚合操作与连接操作的位置进行交换，常见方式如下：</p><ul><li>分组操作下移：下移是指在查询树上让分组操作尽量靠近叶子节点，使得分组操作的节点低于一些选择操作。group by操作可能大幅度减少关系元组的个数，如果能够对某个关系先进行分组操作，再进行表连接，很可能提高连接效率。</li><li>分组操作上移：如果连接操作能够过滤掉大部分元组，则先进行连接后进行group by操作，可以提高分组操作的效率。</li></ul><p>因为group by操作上移或者下移都不能保证重写后的查询效率一定更高，所以，要在查询优化器中采用<strong>基于代价</strong>的方式来估算几种路径的优劣，另外<strong>要尽量应用索引</strong>。</p><h4 id="2-2-9-2、order-by的优化"><a href="#2-2-9-2、order-by的优化" class="headerlink" title="2.2.9.2、order by的优化"></a>2.2.9.2、order by的优化</h4><p>可以考虑如下几方面：</p><ul><li>排序消除</li><li>排序下推</li></ul><h4 id="2-2-9-3、distinct的优化"><a href="#2-2-9-3、distinct的优化" class="headerlink" title="2.2.9.3、distinct的优化"></a>2.2.9.3、distinct的优化</h4><p>可以考虑如下几方面：</p><ul><li>distinct消除</li><li>distinct下推</li><li>distinct迁移</li></ul><h2 id="2-3、启发式规则在逻辑优化阶段的应用"><a href="#2-3、启发式规则在逻辑优化阶段的应用" class="headerlink" title="2.3、启发式规则在逻辑优化阶段的应用"></a>2.3、启发式规则在逻辑优化阶段的应用</h2><p>逻辑优化阶段使用的启发式规则通常包括如下两类：</p><ul><li>一定能带来优化效果的：<ul><li>优先做选择和投影（连接条件在查询树上下推）</li><li>嵌套连接的消除</li><li>外连接的消除</li><li>连接的消除</li><li>使用等价谓词重写对条件化简</li><li>语义优化</li><li>剪掉冗余操作（一些剪枝优化技术）、最小化查询块</li></ul></li><li>变换未必会带来性能的提高，需根据代价选择，包括：<ul><li>分组的合并</li><li>使用索引优化分组、排序，distinct等操作</li><li>对视图的查询变为基于表的查询</li><li>连接条件的下推</li><li>分组的下推</li><li>连接提取公共表达式</li><li>谓词的上拉</li><li>用连接取代集合操作</li><li>用UNIONALL取代OR操作</li></ul></li></ul><h1 id="3、物理查询优化"><a href="#3、物理查询优化" class="headerlink" title="3、物理查询优化"></a>3、物理查询优化</h1><p>查询优化器在物理优化阶段，主要解决的问题是：</p><ul><li>从可选的单表扫描方式中，挑选什么样的单表扫描方式最优？</li><li>对于两表连接，如何连接最优？</li><li>对于多表连接，哪种连接顺序最优？</li><li>对于多表连接，是否需要对每种连接顺序都探索？如果不全部探索，如何找到一种最优组合？</li></ul><p>在查询优化器实现早期，认为使用逻辑优化技术（即使用关系代数规则和启发式规则对查询进行优化）后，生成的执行计划就是最优的。现在，引入了基于代价的查询优化方式后，对查询计划做了定量的分析，对每一个执行方式进行评估，挑出代价最小的作为最优的计划。目前主流数据库的优化器通常都融合了这两种方式。</p><h2 id="3-1、查询代价估算"><a href="#3-1、查询代价估算" class="headerlink" title="3.1、查询代价估算"></a>3.1、查询代价估算</h2><p>查询代价估算的重点是代价估算模型，这是物理查询优化的依据。此外，选择率也很重要，对代价求解起着重要作用</p><h3 id="3-1-1、代价模型"><a href="#3-1-1、代价模型" class="headerlink" title="3.1.1、代价模型"></a>3.1.1、代价模型</h3><p>查询代价估算基于CPU代价和IO代价，计算公式如下：</p><p>总代价 = IO代价 +  CPU代价</p><p>COST = p * a_page_cpu_time + W * T</p><p>其中p是计划运行时访问的页面数，a_page_cpu_time是每个页面读取的时间花费，其乘积 = IO代价</p><p>T为访问的元组数，W为权重因子，表明IO到CPU的相关性，又称选择率，它等于满足条件“A<op>a”的元组数和R中所有元组N的比值。他们的乘积反映了CPU代价</p><h3 id="3-1-2、选择率计算的常用方法"><a href="#3-1-2、选择率计算的常用方法" class="headerlink" title="3.1.2、选择率计算的常用方法"></a>3.1.2、选择率计算的常用方法</h3><p>选择率在代价估算模型中占有重要地位，其精确程度直接影响最优计划的选取。选择率计算常用方法如下：</p><ul><li>无参数方法：使用ad hoc（点对点）数据结构或直方图维护属性值的分布，直方图最常用</li><li>参数法：使用具有一些自由统计参数（参数是预先估计出来的）的数学分布函数逼近真实分布</li><li>曲线拟合法：为克服参数法的不灵活性，用一般多项式来标准最小方差来逼近属性值的分布</li><li>抽样法：从数据库中抽取部分样本元组，针对这些样本进行查询，然后收集统计数据，只有足够的样本被测试之后，才能达到预期的精度</li><li>综合法：将以上几种方法结合起来，如抽样法和直方图法结合</li></ul><h2 id="3-2、单表扫描算法"><a href="#3-2、单表扫描算法" class="headerlink" title="3.2、单表扫描算法"></a>3.2、单表扫描算法</h2><p>单表扫描需要从表上获取元组，直接关系到物理IO的读取，所以不同的单表扫描方式，有不同的代价</p><h3 id="3-2-1、常用的单表扫描算法"><a href="#3-2-1、常用的单表扫描算法" class="headerlink" title="3.2.1、常用的单表扫描算法"></a>3.2.1、常用的单表扫描算法</h3><p>对于单表数据的获取，有如下方式：</p><ul><li>全表扫描表数据：为获取表的全部元组，读取表对应的全部数据页</li><li>局部扫描表数据：为获取表的部分元组，读取指定位置对应的数据页</li></ul><p>单表扫描和IO操作密切相关，因此很多算法在IO上倾注精力，常见单表扫描算法如下：</p><ul><li>顺序扫描：从物理存储上按照存储顺序直接读取表数据；当无索引可用，或访问表中大部分数据，或表数据量很小时，效果较好</li><li>索引扫描：根据索引键读索引，找出物理元组的位置；根据从索引中找到的位置，从存储中读取数据页；索引扫描可以将元组按排序的顺序返回；若选择率较低，则读数据花费的IO会显著减少</li><li>只读索引扫描：根据索引键读索引，索引中的数据能够满足条件判断，不需要读取数据页</li><li>行扫描：用于直接定位表中的某一行。通常给元组增加一个特殊的列，可以直接计算元组的物理位置，然后直接读取元组对应的页面。在PostgreSQL中称为Tid扫描，此方式在元组头上增加CTID的列，用该列可以直接计算本条元组的物理存储位置</li><li>并行表扫描：对同一个表，并行地、通过顺序的方式获取表数据，结果是得到一个完整的表数据</li><li>并行索引扫描：对同一个表，并行地、通过索引的方式获取表数据，将结果合并在一起</li><li>组合多个索引扫描：对同一个元组的组合条件（AND或OR谓词组合的多个索引列上的多条件查询）进行多次索引扫描，然后在内存里用一个位图来描述索引扫描结果中符合索引条件的元组位置</li></ul><h3 id="3-2-2、单表扫描代价计算"><a href="#3-2-2、单表扫描代价计算" class="headerlink" title="3.2.2、单表扫描代价计算"></a>3.2.2、单表扫描代价计算</h3><p>因为单表扫描是将数据从存储系统调入内存，因此其代价要考虑IO花费。顺序扫描，主要是IO花费 + 元组从页面中解析的花费；索引扫描和其他方式的扫描，由于元组不是全部元组，因此要考虑选择率的问题。单表扫描代价估算公式如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516105429946.png" alt="image-20210516105429946"></p><h2 id="3-3、索引"><a href="#3-3、索引" class="headerlink" title="3.3、索引"></a>3.3、索引</h2><p>索引是建立在表上的，本质上是通过索引直接定位表的物理元组，加快数据获取的方式，因此索引优化的手段应该归属到物理查询优化阶段。</p><h3 id="3-3-1、如何利用索引"><a href="#3-3-1、如何利用索引" class="headerlink" title="3.3.1、如何利用索引"></a>3.3.1、如何利用索引</h3><p>索引是提高查询优化的有效手段，如果某个列存在索引，并不意味着能够有效使用，通常查询优化器使用索引的原则如下：</p><ul><li>索引列出现在where，having，on子句中，有利于利用索引过滤元组</li><li>索引列是被连接的表（内表）对象的列且存在于连接条件中</li><li>还有一些特殊情况，如排序操作、在索引列上求MIN、MAX值</li></ul><p>对于索引列，索引可用的条件如下：</p><ul><li>在where，having，join/on条件中出现“key<op>常量”格式的条件子句（索引列不能参与带有变量的表达式的运算）</li><li>操作符不能是&lt;&gt;（不等于操作符在任何类型的列上均不能使用索引，可以认为这是一个优化规则，因为这种情况下，顺序扫描效果更好）</li><li>索引列的值选择率越低，索引越有效，通常认为选择率小于0.1则索引扫描效果会比较好</li></ul><h3 id="3-3-2、索引列的位置对使用索引的影响"><a href="#3-3-2、索引列的位置对使用索引的影响" class="headerlink" title="3.3.2、索引列的位置对使用索引的影响"></a>3.3.2、索引列的位置对使用索引的影响</h3><p>在查询语句中，索引列在不同的位置对索引的使用有着不同的影响。</p><h4 id="3-3-2-1、对目标列、where等条件子句的影响"><a href="#3-3-2-1、对目标列、where等条件子句的影响" class="headerlink" title="3.3.2.1、对目标列、where等条件子句的影响"></a>3.3.2.1、对目标列、where等条件子句的影响</h4><h4 id="3-3-2-2、对group-by子句的影响"><a href="#3-3-2-2、对group-by子句的影响" class="headerlink" title="3.3.2.2、对group by子句的影响"></a>3.3.2.2、对group by子句的影响</h4><h4 id="3-3-2-3、对having子句的影响"><a href="#3-3-2-3、对having子句的影响" class="headerlink" title="3.3.2.3、对having子句的影响"></a>3.3.2.3、对having子句的影响</h4><h4 id="3-3-2-4、对order-by子句的影响"><a href="#3-3-2-4、对order-by子句的影响" class="headerlink" title="3.3.2.4、对order by子句的影响"></a>3.3.2.4、对order by子句的影响</h4><h4 id="3-3-2-5、对distinct的影响"><a href="#3-3-2-5、对distinct的影响" class="headerlink" title="3.3.2.5、对distinct的影响"></a>3.3.2.5、对distinct的影响</h4><h3 id="3-3-3、联合索引对索引使用的影响"><a href="#3-3-3、联合索引对索引使用的影响" class="headerlink" title="3.3.3、联合索引对索引使用的影响"></a>3.3.3、联合索引对索引使用的影响</h3><h3 id="3-3-4、多个索引对索引使用的影响"><a href="#3-3-4、多个索引对索引使用的影响" class="headerlink" title="3.3.4、多个索引对索引使用的影响"></a>3.3.4、多个索引对索引使用的影响</h3><h2 id="3-4、两表连接算法"><a href="#3-4、两表连接算法" class="headerlink" title="3.4、两表连接算法"></a>3.4、两表连接算法</h2><p>关系代数一项重要的操作是连接运算，多表连接是建立在两表连接基础上的，研究两表连接的方式对连接效率的提高有着直接的影响。</p><h3 id="3-4-1、基本的两表连接算法"><a href="#3-4-1、基本的两表连接算法" class="headerlink" title="3.4.1、基本的两表连接算法"></a>3.4.1、基本的两表连接算法</h3><p>主要有嵌套循环连接算法、归并连接算法、hash连接算法。</p><h4 id="3-4-1-1、嵌套循环连接算法"><a href="#3-4-1-1、嵌套循环连接算法" class="headerlink" title="3.4.1.1、嵌套循环连接算法"></a>3.4.1.1、嵌套循环连接算法</h4><p>两表做连接，最基本的连接算法就是嵌套循环连接算法，该算法描述如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516111754226.png" alt="image-20210516111754226"></p><p>数据库引擎在实现该算法时，以元组为单位进行连接，而元组是从内存页面获取来的，内存页面是从存储系统通过IO获得的，因此每个IO申请以块为单位尽量读入多个页面，可以改进算法，改进后的称为<strong>基于块的嵌套循环连接算法。</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516130351611.png" alt="image-20210516130351611"></p><p>无论是嵌套循环连接算法还是基于块的嵌套循环连接算法，本质都是在一个两层循环中各自拿出一个元组，逐一匹配是否满足连接条件。其他一些两表连接算法，多是在此基础上进行的改进，如在考虑了聚集索引和二级索引的情况下，如果内表有索引可用，则可以加快连接的速度。如果外表元组较少，内层的元组驻留内存多一些（如一些查询优化器采用物化技术固化内层的元组），则能有效提高连接的效率。上述两种算法适用于内连接，左外连接，半连接，反半连接等语义的处理。</p><h4 id="3-4-1-2、排序归并连接算法"><a href="#3-4-1-2、排序归并连接算法" class="headerlink" title="3.4.1.2、排序归并连接算法"></a>3.4.1.2、排序归并连接算法</h4><p>算法步骤是：为两个表创建可用内存缓冲区数为M的M个子表，将每个子表排好序；然后读入每个子表的第一个块到M个块中，找出其中最小的先进行两个表的元组的匹配，找出次小的匹配……以此类推，完成其他子表的两表连接。</p><p>归并连接算法要求内外表都是有序的，所以对于内外标都要排序，如果连接列是索引列，则可以利用索引进行排序。该算法适用于内连接，左外连接，右外连接，全外连接，半连接，反半连接等语义的处理。</p><h4 id="3-4-1-3、hash连接算法"><a href="#3-4-1-3、hash连接算法" class="headerlink" title="3.4.1.3、hash连接算法"></a>3.4.1.3、hash连接算法</h4><p>基于hash的两表连接算法常见的有以下三种：</p><ul><li>用连接列作为hash的关键字，对内表进行hash运算建立哈希表，然后对外表的每个元组的连接用hash函数求值，值映射到内表建立好的哈希表就可以连接了；否则，探索外表下一个元组。这样的哈希连接算法称为<strong>简单hash连接算法（Simple Hash Join，SHJ）</strong>。</li><li>如果把内表和外表分为等大小的子表，然后对外表和内表的每个相同下标值的子表进行SHJ算法的操作，可以避免因内存小而反复读入内外表数据的问题，这样的改进算法称为<strong>优美hash连接算法（Grace Hash Join，GHJ）</strong></li><li>结合了SHJ和GHJ优点的算法称为<strong>混合hash连接算法（Hybrid Hash Join，HHJ）</strong>。HHJ算法是把第一个子表保存到内存不刷出，如果内存很大，则子表能容纳更大量的数据，效率接近于SHJ</li></ul><p>Hash类的算法都存在hash冲突，如GHJ算法，当内存小或者数据倾斜（数据不能均匀地分布到Hash桶，Hash处理后集中在少量桶中）时，通过把一个表划分为多个子表的方式，仍然不能消除反复读入内外表数据的问题（称为“分区溢出”）。</p><p>Hash连接算法只适用于<strong>数据类型相同的等值连接</strong>。Hash连接要存储Hash元组到Hash桶，要求较大内存。如果表中连接列值重复率很高不能均匀分布，相同值的元组映射到少数几个桶中，Hash连接算法效率就不高。Hash连接要求内表不能太大，通常查询优化器会申请一段内存存放hash表，如果超出且不能继续动态申请，则需要写临时文件，这会导致IO颠簸（如PostgreSQL就存在此类问题）。</p><p>Hash连接算法适用于内连接，左外连接，右外连接，全外连接，半连接，反半连接等语义的处理。</p><h3 id="3-4-2、进一步认识两表连接算法"><a href="#3-4-2、进一步认识两表连接算法" class="headerlink" title="3.4.2、进一步认识两表连接算法"></a>3.4.2、进一步认识两表连接算法</h3><p>从内存容量角度看，两表连接算法分为一趟算法，两趟算法，甚至多趟算法。这里的趟是指从存储系统获取全部数据的次数。趟数是一种方式，不是算法思想的改进，是代码实现中为减少IO所做的改进工作。</p><p>结合连接算法和索引、趟数的关系，两表连接算法对于查询优化器的意义如下表所示：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516145539689.png" alt="image-20210516145539689"></p><h3 id="3-4-3、连接操作代价计算"><a href="#3-4-3、连接操作代价计算" class="headerlink" title="3.4.3、连接操作代价计算"></a>3.4.3、连接操作代价计算</h3><p>连接操作花费CPU资源，理论上连接操作代价估算原理如下表：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516145832475.png" alt="image-20210516145832475"></p><p>公式中涉及参数含义如下：</p><ul><li>a_tuple_cpu_time：获取一个元组消耗的CPU时间</li><li>N-outer：扫描获取的外表的元组数</li><li>N-inner：扫描获取的内表的元组数，N-inner = N-inner-all * 选择率，其中N-inner-all表示内表所有元组数</li><li>C-outer：扫描外表的代价，C-outer = N-outer * a_tuple_cpu_time</li><li>C-inner：扫描内表的代价，C-inner = N-inner * a_tuple_cpu_time</li><li>C-inner-index：使用索引扫描内表的代价，通常会比C-inner小</li><li>C-outersort：外表排序的代价</li><li>C-innersort：内表排序的代价</li><li>C-createhash：创建hash的代价</li></ul><h2 id="3-5、多表连接算法"><a href="#3-5、多表连接算法" class="headerlink" title="3.5、多表连接算法"></a>3.5、多表连接算法</h2><p>多表连接算法实现的是在查询路径生成的过程中，根据代价估算，从各种可能的候选路径中找出最优的路径。它需要解决两个问题：</p><ul><li>多表连接的顺序</li><li>多表连接的搜索空间：N个表的连接可能有N！种连接组合，这可能构成一个巨大的搜索空间。如何将搜索空间限制在一个可接受的范围内，并高效生成查询执行计划将成为一个难点</li></ul><h3 id="3-5-1、多表连接顺序"><a href="#3-5-1、多表连接顺序" class="headerlink" title="3.5.1、多表连接顺序"></a>3.5.1、多表连接顺序</h3><p>多表间的连接顺序表示了查询计划树的基本形态。在1990年，Schneder等人在研究查询树模型时提出了左深树，右深树和紧密树3种形态，如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516151149070.png" alt="image-20210516151149070"></p><p>即使是同一种树的生成方式，也有细节需要考虑。如上图a中{A,B}和{B,A}两种连接方式花费可能不同。比如最终连接结果{A,B,C}则需要验证比较6种连接方式，找出最优的一种作为下次和其他表连接的依据。</p><p>人们针对以上树的形成、形成的树花费代价最少的，提出了诸多算法，树的形成过程主要有以下两种策略：</p><ul><li>自顶向下：从SQL表达式树的树根开始，向下进行，估计每个节点可能的执行方法，计算每种组合的代价，从中挑选最优的</li><li>自底向上：从SQL表达式树的树叶开始，向上进行，计算每个子表达式所有实现方法的代价，从中挑选最优的，再和上层进行连接，直至树根</li></ul><p>多数数据库都采用第二种方式–自底向上，构造查询计划树。</p><h3 id="3-5-2、常用的多表连接算法"><a href="#3-5-2、常用的多表连接算法" class="headerlink" title="3.5.2、常用的多表连接算法"></a>3.5.2、常用的多表连接算法</h3><p>多表连接搜索最优查询树，有很多算法，如启发式、分枝界定计划枚举、贪心、动态规划、爬山法、System R优化方法等</p><h4 id="3-5-2-1、动态规划"><a href="#3-5-2-1、动态规划" class="headerlink" title="3.5.2.1、动态规划"></a>3.5.2.1、动态规划</h4><p>在数据库领域，动态规划算法主要解决多表连接的问题。它是自底向上进行的，即从叶子开始做第一层，然后开始对每层的关系做两两连接（如果满足内连接进行两两连接，不满足则不可对全部表进行两两连接），构造出上层，逐次递推到树根。以下介绍具体步骤：</p><ul><li>初始状态：构造第一层关系，即叶子结点，每个叶子对应一个单表，为每一个待连接的关系计算最优路径（单表的最优路径就是单表的最佳访问方式，通过评估不同的单表的数据扫描方式代价，找出代价最小的作为每个单表的局部最优路径）</li><li>归纳：当第1层到第n-1层的关系已经生成，那么求解第n层的关系方法为：将第n-1层的关系与第一层中的每个关系连接，生成新的关系（对新关系的大小进行估算），放于第n层，且每一个新关系，均求解最优路径。每层路径的生成都是基于下层生成的最优路径，这满足最优化原理的要求。</li></ul><p>还有的改进算法，在生成第n层的时候，除了通过第n-1层和第一层连接外，还可以通过第n-2层和第二层连接…</p><p>例如对于下面的查询语句</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516154200387.png" alt="image-20210516154200387"></p><p>生成最优查询计划的过程如下表</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516154251032.png" alt="image-20210516154251032"></p><p>PostgreSQL查询优化器求解多表连接时，采用了这种算法。</p><h4 id="3-5-2-2、启发式算法"><a href="#3-5-2-2、启发式算法" class="headerlink" title="3.5.2.2、启发式算法"></a>3.5.2.2、启发式算法</h4><p>启发式算法是相对最优化算法提出的，是一个基于直观或者经验构造的算法，不能保证找到最好的查询计划。在数据库的查询优化器中，启发式一直贯穿于整个查询优化阶段，在逻辑查询优化阶段和物理查询优化阶段，都有一些启发式规则可用。PostgreSQL，MySQL，Oracle等数据库在实现查询优化器时，采用了启发式和其他方式相结合的方式。</p><p>物理查询优化阶段常用启发式规则如下：</p><ul><li>关系R在列X上建立索引，且对R的选择操作发生在列X上，则采用索引扫描方式</li><li>R连接S，其中一个关系上的连接列存在索引，则采用索引连接且此关系作为内表</li><li>R连接S，其中一个关系上的连接列是排序的，则采用排序连接比hash连接好</li></ul><h4 id="3-5-2-3、贪心算法"><a href="#3-5-2-3、贪心算法" class="headerlink" title="3.5.2.3、贪心算法"></a>3.5.2.3、贪心算法</h4><p>贪心算法最后得到的是局部最优解，不一定全局最优，其实现步骤如下：</p><ol><li>初始，算法选出的候选对象集合为空</li><li>根据选择函数，从剩余候选对象中选出最有可能构成解的对象</li><li>如果集合中加上该对象后不可行，那么该对象就被丢弃并不再考虑</li><li>如果集合中加上该对象后可行，就加到集合里</li><li>扩充集合，检查该集合是否构成解</li><li>如果贪心算法正确工作，那么找到的第一个解通常都是最优的，可以终止算法</li><li>继续执行第二步</li></ol><p>MySQL查询优化器求解多表连接时采用了这种算法</p><h4 id="3-5-2-4、System-R算法"><a href="#3-5-2-4、System-R算法" class="headerlink" title="3.5.2.4、System-R算法"></a>3.5.2.4、System-R算法</h4><p>对自底向上的动态规划算法进行了改进，主要思想是把子树的查询计划的最优查询计划和次优查询计划保留，用于上层的查询计划生成，以便使得查询计划总体上最优。</p><h4 id="3-5-2-5、遗传算法"><a href="#3-5-2-5、遗传算法" class="headerlink" title="3.5.2.5、遗传算法"></a>3.5.2.5、遗传算法</h4><p>遗传算法（GA）是美国学着Holland与1975年首次提出，是一种启发式算法， 基于自然群体遗传演化机制的高效搜索算法。它抛弃了传统的搜索方式，模拟自然界生物进化过程，采用人工进化的方式对目标空间进行随机化搜索。它将问题域中的可能解看做是群体的一个个体（染色体），并将每一个个体编码成符号串形式，模拟达尔文的遗传选择和自然淘汰的生物进化过程，对群体反复进行基于遗传学的操作（选择，交叉，变异）根据预定的目标适应度函数对每个个体进行评价，依据“适者生存，优胜劣汰”的进化规则，不断得到更优的群体，同时以全局并行搜索方式来搜索优化群体中的最优个体，求得满足要求的最优解。</p><p>遗传算法通过作用于“染色体”上的“基因”，寻找好的“染色体”来求解问题（对算法所产生的每个“染色体”进行评价，并基于适应度值来改造“染色体”，使适用性好的“染色体”比适应性差的“染色体”有更多的“繁殖机会”）</p><p>下面介绍一些遗传算法的主要概念：</p><ul><li>群体：表示GA的搜索空间</li><li>个体：在多表连接中是每个基本关系或者中间生成的临时关系</li><li>染色体：个体的标志，由若干基因组成，是GA操作的基本对象，所以操作个体实则是操作染色体，染色体用字符串表示</li><li>基因：多段基因组成染色体，基因变异导致基因不断被优化</li><li>适应度：表示个体对环境的适应程度，通常由某一适应函数表示。对应执行策略的执行代价</li><li>选择：GA基本操作之一，依据个体的适应度，在群体中按照一定的概率选择可以作为父本的个体，适应度大的被选中的概率高，体现了“适者生存，优胜劣汰”的进化规则</li><li>交叉：GA的基本操作之一，即将父本个体按照一定的概率随机地交换基因形成新的个体</li><li>变异：GA的基本操作之一，即按一定的概率随机改变某个个体的基因值</li></ul><p>接下来介绍遗传算法设计的关键问题</p><ul><li>串的编码方式：本质是编码问题，一般把问题的各种参数用二进制形式进行编码，构成子串；然后把子串拼接构成“染色体”串。串长度及编码形式对算法收敛影响极大</li><li>适应度函数的确定：又称对象函数或问题的“环境”，是问题求解品质的测量函数。一般可以把问题的模型函数作为适应度函数，但有时需要另行构造</li><li>遗传算法自身参数设定：遗传算法自身参数有3个，即群体大小n，交叉概率Pc和变异概率Pm，具体如下：<ul><li>群体大小n太小时难以求出最优解，太大则增长收敛时间，一般n取30~160</li><li>交叉概率Pc太小时难以向前搜索，太大则容易破坏高适应值的结构，一般取0.25~0.75</li><li>变异概率Pm太小时难以产生新的基因结构，太大使遗传算法成了单纯的随机搜索，一般取0.01~0.2</li></ul></li></ul><p>遗传算法的主要步骤如下：</p><ol><li>随机初始化种群</li><li>评估初始的种群，即为种群计算每个个体的适应值且对所有个体排序</li><li>如果没有达到预定演化数（可以是一个确定的、与连接的表的个数无关的值，这样保证搜索空间一定不会因连接的表的个数增多导致搜索空间指数级增大），则继续下一步，否则结束算法</li><li>选择父体，随机挑选父体dad和母体mum</li><li>杂交，父体和母体杂交得到新个体child</li><li>变异，在某些个别条件下对新个体变异（不是大概率变异，不是每次都需要变异）</li><li>计算新个体的适应值，并把适应值排序插入到种群，种群中排名最后的则被淘汰</li><li>继续第三步</li></ol><h4 id="3-5-2-6、其他算法"><a href="#3-5-2-6、其他算法" class="headerlink" title="3.5.2.6、其他算法"></a>3.5.2.6、其他算法</h4><p>还有一些其他算法，如爬山法、分支界定枚举法、随机算法、模拟退火算法或多种算法相结合，都可以用于查询优化多表连接的生成。</p><h3 id="3-5-3、多表连接算法的比较"><a href="#3-5-3、多表连接算法的比较" class="headerlink" title="3.5.3、多表连接算法的比较"></a>3.5.3、多表连接算法的比较</h3><p>多表连接算法比较如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516165246747.png" alt="image-20210516165246747"></p><h1 id="11、MySQL查询优化器概述"><a href="#11、MySQL查询优化器概述" class="headerlink" title="11、MySQL查询优化器概述"></a>11、MySQL查询优化器概述</h1><p>MySQL查询优化器主要功能是完成select语句的执行，此外，还有个重要功能，就是使用关系代数、启发式规则、代价估算模型等技术，提高select执行的效率。</p><p>MySQL查询优化器实现了第二章介绍的大多数查询优化技术，这些技术用于对SPJ和非SPJ类型的查询语句进行优化。</p><p>本章从整体上介绍MySQL查询优化器，分别对其执行过程、架构、层次、设计思想、主要概念、代码结构宏观探讨MySQL查询优化器的实现。</p><h2 id="11-1、MySQL查询执行过程"><a href="#11-1、MySQL查询执行过程" class="headerlink" title="11.1、MySQL查询执行过程"></a>11.1、MySQL查询执行过程</h2><p>MySQL查询执行过程分为4个阶段</p><ul><li>语法分析阶段：将SQL语句经词法和语法分析后变换为一棵查询树st_select_lex传给优化器，并对SQL表达的语义进行检查</li><li>生成逻辑查询执行计划阶段：优化器在查询树中遍历每个关系，确定关系是否是常量表、为每个关系查找可用索引、运用关系代数原理和启发式规则进行逻辑上的查询优化（如消除子查询，消除外连接等）</li><li>生成物理查执行计划阶段：优化器对各个连接表进行排序，然后再求解多表连接最优路径，对于每个关系尽量应用索引计算其代价，找出代价最小的路径后保存到JOIN类的best_positions</li><li>执行查询执行计划阶段：直接把查询执行计划传到执行器执行</li></ul><p>四个阶段如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517152340375.png" alt="image-20210517152340375"></p><p>逻辑查询优化阶段：基于关系代数规则和启发式规则，把SQL经过等价的代数转换，变为一种更节省IO的执行序列</p><p>物理查询优化阶段：在解决多表连接时有两套算法：一是用户指定表连接次序的算法；二是混杂了贪心和穷举思想的算法</p><h2 id="11-2、MySQL查询优化器的架构和设计思想"><a href="#11-2、MySQL查询优化器的架构和设计思想" class="headerlink" title="11.2、MySQL查询优化器的架构和设计思想"></a>11.2、MySQL查询优化器的架构和设计思想</h2><p>查询优化器通过JOIN对象的prepare（MySQL5.7.19及以后版本这个方法被移到SELECT_LEX::prepare了）和optimize方法完成优化工作。</p><p>prepare完成的查询优化主要包括：子查询的冗余子句消除、IN类型子查询优化、将ANY/ALL等类型的子查询转换为MIN/MAX等操作，这是对简单子查询进行的优化；</p><p>JOIN.optimize函数完成的查询优化主要包括：子查询上拉，把外连接优化为内连接，消除嵌套连接，where子句、join/on子句、having子句条件表达式化简（尤其是对含有常量表达式的化简、等式合并），优化没有group by子句情况下的count(*)、MIN和MAX，裁剪分区partition（如果查询的表是分区表），确定多表的连接路径（单表是多表的特例，统计join的代价，两种多表连接算法选其一搜索最优的join顺序、生成执行计划）、优化等式谓词、优化distinct、创建临时表存储临时结果优化分组排序等操作。在这些过程中，MySQL并没有把优化过程明显分为逻辑查询优化阶段和物理查询优化阶段，而是互为混杂，这是MySQL查询优化器的一大特点。</p><h3 id="11-2-1、MySQL查询优化器架构"><a href="#11-2-1、MySQL查询优化器架构" class="headerlink" title="11.2.1、MySQL查询优化器架构"></a>11.2.1、MySQL查询优化器架构</h3><p>其架构和执行过程如下图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517160204396.png"></p><p>主要经历4个过程：</p><ul><li>P1过程：SQL语句输入变为语法查询树</li><li>P2过程：查询预处理，主要是子查询优化</li><li>P3过程：将语法树变为逻辑关系查询树，进而变成物理查询执行计划，挑出最优计划</li><li>P4过程：依据最优查询执行计划得到查询结果</li></ul><p>主要经历以下4个模块</p><ul><li>M1模块：语法分析模块，执行P1</li><li>M2模块：查询预处理模块，执行P2</li><li>M3模块：查询优化模块，执行P3</li><li>M4模块：查询执行模块，执行P4</li></ul><p>实现MySQL查询优化器功能的主要是M3模块，其主要有两个子阶段工作：</p><ul><li>M3-S1逻辑查询优化阶段：把语法查询树通过关系代数原理，优化为关系代数查询树</li><li>M3-S2物理查询优化阶段：把关系代数查询树用于贪心算法，生成最优执行计划</li></ul><h3 id="11-2-2、MySQL查询优化器的层次"><a href="#11-2-2、MySQL查询优化器的层次" class="headerlink" title="11.2.2、MySQL查询优化器的层次"></a>11.2.2、MySQL查询优化器的层次</h3><p>代码层面看，逻辑结构不是很清晰；但是从技术层面看，还是可以分为逻辑查询优化和物理查询优化两个阶段。</p><h3 id="11-2-3、MySQL查询优化器设计思想"><a href="#11-2-3、MySQL查询优化器设计思想" class="headerlink" title="11.2.3、MySQL查询优化器设计思想"></a>11.2.3、MySQL查询优化器设计思想</h3><p>唯快唯实用</p><h2 id="11-3、主要概念"><a href="#11-3、主要概念" class="headerlink" title="11.3、主要概念"></a>11.3、主要概念</h2><h3 id="11-3-1、常量表"><a href="#11-3-1、常量表" class="headerlink" title="11.3.1、常量表"></a>11.3.1、常量表</h3><p>MySQL常量表的“常量”不同于编程语言中的常量。在MySQL中，常量表是指读取表上的数据行数是确定的零行或者一行，分为以下两种类型：</p><ul><li>system表：表中只有一行数据</li><li>const表：经where语句中的限制条件（“column=常数”格式的表达式）筛选后只有一行数据；这表明，在column列上存在索引，索引列可能是一个主键列，也可能是唯一键的列。</li></ul><p>满足这两个条件之一，就是常量表。</p><p>常量表的引入，实质上使得查询优化器能够基于规则对多表连接算法进行优化。因为多表连接算法，至少是个多重循环，而常量表的存在，使得循环层数得到消减</p><h3 id="11-3-2、表数据的访问方式"><a href="#11-3-2、表数据的访问方式" class="headerlink" title="11.3.2、表数据的访问方式"></a>11.3.2、表数据的访问方式</h3><p>单表又称简单表，是一个用户定义的逻辑概念上的table（create table定义）。MySQL对表的扫描分为两种类型：一是基于索引，而是直接在表上做数据的顺序扫描，这和其他数据库读取数据的方式没有本质区别。</p><p>MySQL基于索引的扫描又区分为多种情况，进而细化出各种扫描方式（JT_EQ_REF、JT_REF、JT_REF_OR_NULL等），根据这种细化的扫描方式又详细区分了不同的扫描花费估算公式（参看best_access_path函数），这使得估算更为精准，有助于更好地得到查询执行计划。</p><p>此外，MySQL提出一些其他的扫描方式（基于常量表），如JT_SYSTEM、JT_CONST等，这使得读取更为快捷，有助于得到更好的查询计划。对于JT_SYSTEM、JT_CONST的查找，优化器会通过join_read_system，join_read_const函数快速读取表中的值。</p><p>MySQL对表数据扫描方式的细化，区分了常量表和其他非常量表，使得在查询执行计划生成阶段就可以提前释放加在常量表上的锁（JOIN::optimize方法中对mysql_unlock_some_tables函数的调用）从而提高了并发度。</p><p>MySQL提供的各种数据访问方式如下表：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517164135780.png" alt="image-20210517164135780"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517164206107.png" alt="image-20210517164206107"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517164311450.png" alt="image-20210517164311450"></p><p>在MySQL代码中，提出两种单表扫描方式，分别是：index scan和table scan。</p><p>除了JT_ALL为表扫描外，其余多数属于索引扫描，只是根据索引的定义情况，区分了多种类型而已。</p><p>在opt_range.h文件中，定义了接口类QUICK_SELECT_I，其主要是利用索引实现快速查询定义的一个公共接口，处理一些特殊情况的查询（如类QUICK_GROUP_MIN_MAX_SELECT是为了在分组操作中求最值），其子类如下表所示：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517165107122.png" alt="image-20210517165107122"></p><h2 id="11-4、代码层次结构"><a href="#11-4、代码层次结构" class="headerlink" title="11.4、代码层次结构"></a>11.4、代码层次结构</h2><p>MySQL查询优化器的入口函数是SELECT_LEX::prepare函数（？）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517165454907.png" alt="image-20210517165454907"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517165550608.png" alt="image-20210517165550608"></p><h1 id="12、MySQL查询优化器相关数据结构"><a href="#12、MySQL查询优化器相关数据结构" class="headerlink" title="12、MySQL查询优化器相关数据结构"></a>12、MySQL查询优化器相关数据结构</h1><p>本章介绍MySQL查询优化器模块的主要数据结构、数据结构之间的关联关系以及数据结构在查询优化器执行流程中的主要作用</p><h2 id="12-1、主要的类和数据结构"><a href="#12-1、主要的类和数据结构" class="headerlink" title="12.1、主要的类和数据结构"></a>12.1、主要的类和数据结构</h2><p>主要包括四个方面：</p><ul><li>查询树</li><li>基本对象</li><li>连接相关的对象与执行计划</li><li>代价估算类</li></ul><h3 id="12-1-1、查询树"><a href="#12-1-1、查询树" class="headerlink" title="12.1.1、查询树"></a>12.1.1、查询树</h3><p>语法分析器的结果是查询树，使用sql_lex.h下的st_select_lex类表示</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//where子句</span>  Item <span class="token operator">*</span>m_where_cond<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//having子句</span>  Item <span class="token operator">*</span>m_having_cond<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//from子句中的表对象</span>  SQL_I_List<span class="token operator">&lt;</span>TABLE_LIST<span class="token operator">></span>  table_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//group by子句</span>  SQL_I_List<span class="token operator">&lt;</span>ORDER<span class="token operator">></span>       group_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//连接树</span>  JOIN <span class="token operator">*</span>join<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顶层连接链表</span>  List<span class="token operator">&lt;</span>TABLE_LIST<span class="token operator">></span> top_join_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前被分析的连接链表</span>  List<span class="token operator">&lt;</span>TABLE_LIST<span class="token operator">></span> <span class="token operator">*</span>join_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//半连接嵌套链表</span>  List<span class="token operator">&lt;</span>TABLE_LIST<span class="token operator">></span> sj_nests<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//基本表，即从SQL查询语句中分解出的基表</span>  TABLE_LIST <span class="token operator">*</span>leaf_tables<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//基本表的数量</span>  uint leaf_table_count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//order by子句</span>  SQL_I_List<span class="token operator">&lt;</span>ORDER<span class="token operator">></span> order_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//limit子句</span>  Item <span class="token operator">*</span>select_limit<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/// LIMIT ... OFFSET clause, NULL if no offset is given</span>  Item <span class="token operator">*</span>offset_limit<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询树的一些基本方法</span>  TABLE_LIST<span class="token operator">*</span> <span class="token function">add_table_to_list</span><span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">,</span> Table_ident <span class="token operator">*</span>table<span class="token punctuation">,</span>                LEX_STRING <span class="token operator">*</span>alias<span class="token punctuation">,</span>                ulong table_options<span class="token punctuation">,</span>                thr_lock_type flags<span class="token operator">=</span> TL_UNLOCK<span class="token punctuation">,</span>                                enum_mdl_type mdl_type<span class="token operator">=</span> MDL_SHARED_READ<span class="token punctuation">,</span>                List<span class="token operator">&lt;</span>Index_hint<span class="token operator">></span> <span class="token operator">*</span>hints<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                                List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">*</span>partition_names<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                                LEX_STRING <span class="token operator">*</span>option<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TABLE_LIST <span class="token operator">*</span><span class="token function">nest_last_join</span><span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">add_joined_table</span><span class="token punctuation">(</span>TABLE_LIST <span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>  TABLE_LIST <span class="token operator">*</span><span class="token function">convert_right_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-1-2、基本对象"><a href="#12-1-2、基本对象" class="headerlink" title="12.1.2、基本对象"></a>12.1.2、基本对象</h3><p>MySQL和查询优化相关的基本对象主要有：关系（table.h里的TABLE_LIST），索引（sql_class.h里的Key），连接表（sql_select.h里的JOIN_TAB）</p><h4 id="12-1-2-1、关系"><a href="#12-1-2-1、关系" class="headerlink" title="12.1.2.1、关系"></a>12.1.2.1、关系</h4><p>MySQL在TABLE_LIST存放了查询优化阶段用到的信息以及其他阶段用到的信息，是一个逻辑上的表结构。在存储层，由TABLE结构体(table.h里)表示表对象</p><p>结构体TABLE_LIST定义如下：</p><pre class="line-numbers language-CPP"><code class="language-CPP">struct TABLE_LIST {      //表所属数据库，表名，别名  const char *db, *table_name, *alias;    //模式名  char *schema_table_name;      //与连接相关的一些信息  Item        *m_join_cond;  Item          *m_sj_cond;           //半连接的表对象  table_map     sj_inner_tables;      //查询树  st_select_lex    *select_lex;        //视图相关信息  List<TABLE_LIST> *view_tables;  /* most upper view this table belongs to */  TABLE_LIST    *belong_to_view;  /*    The view directly referencing this table    (non-zero only for merged underlying tables of a view).  */  TABLE_LIST    *referencing_view;        //安全权限相关的信息  Security_context *security_ctx;  /*    This view security context (non-zero only for views with    SQL SECURITY DEFINER)  */  Security_context *view_sctx;    GRANT_INFO    grant;        //管理相关的一些信息  //表对象上的锁信息  thr_lock_type lock_type;      //是否被缓存  bool        cacheable_table;    /* stop PS caching */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-1-2-2、索引"><a href="#12-1-2-2、索引" class="headerlink" title="12.1.2.2、索引"></a>12.1.2.2、索引</h4><p>MySQL通过Key类定义索引的类型和索引的关键信息，其中KEY_CREATE_INFO包括了索引列、索引算法等，如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517175055037.png" alt="image-20210517175055037"></p><p>首先在sql.lex.h里定义了6种索引类型</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> keytype <span class="token punctuation">{</span>  KEYTYPE_PRIMARY<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//主键索引</span>  KEYTYPE_UNIQUE<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//唯一索引</span>  KEYTYPE_MULTIPLE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//多重索引</span>  KEYTYPE_FULLTEXT<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//全文索引</span>  KEYTYPE_SPATIAL<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//空间索引</span>  KEYTYPE_FOREIGN <span class="token comment" spellcheck="true">//外键索引</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在sql_class.h里定义了索引类Key：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Key</span> <span class="token operator">:</span><span class="token keyword">public</span> Sql_alloc <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//索引类型</span>  keytype type<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//索引元信息，如索引算法、名称、注释等</span>  KEY_CREATE_INFO key_create_info<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//索引列信息，如列的名称，长度等</span>  List<span class="token operator">&lt;</span>Key_part_spec<span class="token operator">></span> columns<span class="token punctuation">;</span>  LEX_STRING name<span class="token punctuation">;</span>  <span class="token keyword">bool</span> generated<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>索引元信息中的<code>enum ha_key_alg algorithm</code>支持的索引算法如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> ha_key_alg <span class="token punctuation">{</span>  HA_KEY_ALG_UNDEF<span class="token operator">=</span>    <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* Not specified (old file) */</span>  HA_KEY_ALG_BTREE<span class="token operator">=</span>    <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* B-tree算法，默认使用       */</span>  HA_KEY_ALG_RTREE<span class="token operator">=</span>    <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* R-tree算法，用于空间搜索 */</span>  HA_KEY_ALG_HASH<span class="token operator">=</span>    <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* HASH算法，用于堆表搜索 */</span>  HA_KEY_ALG_FULLTEXT<span class="token operator">=</span>    <span class="token number">4</span>        <span class="token comment" spellcheck="true">/* 全文索引，用于MyISAM存储引擎的表 */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-1-2-3、连接表"><a href="#12-1-2-3、连接表" class="headerlink" title="12.1.2.3、连接表"></a>12.1.2.3、连接表</h4><p>连接表是介于关系（TABLE_LIST类）与连接类（JOIN类）之间的一个过渡对象，存放了关系的一些相关信息，也存放了连接操作需要的一些信息，因此称为连接表。其定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">JOIN_TAB</span> <span class="token operator">:</span> <span class="token keyword">public</span> Sql_alloc<span class="token punctuation">,</span> <span class="token keyword">public</span> QEP_shared_owner <span class="token punctuation">{</span>  TABLE_LIST    <span class="token operator">*</span>table_ref<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**&lt; points to table reference               */</span><span class="token comment" spellcheck="true">//第一个可用的索引</span>  Key_use       <span class="token operator">*</span>m_keyuse<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//join/on条件表达式中的等式</span>  COND_EQUAL    <span class="token operator">*</span>cond_equal<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//被扫描的记录行数（不是返回结果的行数）</span>  ha_rows       found_records<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用JT_ALL，JT_RANGE，JT_INDEX_MERGE访问表的花费</span>  ha_rows       read_time<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//连接时依赖的表</span>  table_map     dependent<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//快速查找的类型</span>  <span class="token keyword">enum</span> quick_type use_quick<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两表连接时使用的缓存算法等</span>  uint          m_use_join_cache<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//半连接相关的一些变量</span>  TABLE_LIST    <span class="token operator">*</span>emb_sj_nest<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// @returns semijoin strategy for this table.</span>  uint <span class="token function">get_sj_strategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-1-3、连接对象与执行计划"><a href="#12-1-3、连接对象与执行计划" class="headerlink" title="12.1.3、连接对象与执行计划"></a>12.1.3、连接对象与执行计划</h3><p>MySQL查询优化相关的连接对象主要有连接类（JOIN）、约束条件（Item）和位置（POSITION）等</p><h4 id="12-1-3-1、连接类（JOIN）"><a href="#12-1-3-1、连接类（JOIN）" class="headerlink" title="12.1.3.1、连接类（JOIN）"></a>12.1.3.1、连接类（JOIN）</h4><p>sql_optimizer.h里的JOIN类是连接操作对应的查询语句的连接关系内容，是优化和执行的基本单位，也是优化结果（查询执行计划）的存储对象，其定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">JOIN</span> <span class="token operator">:</span><span class="token keyword">public</span> Sql_alloc <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//语法分析之后得到的查询树</span>  SELECT_LEX <span class="token operator">*</span><span class="token keyword">const</span> select_lex<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//进行集合操作的查询语句</span>  SELECT_LEX_UNIT <span class="token operator">*</span><span class="token keyword">const</span> unit<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//存放连接中所有的连接关系对象，存放顺序参见get_best_combination函数</span>  JOIN_TAB <span class="token operator">*</span>join_tab<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//查询执行计划表</span>  QEP_TAB <span class="token operator">*</span>qep_tab<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//保存当前最优查询计划</span>  JOIN_TAB <span class="token operator">*</span><span class="token operator">*</span>best_ref<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//位图，标识表在连接中的位置</span>  JOIN_TAB <span class="token operator">*</span><span class="token operator">*</span>map2table<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//查询块中出现的基表数量</span>  uint     tables<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//查询块中出现的主要的表的个数（包括物化的临时表等）</span>  uint     primary_tables<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//常量表的个数</span>  uint     const_tables<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//临时表的个数</span>  uint     tmp_tables<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**     构成当前连接的最优表的连接次序（用数组线性存放各个表对象，用来表示这些表按数组指定次序连接得到当前连接）  */</span>  POSITION <span class="token operator">*</span>best_positions<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当前路径，在求解最优路径（best_positions）的过程中，表示某一刻的一个路径</span>  POSITION <span class="token operator">*</span>positions<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//最优查询路径对应的最小花费</span>  <span class="token keyword">double</span>   best_read<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//最优查询路径估计会返回的行数</span>  ha_rows  best_rowcount<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//锁信息</span>  MYSQL_LOCK <span class="token operator">*</span>lock<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//索引</span>  Key_use_array keyuse_array<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//查询语句中的所有表达式</span>  List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token operator">&amp;</span>all_fields<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//order by和group by子句</span>  ORDER_with_src order<span class="token punctuation">,</span> group_list<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//where子句</span>  Item       <span class="token operator">*</span>where_cond<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//having子句</span>  Item       <span class="token operator">*</span>having_cond<span class="token punctuation">;</span>  Item       <span class="token operator">*</span>having_for_explain<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//条件子句</span>  COND_EQUAL <span class="token operator">*</span>cond_equal<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//半连接相关</span>  List<span class="token operator">&lt;</span>TABLE<span class="token operator">></span> sj_tmp_tables<span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Semijoin_mat_exec<span class="token operator">></span> sjm_exec_list<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//查询优化器的几个主要方法</span>  <span class="token comment" spellcheck="true">//正式优化阶段，使用逻辑，物理优化方法，进行查询的各种操作代价估算</span>  <span class="token keyword">int</span> <span class="token function">optimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//重置该连接对象状态</span>  <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//得到执行计划，按查询执行计划查询</span>  <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//prepare连接结果</span>  <span class="token keyword">bool</span> <span class="token function">prepare_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-1-3-2、约束条件"><a href="#12-1-3-2、约束条件" class="headerlink" title="12.1.3.2、约束条件"></a>12.1.3.2、约束条件</h4><p>约束条件是指where或join/on或having子句中的谓词表达式，其分为两种：一种是限制条件，用来过滤单表的元组；另一种是连接条件，满足连接条件的元组才会连接，连接条件表达式一般包括两个或两个以上关系的变量。</p><p>MySQL用Item类表示约束条件表达式，这是一个父类，由一系列子类继承该父类，Item_equal类与Item类之间关系如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Item_equal    Item_bool_func        Item_int_func            Item_func                Item_result_field                    Item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>约束条件类Item的定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token operator">:</span> <span class="token keyword">public</span> Parse_tree_node <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Item是一个多用途对象，可以存放连接类中的where，having条件等</span>  <span class="token keyword">enum</span> Type <span class="token punctuation">{</span>INVALID_ITEM<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>             FIELD_ITEM<span class="token punctuation">,</span> FUNC_ITEM<span class="token punctuation">,</span> SUM_FUNC_ITEM<span class="token punctuation">,</span> STRING_ITEM<span class="token punctuation">,</span>         INT_ITEM<span class="token punctuation">,</span> REAL_ITEM<span class="token punctuation">,</span> NULL_ITEM<span class="token punctuation">,</span> VARBIN_ITEM<span class="token punctuation">,</span>         COPY_STR_ITEM<span class="token punctuation">,</span> FIELD_AVG_ITEM<span class="token punctuation">,</span> DEFAULT_VALUE_ITEM<span class="token punctuation">,</span>         PROC_ITEM<span class="token punctuation">,</span>COND_ITEM<span class="token punctuation">,</span> REF_ITEM<span class="token punctuation">,</span> FIELD_STD_ITEM<span class="token punctuation">,</span>         FIELD_VARIANCE_ITEM<span class="token punctuation">,</span> INSERT_VALUE_ITEM<span class="token punctuation">,</span>             SUBSELECT_ITEM<span class="token punctuation">,</span> ROW_ITEM<span class="token punctuation">,</span> CACHE_ITEM<span class="token punctuation">,</span> TYPE_HOLDER<span class="token punctuation">,</span>             PARAM_ITEM<span class="token punctuation">,</span> TRIGGER_FIELD_ITEM<span class="token punctuation">,</span> DECIMAL_ITEM<span class="token punctuation">,</span>             XPATH_NODESET<span class="token punctuation">,</span> XPATH_NODESET_CMP<span class="token punctuation">,</span>             VIEW_FIXER_ITEM<span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*  将一个Item类转化为一个Filed类返回,例如：    Item_int ->Field_longlong    Item_real->Field_double    Item_string->Field_string  */</span>      Field <span class="token operator">*</span><span class="token function">tmp_table_field_from_field_type</span><span class="token punctuation">(</span>TABLE <span class="token operator">*</span>table<span class="token punctuation">,</span> <span class="token keyword">bool</span> fixed_length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Item语法树</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517205411374.png" alt="image-20210517205411374"></p><p>等值条件类COND_EQUAL：</p><pre class="line-numbers language-CPP"><code class="language-CPP">class COND_EQUAL: public Sql_alloc{public:    //本层以及本层以下的成员个数（条件有嵌套）  uint max_members;        //上层的所有等值判断的约束条件  COND_EQUAL *upper_levels;      //当前等式表达式  List<Item_equal> current_level;  COND_EQUAL()  {     upper_levels= 0;  }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示等式的类Item_equal，格式如field1=field2、field=const</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Item_equal</span><span class="token operator">:</span> <span class="token keyword">public</span> Item_bool_func <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表达式的因子，如field1=field2中的field1和field2</span>  List<span class="token operator">&lt;</span>Item_field<span class="token operator">></span> fields<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//常量因子</span>  Item <span class="token operator">*</span>const_item<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-1-3-3、位置"><a href="#12-1-3-3、位置" class="headerlink" title="12.1.3.3、位置"></a>12.1.3.3、位置</h4><p>在连接顺序中，位置是指被连接的表的位置。这个位置上存储了被访问的表、被使用的访问方法、半连接策略的选择、半连接优化状态等。MySQL多表连接算法支持的是从左到右的类似左深树的连接方式，但左深树是一个树形结构，而MySQL的多表连接算法连接表的过程是一个平面结构，先对表进行排序，然后从左到右地连接排好序的表，然后确定当前连接方式的花费。</p><p>位置st_position结构体的定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> st_position <span class="token operator">:</span> <span class="token keyword">public</span> Sql_alloc <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//rows_fetched = selectivity(access_condition) * cardinality(table)</span>  <span class="token keyword">double</span> rows_fetched<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//访问表的花费</span>  <span class="token keyword">double</span> read_cost<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//访问的连接对象</span>  JOIN_TAB <span class="token operator">*</span>table<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**  索引信息    NULL  -  'index' or 'range' or 'index_merge' or 'ALL' access is used.    Other - [eq_]ref[_or_null] access is used. Pointer to {t.keypart1 = expr}  */</span>  Key_use <span class="token operator">*</span>key<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//半连接优化策略</span>  uint sj_strategy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//首次匹配策略</span>  <span class="token comment" spellcheck="true">/*    Index of the first inner table that we intend to handle with this    strategy  */</span>  uint first_firstmatch_table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    Tables that were not in the join prefix when we've started considering     FirstMatch strategy.  */</span>  table_map first_firstmatch_rtbl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*     Tables that need to be in the prefix before we can calculate the cost    of using FirstMatch strategy.   */</span>  table_map firstmatch_need_tables<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//重复淘汰策略</span>     <span class="token comment" spellcheck="true">/* The first table that the strategy will need to handle */</span>  uint  first_dupsweedout_table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    Tables that we will need to have in the prefix to do the weedout step    (all inner and all outer that the involved semi-joins are correlated with)  */</span>  table_map dupsweedout_tables<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//半连接物化扫描策略</span>      <span class="token comment" spellcheck="true">/* The last inner table (valid once we're after it) */</span>  uint      sjm_scan_last_inner<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    Tables that we need to have in the prefix to calculate the correct cost.    Basically, we need all inner tables and outer tables mentioned in the    semi-join's ON expression so we can correctly account for fanout.  */</span>  table_map sjm_scan_need_tables<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-1-4、代价估算类"><a href="#12-1-4、代价估算类" class="headerlink" title="12.1.4、代价估算类"></a>12.1.4、代价估算类</h3><p>主要包括四个层面：</p><ul><li>IO花费</li><li>CPU花费</li><li>远程操作花费</li><li>内存操作花费</li></ul><p>代价估算类Cost_estimate定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Cost_estimate</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//IO操作花费</span>  <span class="token keyword">double</span> io_cost<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//CPU操作花费</span>  <span class="token keyword">double</span> cpu_cost<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//远程操作花费</span>  <span class="token keyword">double</span> import_cost<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//内存操作花费</span>  <span class="token keyword">double</span> mem_cost<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//5.7.19版本暂时没有考虑内存操作花费</span>      <span class="token keyword">double</span> <span class="token function">total_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> io_cost <span class="token operator">+</span> cpu_cost <span class="token operator">+</span> import_cost<span class="token punctuation">;</span> <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/// Add to IO cost</span>  <span class="token keyword">void</span> <span class="token function">add_io</span><span class="token punctuation">(</span><span class="token keyword">double</span> add_io_cost<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    io_cost<span class="token operator">+</span><span class="token operator">=</span> add_io_cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/// Add to CPU cost</span>  <span class="token keyword">void</span> <span class="token function">add_cpu</span><span class="token punctuation">(</span><span class="token keyword">double</span> add_cpu_cost<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpu_cost<span class="token operator">+</span><span class="token operator">=</span> add_cpu_cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/// Add to import cost</span>  <span class="token keyword">void</span> <span class="token function">add_import</span><span class="token punctuation">(</span><span class="token keyword">double</span> add_import_cost<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    import_cost<span class="token operator">+</span><span class="token operator">=</span> add_import_cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/// Add to memory cost</span>  <span class="token keyword">void</span> <span class="token function">add_mem</span><span class="token punctuation">(</span><span class="token keyword">double</span> add_mem_cost<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mem_cost<span class="token operator">+</span><span class="token operator">=</span> add_mem_cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在DsMrr_impl::get_disk_sweep_mrr_cost方法里，还是添加了内存操作花费，只是目前暂不考虑，将来的版本会考虑</p><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token comment" spellcheck="true">/*    Cost of memory is not included in the total_cost() function and    thus will not be considered when comparing costs. Still, we    record it in the cost estimate object for future use.  */</span>  cost<span class="token operator">-</span><span class="token operator">></span><span class="token function">add_mem</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-2、各个阶段主要结构体间的关系"><a href="#12-2、各个阶段主要结构体间的关系" class="headerlink" title="12.2、各个阶段主要结构体间的关系"></a>12.2、各个阶段主要结构体间的关系</h2><ul><li>SQL输入</li><li>语法分析：SQL被分解后存放到st_select_lex的各个成员上，如where等子句存在Item上、连接表存放在TABLE_LIST上</li><li>查询优化：包括逻辑和物理查询优化，此阶段所有信息存在JOIN对象中</li><li>查询执行：最后将查询执行计划交给执行器执行</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210518090720399.png" alt="image-20210518090720399"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210518092309118.png" alt="image-20210518092309118"></p><h1 id="13、MySQL查询优化器的原理解析"><a href="#13、MySQL查询优化器的原理解析" class="headerlink" title="13、MySQL查询优化器的原理解析"></a>13、MySQL查询优化器的原理解析</h1><h2 id="13-1、查询优化器整体流程"><a href="#13-1、查询优化器整体流程" class="headerlink" title="13.1、查询优化器整体流程"></a>13.1、查询优化器整体流程</h2><pre class="line-numbers language-cpp"><code class="language-cpp">handle_connection    do_command        dispatch_command            mysql_parse                mysql_execute_command                    execute_sqlcom_select                        handle_query                            SELECT_LEX<span class="token operator">::</span>prepare                                remove_redundant_subquery_clauses <span class="token comment" spellcheck="true">//去除子查询中冗余子句</span>                                resolve_subquery<span class="token comment" spellcheck="true">//子查询优化</span>                                flatten_subqueries<span class="token comment" spellcheck="true">//将子查询转换为半连接</span>                                apply_local_transforms                            SELECT_LEX<span class="token operator">::</span>optimize                                JOIN<span class="token operator">::</span>optimize                                    SELECT_LEX<span class="token operator">::</span>apply_local_transforms                                        delete_unused_merged_columns <span class="token comment" spellcheck="true">//删除未使用的列</span>                                        simplify_joins <span class="token comment" spellcheck="true">//消除外连接和嵌套连接</span>                                    <span class="token function">optimize_cond</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>where_cond<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//优化where子句</span>                                    <span class="token function">optimize_cond</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>having_cond<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//优化having子句</span>                                    opt_sum_query <span class="token comment" spellcheck="true">//优化count(*), min() and max() （适用于没有group by的情况）</span>                                    print_where <span class="token comment" spellcheck="true">//打印where条件</span>                                    JOIN<span class="token operator">::</span>make_join_plan <span class="token comment" spellcheck="true">//计算最优连接次序，初始化JOIN对象</span>                                        init_planner_arrays <span class="token comment" spellcheck="true">//为连接次序优化初始化临时数组</span>                                        propagate_dependencies<span class="token comment" spellcheck="true">//求解传播表之间的依赖关系</span>                                        update_ref_and_keys <span class="token comment" spellcheck="true">//获取索引信息，为快速定位数据，条件比较做准备</span>                                        estimate_rowcount                                            get_quick_record_count<span class="token comment" spellcheck="true">//估算每个表中有多少元组可用</span>                                        choose_table_order                                            optimize_straight_join<span class="token comment" spellcheck="true">//用户指定表连接次序</span>                                            <span class="token operator">|</span>greedy_search <span class="token comment" spellcheck="true">// |贪心算法</span>                                                best_extension_by_limited_search<span class="token comment" spellcheck="true">//确定多表连接的最优查询计划</span>                                                    best_access_path<span class="token comment" spellcheck="true">//估算访问表的最优访问路径（包括花费）</span>                                        get_best_combination <span class="token comment" spellcheck="true">//根据最优连接次序，生成执行计划</span>                                            make_outerjoin_info<span class="token comment" spellcheck="true">//计算外连接信息</span>                                    mysql_unlock_some_tables <span class="token comment" spellcheck="true">//释放常量表上的锁</span>                                    substitute_for_best_equal_field<span class="token comment" spellcheck="true">//循环遍历所有表达式，化简表达式（如去除重复等式）</span>                                    make_join_select <span class="token comment" spellcheck="true">//对条件求值，下推连接条件到表中</span>                                    JOIN<span class="token operator">::</span>optimize_distinct_group_order                                        test_if_skip_sort_order <span class="token comment" spellcheck="true">//排序操作的优化（尝试使用索引代替排序）</span>                                    optimize_fts_query <span class="token comment" spellcheck="true">//优化全文搜索</span>                                    TEST_join <span class="token comment" spellcheck="true">// 打印连接信息</span>                                    make_join_readinfo <span class="token comment" spellcheck="true">//细化查询计划</span>                                        init_join_cache <span class="token comment" spellcheck="true">//初始化连接缓存</span>                                        push_index_cond <span class="token comment" spellcheck="true">//下推索引条件（ICP）        </span>                                        pick_table_access_method <span class="token comment" spellcheck="true">//选择合适的数据读取方式</span>                            JOIN<span class="token operator">::</span>exec                                JOIN<span class="token operator">::</span>prepare_result <span class="token comment" spellcheck="true">//准备连接结果</span>                                send_result_set_metadata                                do_select                            st_select_lex_unit<span class="token operator">::</span>cleanup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-2、优化器的代码详解"><a href="#13-2、优化器的代码详解" class="headerlink" title="13.2、优化器的代码详解"></a>13.2、优化器的代码详解</h2><h3 id="13-2-1、SELECT-LEX-prepare：优化前的准备工作"><a href="#13-2-1、SELECT-LEX-prepare：优化前的准备工作" class="headerlink" title="13.2.1、SELECT_LEX::prepare：优化前的准备工作"></a>13.2.1、SELECT_LEX::prepare：优化前的准备工作</h3><h4 id="13-2-1-1、整体工作"><a href="#13-2-1-1、整体工作" class="headerlink" title="13.2.1.1、整体工作"></a>13.2.1.1、整体工作</h4><pre class="line-numbers language-cpp"><code class="language-cpp">setup_tables <span class="token comment" spellcheck="true">//初始化基表</span>check_view_privileges <span class="token comment" spellcheck="true">//权限检查</span>setup_wild <span class="token comment" spellcheck="true">//将查询语句中的*扩展为表上所有列</span>setup_fields <span class="token comment" spellcheck="true">//为列填充数据信息</span>setup_conds <span class="token comment" spellcheck="true">//解析where子句和连接条件</span>setup_group <span class="token comment" spellcheck="true">//初始化group by子句</span>setup_order <span class="token comment" spellcheck="true">//初始化order by子句</span>remove_redundant_subquery_clauses <span class="token comment" spellcheck="true">//去除子查询中的冗余子句</span>resolve_subquery <span class="token comment" spellcheck="true">//优化IN/ALL/ANY/EXISTS式子查询</span>split_sum_func2 <span class="token comment" spellcheck="true">//统计order by，having等子句中的sum操作  </span>flatten_subqueries<span class="token comment" spellcheck="true">//将子查询转换为半连接</span>apply_local_transforms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-2-1-2、remove-redundant-subquery-clauses"><a href="#13-2-1-2、remove-redundant-subquery-clauses" class="headerlink" title="13.2.1.2、remove_redundant_subquery_clauses"></a>13.2.1.2、remove_redundant_subquery_clauses</h4><p>MySQL定义的子查询类型如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">enum</span> subs_type <span class="token punctuation">{</span>UNKNOWN_SUBS<span class="token punctuation">,</span> SINGLEROW_SUBS<span class="token punctuation">,</span>          EXISTS_SUBS<span class="token punctuation">,</span> IN_SUBS<span class="token punctuation">,</span> ALL_SUBS<span class="token punctuation">,</span> ANY_SUBS<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>remove_redundant_subquery_clauses</code>的主要代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//用于去除冗余的orderby，distinct和group by子句</span><span class="token keyword">void</span> SELECT_LEX<span class="token operator">::</span><span class="token function">remove_redundant_subquery_clauses</span> <span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">,</span>                                                   <span class="token keyword">int</span> hidden_group_field_count<span class="token punctuation">,</span>                                                   <span class="token keyword">int</span> hidden_order_field_count<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subq_predicate<span class="token operator">-</span><span class="token operator">></span><span class="token function">substype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Item_subselect<span class="token operator">::</span>SINGLEROW_SUBS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不处理简单的行子查询</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//去除order by子句</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>order_list<span class="token punctuation">.</span>elements<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">empty_order_list</span><span class="token punctuation">(</span>hidden_order_field_count<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//去除distinct子句</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">remove_base_options</span><span class="token punctuation">(</span>SELECT_DISTINCT<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//去除group by子句（如果没有聚合函数和having子句）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>group_list<span class="token punctuation">.</span>elements <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">agg_func_used</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">having_cond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ORDER <span class="token operator">*</span>g<span class="token operator">=</span> group_list<span class="token punctuation">.</span>first<span class="token punctuation">;</span> g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> g<span class="token operator">=</span> g<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token operator">-</span><span class="token operator">></span>item <span class="token operator">==</span> g<span class="token operator">-</span><span class="token operator">></span>item_ptr<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token operator">-</span><span class="token operator">></span>item<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Item<span class="token operator">::</span>clean_up_after_removal<span class="token punctuation">,</span> walk_subquery<span class="token punctuation">,</span>                             <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>uchar<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        group_list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>hidden_group_field_count<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          all_fields<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ref_ptrs<span class="token punctuation">[</span>all_fields<span class="token punctuation">.</span>elements<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-2-1-3、resolve-subquery"><a href="#13-2-1-3、resolve-subquery" class="headerlink" title="13.2.1.3、resolve_subquery"></a>13.2.1.3、resolve_subquery</h4><p>主要用于对子查询进行各种优化，可优化方式如下：</p><ul><li>转换子查询为半连接</li><li>使用物化标识子查询</li><li>执行IN向EXISTS的转换</li><li>执行<op>ALL/ANY/SOME向MIN/MAX的转换，其中op为大于或小于操作</li><li>使用值替代标量子查询</li></ul><p>主要代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> SELECT_LEX<span class="token operator">::</span><span class="token function">resolve_subquery</span><span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>in_predicate<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//IN操作</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    如果左操作数和右操作数的列数量不同，报错退出函数      Check if the left and right expressions have the same # of      columns, i.e. we don't have a case like         (oe1, oe2) IN (SELECT ie1, ie2, ie3 ...)    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item_list<span class="token punctuation">.</span>elements <span class="token operator">!=</span> in_predicate<span class="token operator">-</span><span class="token operator">></span>left_expr<span class="token operator">-</span><span class="token operator">></span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">my_error</span><span class="token punctuation">(</span>ER_OPERAND_COLUMNS<span class="token punctuation">,</span> <span class="token function">MYF</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in_predicate<span class="token operator">-</span><span class="token operator">></span>left_expr<span class="token operator">-</span><span class="token operator">></span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*      如果满足以下10点，子查询就可以被扁平化为半连接操作（在flatten_subqueries函数里实现）    Check if we're in subquery that is a candidate for flattening into a    semi-join (which is done in flatten_subqueries()). The requirements are:      1. Subquery predicate is an IN/=ANY subquery predicate      2. Subquery is a single SELECT (not a UNION)      3. Subquery does not have GROUP BY      4. Subquery does not use aggregate functions or HAVING      5. Subquery predicate is (a) in an ON/WHERE clause, and (b) at      the AND-top-level of that clause.      6. Parent query block accepts semijoins (i.e we are not in a subquery of      a single table UPDATE/DELETE (TODO: We should handle this at some      point by switching to multi-table UPDATE/DELETE)      7. We're not in a confluent table-less subquery, like "SELECT 1".      8. No execution method was already chosen (by a prepared statement)      9. Parent select is not a confluent table-less select      10. Neither parent nor child select have STRAIGHT_JOIN option.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">semijoin_enabled</span><span class="token punctuation">(</span>thd<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      in_predicate <span class="token operator">&amp;&amp;</span>                                                   <span class="token comment" spellcheck="true">// 1</span>      <span class="token operator">!</span><span class="token function">is_part_of_union</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                                            <span class="token comment" spellcheck="true">// 2</span>      <span class="token operator">!</span>group_list<span class="token punctuation">.</span>elements <span class="token operator">&amp;&amp;</span>                                           <span class="token comment" spellcheck="true">// 3</span>      <span class="token operator">!</span>m_having_cond <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>with_sum_func <span class="token operator">&amp;&amp;</span>                               <span class="token comment" spellcheck="true">// 4</span>      <span class="token punctuation">(</span>outer<span class="token operator">-</span><span class="token operator">></span>resolve_place <span class="token operator">==</span> st_select_lex<span class="token operator">::</span>RESOLVE_CONDITION <span class="token operator">||</span>      <span class="token comment" spellcheck="true">// 5a</span>       outer<span class="token operator">-</span><span class="token operator">></span>resolve_place <span class="token operator">==</span> st_select_lex<span class="token operator">::</span>RESOLVE_JOIN_NEST<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     <span class="token comment" spellcheck="true">// 5a</span>      <span class="token operator">!</span>outer<span class="token operator">-</span><span class="token operator">></span>semijoin_disallowed <span class="token operator">&amp;&amp;</span>                                    <span class="token comment" spellcheck="true">// 5b</span>      outer<span class="token operator">-</span><span class="token operator">></span>sj_candidates <span class="token operator">&amp;&amp;</span>                                           <span class="token comment" spellcheck="true">// 6</span>      leaf_table_count <span class="token operator">&amp;&amp;</span>                                               <span class="token comment" spellcheck="true">// 7</span>      in_predicate<span class="token operator">-</span><span class="token operator">></span>exec_method <span class="token operator">==</span>                           Item_exists_subselect<span class="token operator">::</span>EXEC_UNSPECIFIED <span class="token operator">&amp;&amp;</span>   <span class="token comment" spellcheck="true">// 8</span>      outer<span class="token operator">-</span><span class="token operator">></span>leaf_table_count <span class="token operator">&amp;&amp;</span>                                        <span class="token comment" spellcheck="true">// 9</span>      <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">active_options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> outer<span class="token operator">-</span><span class="token operator">></span><span class="token function">active_options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>       SELECT_STRAIGHT_JOIN<span class="token punctuation">)</span><span class="token punctuation">)</span>                                           <span class="token comment" spellcheck="true">//10</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_PRINT</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Subquery is semi-join conversion candidate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Notify in the subquery predicate where it belongs in the query graph */</span>    in_predicate<span class="token operator">-</span><span class="token operator">></span>embedding_join_nest<span class="token operator">=</span> outer<span class="token operator">-</span><span class="token operator">></span>resolve_nest<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Register the subquery for further processing in flatten_subqueries() */</span>    outer<span class="token operator">-</span><span class="token operator">></span>sj_candidates<span class="token operator">-</span><span class="token operator">></span><span class="token function">push_back</span><span class="token punctuation">(</span>in_predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    chose_semijoin<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//如果不可以使用半连接优化，调用select_transformer->select_in_like_transformer函数进行子查询优化(IN/ALL/ANY/SOME)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chose_semijoin <span class="token operator">&amp;&amp;</span> subq_predicate<span class="token operator">-</span><span class="token operator">></span><span class="token function">select_transformer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">==</span> Item_subselect<span class="token operator">::</span>RES_ERROR<span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-2-1-4、flatten-subqueries：转换子查询为半连接"><a href="#13-2-1-4、flatten-subqueries：转换子查询为半连接" class="headerlink" title="13.2.1.4、flatten_subqueries：转换子查询为半连接"></a>13.2.1.4、flatten_subqueries：转换子查询为半连接</h4><p>即把子查询的表对象上拉到from子句，让from子句原先的表对象和子查询中被上拉的表对象进行半连接操作，从而达到扁平化子查询的效果</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519110113223.png" alt="image-20210519110113223"></p><p>上面格式的语句可以优化为下面格式语句</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519110138660.png" alt="image-20210519110138660"></p><p>转换后，经过条件替换函数replace_subcondition的处理，条件部分发生了较大变化（如subq_where合并到父查询的where子句中，生成新条件oe=ie）。</p><p>flatten_subqueries实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> SELECT_LEX<span class="token operator">::</span><span class="token function">flatten_subqueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、自底向上，转换各子句中存在的子查询</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>subq<span class="token operator">=</span> subq_begin<span class="token punctuation">;</span> subq <span class="token operator">&lt;</span> subq_end<span class="token punctuation">;</span> subq<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//目前版本（5.7.19）仅支持IN格式的子查询</span>        <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">substype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Item_subselect<span class="token operator">::</span>IN_SUBS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得子句中的查询语句</span>        st_select_lex <span class="token operator">*</span>child_select<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check that we proceeded bottom-up</span>        <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span>child_select<span class="token operator">-</span><span class="token operator">></span>sj_candidates <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>sj_convert_priority<span class="token operator">=</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span>uncacheable <span class="token operator">&amp;</span> UNCACHEABLE_DEPENDENT<span class="token punctuation">)</span> <span class="token operator">?</span> MAX_TABLES <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>          child_select<span class="token operator">-</span><span class="token operator">></span>leaf_table_count<span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*    2、对子查询进行转换，转换前先排序，排序规则是：    1)相关子查询比不相关子查询靠前    2）有更多外表的子查询靠前    */</span>    <span class="token comment" spellcheck="true">//2.1、排序</span>    <span class="token function">my_qsort</span><span class="token punctuation">(</span>subq_begin<span class="token punctuation">,</span>           sj_candidates<span class="token operator">-</span><span class="token operator">></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sj_candidates<span class="token operator">-</span><span class="token operator">></span><span class="token function">element_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>qsort_cmp<span class="token operator">></span><span class="token punctuation">(</span>subq_sj_candidate_cmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint table_count<span class="token operator">=</span> leaf_table_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.2、对排好序的所有子查询进行转换前的准备工作：条件替换</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>subq<span class="token operator">=</span> subq_begin<span class="token punctuation">;</span> subq <span class="token operator">&lt;</span> subq_end<span class="token punctuation">;</span> subq<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Add the tables in the subquery nest plus one in case of materialization:</span>        <span class="token keyword">const</span> uint tables_added<span class="token operator">=</span>          <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>leaf_table_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>sj_chosen<span class="token operator">=</span> table_count <span class="token operator">+</span> tables_added <span class="token operator">&lt;=</span> MAX_TABLES<span class="token punctuation">;</span>        table_count<span class="token operator">+</span><span class="token operator">=</span> tables_added<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// In WHERE/ON of parent query, replace IN(subq) with "1" (&lt;=>TRUE)</span>        Item <span class="token operator">*</span><span class="token operator">*</span>tree<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>embedding_join_nest <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span>                     <span class="token operator">&amp;</span>m_where_cond <span class="token operator">:</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>embedding_join_nest<span class="token operator">-</span><span class="token operator">></span><span class="token function">join_cond_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">replace_subcondition</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token operator">*</span>subq<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">Item_int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* purecov: inspected */</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.3、对所有排好序的子查询进行转换</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>subq<span class="token operator">=</span> subq_begin<span class="token punctuation">;</span> subq <span class="token operator">&lt;</span> subq_end<span class="token punctuation">;</span> subq<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>sj_chosen<span class="token punctuation">)</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">OPT_TRACE_TRANSFORM</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> oto0<span class="token punctuation">,</span> oto1<span class="token punctuation">,</span>                            <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>select_number<span class="token punctuation">,</span>                            <span class="token string">"IN (SELECT)"</span><span class="token punctuation">,</span> <span class="token string">"semijoin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oto1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"chosen"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">convert_subquery_to_semijoin</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3、对于第2步不能通过convert_subquery_to_semijoin函数处理的子查询，将IN转换为EXISTS格式</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>subq<span class="token operator">=</span> subq_begin<span class="token punctuation">;</span> subq <span class="token operator">&lt;</span> subq_end<span class="token punctuation">;</span> subq<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    SELECT_LEX <span class="token operator">*</span>save_select_lex<span class="token operator">=</span> thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">current_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_current_select</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实现每个子查询中的优化</span>    res<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select_transformer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_current_select</span><span class="token punctuation">(</span>save_select_lex<span class="token punctuation">)</span><span class="token punctuation">;</span>    Item <span class="token operator">*</span><span class="token operator">*</span>tree<span class="token operator">=</span> subquery_in_join_clause <span class="token operator">?</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>embedding_join_nest<span class="token operator">-</span><span class="token operator">></span><span class="token function">join_cond_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">&amp;</span>m_where_cond<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将IN转换为EXISTS格式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">replace_subcondition</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token operator">*</span>subq<span class="token punctuation">,</span> substitute<span class="token punctuation">,</span> do_fix_fields<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-2-1-5、select-transformer：子查询优化"><a href="#13-2-1-5、select-transformer：子查询优化" class="headerlink" title="13.2.1.5、select_transformer：子查询优化"></a>13.2.1.5、select_transformer：子查询优化</h4><p>select_transformer是父类Item_subselect的一个方法，被4个子类Item_singlerow_subselect、Item_in_subselect、Item_allany_subselect、Item_exists_subselect继承，根据具体类型实现各自的优化。其内部是调用select_in_like_transformer函数来完成子查询的优化的</p><p>select_in_like_transformer的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Item_subselect<span class="token operator">::</span>trans_resItem_in_subselect<span class="token operator">::</span><span class="token function">select_in_like_transformer</span><span class="token punctuation">(</span>SELECT_LEX <span class="token operator">*</span>select<span class="token punctuation">,</span>                                              Comp_creator <span class="token operator">*</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果子查询对应优化器不存在，创建一个优化器</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optimizer<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Prepared_stmt_arena_holder <span class="token function">ps_arena_holder</span><span class="token punctuation">(</span>thd<span class="token punctuation">)</span><span class="token punctuation">;</span>    optimizer<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Item_in_optimizer</span><span class="token punctuation">(</span>left_expr<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_current_select</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//如果IN谓词的左操作数只有一列，则认为是标量IN子查询</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left_expr<span class="token operator">-</span><span class="token operator">></span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>      res<span class="token operator">=</span> <span class="token function">single_value_transformer</span><span class="token punctuation">(</span>select<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* we do not support row operation for ALL/ANY/SOME */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>func <span class="token operator">!=</span> <span class="token operator">&amp;</span>eq_creator<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">my_error</span><span class="token punctuation">(</span>ER_OPERAND_COLUMNS<span class="token punctuation">,</span> <span class="token function">MYF</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>RES_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//否则则认为是行式IN子查询</span>      res<span class="token operator">=</span> <span class="token function">row_value_transformer</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>                                            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-2、JOIN-optimize：优化器的主入口方法"><a href="#13-2-2、JOIN-optimize：优化器的主入口方法" class="headerlink" title="13.2.2、JOIN::optimize：优化器的主入口方法"></a>13.2.2、JOIN::optimize：优化器的主入口方法</h3><p>包括逻辑查询优化和物理查询优化，得到最终查询执行计划。实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> JOIN<span class="token operator">::</span><span class="token function">optimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    apply_local_transforms <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将外连接转换为内连接（递归调用）</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">simplify_joins</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>top_join_list<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_where_cond<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录连接的嵌套信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">record_join_nest_info</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>top_join_list<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给每个嵌套连接分配一个bit位，构建bitmap</span>        <span class="token function">build_bitmap_for_nested_joins</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>top_join_list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对查询语句中的临时关系或视图对象，使用optimize_derived函数创建临时表或物化临时关系，便于后续使用</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>select_lex<span class="token operator">-</span><span class="token operator">></span>materialized_derived_table_count<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>TABLE_LIST <span class="token operator">*</span>tl<span class="token operator">=</span> select_lex<span class="token operator">-</span><span class="token operator">></span>leaf_tables<span class="token punctuation">;</span> tl<span class="token punctuation">;</span> tl<span class="token operator">=</span> tl<span class="token operator">-</span><span class="token operator">></span>next_leaf<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tl<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_view_or_derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tl<span class="token operator">-</span><span class="token operator">></span><span class="token function">optimize_derived</span><span class="token punctuation">(</span>thd<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//优化where子句</span>    <span class="token function">optimize_cond</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>where_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cond_equal<span class="token punctuation">,</span>                      <span class="token operator">&amp;</span>select_lex<span class="token operator">-</span><span class="token operator">></span>top_join_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>select_lex<span class="token operator">-</span><span class="token operator">></span>cond_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//优化having子句</span>    <span class="token function">optimize_cond</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>having_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cond_equal<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                      <span class="token operator">&amp;</span>select_lex<span class="token operator">-</span><span class="token operator">></span>having_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对没有group子句且调用了count(*), min() and max()函数的情况进行优化</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tables_list <span class="token operator">&amp;&amp;</span> implicit_grouping<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//对每个单表（叶子表）上满足上述条件的情况进行优化</span>          <span class="token function">opt_sum_query</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> select_lex<span class="token operator">-</span><span class="token operator">></span>leaf_tables<span class="token punctuation">,</span> all_fields<span class="token punctuation">,</span>                            where_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算最优连接次序，初始化JOIN对象</span>    <span class="token function">make_join_plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//小优化：对常量表提前解锁</span>    <span class="token function">mysql_unlock_some_tables</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> ct<span class="token punctuation">,</span> const_tables<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//化简条件和每个表上的冗余等式</span>    <span class="token function">substitute_for_best_equal_field</span><span class="token punctuation">(</span>where_cond<span class="token punctuation">,</span> cond_equal<span class="token punctuation">,</span> map2table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对条件尽量求值，并下推约束条件到表中</span>    <span class="token function">make_join_select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> where_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//排序操作的优化</span>   optimize_distinct_group_order <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test_if_skip_sort_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//优化全文搜索</span>    <span class="token function">optimize_fts_query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为各种类型的表数据获取做准备工作</span>    <span class="token function">make_join_readinfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> no_jbuf_after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化临时表</span>    <span class="token function">make_tmp_tables_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-3、JOIN-make-join-plan：计算最优的查询优化执行计划"><a href="#13-2-3、JOIN-make-join-plan：计算最优的查询优化执行计划" class="headerlink" title="13.2.3、JOIN::make_join_plan：计算最优的查询优化执行计划"></a>13.2.3、JOIN::make_join_plan：计算最优的查询优化执行计划</h3><p>实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> JOIN<span class="token operator">::</span><span class="token function">make_join_plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化连接次序优化的临时数组</span>    <span class="token function">init_planner_arrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//求解传播表之间的依赖关系</span>    <span class="token function">propagate_dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将表之间的依赖关系写到优化器跟踪信息里</span>    <span class="token function">trace_table_dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取索引信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>where_cond <span class="token operator">||</span> select_lex<span class="token operator">-</span><span class="token operator">></span>outer_join<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">update_ref_and_keys</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>keyuse_array<span class="token punctuation">,</span> join_tab<span class="token punctuation">,</span> tables<span class="token punctuation">,</span> where_cond<span class="token punctuation">,</span>                            cond_equal<span class="token punctuation">,</span> <span class="token operator">~</span>select_lex<span class="token operator">-</span><span class="token operator">></span>outer_join<span class="token punctuation">,</span> select_lex<span class="token punctuation">,</span>                            <span class="token operator">&amp;</span>sargables<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//基于表之间的依赖关系，可以把一些用于半连接计算的表拉到上层，避开用半连接计算</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>select_lex<span class="token operator">-</span><span class="token operator">></span>sj_pullout_done <span class="token operator">&amp;&amp;</span> select_lex<span class="token operator">-</span><span class="token operator">></span>sj_nests<span class="token punctuation">.</span>elements <span class="token operator">&amp;&amp;</span>      <span class="token function">pull_out_semijoin_tables</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//基于行数提取常量表</span>    <span class="token function">extract_const_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//基于函数依赖提取常量表</span>    <span class="token function">extract_func_dependent_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">estimate_rowcount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>JOIN_TAB <span class="token operator">*</span>tab<span class="token operator">=</span> join_tab<span class="token punctuation">;</span> tab <span class="token operator">&lt;</span> tab_end<span class="token punctuation">;</span> tab<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token keyword">const</span> Cost_model_table <span class="token operator">*</span><span class="token keyword">const</span> cost_model<span class="token operator">=</span> tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果是常量表，元组数最多是1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> JT_SYSTEM <span class="token operator">||</span> tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> JT_CONST<span class="token punctuation">)</span>            <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Only one matching row and one block to read</span>          tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_records</span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>found_records<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token operator">=</span> cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tab<span class="token operator">-</span><span class="token operator">></span>read_time<span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>ha_rows<span class="token operator">></span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//计算非常量表的元组数、获取数据的时间花费和最坏搜索因子</span>            tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_records</span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>found_records<span class="token operator">=</span> tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>stats<span class="token punctuation">.</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> Cost_estimate table_scan_time<span class="token operator">=</span> tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">table_scan_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tab<span class="token operator">-</span><span class="token operator">></span>read_time<span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>ha_rows<span class="token operator">></span><span class="token punctuation">(</span>table_scan_time<span class="token punctuation">.</span><span class="token function">total_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token operator">=</span>              <span class="token function">min</span><span class="token punctuation">(</span>cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> tab<span class="token operator">-</span><span class="token operator">></span>found_records <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> tab<span class="token operator">-</span><span class="token operator">></span>read_time <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token keyword">double</span> min_worst_seek<span class="token operator">=</span> cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks <span class="token operator">&lt;</span> min_worst_seek<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Fix for small tables</span>              tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token operator">=</span> min_worst_seek<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果有group和distinct子句，则为这些操作所在的列确定是否有索引可用</span>            <span class="token function">add_group_and_distinct_keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果可以执行范围扫描，则重新计算元组数、获取数据的时间花费</span>            TABLE_LIST <span class="token operator">*</span><span class="token keyword">const</span> tl<span class="token operator">=</span> tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tab<span class="token operator">-</span><span class="token operator">></span>const_keys<span class="token punctuation">.</span><span class="token function">is_clear_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token comment" spellcheck="true">// (1)</span>                <span class="token punctuation">(</span><span class="token operator">!</span>tl<span class="token operator">-</span><span class="token operator">></span>embedding <span class="token operator">||</span>                                        <span class="token comment" spellcheck="true">// (2)</span>                 <span class="token punctuation">(</span>tl<span class="token operator">-</span><span class="token operator">></span>embedding <span class="token operator">&amp;&amp;</span> tl<span class="token operator">-</span><span class="token operator">></span>embedding<span class="token operator">-</span><span class="token operator">></span><span class="token function">sj_cond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// (3)</span>            <span class="token punctuation">{</span>              ha_rows records<span class="token operator">=</span> <span class="token function">get_quick_record_count</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> tab<span class="token punctuation">,</span> row_limit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>           <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//否则执行全表扫描</span>              <span class="token function">Opt_trace_object</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> <span class="token string">"table_scan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span> tab<span class="token operator">-</span><span class="token operator">></span>found_records<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">,</span> tab<span class="token operator">-</span><span class="token operator">></span>read_time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//为了利用好索引，对索引对象上的keyuse值进行更新</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">plan_is_const</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">optimize_keyuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用物化技术优化半连接嵌套</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sj_nests <span class="token operator">&amp;&amp;</span> <span class="token function">optimize_semijoin_nests_for_materialization</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择多表连接算法（有两个，一是使用用户指定的连接次序，二是使用贪心算法进行穷举搜索）</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Optimize_table_order</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">choose_table_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//决定子查询的优化策略（IN->EXISTS和物化二选一）</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>unit<span class="token operator">-</span><span class="token operator">></span>item <span class="token operator">&amp;&amp;</span> <span class="token function">decide_subquery_strategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">//根据choose_table_order得到的最优路径生成执行计划</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_best_combination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-4、choose-table-order：求解多表连接最优连接路径"><a href="#13-2-4、choose-table-order：求解多表连接最优连接路径" class="headerlink" title="13.2.4、choose_table_order：求解多表连接最优连接路径"></a>13.2.4、choose_table_order：求解多表连接最优连接路径</h3><p>choose_table_order函数选择一个算法求解最优路径，实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> Optimize_table_order<span class="token operator">::</span><span class="token function">choose_table_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果全是常量表，不用做多表连接的优化</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>const_tables <span class="token operator">==</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>best_positions<span class="token punctuation">,</span> join<span class="token operator">-</span><span class="token operator">></span>positions<span class="token punctuation">,</span>       <span class="token keyword">sizeof</span><span class="token punctuation">(</span>POSITION<span class="token punctuation">)</span> <span class="token operator">*</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">)</span><span class="token punctuation">;</span>    join<span class="token operator">-</span><span class="token operator">></span>best_read<span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    join<span class="token operator">-</span><span class="token operator">></span>best_rowcount<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确定是否采用SQL语句指定的次序（SQL中通过hit指定straight join）来生成多表连接执行计划</span>    <span class="token keyword">const</span> <span class="token keyword">bool</span> straight_join<span class="token operator">=</span>join<span class="token operator">-</span><span class="token operator">></span>select_lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">active_options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> SELECT_STRAIGHT_JOIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果存在半连接，则采用物化方法进行优化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>emb_sjm_nest<span class="token punctuation">)</span>      <span class="token punctuation">{</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">,</span>               join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">,</span>               <span class="token function">Join_tab_compare_embedded_first</span><span class="token punctuation">(</span>emb_sjm_nest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    join_tables<span class="token operator">=</span> emb_sjm_nest<span class="token operator">-</span><span class="token operator">></span>sj_inner_tables<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//否则，需要对多表连接进行优化求解最优路径</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用用户指定的表连接次序对表排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>straight_join<span class="token punctuation">)</span>          <span class="token function">merge_sort</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">,</span>                     join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">,</span>                     <span class="token function">Join_tab_compare_straight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//否则使用贪心算法，在这之前需要对表进行排序。排序规则是按照表的元组数从小到大排序（这是一条启发式规则）</span>          <span class="token function">merge_sort</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">,</span>                     join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">,</span>                     <span class="token function">Join_tab_compare_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//所有基表去掉常量表就是要连接的表</span>        join_tables<span class="token operator">=</span> join<span class="token operator">-</span><span class="token operator">></span>all_table_map <span class="token operator">&amp;</span> <span class="token operator">~</span>join<span class="token operator">-</span><span class="token operator">></span>const_table_map<span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>straight_join<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果使用用户指定次序连接，查询优化器不再优化</span>            <span class="token function">optimize_straight_join</span><span class="token punctuation">(</span>join_tables<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//否则使用贪心算法进行搜索</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">greedy_search</span><span class="token punctuation">(</span>join_tables<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改半连接策略并估算花费</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fix_semijoin_strategies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-5、make-join-select：对条件求值，下推连接条件到表中"><a href="#13-2-5、make-join-select：对条件求值，下推连接条件到表中" class="headerlink" title="13.2.5、make_join_select：对条件求值，下推连接条件到表中"></a>13.2.5、make_join_select：对条件求值，下推连接条件到表中</h3><p>make_join_select函数主要用于分解连接条件（where和on等条件），下推连接条件到表中，实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">make_join_select</span><span class="token punctuation">(</span>JOIN <span class="token operator">*</span>join<span class="token punctuation">,</span> Item <span class="token operator">*</span>cond<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、优化点：把列上的非NULL语义加入到条件中，有利于条件判断（语义优化技术）</span>    <span class="token function">add_not_null_conds</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、抽取表达式中的常量</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token punctuation">{</span>         const_cond<span class="token operator">=</span> <span class="token function">make_cond_for_table</span><span class="token punctuation">(</span>cond<span class="token punctuation">,</span> join<span class="token operator">-</span><span class="token operator">></span>const_table_map<span class="token punctuation">,</span>                                    <span class="token punctuation">(</span>table_map<span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">and_conditions</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>const_cond<span class="token punctuation">,</span> join<span class="token operator">-</span><span class="token operator">></span>best_ref<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//3、遍历每个表，对可能的条件进行下推</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>uint i<span class="token operator">=</span>join<span class="token operator">-</span><span class="token operator">></span>const_tables <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> join<span class="token operator">-</span><span class="token operator">></span>tables <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Item <span class="token operator">*</span>push_cond<span class="token operator">=</span> <span class="token function">make_cond_for_table</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token operator">-</span><span class="token operator">></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token operator">-</span><span class="token operator">></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>push_cond<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">cond_push</span><span class="token punctuation">(</span>push_cond<span class="token punctuation">)</span><span class="token punctuation">)</span>                tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>pushed_cond<span class="token operator">=</span> push_cond<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-6、make-join-readinfo：为连接的每个表构造信息"><a href="#13-2-6、make-join-readinfo：为连接的每个表构造信息" class="headerlink" title="13.2.6、make_join_readinfo：为连接的每个表构造信息"></a>13.2.6、make_join_readinfo：为连接的每个表构造信息</h3><p>make_join_readinfo函数用于确认连接是否要排序，并建立半连接的消除重复的策略；为连接中的每个非常量表增加缓存、下推索引条件等方式的信息处理。实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">make_join_readinfo</span><span class="token punctuation">(</span>JOIN <span class="token operator">*</span>join<span class="token punctuation">,</span> uint no_jbuf_after<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//建立半连接重复元组消除策略</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setup_semijoin_dups_elimination</span><span class="token punctuation">(</span>join<span class="token punctuation">,</span> no_jbuf_after<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>uint i<span class="token operator">=</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">use_join_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> JOIN_CACHE<span class="token operator">::</span>ALG_NONE<span class="token punctuation">)</span>                  qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">init_join_cache</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化连接缓存对象</span>          <span class="token keyword">switch</span> <span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> JT_EQ_REF<span class="token operator">:</span>            <span class="token keyword">case</span> JT_REF_OR_NULL<span class="token operator">:</span>            <span class="token keyword">case</span> JT_REF<span class="token operator">:</span>            <span class="token keyword">case</span> JT_SYSTEM<span class="token operator">:</span>            <span class="token keyword">case</span> JT_CONST<span class="token operator">:</span>               <span class="token comment" spellcheck="true">//如果有索引可用，直接使用索引</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">.</span><span class="token function">is_set</span><span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token operator">!</span>table<span class="token operator">-</span><span class="token operator">></span>no_keyread<span class="token punctuation">)</span>                table<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_keyread</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">else</span><span class="token comment" spellcheck="true">//下推索引条件，可以快速获取单表数据</span>                qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">push_index_cond</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>trace_refine_table<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> JT_ALL<span class="token operator">:</span>              join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_status_no_index_used</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* Fall through */</span>            <span class="token keyword">case</span> JT_INDEX_SCAN<span class="token operator">:</span>               <span class="token comment" spellcheck="true">//动态快速扫描</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>use_quick <span class="token operator">==</span> QS_DYNAMIC_RANGE<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_status_no_good_index_used</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>statistics<span class="token punctuation">)</span>                  join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_range_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span>              <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>statistics<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">)</span>                          join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">else</span>                          join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_full_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> JT_RANGE<span class="token operator">:</span>            <span class="token keyword">case</span> JT_INDEX_MERGE<span class="token operator">:</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>statistics<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">)</span>                  join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                  join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_full_range_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token operator">-</span><span class="token operator">></span>no_keyread <span class="token operator">&amp;&amp;</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> JT_RANGE<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">.</span><span class="token function">is_set</span><span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>index <span class="token operator">!=</span> MAX_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>                  table<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_keyread</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token operator">-</span><span class="token operator">></span>key_read<span class="token punctuation">)</span>                  qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">push_index_cond</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span>                                           <span class="token operator">&amp;</span>trace_refine_table<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>filter_effect <span class="token operator">!=</span> COND_FILTER_STALE_NO_CONST<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">double</span> rows_w_const_cond<span class="token operator">=</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>rows_fetched<span class="token punctuation">;</span>                qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>rows_fetched<span class="token operator">=</span> <span class="token function">rows2double</span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>filter_effect <span class="token operator">!=</span> COND_FILTER_STALE<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// Constant condition moves to filter_effect:</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>rows_fetched <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// avoid division by zero</span>                    tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>filter_effect<span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>                  <span class="token keyword">else</span>                    tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>filter_effect<span class="token operator">*</span><span class="token operator">=</span>                      <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span>rows_w_const_cond<span class="token operator">/</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>rows_fetched<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> JT_FT<span class="token operator">:</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fts_index_access</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                table<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_keyread</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                table<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">.</span><span class="token function">set_bit</span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ft_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>              <span class="token function">DBUG_PRINT</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"Table type %d found"</span><span class="token punctuation">,</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* purecov: deadcode */</span>              <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* purecov: deadcode */</span>           <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-7、JOIN-exec：执行查询执行计划"><a href="#13-2-7、JOIN-exec：执行查询执行计划" class="headerlink" title="13.2.7、JOIN::exec：执行查询执行计划"></a>13.2.7、JOIN::exec：执行查询执行计划</h3><p>JOIN::exec函数根据查询执行计划，完成SQL语句的执行。实现如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> JOIN<span class="token operator">::</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//准备连接结果</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">prepare_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        DBUG_VOID_RETURN<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    query_result<span class="token operator">-</span><span class="token operator">></span><span class="token function">send_result_set_metadata</span><span class="token punctuation">(</span><span class="token operator">*</span>fields<span class="token punctuation">,</span>Protocol<span class="token operator">::</span>SEND_NUM_ROWS <span class="token operator">|</span> Protocol<span class="token operator">::</span>SEND_EOF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//完成执行</span>      error<span class="token operator">=</span> <span class="token function">do_select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-3、代价估算"><a href="#13-3、代价估算" class="headerlink" title="13.3、代价估算"></a>13.3、代价估算</h2><p>MySQL代价估算属于物理优化的范畴，是比较多表连接路径优劣的重要依据，计算的过程依赖统计模块提供的统计信息。</p><h3 id="13-3-1、查询代价估算模型"><a href="#13-3-1、查询代价估算模型" class="headerlink" title="13.3.1、查询代价估算模型"></a>13.3.1、查询代价估算模型</h3><p>MySQL使用代价估算公式 Cost = io_cost + cpu_cost + import_cost，对单个对象的某种扫描方式的花费进行了计算，整体上考虑IO，CPU和远程操作代价。</p><p>MySQL认为，多表连接找出每个表的最小花费就能得到最终连接的最小花费。因为多个表之间按照一定规则排好序（常量表在前，其他表按照元组数从小到大排序）。因此，MySQL代价估算的重点，在于单表扫描的花费（best_access_path）。</p><p>单表扫描分为索引扫描和全表扫描。对于全表扫描，主要涉及CPU和IO花费（计算公式为：所有元组 * 每个元组CPU花费 + 所有元组 * 每个元组IO花费）；</p><p>对于索引扫描，分解点有两个，一个是比较符，一个是索引类型。比较符分为等值比较（操作符为=或者IN）和范围比较（操作符为&lt;, &gt;, BETWEEN等）；索引类型根据是否唯一等情况进行划分。</p><p>因此MySQL的代价估算重点应该是<strong>计算基于索引的单表扫描在范围操作符作用下IO和CPU的花费。（best_access_path函数，还没细看）</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519173443006.png" alt="image-20210519173443006"></p><h3 id="13-3-2、查询代价估算过程"><a href="#13-3-2、查询代价估算过程" class="headerlink" title="13.3.2、查询代价估算过程"></a>13.3.2、查询代价估算过程</h3><p>MySQL的查询优化器，代价估算分为以下两个阶段：</p><ul><li>多表连接阶段：依据代价估算模型，求解最优的连接顺序</li><li>多表连接之后：对连接树上的每个表进行进一步计算，找出每个表的最优访问方式</li></ul><h4 id="13-3-2-1、多表连接阶段代价估算过程"><a href="#13-3-2-1、多表连接阶段代价估算过程" class="headerlink" title="13.3.2.1、多表连接阶段代价估算过程"></a>13.3.2.1、多表连接阶段代价估算过程</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519175100027.png" alt="image-20210519175100027"></p><h4 id="13-3-2-2、多表连接之后局部代价估算过程"><a href="#13-3-2-2、多表连接之后局部代价估算过程" class="headerlink" title="13.3.2.2、多表连接之后局部代价估算过程"></a>13.3.2.2、多表连接之后局部代价估算过程</h4><p>多表连接阶段已经确定了多表的连接顺序，查询执行计划基本完成。但是对部分表的扫描还可以优化，重新确认扫描方式。这个是在make_join_select函数查询优化器阶段后期。需要重新扫描的情况有如下两种：</p><p>第一种情况：</p><ul><li>存在使得范围优化器可用的条件</li><li>在一个或多个索引上存在非常量条件</li><li>部分非常量的列被读取过</li></ul><p>第二种情况：</p><ul><li>条件仅依赖常量</li><li>第一个非常量表</li><li>语句中含有LIMIT子句使得多表连接时对表的函数估算不正确</li><li>查询没有使用FOUND_ROWS()方式执行（SQL中指定了SQL_CALC_FOUND_ROWS）</li></ul><p>多表连接之后，通过调用make_join_select函数对满足上述情况的部分表重新扫描计算其花费，找出最优的。此时是对已经确定执行顺序的查询执行计划做进一步的局部优化，如下图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519180752524.png" alt="image-20210519180752524"></p><h3 id="13-3-3、其他的代价估算"><a href="#13-3-3、其他的代价估算" class="headerlink" title="13.3.3、其他的代价估算"></a>13.3.3、其他的代价估算</h3><h4 id="13-3-3-1、check-quick-select：计算基于索引做范围扫描的代价"><a href="#13-3-3-1、check-quick-select：计算基于索引做范围扫描的代价" class="headerlink" title="13.3.3.1、check_quick_select：计算基于索引做范围扫描的代价"></a>13.3.3.1、check_quick_select：计算基于索引做范围扫描的代价</h4><p>check_quick_select函数用于依据给定的索引（参数tree上的idx位置）做范围扫描，计算所能获得的元组个数和花费等。实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span>ha_rows <span class="token function">check_quick_select</span><span class="token punctuation">(</span>PARAM <span class="token operator">*</span>param<span class="token punctuation">,</span> uint idx<span class="token punctuation">,</span> <span class="token keyword">bool</span> index_only<span class="token punctuation">,</span>                           SEL_ARG <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">bool</span> update_tbl_stats<span class="token punctuation">,</span>                                       uint <span class="token operator">*</span>mrr_flags<span class="token punctuation">,</span> uint <span class="token operator">*</span>bufsize<span class="token punctuation">,</span> Cost_estimate <span class="token operator">*</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传递信息到seq，通过seq把check_quick_select的参数传到multi_range_read_info_const函数里</span>    seq<span class="token punctuation">.</span>keyno<span class="token operator">=</span> idx<span class="token punctuation">;</span>    seq<span class="token punctuation">.</span>real_keyno<span class="token operator">=</span> keynr<span class="token punctuation">;</span>    seq<span class="token punctuation">.</span>start<span class="token operator">=</span> tree<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//确定是使用索引的统计信息（index statistics）还是索引的精确信息（index dives）</span>    param<span class="token operator">-</span><span class="token operator">></span>use_index_statistics<span class="token operator">=</span>     <span class="token function">eq_ranges_exceeds_limit</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token operator">&amp;</span>range_count<span class="token punctuation">,</span>                             param<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span>variables<span class="token punctuation">.</span>eq_range_index_dive_limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//基于ROR进行扫描</span>    param<span class="token operator">-</span><span class="token operator">></span>is_ror_scan<span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    HA_KEY_SCAN_NOT_ROR表示哈希索引扫描不能返回按rowid有序的记录    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">index_flags</span><span class="token punctuation">(</span>keynr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TRUE<span class="token punctuation">)</span> <span class="token operator">&amp;</span> HA_KEY_SCAN_NOT_ROR<span class="token punctuation">)</span>        param<span class="token operator">-</span><span class="token operator">></span>is_ror_scan<span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对索引的扫描利用MRR方式（优化外存的读取，使得批量读取的读取位置有序，保障磁盘磁头不是无序运动）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token operator">-</span><span class="token operator">></span>order_direction <span class="token operator">!=</span> ORDER<span class="token operator">::</span>ORDER_NOT_RELEVANT<span class="token punctuation">)</span>        <span class="token operator">*</span>mrr_flags<span class="token operator">|</span><span class="token operator">=</span> HA_MRR_SORTED<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//根据索引利用MRR技术，获取行数、花费等信息</span>    rows<span class="token operator">=</span> file<span class="token operator">-</span><span class="token operator">></span><span class="token function">multi_range_read_info_const</span><span class="token punctuation">(</span>keynr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>seq_if<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>seq<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bufsize<span class="token punctuation">,</span> mrr_flags<span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-3-3-2、test-quick-select：快速获取数据方式的代价计算"><a href="#13-3-3-2、test-quick-select：快速获取数据方式的代价计算" class="headerlink" title="13.3.3.2、test_quick_select：快速获取数据方式的代价计算"></a>13.3.3.2、test_quick_select：快速获取数据方式的代价计算</h4><p>test_quick_select函数为MySQL获取数据提供了一种快速获取数据的方式，方便MySQL判断表上的数据量。实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">test_quick_select</span><span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">,</span> key_map keys_to_use<span class="token punctuation">,</span>                      table_map prev_tables<span class="token punctuation">,</span>                      ha_rows limit<span class="token punctuation">,</span> <span class="token keyword">bool</span> force_quick_range<span class="token punctuation">,</span>                      <span class="token keyword">const</span> ORDER<span class="token operator">::</span>enum_order interesting_order<span class="token punctuation">,</span>                      <span class="token keyword">const</span> QEP_shared_owner <span class="token operator">*</span>tab<span class="token punctuation">,</span>                      Item <span class="token operator">*</span>cond<span class="token punctuation">,</span>                      key_map <span class="token operator">*</span>needed_reg<span class="token punctuation">,</span>                      QUICK_SELECT_I <span class="token operator">*</span><span class="token operator">*</span>quick<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始的代价计算</span>     <span class="token keyword">double</span> scan_time<span class="token operator">=</span>cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      Cost_estimate cost_est<span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">table_scan_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cost_est<span class="token punctuation">.</span><span class="token function">add_io</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cost_est<span class="token punctuation">.</span><span class="token function">add_cpu</span><span class="token punctuation">(</span>scan_time<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>force_index<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        scan_time<span class="token operator">=</span> DBL_MAX<span class="token punctuation">;</span>        cost_est<span class="token punctuation">.</span><span class="token function">set_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">&lt;</span> records<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        cost_est<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Force to use index</span>        cost_est<span class="token punctuation">.</span><span class="token function">add_io</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span><span class="token function">cost_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span>          <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cost_est<span class="token punctuation">.</span><span class="token function">add_cpu</span><span class="token punctuation">(</span>scan_time<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cost_est<span class="token punctuation">.</span><span class="token function">total_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2.0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>force_quick_range<span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* No need for quick select */</span>         <span class="token comment" spellcheck="true">//根据只读索引计算扫描花费，不用读取表数据即可完成，因此单独计算</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">.</span><span class="token function">is_clear_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> key_for_use<span class="token operator">=</span> <span class="token function">find_shortest_key</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">)</span><span class="token punctuation">;</span>      Cost_estimate key_read_time<span class="token operator">=</span>        param<span class="token punctuation">.</span>table<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">index_scan_cost</span><span class="token punctuation">(</span>key_for_use<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                           <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      key_read_time<span class="token punctuation">.</span><span class="token function">add_cpu</span><span class="token punctuation">(</span>cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span>        <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">bool</span> chosen<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key_read_time <span class="token operator">&lt;</span> cost_est<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        cost_est<span class="token operator">=</span> key_read_time<span class="token punctuation">;</span>        chosen<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算单表上带有MIN/MAX聚合函数的分组操作花费</span>    group_trp<span class="token operator">=</span> <span class="token function">get_best_group_min_max</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token operator">&amp;</span>best_cost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>group_trp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      param<span class="token punctuation">.</span>table<span class="token operator">-</span><span class="token operator">></span>quick_condition_rows<span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>group_trp<span class="token operator">-</span><span class="token operator">></span>records<span class="token punctuation">,</span>                                             head<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>stats<span class="token punctuation">.</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>      Opt_trace_object <span class="token function">grp_summary</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span>                                   <span class="token string">"best_group_range_summary"</span><span class="token punctuation">,</span>                                   Opt_trace_context<span class="token operator">::</span>RANGE_OPTIMIZER<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>trace<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_started</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        group_trp<span class="token operator">-</span><span class="token operator">></span><span class="token function">trace_basic_info</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> <span class="token operator">&amp;</span>grp_summary<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>group_trp<span class="token operator">-</span><span class="token operator">></span>cost_est <span class="token operator">&lt;</span> best_cost<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        grp_summary<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"chosen"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        best_trp<span class="token operator">=</span> group_trp<span class="token punctuation">;</span>        best_cost<span class="token operator">=</span> best_trp<span class="token operator">-</span><span class="token operator">></span>cost_est<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>        grp_summary<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"chosen"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add_alnum</span><span class="token punctuation">(</span><span class="token string">"cause"</span><span class="token punctuation">,</span> <span class="token string">"cost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//基于索引做范围扫描的最优花费</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>range_trp<span class="token operator">=</span> <span class="token function">get_key_scans_params</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> TRUE<span class="token punctuation">,</span>                                             <span class="token operator">&amp;</span>best_cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          best_trp<span class="token operator">=</span> range_trp<span class="token punctuation">;</span>          best_cost<span class="token operator">=</span> best_trp<span class="token operator">-</span><span class="token operator">></span>cost_est<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span>sql_command <span class="token operator">!=</span> SQLCOM_DELETE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  <span class="token comment" spellcheck="true">//非删除操作</span>            param<span class="token punctuation">.</span>index_merge_allowed <span class="token operator">&amp;&amp;</span>            interesting_order <span class="token operator">!=</span> ORDER<span class="token operator">::</span>ORDER_DESC<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不支持降序</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//基于覆盖“ROR交操作”算法求解非覆盖“ROR交操作”</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rori_trp<span class="token operator">=</span> <span class="token function">get_best_ror_intersect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token operator">&amp;</span>best_cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            best_trp<span class="token operator">=</span> rori_trp<span class="token punctuation">;</span>            best_cost<span class="token operator">=</span> best_trp<span class="token operator">-</span><span class="token operator">></span>cost_est<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算基于index merge的ROR-UNION操作的花费</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tree<span class="token operator">-</span><span class="token operator">></span>merges<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span>index_merge_allowed <span class="token operator">&amp;&amp;</span>            interesting_order <span class="token operator">!=</span> ORDER<span class="token operator">::</span>ORDER_DESC <span class="token operator">&amp;&amp;</span>            param<span class="token punctuation">.</span>table<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>stats<span class="token punctuation">.</span>records<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>imerge<span class="token operator">=</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            new_conj_trp<span class="token operator">=</span> <span class="token function">get_best_disjunct_quick</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> imerge<span class="token punctuation">,</span>                                                  <span class="token operator">&amp;</span>best_cost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>new_conj_trp<span class="token punctuation">)</span>              <span class="token function">set_if_smaller</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>table<span class="token operator">-</span><span class="token operator">></span>quick_condition_rows<span class="token punctuation">,</span>                             new_conj_trp<span class="token operator">-</span><span class="token operator">></span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>best_conj_trp <span class="token operator">||</span>                <span class="token punctuation">(</span>new_conj_trp <span class="token operator">&amp;&amp;</span>                 new_conj_trp<span class="token operator">-</span><span class="token operator">></span>cost_est <span class="token operator">&lt;</span> best_conj_trp<span class="token operator">-</span><span class="token operator">></span>cost_est<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>              best_conj_trp<span class="token operator">=</span> new_conj_trp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>best_conj_trp<span class="token punctuation">)</span>            best_trp<span class="token operator">=</span> best_conj_trp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查询优化 </tag>
            
            <tag> 代价估算 </tag>
            
            <tag> 多表连接算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库查询优化器的艺术阅读笔记</title>
      <link href="2021/05/13/shu-ju-ku-cha-xun-you-hua-qi-de-yi-zhu-yue-du-bi-ji/"/>
      <url>2021/05/13/shu-ju-ku-cha-xun-you-hua-qi-de-yi-zhu-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="1、数据管理系统的查询优化"><a href="#1、数据管理系统的查询优化" class="headerlink" title="1、数据管理系统的查询优化"></a>1、数据管理系统的查询优化</h1><h2 id="1-1、数据库调优"><a href="#1-1、数据库调优" class="headerlink" title="1.1、数据库调优"></a>1.1、数据库调优</h2><h3 id="1-1-1、目标"><a href="#1-1-1、目标" class="headerlink" title="1.1.1、目标"></a>1.1.1、目标</h3><p>使数据库有更高的吞吐量和更短的响应时间。</p><h3 id="1-1-2、常见调优方法"><a href="#1-1-2、常见调优方法" class="headerlink" title="1.1.2、常见调优方法"></a>1.1.2、常见调优方法</h3><ul><li><p>人工调优</p></li><li><p>基于案例的调优（静态）</p></li><li><p>自调优</p><ul><li><p>Oracle实现的自调优技术</p><ul><li><p>Redo Logfile Sizeing Advisor：系统自动推荐重做日志的文件大小</p></li><li><p>Auto checkpoint tuning</p></li><li><p>Auto shared memory tuning</p></li><li><p>transaction rollback and recovery monitoring</p></li><li><p>SQL tuning advisor：给出建立索引的建议，SQL重写的建议</p></li><li><p>SQL Analyzer：对SQL语句的不同查询执行计划进行性能比较和分析</p></li><li><p>SQL Access advisor</p></li><li><p>SQL plan management：使SQL能根据环境的变化选择稳定、高效的查询执行计划</p></li><li><p>undo advisor：为管理员恰当设置undo_retention提供建议，避免快照过于陈旧</p></li></ul></li></ul></li><li><p>应用情况的估算</p><ul><li>应用的使用方式（以读多写少或读写均衡来区分OLAP和OLTP；应用对数据库的并发情况；并发是否可以池化）</li><li>数据量</li><li>对数据库的压力和峰值压力</li></ul></li><li><p>系统选型策略</p></li><li><p>数据模型的设计</p><ul><li>E-R模型设计</li><li>数据逻辑分布策略：减少数据请求中不必要的数据传输，只返回用户需要的数据，如分区，分库分表</li><li>数据物理存储策略：目的是减少IO，如使用压缩技术将索引和表数据分开；将日志，索引，数据分布在不同物理存储上。</li><li>索引：在查询频繁的对象上建立适当的索引，使其正效应大于负效应（索引维护需要消耗）</li><li>SQL设计：依据查询重写规则，编写正确的，高效的SQL，要有意识地保障SQL能用到索引</li><li>数据库功能的启用<ul><li>查询重用：可缓存查询执行计划，查询结果</li><li>数据库参数的设置：如可以设置数据缓冲区</li></ul></li><li>模拟系统预运行：压测</li><li>系统监控与分析<ul><li>应用系统表现：收集用户意见</li><li>OS环境监控：实时监控CPU，内存，IO，并与历史正常情况对比</li><li>数据库内部状态监控：如实时监控锁的情况，与历史正常情况对比</li><li>日志分析：在数据库的日志和操作系统的日志中找出异常事件，定位问题</li><li><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515152036888.png" alt="image-20210515152036888"></li></ul></li></ul></li></ul><h2 id="1-2、查询优化技术"><a href="#1-2、查询优化技术" class="headerlink" title="1.2、查询优化技术"></a>1.2、查询优化技术</h2><p>查询优化技术是SQL层面的优化，属于局部优化，而数据库调优是全局优化。</p><h3 id="1-2-1、查询重用"><a href="#1-2-1、查询重用" class="headerlink" title="1.2.1、查询重用"></a>1.2.1、查询重用</h3><p>查询重用指尽可能多地利用先前的执行结果，已达到节约时间和减少资源消耗的目的。</p><ul><li>查询结果的重用：在缓冲区分配一块缓冲块存放SQL语句和最后的结果集，减少了查询执行全过程的资源的消耗</li><li>查询计划的重用：缓存查询语句的执行计划和相应的语法树结构，减少了查询计划生成的时间和资源消耗</li></ul><p>弊端：结果集很大会占用大量内存；同一条SQL不用用户查询结果可能不同。</p><h3 id="1-2-2、查询重写规则"><a href="#1-2-2、查询重写规则" class="headerlink" title="1.2.2、查询重写规则"></a>1.2.2、查询重写规则</h3><p>是查询语句的一种等价转换，即对于任何相关模式的任意状态都会产生相同的结果。其目标有两个：</p><ul><li>将查询转换为等价的，效率更高的形式，例如将效率低的谓词转为效率高的谓词、消除重复条件</li><li>尽量将查询重写为等价、简单且不受表顺序限制的形式，为物理查询优化阶段提供更多的选择，例如视图的重写，子查询的合并转换</li></ul><p>查询重写的依据是关系代数，关系代数的等价变换规则对查询重写提供了理论上的支持。查询重写之后，查询优化器可能生成多个连接路径，可以从候选者中择优。</p><p>对查询优化技术进行分类，有以下4个角度</p><ul><li>语法级：基于语法进行优化</li><li>代数级：运用关系代数进行优化</li><li>语义级：根据完整性约束，对查询语句进行语义理解，推知一些可优化的操作</li><li>物理级：基于代价估算模型，比较得出各种执行方式中代价最小的</li></ul><p>查询重写是基于前三个角度进行的优化，属于逻辑优化的范畴；而基于代价估算模型是物理层面的优化，是从连接路径中选择代价最小的路径的过程。</p><p>查询重写主要优化思路：</p><ul><li>将过程性查询转为描述性查询，如视图重写</li><li>将复杂查询（如嵌套子查询、外连接，嵌套连接）尽可能转为多表连接查询</li><li>将效率低的谓词转为等价的效率高的谓词，如等价谓词重写</li><li>利用等式和不等式的性质，简化where，having，on条件</li></ul><p>重写的核心是“<strong>等价转换</strong>”，只有等价才可以重写。</p><h3 id="1-2-3、查询算法优化"><a href="#1-2-3、查询算法优化" class="headerlink" title="1.2.3、查询算法优化"></a>1.2.3、查询算法优化</h3><ul><li><p>查询优化：即求解给定查询语句的高效执行计划的过程。</p></li><li><p>查询计划</p><ul><li>也称查询树，由一系列操作符按一定的运算关系构成查询的一个执行方案。</li><li>从形式上看是一颗二叉树，叶子是每个单表对象，两个叶子的父节点是一个连接操作符（如左外连接）连接后的中间结果（临时表），直到根节点</li><li>涉及的主要关系节点有：<ul><li>单表节点：考虑单表的数据获取方式，直接通过IO获取数据、通过索引获取数据、通过索引定位数据，再通过IO获取数据</li><li>两表节点：考虑两表以何种方式连接、代价有多大、连接路径有哪些<ul><li>哈希连接：数据量比较大</li><li>嵌套连接：外表数据量小，内表数据量大</li><li>归并连接：数据有序</li></ul></li><li>多表中间节点：考虑多表连接顺序如何构成代价最小的执行计划。如果判断连接方式太多，也会导致效率问题。目前很多数据库采用左深连接树，右深连接树，紧密树对多表进行连接，得到多种连接路径。</li></ul></li></ul></li><li><p>生成最优查询计划的策略通常有两个：</p><ul><li>基于规则优化：根据经验或一些已被证明有效的方式，定义为“规则”，用这些规则简化查询计划生成过程中符合可被化简的操作，使用启发式规则排除一些明显不好的存取路径。</li><li>基于代价优化：根据一个代价评估模型，在生成查询计划的过程中，计算每条存取路径的花费，然后选择代价最小的作为子路径，这样直到所有表连接完成得到一个完整的路径。目前主流数据库都采用了基于代价优化的策略</li></ul></li><li><p>查询优化器的实现，多是两种优化策略组合使用，如MySQL和PostgreSQL</p></li><li><p>多表连接的优化算法</p><ul><li>SYSTEM-R算法：近乎穷举的搜索算法</li><li>启发式搜索算法：基于启发式规则抛弃不好的存取路径挑选好的</li><li>贪心算法：根据某种优化方式，以当前情况为基础做出最优选择，并认为每次搜索的局部存取路径是最优的，然后继续搜索与其他表的连接路径</li><li>动态规划</li><li>遗传算法：一种启发式算法，模拟自然界生物进化过程，采用人工进化的方式对目标空间进行随机化搜索</li></ul></li><li><p>查询的基本操作有选择，投影和连接。</p><ul><li>选择和投影的优化规则适用于SPJ（select-project-join）和非SPJ（SPJ + group by）</li><li>连接分为两表连接和多表连接，n个表连接方式有n! 种，将导致搜索空间极度膨胀，这是查询优化器实现需要考虑的问题。</li></ul></li></ul><h3 id="1-2-4、并行查询优化"><a href="#1-2-4、并行查询优化" class="headerlink" title="1.2.4、并行查询优化"></a>1.2.4、并行查询优化</h3><p>单机数据库中，查询优化算法只需找到查询的一个具有最小执行话费的执行计划；而并行数据库中，查询优化目标是寻找具有最小响应时间的查询执行计划，这需要查询工作分解为一些可以并行运行的子工作。一个查询能否并行执行，取决于以下几个因素：</p><ul><li>系统中的可用资源，如内存，高速缓存数据量</li><li>CPU的数量</li><li>运算中的特定代数运算符，如A,B,C,D四个表连接，四个表的单表扫描可以并行执行，A,B连接的同时可以进行C,D的连接。</li></ul><p>在同一个SQL内，查询并行分为以下两种：</p><ul><li>查询内并行：将同一操作如单表扫描，两表连接，排序等分解为多个独立的子操作，由不同CPU同时执行。</li><li>查询间并行：将一条SQL语句分解成多个子操作，由多个CPU同时执行。</li></ul><h3 id="1-2-5、分布式查询优化"><a href="#1-2-5、分布式查询优化" class="headerlink" title="1.2.5、分布式查询优化"></a>1.2.5、分布式查询优化</h3><p>在分布式数据库中，<strong>查询优化策略</strong>（主要是<strong>数据传输策略</strong>，如A传到B或B传到A或进行过滤后再进行传输）和<strong>局部处理优化</strong>（传统单节点数据库优化技术）是查询优化的重点。</p><p>查询优化策略中，数据的网络通信开销是考虑的主要因素。分布式查询优化以<strong>减少传输的次数和数据量</strong>作为查询优化的目标。因此分布式数据库中的代价估算模型，除了考虑CPU和IO代价之外，还要考虑通信代价，即：</p><blockquote><p>总代价 = IO代价 + CPU代价 + 通信代价</p></blockquote><h3 id="1-2-6、其他优化"><a href="#1-2-6、其他优化" class="headerlink" title="1.2.6、其他优化"></a>1.2.6、其他优化</h3><p>数据库的查询性能，还与一些其他因素有关，如数据库集群系统总的SD（share disk）集群和SN（share nothing）集群，不同架构查询优化技术也不同。SD集群用的共享存储方式，在数据读写时可能产生读写冲突，因此单表扫描会收到影响；而SN集群采用的是非共享存储方式，因此在考虑了通信代价后单节点的优化方式依然适用。</p><h1 id="2、逻辑查询优化"><a href="#2、逻辑查询优化" class="headerlink" title="2、逻辑查询优化"></a>2、逻辑查询优化</h1><p>查询优化器在逻辑优化阶段主要解决的问题是：如何找出SQL语句的等价变换形式，使SQL执行更高效，可用优化思路有：</p><ul><li>子句局部优化：如等价谓词重写、where和having条件化简</li><li>子句间关联优化：如连接消除、子查询优化、视图重写</li><li>局部与整体的优化：如OR重写并集规则需要考虑UNION操作（变换后整体形式）的花费和OR操作（局部表达式）的花费</li><li>形式变化优化：如嵌套连接消除</li><li>语义优化：根据完整性约束、SQL表达式的含义等信息对语句进行语义优化</li><li>其他优化：根据一些规则对非SPJ做的其他优化、根据硬件环境进行的并行查询优化</li></ul><p>各种逻辑优化技术都基于关系代数和启发式规则</p><h2 id="2-1、查询优化技术的理论基础"><a href="#2-1、查询优化技术的理论基础" class="headerlink" title="2.1、查询优化技术的理论基础"></a>2.1、查询优化技术的理论基础</h2><h3 id="2-1-1、关系代数"><a href="#2-1-1、关系代数" class="headerlink" title="2.1.1、关系代数"></a>2.1.1、关系代数</h3><p>关系模型由关系数据结构、关系操作集合和关系完整性约束三部分组成。</p><ul><li><p>关系数据结构：即关系数据库中的二维表结构</p></li><li><p>关系是一种对象，也成为表</p></li><li><p>关系的元数据：即表结构</p></li><li><p>关系的数据，即表的行数据，也称为元组，记录</p></li><li><p>关系运算：将一定的运算符作用于一定的关系对象上，得到预期的运算结果</p><p>关系代数运算符包括以下4类：</p><ul><li>传统集合运算符：UNION（并），INTERSECTION（交）, DIFFERENCE（差）等</li><li>专门的关系运算符：SELECT（选择）, PROJECT（投影）, JOIN（连接）, DIVIDE（除）</li><li>辅助运算符：辅助专门的关系运算符进行操作，包括算术运算符和逻辑运算符</li><li>关系扩展运算符：SEMIJOIN（半连接）, SEMIDIFFERENCE（半差）, EXTEND（扩展）, COMPOSITION（合计）, TCLOSE（传递闭包）</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515165808023.png" alt="image-20210515165808023"></p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515165826899.png" alt="image-20210515165826899"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515165846607.png" alt="image-20210515165846607"></p><h3 id="2-1-2、关系代数等价变换规则对优化的指导意义"><a href="#2-1-2、关系代数等价变换规则对优化的指导意义" class="headerlink" title="2.1.2、关系代数等价变换规则对优化的指导意义"></a>2.1.2、关系代数等价变换规则对优化的指导意义</h3><p>查询语句可以表示为一颗二叉树（首先是语法分析得到一颗查询树；其次有语义分析等工作；再次是根据关系代数进行了数据库的逻辑查询优化；最后是根据代价估算算法进行物理查询优化。优化的结果被送到执行器执行），其中：</p><ul><li>叶子是单表</li><li>内部节点是运算符（或称算子，操作符），表示左右子树的运算方式</li><li>子树是子表达式或SQL片段</li><li>根节点是最后运算的操作符</li><li>根节点之后是查询优化后的结果</li><li>一棵树就是一个查询的路径</li><li>多个关系连接，连接顺序不同，可以得出多个类似的二叉树</li><li>查询优化就是找出代价最小的二叉树，即最优查询路径。每条路径的生成包括了单表扫描、两表连接、多表连接顺序、多表连接搜索空间等技术</li><li>基于代价估算的查询优化就是通过计算和比较，找出代价最少的最优二叉树</li></ul><h4 id="2-1-2-1、从运算符角度考虑优化"><a href="#2-1-2-1、从运算符角度考虑优化" class="headerlink" title="2.1.2.1、从运算符角度考虑优化"></a>2.1.2.1、从运算符角度考虑优化</h4><p>不同运算符根据其特点，可以对查询语句做不同的优化，减少中间生成物的大小和数量，节约IO，内存，从而提高执行速度。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515171038653.png" alt="image-20210515171038653"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515171126019.png" alt="image-20210515171126019"></p><h4 id="2-1-2-2、从运算规则角度考虑优化"><a href="#2-1-2-2、从运算规则角度考虑优化" class="headerlink" title="2.1.2.2、从运算规则角度考虑优化"></a>2.1.2.2、从运算规则角度考虑优化</h4><p>下面的运算规则是查询重写技术作等价转换的基础</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515171907978.png" alt="image-20210515171907978"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515172043157.png" alt="image-20210515172043157"></p><h2 id="2-2、查询重写规则"><a href="#2-2、查询重写规则" class="headerlink" title="2.2、查询重写规则"></a>2.2、查询重写规则</h2><p>OLTP采用基于选择，投影和连接3种基本操作相结合的查询，称为SPJ查询。数据库在查询优化过程中，会对这3种基本操作进行优化：</p><ul><li>选择操作：对应限制条件，优化方法是选择操作下推，目的是尽量减少连接操作前的元组数，使得中间临时表尽量少，这样就能减少IO，内存和CPU的消耗</li><li>投影操作：对应目的列对象，优化方法是投影操作下推，目的是尽量减少连接操作前的列数，从而减少连接以后的中间临时表元组大小，节约内存（不能减少IO，因为行存储，元组是读取的基本单位）</li><li>连接操作：对应连接条件，涉及两个子问题<ul><li>多表连接中表的连接顺序决定着效率</li><li>多表连接中表的连接顺序由语义决定：查询语句决定了多表连接的语义，如笛卡尔积、内连接、左外连接等</li></ul></li></ul><p>针对SQL语句特点，分为以下两类：</p><ul><li>针对SPJ的查询优化：基于选择，投影，连接三种基本操作相结合的查询</li><li>针对非SPJ的查询优化：在SPJ的基础上存在group by操作的查询，较复杂。</li></ul><p>选择和投影可以基于关系代数规则进行优化；表连接可以基于多表连接相关算法进行优化；其他操作多是基于索引和代价估算进行优化</p><h3 id="2-2-1、子查询的优化"><a href="#2-2-1、子查询的优化" class="headerlink" title="2.2.1、子查询的优化"></a>2.2.1、子查询的优化</h3><p>子查询出现位置不同，对优化影响不同</p><ul><li>目标列位置：只能是标量子查询</li><li>from子句位置：只能是非相关子查询，可以上拉子查询到父层，在多表连接时统一考虑连接代价后择优</li><li>where子句位置：是条件表达式的一部分，格式除了一般的操作符，也有用谓词指定的一些操作，如IN，BETWEEN, EXISTS等</li><li>join/on子句位置：join块类似from子句；on块类似where子句</li><li>group by子句位置：子查询写在此处无意义</li><li>order by子句位置：没有实用意义</li></ul><h4 id="2-2-1-1、子查询的分类"><a href="#2-2-1-1、子查询的分类" class="headerlink" title="2.2.1.1、子查询的分类"></a>2.2.1.1、子查询的分类</h4><p>根据子查询中涉及的关系对象与外层关系对象间的关系，子查询分为以下两类：</p><ul><li><p>相关子查询：子查询的执行依赖于外层父查询的一些属性值（查询优化器对相关子查询的优化有一定意义）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515180200702.png" alt="image-20210515180200702"></p></li><li><p>非相关子查询：子查询的执行不依赖外层父查询的任何属性值，子查询完全独立。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515180342372.png" alt="image-20210515180342372"></p></li></ul><p>从特定谓词看，子查询分为以下三类：</p><ul><li>[NOT]IN/ALL/ANY/SOME子查询：左边是操作数，右边是子查询，是最常见的子查询类型之一</li><li>[NOT]EXISTS子查询：没有左操作数，右边是子查询，也比较常见</li><li>其他子查询</li></ul><p>从语句构成复杂程度看，子查询可以分为以下三类：</p><ul><li>SPJ子查询</li><li>group by子查询：SPJ子查询加上分组，聚合操作</li><li>其他子查询：group by子查询加上其他子句如TOP-K、LIMIT/OFFSET、集合、排序等操作</li></ul><p>从结果集的角度看，子查询分为以下四种：</p><ul><li>标量子查询：返回结果集类型是一个单一值</li><li>列子查询：返回的结果集类型是一条单一元组</li><li>行子查询：返回的结果集类型是一个单一列</li><li>表子查询：返回的结果集类型是一个表（多行多列）</li></ul><h4 id="2-2-1-2、子查询的优化思路"><a href="#2-2-1-2、子查询的优化思路" class="headerlink" title="2.2.1.2、子查询的优化思路"></a>2.2.1.2、子查询的优化思路</h4><p>早期，查询优化器对子查询都采用嵌套执行的方式（即对父查询中的每一行，都执行一次子查询，这样效率很低），因此对其进行优化很有必要。将子查询转为连接操作之后，有如下好处：</p><ul><li>子查询不用执行很多次</li><li>优化器可以根据统计信息来选择不同的连接方法和不同的连接顺序</li><li>子查询中的连接条件、过滤条件分别变成了父查询的连接条件和过滤条件，优化器可以对这些条件进行下推，以提高执行效率</li></ul><p><strong>子查询优化</strong>思路如下：</p><ul><li><p>子查询合并：在语义等价条件下，多个子查询可以合并成一个子查询，这样多次表扫描，多次连接减少为单次表扫描和单次连接</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515195237030.png" alt="image-20210515195237030"></p></li><li><p>子查询展开：又称子查询反嵌套，子查询上拉。实质是把某些子查询重写为等价的多表连接操作。带来好处是，有关的访问路径、连接方法和连接顺序可能被有效使用，使得查询语句的层次尽可能地减少。常见的IN/ANY/SOME/ALL/EXISTS依据情况转为半连接（SEMI JOIN）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515195803605.png" alt="image-20210515195803605"></p></li><li><p>聚集子查询消除：聚合函数上推，将子查询变为一个新的不包含聚合函数的子查询，并与父查询的部分或全表做左外连接。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515200013724.png" alt="image-20210515200013724"></p></li><li><p>其他：利用窗口函数消除子查询、子查询推进等技术</p></li></ul><p><strong>子查询展开</strong>是一种最常用的子查询优化技术，有以下两种形式：</p><ul><li>如果子查询中出现了聚合、group by、distinct子句， 则子查询只能单独求解，不可以上拉到上层</li><li>如果子查询只是一个简单的SPJ格式语句，则可以上拉到上层。前提是上拉后的结果不能带来多余元组，需遵循以下规则：<ul><li>如果上层查询结果没有重复（select包含主键），则可以展开子查询，并且展开后的查询的select子句前应加上distinct标志</li><li>如果上层查询的select语句中有distinct标志，则可以直接子查询展开</li><li>如果内层查询结果没有重复元组，则可以展开</li></ul></li></ul><p>子查询展开具体步骤：</p><ul><li>将子查询和上层查询的from子句连接为同一个from子句，并且修改相应的运行参数</li><li>将子查询的谓词符号进行相应修改（如IN修改为ANY）</li><li>将子查询的where条件作为一个整体与上层查询的where条件进行合并，并用and连接，从而保证新生成的谓词与原谓词的上下文意思相同，成为一个整体</li></ul><h4 id="2-2-1-3、最常见的子查询类型的优化"><a href="#2-2-1-3、最常见的子查询类型的优化" class="headerlink" title="2.2.1.3、最常见的子查询类型的优化"></a>2.2.1.3、最常见的子查询类型的优化</h4><ul><li>IN类型</li><li>ALL/ANY/SOME类型</li><li>EXISTS类型</li></ul><h3 id="2-2-2、视图重写"><a href="#2-2-2、视图重写" class="headerlink" title="2.2.2、视图重写"></a>2.2.2、视图重写</h3><h3 id="2-2-3、等价谓词重写"><a href="#2-2-3、等价谓词重写" class="headerlink" title="2.2.3、等价谓词重写"></a>2.2.3、等价谓词重写</h3><p>数据库执行引擎对某些谓词的处理效率要比其他谓词高，基于此，把逻辑表达式重写成等价的且效率更高的形式，能有效提高查询执行效率。这就是等价谓词重写。其规则如下：</p><ul><li>LIKE规则</li><li>BETWEEN-AND规则</li><li>IN转换OR规则</li><li>IN转换ANY规则</li><li>OR转换ANY规则</li><li>ALL/ANY转换集函数规则</li><li>NOT规则</li><li>OR重写并集规则</li></ul><h3 id="2-2-4、条件化简"><a href="#2-2-4、条件化简" class="headerlink" title="2.2.4、条件化简"></a>2.2.4、条件化简</h3><p>利用等式和不等式的性质，将where，having和on条件进行化简，化简方式通常有如下几个：</p><ul><li>把having条件并入where条件</li><li>去除表达式中冗余的括号</li><li>常量传递</li><li>消除死码</li><li>表达式计算</li><li>等式变换</li><li>不等式变换</li><li>布尔表达式变换</li><li>谓词传递闭包</li><li>任何一个布尔表达式都能被转为一个合取范式（CNF）</li><li>索引的利用</li></ul><h3 id="2-2-5、外连接消除"><a href="#2-2-5、外连接消除" class="headerlink" title="2.2.5、外连接消除"></a>2.2.5、外连接消除</h3><h4 id="2-2-5-1、外连接消除的意义"><a href="#2-2-5-1、外连接消除的意义" class="headerlink" title="2.2.5.1、外连接消除的意义"></a>2.2.5.1、外连接消除的意义</h4><p>外连接分为左外连接，右外连接和全外连接，连接过程中，外连接的左右子树不能互换，并且外连接与其他连接交换连接顺序时，必须满足严格的条件进行等价变换。查询重写的一项技术就是把外连接转为内连接，转换意义如下：</p><ul><li><p>查询优化器在处理外连接操作所需时间多于内连接</p></li><li><p>优化器在选择表连接顺序时，可以有更多更灵活的选择，从而可以选择更好的表连接顺序，加快查询执行的速度</p></li><li><p>表的一些连接算法(如块嵌套连接和索引循环连接)将规模小的或筛选条件最严格的作为外表，可以减少不必要的IO开销，极大加快算法执行的速度</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515204036869.png" alt="image-20210515204036869"></p></li></ul><p>以下分三种情况讨论表2-8</p><ul><li>左外连接转为内连接</li><li>全外连接转为左外连接</li><li>右外连接转为内连接</li></ul><h4 id="2-2-5-2、外连接消除的条件"><a href="#2-2-5-2、外连接消除的条件" class="headerlink" title="2.2.5.2、外连接消除的条件"></a>2.2.5.2、外连接消除的条件</h4><p>外连接可以转为内连接的条件：where子句中与内表相关的条件满足空值拒绝（reject-NULL条件），一般认为满足以下任意一种情况，就满足空值拒绝：</p><ul><li>条件可以保证从结果中排除外连接右侧（右表）生成的值为NULL的行，所以能使该查询在语义上等效于内连接</li><li>外连接的提供空值的一侧为另一侧的每行只返回一行。如果该条件为真，则不存在提供空值的行，并且外连接等价于内连接</li></ul><h3 id="2-2-6、嵌套连接消除"><a href="#2-2-6、嵌套连接消除" class="headerlink" title="2.2.6、嵌套连接消除"></a>2.2.6、嵌套连接消除</h3><p>多表连接时有时会存在嵌套的情况，而嵌套连接不能够利用交换表的位置而获得优化。当执行连接操作的次序不是从左到右逐个进行时，就说这样的连接表达式存在嵌套。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515205708740.png" alt="image-20210515205708740"></p><p>先t2和t3连接得到中间结果{t2t3}后再与t1连接，这种方式就是嵌套连接，括号不可以去掉，没有去掉括号的等价形式。</p><p>另外，如下格式也是嵌套连接，即使括号去掉不影响语义，这种格式用括号对连接次序做了区分</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210515210149035.png" alt="image-20210515210149035"></p><p>综上，我们可以得到下面两条结论：</p><ul><li>如果连接表达式只包括内连接，括号可以去掉，这意味着表之间的次序可以交换，这是关系代数中连接的交换律的应用</li><li>如果连接表达式包括外连接，括号不可以去掉，意味着表之间的次序只能按照原语义进行，至多能执行外连接向内连接转换的优化</li></ul><h3 id="2-2-7、连接消除"><a href="#2-2-7、连接消除" class="headerlink" title="2.2.7、连接消除"></a>2.2.7、连接消除</h3><p>连接分类</p><ul><li>根据连接语义方式的不同：内连接、外连接、半连接、反半连接</li><li>根据连接对象的不同：自连接和非自连接</li><li>根据连接条件的有无：笛卡尔积式的连接和带有限定条件的连接</li><li>根据连接条件形式的不同：等值连接和范围连接</li></ul><p>可能存在一些连接，连接对象可以被去掉，因为这样的连接对象存在只会带来连接计算的消耗，而对连接结果没有影响，如下面的情况一，二，三</p><p>情况一：主外键关系的表进行连接，可以消除主键表，这不会影响对外键表的查询</p><p>情况二：唯一键作为连接条件，三表内连接可以去掉中间表（中间表的列只作为连接条件）</p><p>情况三：其他一些特殊情况，可以去掉连接 操作（可消除的表除了作为连接对象之外，不出现在任何子句中）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516092941770.png" alt="image-20210516092941770"></p><h3 id="2-2-8、语义优化"><a href="#2-2-8、语义优化" class="headerlink" title="2.2.8、语义优化"></a>2.2.8、语义优化</h3><ul><li>语义转换：根据完整性约束等信息对某特定语义进行推理，进而得到一种查询效率不同但结果相同的查询</li><li>语义优化：因为语义转换形成的优化称为语义优化</li></ul><p>语义优化常见方式如下：</p><ul><li>连接消除：对一些连接操作先不必评估代价，根据已知信息能推知结果或得到一个简化的操作</li><li>连接引入：增加连接有助于原关系变小或原关系的选择率降低</li><li>谓词引入：根据完整性约束等信息引入新谓词，如引入基于索引的列，可能使查询更快</li><li>检测空回答集：查询语句中的谓词与约束相悖，如check约束限定score是60到100，而一个查询条件是score&lt;60，则能立刻推知条件不成立</li><li>排序优化：order by操作通常由索引或排序完成；如果能利用索引，则排序操作可以省略</li><li>唯一性使用：利用唯一性，索引等特点，检查是否存在不必要的distinct操作，如主键上的distinct可以消除掉</li></ul><h3 id="2-2-9、针对非SPJ的优化"><a href="#2-2-9、针对非SPJ的优化" class="headerlink" title="2.2.9、针对非SPJ的优化"></a>2.2.9、针对非SPJ的优化</h3><p>目前决策支持系统，数据仓库，OLAP系统的应用日益广泛，SQL语句中的group by、聚合函数、Windows函数（分析函数）等被广泛应用。早期的关系数据库System-R对group by和聚合等操作的处理放在完成所有的连接和选择操作之后进行，执行效率很低。因此，现代的商业和开源数据库，都使用了一些非SPJ的优化技术</p><h4 id="2-2-9-1、group-by的优化"><a href="#2-2-9-1、group-by的优化" class="headerlink" title="2.2.9.1、group by的优化"></a>2.2.9.1、group by的优化</h4><p>可考虑<strong>分组转换技术</strong>，即对分组操作、聚合操作与连接操作的位置进行交换，常见方式如下：</p><ul><li>分组操作下移：下移是指在查询树上让分组操作尽量靠近叶子节点，使得分组操作的节点低于一些选择操作。group by操作可能大幅度减少关系元组的个数，如果能够对某个关系先进行分组操作，再进行表连接，很可能提高连接效率。</li><li>分组操作上移：如果连接操作能够过滤掉大部分元组，则先进行连接后进行group by操作，可以提高分组操作的效率。</li></ul><p>因为group by操作上移或者下移都不能保证重写后的查询效率一定更高，所以，要在查询优化器中采用<strong>基于代价</strong>的方式来估算几种路径的优劣，另外<strong>要尽量应用索引</strong>。</p><h4 id="2-2-9-2、order-by的优化"><a href="#2-2-9-2、order-by的优化" class="headerlink" title="2.2.9.2、order by的优化"></a>2.2.9.2、order by的优化</h4><p>可以考虑如下几方面：</p><ul><li>排序消除</li><li>排序下推</li></ul><h4 id="2-2-9-3、distinct的优化"><a href="#2-2-9-3、distinct的优化" class="headerlink" title="2.2.9.3、distinct的优化"></a>2.2.9.3、distinct的优化</h4><p>可以考虑如下几方面：</p><ul><li>distinct消除</li><li>distinct下推</li><li>distinct迁移</li></ul><h2 id="2-3、启发式规则在逻辑优化阶段的应用"><a href="#2-3、启发式规则在逻辑优化阶段的应用" class="headerlink" title="2.3、启发式规则在逻辑优化阶段的应用"></a>2.3、启发式规则在逻辑优化阶段的应用</h2><p>逻辑优化阶段使用的启发式规则通常包括如下两类：</p><ul><li>一定能带来优化效果的：<ul><li>优先做选择和投影（连接条件在查询树上下推）</li><li>嵌套连接的消除</li><li>外连接的消除</li><li>连接的消除</li><li>使用等价谓词重写对条件化简</li><li>语义优化</li><li>剪掉冗余操作（一些剪枝优化技术）、最小化查询块</li></ul></li><li>变换未必会带来性能的提高，需根据代价选择，包括：<ul><li>分组的合并</li><li>使用索引优化分组、排序，distinct等操作</li><li>对视图的查询变为基于表的查询</li><li>连接条件的下推</li><li>分组的下推</li><li>连接提取公共表达式</li><li>谓词的上拉</li><li>用连接取代集合操作</li><li>用UNIONALL取代OR操作</li></ul></li></ul><h1 id="3、物理查询优化"><a href="#3、物理查询优化" class="headerlink" title="3、物理查询优化"></a>3、物理查询优化</h1><p>查询优化器在物理优化阶段，主要解决的问题是：</p><ul><li>从可选的单表扫描方式中，挑选什么样的单表扫描方式最优？</li><li>对于两表连接，如何连接最优？</li><li>对于多表连接，哪种连接顺序最优？</li><li>对于多表连接，是否需要对每种连接顺序都探索？如果不全部探索，如何找到一种最优组合？</li></ul><p>在查询优化器实现早期，认为使用逻辑优化技术（即使用关系代数规则和启发式规则对查询进行优化）后，生成的执行计划就是最优的。现在，引入了基于代价的查询优化方式后，对查询计划做了定量的分析，对每一个执行方式进行评估，挑出代价最小的作为最优的计划。目前主流数据库的优化器通常都融合了这两种方式。</p><h2 id="3-1、查询代价估算"><a href="#3-1、查询代价估算" class="headerlink" title="3.1、查询代价估算"></a>3.1、查询代价估算</h2><p>查询代价估算的重点是代价估算模型，这是物理查询优化的依据。此外，选择率也很重要，对代价求解起着重要作用</p><h3 id="3-1-1、代价模型"><a href="#3-1-1、代价模型" class="headerlink" title="3.1.1、代价模型"></a>3.1.1、代价模型</h3><p>查询代价估算基于CPU代价和IO代价，计算公式如下：</p><p>总代价 = IO代价 +  CPU代价</p><p>COST = p * a_page_cpu_time + W * T</p><p>其中p是计划运行时访问的页面数，a_page_cpu_time是每个页面读取的时间花费，其乘积 = IO代价</p><p>T为访问的元组数，W为权重因子，表明IO到CPU的相关性，又称选择率，它等于满足条件“A<op>a”的元组数和R中所有元组N的比值。他们的乘积反映了CPU代价</p><h3 id="3-1-2、选择率计算的常用方法"><a href="#3-1-2、选择率计算的常用方法" class="headerlink" title="3.1.2、选择率计算的常用方法"></a>3.1.2、选择率计算的常用方法</h3><p>选择率在代价估算模型中占有重要地位，其精确程度直接影响最优计划的选取。选择率计算常用方法如下：</p><ul><li>无参数方法：使用ad hoc（点对点）数据结构或直方图维护属性值的分布，直方图最常用</li><li>参数法：使用具有一些自由统计参数（参数是预先估计出来的）的数学分布函数逼近真实分布</li><li>曲线拟合法：为克服参数法的不灵活性，用一般多项式来标准最小方差来逼近属性值的分布</li><li>抽样法：从数据库中抽取部分样本元组，针对这些样本进行查询，然后收集统计数据，只有足够的样本被测试之后，才能达到预期的精度</li><li>综合法：将以上几种方法结合起来，如抽样法和直方图法结合</li></ul><h2 id="3-2、单表扫描算法"><a href="#3-2、单表扫描算法" class="headerlink" title="3.2、单表扫描算法"></a>3.2、单表扫描算法</h2><p>单表扫描需要从表上获取元组，直接关系到物理IO的读取，所以不同的单表扫描方式，有不同的代价</p><h3 id="3-2-1、常用的单表扫描算法"><a href="#3-2-1、常用的单表扫描算法" class="headerlink" title="3.2.1、常用的单表扫描算法"></a>3.2.1、常用的单表扫描算法</h3><p>对于单表数据的获取，有如下方式：</p><ul><li>全表扫描表数据：为获取表的全部元组，读取表对应的全部数据页</li><li>局部扫描表数据：为获取表的部分元组，读取指定位置对应的数据页</li></ul><p>单表扫描和IO操作密切相关，因此很多算法在IO上倾注精力，常见单表扫描算法如下：</p><ul><li>顺序扫描：从物理存储上按照存储顺序直接读取表数据；当无索引可用，或访问表中大部分数据，或表数据量很小时，效果较好</li><li>索引扫描：根据索引键读索引，找出物理元组的位置；根据从索引中找到的位置，从存储中读取数据页；索引扫描可以将元组按排序的顺序返回；若选择率较低，则读数据花费的IO会显著减少</li><li>只读索引扫描：根据索引键读索引，索引中的数据能够满足条件判断，不需要读取数据页</li><li>行扫描：用于直接定位表中的某一行。通常给元组增加一个特殊的列，可以直接计算元组的物理位置，然后直接读取元组对应的页面。在PostgreSQL中称为Tid扫描，此方式在元组头上增加CTID的列，用该列可以直接计算本条元组的物理存储位置</li><li>并行表扫描：对同一个表，并行地、通过顺序的方式获取表数据，结果是得到一个完整的表数据</li><li>并行索引扫描：对同一个表，并行地、通过索引的方式获取表数据，将结果合并在一起</li><li>组合多个索引扫描：对同一个元组的组合条件（AND或OR谓词组合的多个索引列上的多条件查询）进行多次索引扫描，然后在内存里用一个位图来描述索引扫描结果中符合索引条件的元组位置</li></ul><h3 id="3-2-2、单表扫描代价计算"><a href="#3-2-2、单表扫描代价计算" class="headerlink" title="3.2.2、单表扫描代价计算"></a>3.2.2、单表扫描代价计算</h3><p>因为单表扫描是将数据从存储系统调入内存，因此其代价要考虑IO花费。顺序扫描，主要是IO花费 + 元组从页面中解析的花费；索引扫描和其他方式的扫描，由于元组不是全部元组，因此要考虑选择率的问题。单表扫描代价估算公式如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516105429946.png" alt="image-20210516105429946"></p><h2 id="3-3、索引"><a href="#3-3、索引" class="headerlink" title="3.3、索引"></a>3.3、索引</h2><p>索引是建立在表上的，本质上是通过索引直接定位表的物理元组，加快数据获取的方式，因此索引优化的手段应该归属到物理查询优化阶段。</p><h3 id="3-3-1、如何利用索引"><a href="#3-3-1、如何利用索引" class="headerlink" title="3.3.1、如何利用索引"></a>3.3.1、如何利用索引</h3><p>索引是提高查询优化的有效手段，如果某个列存在索引，并不意味着能够有效使用，通常查询优化器使用索引的原则如下：</p><ul><li>索引列出现在where，having，on子句中，有利于利用索引过滤元组</li><li>索引列是被连接的表（内表）对象的列且存在于连接条件中</li><li>还有一些特殊情况，如排序操作、在索引列上求MIN、MAX值</li></ul><p>对于索引列，索引可用的条件如下：</p><ul><li>在where，having，join/on条件中出现“key<op>常量”格式的条件子句（索引列不能参与带有变量的表达式的运算）</li><li>操作符不能是&lt;&gt;（不等于操作符在任何类型的列上均不能使用索引，可以认为这是一个优化规则，因为这种情况下，顺序扫描效果更好）</li><li>索引列的值选择率越低，索引越有效，通常认为选择率小于0.1则索引扫描效果会比较好</li></ul><h3 id="3-3-2、索引列的位置对使用索引的影响"><a href="#3-3-2、索引列的位置对使用索引的影响" class="headerlink" title="3.3.2、索引列的位置对使用索引的影响"></a>3.3.2、索引列的位置对使用索引的影响</h3><p>在查询语句中，索引列在不同的位置对索引的使用有着不同的影响。</p><h4 id="3-3-2-1、对目标列、where等条件子句的影响"><a href="#3-3-2-1、对目标列、where等条件子句的影响" class="headerlink" title="3.3.2.1、对目标列、where等条件子句的影响"></a>3.3.2.1、对目标列、where等条件子句的影响</h4><h4 id="3-3-2-2、对group-by子句的影响"><a href="#3-3-2-2、对group-by子句的影响" class="headerlink" title="3.3.2.2、对group by子句的影响"></a>3.3.2.2、对group by子句的影响</h4><h4 id="3-3-2-3、对having子句的影响"><a href="#3-3-2-3、对having子句的影响" class="headerlink" title="3.3.2.3、对having子句的影响"></a>3.3.2.3、对having子句的影响</h4><h4 id="3-3-2-4、对order-by子句的影响"><a href="#3-3-2-4、对order-by子句的影响" class="headerlink" title="3.3.2.4、对order by子句的影响"></a>3.3.2.4、对order by子句的影响</h4><h4 id="3-3-2-5、对distinct的影响"><a href="#3-3-2-5、对distinct的影响" class="headerlink" title="3.3.2.5、对distinct的影响"></a>3.3.2.5、对distinct的影响</h4><h3 id="3-3-3、联合索引对索引使用的影响"><a href="#3-3-3、联合索引对索引使用的影响" class="headerlink" title="3.3.3、联合索引对索引使用的影响"></a>3.3.3、联合索引对索引使用的影响</h3><h3 id="3-3-4、多个索引对索引使用的影响"><a href="#3-3-4、多个索引对索引使用的影响" class="headerlink" title="3.3.4、多个索引对索引使用的影响"></a>3.3.4、多个索引对索引使用的影响</h3><h2 id="3-4、两表连接算法"><a href="#3-4、两表连接算法" class="headerlink" title="3.4、两表连接算法"></a>3.4、两表连接算法</h2><p>关系代数一项重要的操作是连接运算，多表连接是建立在两表连接基础上的，研究两表连接的方式对连接效率的提高有着直接的影响。</p><h3 id="3-4-1、基本的两表连接算法"><a href="#3-4-1、基本的两表连接算法" class="headerlink" title="3.4.1、基本的两表连接算法"></a>3.4.1、基本的两表连接算法</h3><p>主要有嵌套循环连接算法、归并连接算法、hash连接算法。</p><h4 id="3-4-1-1、嵌套循环连接算法"><a href="#3-4-1-1、嵌套循环连接算法" class="headerlink" title="3.4.1.1、嵌套循环连接算法"></a>3.4.1.1、嵌套循环连接算法</h4><p>两表做连接，最基本的连接算法就是嵌套循环连接算法，该算法描述如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516111754226.png" alt="image-20210516111754226"></p><p>数据库引擎在实现该算法时，以元组为单位进行连接，而元组是从内存页面获取来的，内存页面是从存储系统通过IO获得的，因此每个IO申请以块为单位尽量读入多个页面，可以改进算法，改进后的称为<strong>基于块的嵌套循环连接算法。</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516130351611.png" alt="image-20210516130351611"></p><p>无论是嵌套循环连接算法还是基于块的嵌套循环连接算法，本质都是在一个两层循环中各自拿出一个元组，逐一匹配是否满足连接条件。其他一些两表连接算法，多是在此基础上进行的改进，如在考虑了聚集索引和二级索引的情况下，如果内表有索引可用，则可以加快连接的速度。如果外表元组较少，内层的元组驻留内存多一些（如一些查询优化器采用物化技术固化内层的元组），则能有效提高连接的效率。上述两种算法适用于内连接，左外连接，半连接，反半连接等语义的处理。</p><h4 id="3-4-1-2、排序归并连接算法"><a href="#3-4-1-2、排序归并连接算法" class="headerlink" title="3.4.1.2、排序归并连接算法"></a>3.4.1.2、排序归并连接算法</h4><p>算法步骤是：为两个表创建可用内存缓冲区数为M的M个子表，将每个子表排好序；然后读入每个子表的第一个块到M个块中，找出其中最小的先进行两个表的元组的匹配，找出次小的匹配……以此类推，完成其他子表的两表连接。</p><p>归并连接算法要求内外表都是有序的，所以对于内外标都要排序，如果连接列是索引列，则可以利用索引进行排序。该算法适用于内连接，左外连接，右外连接，全外连接，半连接，反半连接等语义的处理。</p><h4 id="3-4-1-3、hash连接算法"><a href="#3-4-1-3、hash连接算法" class="headerlink" title="3.4.1.3、hash连接算法"></a>3.4.1.3、hash连接算法</h4><p>基于hash的两表连接算法常见的有以下三种：</p><ul><li>用连接列作为hash的关键字，对内表进行hash运算建立哈希表，然后对外表的每个元组的连接用hash函数求值，值映射到内表建立好的哈希表就可以连接了；否则，探索外表下一个元组。这样的哈希连接算法称为<strong>简单hash连接算法（Simple Hash Join，SHJ）</strong>。</li><li>如果把内表和外表分为等大小的子表，然后对外表和内表的每个相同下标值的子表进行SHJ算法的操作，可以避免因内存小而反复读入内外表数据的问题，这样的改进算法称为<strong>优美hash连接算法（Grace Hash Join，GHJ）</strong></li><li>结合了SHJ和GHJ优点的算法称为<strong>混合hash连接算法（Hybrid Hash Join，HHJ）</strong>。HHJ算法是把第一个子表保存到内存不刷出，如果内存很大，则子表能容纳更大量的数据，效率接近于SHJ</li></ul><p>Hash类的算法都存在hash冲突，如GHJ算法，当内存小或者数据倾斜（数据不能均匀地分布到Hash桶，Hash处理后集中在少量桶中）时，通过把一个表划分为多个子表的方式，仍然不能消除反复读入内外表数据的问题（称为“分区溢出”）。</p><p>Hash连接算法只适用于<strong>数据类型相同的等值连接</strong>。Hash连接要存储Hash元组到Hash桶，要求较大内存。如果表中连接列值重复率很高不能均匀分布，相同值的元组映射到少数几个桶中，Hash连接算法效率就不高。Hash连接要求内表不能太大，通常查询优化器会申请一段内存存放hash表，如果超出且不能继续动态申请，则需要写临时文件，这会导致IO颠簸（如PostgreSQL就存在此类问题）。</p><p>Hash连接算法适用于内连接，左外连接，右外连接，全外连接，半连接，反半连接等语义的处理。</p><h3 id="3-4-2、进一步认识两表连接算法"><a href="#3-4-2、进一步认识两表连接算法" class="headerlink" title="3.4.2、进一步认识两表连接算法"></a>3.4.2、进一步认识两表连接算法</h3><p>从内存容量角度看，两表连接算法分为一趟算法，两趟算法，甚至多趟算法。这里的趟是指从存储系统获取全部数据的次数。趟数是一种方式，不是算法思想的改进，是代码实现中为减少IO所做的改进工作。</p><p>结合连接算法和索引、趟数的关系，两表连接算法对于查询优化器的意义如下表所示：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516145539689.png" alt="image-20210516145539689"></p><h3 id="3-4-3、连接操作代价计算"><a href="#3-4-3、连接操作代价计算" class="headerlink" title="3.4.3、连接操作代价计算"></a>3.4.3、连接操作代价计算</h3><p>连接操作花费CPU资源，理论上连接操作代价估算原理如下表：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516145832475.png" alt="image-20210516145832475"></p><p>公式中涉及参数含义如下：</p><ul><li>a_tuple_cpu_time：获取一个元组消耗的CPU时间</li><li>N-outer：扫描获取的外表的元组数</li><li>N-inner：扫描获取的内表的元组数，N-inner = N-inner-all * 选择率，其中N-inner-all表示内表所有元组数</li><li>C-outer：扫描外表的代价，C-outer = N-outer * a_tuple_cpu_time</li><li>C-inner：扫描内表的代价，C-inner = N-inner * a_tuple_cpu_time</li><li>C-inner-index：使用索引扫描内表的代价，通常会比C-inner小</li><li>C-outersort：外表排序的代价</li><li>C-innersort：内表排序的代价</li><li>C-createhash：创建hash的代价</li></ul><h2 id="3-5、多表连接算法"><a href="#3-5、多表连接算法" class="headerlink" title="3.5、多表连接算法"></a>3.5、多表连接算法</h2><p>多表连接算法实现的是在查询路径生成的过程中，根据代价估算，从各种可能的候选路径中找出最优的路径。它需要解决两个问题：</p><ul><li>多表连接的顺序</li><li>多表连接的搜索空间：N个表的连接可能有N！种连接组合，这可能构成一个巨大的搜索空间。如何将搜索空间限制在一个可接受的范围内，并高效生成查询执行计划将成为一个难点</li></ul><h3 id="3-5-1、多表连接顺序"><a href="#3-5-1、多表连接顺序" class="headerlink" title="3.5.1、多表连接顺序"></a>3.5.1、多表连接顺序</h3><p>多表间的连接顺序表示了查询计划树的基本形态。在1990年，Schneder等人在研究查询树模型时提出了左深树，右深树和紧密树3种形态，如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516151149070.png" alt="image-20210516151149070"></p><p>即使是同一种树的生成方式，也有细节需要考虑。如上图a中{A,B}和{B,A}两种连接方式花费可能不同。比如最终连接结果{A,B,C}则需要验证比较6种连接方式，找出最优的一种作为下次和其他表连接的依据。</p><p>人们针对以上树的形成、形成的树花费代价最少的，提出了诸多算法，树的形成过程主要有以下两种策略：</p><ul><li>自顶向下：从SQL表达式树的树根开始，向下进行，估计每个节点可能的执行方法，计算每种组合的代价，从中挑选最优的</li><li>自底向上：从SQL表达式树的树叶开始，向上进行，计算每个子表达式所有实现方法的代价，从中挑选最优的，再和上层进行连接，直至树根</li></ul><p>多数数据库都采用第二种方式–自底向上，构造查询计划树。</p><h3 id="3-5-2、常用的多表连接算法"><a href="#3-5-2、常用的多表连接算法" class="headerlink" title="3.5.2、常用的多表连接算法"></a>3.5.2、常用的多表连接算法</h3><p>多表连接搜索最优查询树，有很多算法，如启发式、分枝界定计划枚举、贪心、动态规划、爬山法、System R优化方法等</p><h4 id="3-5-2-1、动态规划"><a href="#3-5-2-1、动态规划" class="headerlink" title="3.5.2.1、动态规划"></a>3.5.2.1、动态规划</h4><p>在数据库领域，动态规划算法主要解决多表连接的问题。它是自底向上进行的，即从叶子开始做第一层，然后开始对每层的关系做两两连接（如果满足内连接进行两两连接，不满足则不可对全部表进行两两连接），构造出上层，逐次递推到树根。以下介绍具体步骤：</p><ul><li>初始状态：构造第一层关系，即叶子结点，每个叶子对应一个单表，为每一个待连接的关系计算最优路径（单表的最优路径就是单表的最佳访问方式，通过评估不同的单表的数据扫描方式代价，找出代价最小的作为每个单表的局部最优路径）</li><li>归纳：当第1层到第n-1层的关系已经生成，那么求解第n层的关系方法为：将第n-1层的关系与第一层中的每个关系连接，生成新的关系（对新关系的大小进行估算），放于第n层，且每一个新关系，均求解最优路径。每层路径的生成都是基于下层生成的最优路径，这满足最优化原理的要求。</li></ul><p>还有的改进算法，在生成第n层的时候，除了通过第n-1层和第一层连接外，还可以通过第n-2层和第二层连接…</p><p>例如对于下面的查询语句</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516154200387.png" alt="image-20210516154200387"></p><p>生成最优查询计划的过程如下表</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516154251032.png" alt="image-20210516154251032"></p><p>PostgreSQL查询优化器求解多表连接时，采用了这种算法。</p><h4 id="3-5-2-2、启发式算法"><a href="#3-5-2-2、启发式算法" class="headerlink" title="3.5.2.2、启发式算法"></a>3.5.2.2、启发式算法</h4><p>启发式算法是相对最优化算法提出的，是一个基于直观或者经验构造的算法，不能保证找到最好的查询计划。在数据库的查询优化器中，启发式一直贯穿于整个查询优化阶段，在逻辑查询优化阶段和物理查询优化阶段，都有一些启发式规则可用。PostgreSQL，MySQL，Oracle等数据库在实现查询优化器时，采用了启发式和其他方式相结合的方式。</p><p>物理查询优化阶段常用启发式规则如下：</p><ul><li>关系R在列X上建立索引，且对R的选择操作发生在列X上，则采用索引扫描方式</li><li>R连接S，其中一个关系上的连接列存在索引，则采用索引连接且此关系作为内表</li><li>R连接S，其中一个关系上的连接列是排序的，则采用排序连接比hash连接好</li></ul><h4 id="3-5-2-3、贪心算法"><a href="#3-5-2-3、贪心算法" class="headerlink" title="3.5.2.3、贪心算法"></a>3.5.2.3、贪心算法</h4><p>贪心算法最后得到的是局部最优解，不一定全局最优，其实现步骤如下：</p><ol><li>初始，算法选出的候选对象集合为空</li><li>根据选择函数，从剩余候选对象中选出最有可能构成解的对象</li><li>如果集合中加上该对象后不可行，那么该对象就被丢弃并不再考虑</li><li>如果集合中加上该对象后可行，就加到集合里</li><li>扩充集合，检查该集合是否构成解</li><li>如果贪心算法正确工作，那么找到的第一个解通常都是最优的，可以终止算法</li><li>继续执行第二步</li></ol><p>MySQL查询优化器求解多表连接时采用了这种算法</p><h4 id="3-5-2-4、System-R算法"><a href="#3-5-2-4、System-R算法" class="headerlink" title="3.5.2.4、System-R算法"></a>3.5.2.4、System-R算法</h4><p>对自底向上的动态规划算法进行了改进，主要思想是把子树的查询计划的最优查询计划和次优查询计划保留，用于上层的查询计划生成，以便使得查询计划总体上最优。</p><h4 id="3-5-2-5、遗传算法"><a href="#3-5-2-5、遗传算法" class="headerlink" title="3.5.2.5、遗传算法"></a>3.5.2.5、遗传算法</h4><p>遗传算法（GA）是美国学着Holland与1975年首次提出，是一种启发式算法， 基于自然群体遗传演化机制的高效搜索算法。它抛弃了传统的搜索方式，模拟自然界生物进化过程，采用人工进化的方式对目标空间进行随机化搜索。它将问题域中的可能解看做是群体的一个个体（染色体），并将每一个个体编码成符号串形式，模拟达尔文的遗传选择和自然淘汰的生物进化过程，对群体反复进行基于遗传学的操作（选择，交叉，变异）根据预定的目标适应度函数对每个个体进行评价，依据“适者生存，优胜劣汰”的进化规则，不断得到更优的群体，同时以全局并行搜索方式来搜索优化群体中的最优个体，求得满足要求的最优解。</p><p>遗传算法通过作用于“染色体”上的“基因”，寻找好的“染色体”来求解问题（对算法所产生的每个“染色体”进行评价，并基于适应度值来改造“染色体”，使适用性好的“染色体”比适应性差的“染色体”有更多的“繁殖机会”）</p><p>下面介绍一些遗传算法的主要概念：</p><ul><li>群体：表示GA的搜索空间</li><li>个体：在多表连接中是每个基本关系或者中间生成的临时关系</li><li>染色体：个体的标志，由若干基因组成，是GA操作的基本对象，所以操作个体实则是操作染色体，染色体用字符串表示</li><li>基因：多段基因组成染色体，基因变异导致基因不断被优化</li><li>适应度：表示个体对环境的适应程度，通常由某一适应函数表示。对应执行策略的执行代价</li><li>选择：GA基本操作之一，依据个体的适应度，在群体中按照一定的概率选择可以作为父本的个体，适应度大的被选中的概率高，体现了“适者生存，优胜劣汰”的进化规则</li><li>交叉：GA的基本操作之一，即将父本个体按照一定的概率随机地交换基因形成新的个体</li><li>变异：GA的基本操作之一，即按一定的概率随机改变某个个体的基因值</li></ul><p>接下来介绍遗传算法设计的关键问题</p><ul><li>串的编码方式：本质是编码问题，一般把问题的各种参数用二进制形式进行编码，构成子串；然后把子串拼接构成“染色体”串。串长度及编码形式对算法收敛影响极大</li><li>适应度函数的确定：又称对象函数或问题的“环境”，是问题求解品质的测量函数。一般可以把问题的模型函数作为适应度函数，但有时需要另行构造</li><li>遗传算法自身参数设定：遗传算法自身参数有3个，即群体大小n，交叉概率Pc和变异概率Pm，具体如下：<ul><li>群体大小n太小时难以求出最优解，太大则增长收敛时间，一般n取30~160</li><li>交叉概率Pc太小时难以向前搜索，太大则容易破坏高适应值的结构，一般取0.25~0.75</li><li>变异概率Pm太小时难以产生新的基因结构，太大使遗传算法成了单纯的随机搜索，一般取0.01~0.2</li></ul></li></ul><p>遗传算法的主要步骤如下：</p><ol><li>随机初始化种群</li><li>评估初始的种群，即为种群计算每个个体的适应值且对所有个体排序</li><li>如果没有达到预定演化数（可以是一个确定的、与连接的表的个数无关的值，这样保证搜索空间一定不会因连接的表的个数增多导致搜索空间指数级增大），则继续下一步，否则结束算法</li><li>选择父体，随机挑选父体dad和母体mum</li><li>杂交，父体和母体杂交得到新个体child</li><li>变异，在某些个别条件下对新个体变异（不是大概率变异，不是每次都需要变异）</li><li>计算新个体的适应值，并把适应值排序插入到种群，种群中排名最后的则被淘汰</li><li>继续第三步</li></ol><h4 id="3-5-2-6、其他算法"><a href="#3-5-2-6、其他算法" class="headerlink" title="3.5.2.6、其他算法"></a>3.5.2.6、其他算法</h4><p>还有一些其他算法，如爬山法、分支界定枚举法、随机算法、模拟退火算法或多种算法相结合，都可以用于查询优化多表连接的生成。</p><h3 id="3-5-3、多表连接算法的比较"><a href="#3-5-3、多表连接算法的比较" class="headerlink" title="3.5.3、多表连接算法的比较"></a>3.5.3、多表连接算法的比较</h3><p>多表连接算法比较如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516165246747.png" alt="image-20210516165246747"></p><h1 id="4、查询优化器与其他模块的关系"><a href="#4、查询优化器与其他模块的关系" class="headerlink" title="4、查询优化器与其他模块的关系"></a>4、查询优化器与其他模块的关系</h1><p>在数据库内部，根据功能不同，可以划分出很多模块，不同模块之间有的关系松散，有的关系紧密。查询优化器就是其中一个模块。</p><h2 id="4-1、查询优化器整体介绍"><a href="#4-1、查询优化器整体介绍" class="headerlink" title="4.1、查询优化器整体介绍"></a>4.1、查询优化器整体介绍</h2><p>从SQL语句类型上将，分为DDL，DML，DQL，DCL。不同语句被数据库引擎执行，其执行方式、复杂程度都不相同。其中DQL最为复杂，他的执行在数据库中分为以下5个阶段：</p><ul><li><p>SQL输入：数据库接受用户输入的SQL语句，准备执行</p><p>假设SQL输入内容如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516170300165.png" alt="image-20210516170300165"></p></li><li><p>语法分析：对输入的SQL语句进行词法分析、语法分析，得到语法分析树，如下图，输入是一个SQL语句，输出是一颗多叉树</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516170427420.png" alt="image-20210516170427420"></p></li><li><p>语义检查：根据语法树和系统的元信息进行语义检查，本阶段是对语法树进行逻辑判断，树的结构不发生改变，对语法树上的各个节点进行语义分析，判断对象是否存在、是否重名等；对不合语义的报告错误。</p></li><li><p>SQL优化：通常包括逻辑优化和物理优化两项工作，都需要对语法树的形态做修改，把语法分析树变成查询树。其中，逻辑查询优化将生成逻辑查询执行计划。在生成逻辑查询计划的过程中，根据关系代数的原理，把语法分析树变为关系代数语法树的样式，原先SQL语义中的一些谓词变化为逻辑代数的操作符等样式，这些样式是一个临时的中间状态，经过进一步的逻辑查询优化，如执行常量传递、选择下推等，从而生成逻辑查询执行计划</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516171148006.png" alt="image-20210516171148006"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516171210305.png" alt="image-20210516171210305"></p></li></ul><p>在生成逻辑查询执行计划之后，查询优化器会进一步对查询树进行物理查询优化，主要是对连接顺序进行调整。SQL语句确定的连接顺序经过多表连接算法的处理，可能导致表之间的连接顺序发生变化，所以树的形态有可能调整（图4-4表示经过物理查询优化后，表的连接顺序发生变化，表student从左子树变为右子树）</p><p>物理查询优化除了进行表连接顺序调整外，还对单表扫描方式、两表连接算法、运用代价估算模型进行评估，选择每一项操作中代价最小的作为下一步优化的基础。最后生成的物理查询执行计划如图4-4</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516171723232.png" alt="image-20210516171723232"></p><ul><li><p>SQL执行：在SQL执行阶段，依据物理查询计划执行查询，逐步调用相关算法进行执行，这样算法包括一趟算法、嵌套循环连接、基于排序的两趟算法、基于散列的两趟算法、基于索引的算法、使用超过两趟的算法等。在数据库中，查询语句的执行过程如图4-5所示</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210516172111848.png" alt="image-20210516172111848"></p></li></ul><p>对图4-5的简要说明：</p><ul><li>上半部分是语法查询树</li><li>下半部分是逻辑查询树和最终的查询执行计划</li><li>语法查询树向逻辑查询树转变后，最大不同是关系代数替代了原先语法树的样式，比如出现了关系代数的选择和投影运算</li><li>下半部分分两部分，左边是初始的逻辑查询计划，右边是运用了启发式规则得到的优化后的逻辑查询计划，条件C.cno=22下移（图4-5中的[3]逻辑优化，包括选择下推、常量传递优化）；右下角是最终的查询执行计划，是物理查询优化的结果</li><li>[4]物理优化主要工作有：<ul><li>对于sc表和student表连接，sc可能作为左表按左深树的连接顺序与其他表连接</li><li>对于sc表，如cno列存在索引，则对sc表进行索引扫描</li></ul></li></ul><h2 id="4-2、查询优化器与其他模块的关系"><a href="#4-2、查询优化器与其他模块的关系" class="headerlink" title="4.2、查询优化器与其他模块的关系"></a>4.2、查询优化器与其他模块的关系</h2><h3 id="4-2-1、查询优化器与语法分析器"><a href="#4-2-1、查询优化器与语法分析器" class="headerlink" title="4.2.1、查询优化器与语法分析器"></a>4.2.1、查询优化器与语法分析器</h3><p>语法分析器的输出是查询优化器的输入。语法分析器把一个SQL分解为众多数据结构体并给数据结构赋值，这样才能被查询优化器逐项获取并用于计算，比如逻辑查询优化有一条常量传递规则，如果没有语法分析器分解条件，也不可能推知列值是常量，也不可能有此优化。</p><p>因此，掌握查询优化器可以从语法分析器入手，结合数据库实现中定义的数据结构，在理解关系代数原理的基础上，对原理和代码精读，并互相比较，才能逐步掌握全部相关内容。</p><h3 id="4-2-2、查询优化器与执行器"><a href="#4-2-2、查询优化器与执行器" class="headerlink" title="4.2.2、查询优化器与执行器"></a>4.2.2、查询优化器与执行器</h3><p>查询优化器的输出是执行器的输入。在实践中，一条SQL最耗时的阶段，多发生在执行阶段，因此如果查询计划做的不好，会非常耗时。</p><h3 id="4-2-3、优化器与缓冲区"><a href="#4-2-3、优化器与缓冲区" class="headerlink" title="4.2.3、优化器与缓冲区"></a>4.2.3、优化器与缓冲区</h3><p>缓冲区有很多种，包括与数据相关的缓存区（如从存储设备加载数据到内存），与实现过程相关的辅助缓冲区（如排序用到的临时表或内存块），与功能模块相关的缓冲区（如日志缓冲区）。</p><p>优化器主要是对SQL输入进行逻辑方式的变换，没有涉及数据部分，只涉及数据量的估算。当估算排序空间的时候，会涉及排序缓冲区；当估算数据IO时，会考虑数据是否在数据缓冲区中。因此，查询优化器和数据库缓冲区有一定的关系。</p><h3 id="4-2-4、优化器与对象访问"><a href="#4-2-4、优化器与对象访问" class="headerlink" title="4.2.4、优化器与对象访问"></a>4.2.4、优化器与对象访问</h3><p>对象访问分为两个层面。一是对元信息的获取，二是对数据的获取。元信息通常被调入内存多次使用，故一次调入多次使用对性能影响不大，数据可能面临着反复多次被调入调出。优化器基于一些统计数据进行花费比较，使用的多是元信息，所以优化器与对象访问层的紧密性不是很高。</p><h3 id="4-2-5、优化器与统计"><a href="#4-2-5、优化器与统计" class="headerlink" title="4.2.5、优化器与统计"></a>4.2.5、优化器与统计</h3><p>多数数据库采用了基于代价的查询执行计划估算，所以依赖于被查询对象的各种数据，而数据是动态变化的，如表的元组数。实时获取这些数据开销比较大，因此可以定期根据需要统计这些数据，比较切合实际。所以多数数据库都有统计模块存在，利用统计模块得出的数据对于查询优化器得到真实有效的查询计划具有重大意义。</p><p>优化器在物理优化阶段，需要对单表读取花费，两表连接花费，多表连接顺序花费等进行比较，基于的就是一些基础数据的值，这些数据通常不会被实时更新，因此优化器有时给出的计划不一定是最合适的。对此，多数数据库提供ANALYZE这样的SQL命令用于更新统计信息。</p><p>综上，优化器和统计模块紧密相关。</p><h3 id="4-2-6、优化器与索引"><a href="#4-2-6、优化器与索引" class="headerlink" title="4.2.6、优化器与索引"></a>4.2.6、优化器与索引</h3><p>优化器在做物理查询优化时需要利用索引提高单表扫描效率，进而减少了多表连接时的元组数，因此确定哪些索引可用，怎么有效利用索引等都在查询优化器中得到了体现。</p><h1 id="11、MySQL查询优化器概述"><a href="#11、MySQL查询优化器概述" class="headerlink" title="11、MySQL查询优化器概述"></a>11、MySQL查询优化器概述</h1><p>MySQL查询优化器主要功能是完成select语句的执行，此外，还有个重要功能，就是使用关系代数、启发式规则、代价估算模型等技术，提高select执行的效率。</p><p>MySQL查询优化器实现了第二章介绍的大多数查询优化技术，这些技术用于对SPJ和非SPJ类型的查询语句进行优化。</p><p>本章从整体上介绍MySQL查询优化器，分别对其执行过程、架构、层次、设计思想、主要概念、代码结构宏观探讨MySQL查询优化器的实现。</p><h2 id="11-1、MySQL查询执行过程"><a href="#11-1、MySQL查询执行过程" class="headerlink" title="11.1、MySQL查询执行过程"></a>11.1、MySQL查询执行过程</h2><p>MySQL查询执行过程分为4个阶段</p><ul><li>语法分析阶段：将SQL语句经词法和语法分析后变换为一棵查询树st_select_lex传给优化器，并对SQL表达的语义进行检查</li><li>生成逻辑查询执行计划阶段：优化器在查询树中遍历每个关系，确定关系是否是常量表、为每个关系查找可用索引、运用关系代数原理和启发式规则进行逻辑上的查询优化（如消除子查询，消除外连接等）</li><li>生成物理查执行计划阶段：优化器对各个连接表进行排序，然后再求解多表连接最优路径，对于每个关系尽量应用索引计算其代价，找出代价最小的路径后保存到JOIN类的best_positions</li><li>执行查询执行计划阶段：直接把查询执行计划传到执行器执行</li></ul><p>四个阶段如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517152340375.png" alt="image-20210517152340375"></p><p>逻辑查询优化阶段：基于关系代数规则和启发式规则，把SQL经过等价的代数转换，变为一种更节省IO的执行序列</p><p>物理查询优化阶段：在解决多表连接时有两套算法：一是用户指定表连接次序的算法；二是混杂了贪心和穷举思想的算法</p><h2 id="11-2、MySQL查询优化器的架构和设计思想"><a href="#11-2、MySQL查询优化器的架构和设计思想" class="headerlink" title="11.2、MySQL查询优化器的架构和设计思想"></a>11.2、MySQL查询优化器的架构和设计思想</h2><p>查询优化器通过JOIN对象的prepare（MySQL5.7.19及以后版本这个方法被移到SELECT_LEX::prepare了）和optimize方法完成优化工作。</p><p>prepare完成的查询优化主要包括：子查询的冗余子句消除、IN类型子查询优化、将ANY/ALL等类型的子查询转换为MIN/MAX等操作，这是对简单子查询进行的优化；</p><p>JOIN.optimize函数完成的查询优化主要包括：子查询上拉，把外连接优化为内连接，消除嵌套连接，where子句、join/on子句、having子句条件表达式化简（尤其是对含有常量表达式的化简、等式合并），优化没有group by子句情况下的count(*)、MIN和MAX，裁剪分区partition（如果查询的表是分区表），确定多表的连接路径（单表是多表的特例，统计join的代价，两种多表连接算法选其一搜索最优的join顺序、生成执行计划）、优化等式谓词、优化distinct、创建临时表存储临时结果优化分组排序等操作。在这些过程中，MySQL并没有把优化过程明显分为逻辑查询优化阶段和物理查询优化阶段，而是互为混杂，这是MySQL查询优化器的一大特点。</p><h3 id="11-2-1、MySQL查询优化器架构"><a href="#11-2-1、MySQL查询优化器架构" class="headerlink" title="11.2.1、MySQL查询优化器架构"></a>11.2.1、MySQL查询优化器架构</h3><p>其架构和执行过程如下图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517160204396.png"></p><p>主要经历4个过程：</p><ul><li>P1过程：SQL语句输入变为语法查询树</li><li>P2过程：查询预处理，主要是子查询优化</li><li>P3过程：将语法树变为逻辑关系查询树，进而变成物理查询执行计划，挑出最优计划</li><li>P4过程：依据最优查询执行计划得到查询结果</li></ul><p>主要经历以下4个模块</p><ul><li>M1模块：语法分析模块，执行P1</li><li>M2模块：查询预处理模块，执行P2</li><li>M3模块：查询优化模块，执行P3</li><li>M4模块：查询执行模块，执行P4</li></ul><p>实现MySQL查询优化器功能的主要是M3模块，其主要有两个子阶段工作：</p><ul><li>M3-S1逻辑查询优化阶段：把语法查询树通过关系代数原理，优化为关系代数查询树</li><li>M3-S2物理查询优化阶段：把关系代数查询树用于贪心算法，生成最优执行计划</li></ul><h3 id="11-2-2、MySQL查询优化器的层次"><a href="#11-2-2、MySQL查询优化器的层次" class="headerlink" title="11.2.2、MySQL查询优化器的层次"></a>11.2.2、MySQL查询优化器的层次</h3><p>代码层面看，逻辑结构不是很清晰；但是从技术层面看，还是可以分为逻辑查询优化和物理查询优化两个阶段。</p><h3 id="11-2-3、MySQL查询优化器设计思想"><a href="#11-2-3、MySQL查询优化器设计思想" class="headerlink" title="11.2.3、MySQL查询优化器设计思想"></a>11.2.3、MySQL查询优化器设计思想</h3><p>唯快唯实用</p><h2 id="11-3、主要概念"><a href="#11-3、主要概念" class="headerlink" title="11.3、主要概念"></a>11.3、主要概念</h2><h3 id="11-3-1、常量表"><a href="#11-3-1、常量表" class="headerlink" title="11.3.1、常量表"></a>11.3.1、常量表</h3><p>MySQL常量表的“常量”不同于编程语言中的常量。在MySQL中，常量表是指读取表上的数据行数是确定的零行或者一行，分为以下两种类型：</p><ul><li>system表：表中只有一行数据</li><li>const表：经where语句中的限制条件（“column=常数”格式的表达式）筛选后只有一行数据；这表明，在column列上存在索引，索引列可能是一个主键列，也可能是唯一键的列。</li></ul><p>满足这两个条件之一，就是常量表。</p><p>常量表的引入，实质上使得查询优化器能够基于规则对多表连接算法进行优化。因为多表连接算法，至少是个多重循环，而常量表的存在，使得循环层数得到消减</p><h3 id="11-3-2、表数据的访问方式"><a href="#11-3-2、表数据的访问方式" class="headerlink" title="11.3.2、表数据的访问方式"></a>11.3.2、表数据的访问方式</h3><p>单表又称简单表，是一个用户定义的逻辑概念上的table（create table定义）。MySQL对表的扫描分为两种类型：一是基于索引，而是直接在表上做数据的顺序扫描，这和其他数据库读取数据的方式没有本质区别。</p><p>MySQL基于索引的扫描又区分为多种情况，进而细化出各种扫描方式（JT_EQ_REF、JT_REF、JT_REF_OR_NULL等），根据这种细化的扫描方式又详细区分了不同的扫描花费估算公式（参看best_access_path函数），这使得估算更为精准，有助于更好地得到查询执行计划。</p><p>此外，MySQL提出一些其他的扫描方式（基于常量表），如JT_SYSTEM、JT_CONST等，这使得读取更为快捷，有助于得到更好的查询计划。对于JT_SYSTEM、JT_CONST的查找，优化器会通过join_read_system，join_read_const函数快速读取表中的值。</p><p>MySQL对表数据扫描方式的细化，区分了常量表和其他非常量表，使得在查询执行计划生成阶段就可以提前释放加在常量表上的锁（JOIN::optimize方法中对mysql_unlock_some_tables函数的调用）从而提高了并发度。</p><p>MySQL提供的各种数据访问方式如下表：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517164135780.png" alt="image-20210517164135780"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517164206107.png" alt="image-20210517164206107"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517164311450.png" alt="image-20210517164311450"></p><p>在MySQL代码中，提出两种单表扫描方式，分别是：index scan和table scan。</p><p>除了JT_ALL为表扫描外，其余多数属于索引扫描，只是根据索引的定义情况，区分了多种类型而已。</p><p>在opt_range.h文件中，定义了接口类QUICK_SELECT_I，其主要是利用索引实现快速查询定义的一个公共接口，处理一些特殊情况的查询（如类QUICK_GROUP_MIN_MAX_SELECT是为了在分组操作中求最值），其子类如下表所示：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517165107122.png" alt="image-20210517165107122"></p><h2 id="11-4、代码层次结构"><a href="#11-4、代码层次结构" class="headerlink" title="11.4、代码层次结构"></a>11.4、代码层次结构</h2><p>MySQL查询优化器的入口函数是SELECT_LEX::prepare函数（？）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517165454907.png" alt="image-20210517165454907"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517165550608.png" alt="image-20210517165550608"></p><h1 id="12、MySQL查询优化器相关数据结构"><a href="#12、MySQL查询优化器相关数据结构" class="headerlink" title="12、MySQL查询优化器相关数据结构"></a>12、MySQL查询优化器相关数据结构</h1><p>本章介绍MySQL查询优化器模块的主要数据结构、数据结构之间的关联关系以及数据结构在查询优化器执行流程中的主要作用</p><h2 id="12-1、主要的类和数据结构"><a href="#12-1、主要的类和数据结构" class="headerlink" title="12.1、主要的类和数据结构"></a>12.1、主要的类和数据结构</h2><p>主要包括四个方面：</p><ul><li>查询树</li><li>基本对象</li><li>连接相关的对象与执行计划</li><li>代价估算类</li></ul><h3 id="12-1-1、查询树"><a href="#12-1-1、查询树" class="headerlink" title="12.1.1、查询树"></a>12.1.1、查询树</h3><p>语法分析器的结果是查询树，使用sql_lex.h下的st_select_lex类表示</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//where子句</span>  Item <span class="token operator">*</span>m_where_cond<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//having子句</span>  Item <span class="token operator">*</span>m_having_cond<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//from子句中的表对象</span>  SQL_I_List<span class="token operator">&lt;</span>TABLE_LIST<span class="token operator">></span>  table_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//group by子句</span>  SQL_I_List<span class="token operator">&lt;</span>ORDER<span class="token operator">></span>       group_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//连接树</span>  JOIN <span class="token operator">*</span>join<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顶层连接链表</span>  List<span class="token operator">&lt;</span>TABLE_LIST<span class="token operator">></span> top_join_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前被分析的连接链表</span>  List<span class="token operator">&lt;</span>TABLE_LIST<span class="token operator">></span> <span class="token operator">*</span>join_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//半连接嵌套链表</span>  List<span class="token operator">&lt;</span>TABLE_LIST<span class="token operator">></span> sj_nests<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//基本表，即从SQL查询语句中分解出的基表</span>  TABLE_LIST <span class="token operator">*</span>leaf_tables<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//基本表的数量</span>  uint leaf_table_count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//order by子句</span>  SQL_I_List<span class="token operator">&lt;</span>ORDER<span class="token operator">></span> order_list<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//limit子句</span>  Item <span class="token operator">*</span>select_limit<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/// LIMIT ... OFFSET clause, NULL if no offset is given</span>  Item <span class="token operator">*</span>offset_limit<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询树的一些基本方法</span>  TABLE_LIST<span class="token operator">*</span> <span class="token function">add_table_to_list</span><span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">,</span> Table_ident <span class="token operator">*</span>table<span class="token punctuation">,</span>                LEX_STRING <span class="token operator">*</span>alias<span class="token punctuation">,</span>                ulong table_options<span class="token punctuation">,</span>                thr_lock_type flags<span class="token operator">=</span> TL_UNLOCK<span class="token punctuation">,</span>                                enum_mdl_type mdl_type<span class="token operator">=</span> MDL_SHARED_READ<span class="token punctuation">,</span>                List<span class="token operator">&lt;</span>Index_hint<span class="token operator">></span> <span class="token operator">*</span>hints<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                                List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">*</span>partition_names<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                                LEX_STRING <span class="token operator">*</span>option<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TABLE_LIST <span class="token operator">*</span><span class="token function">nest_last_join</span><span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">add_joined_table</span><span class="token punctuation">(</span>TABLE_LIST <span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>  TABLE_LIST <span class="token operator">*</span><span class="token function">convert_right_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-1-2、基本对象"><a href="#12-1-2、基本对象" class="headerlink" title="12.1.2、基本对象"></a>12.1.2、基本对象</h3><p>MySQL和查询优化相关的基本对象主要有：关系（table.h里的TABLE_LIST），索引（sql_class.h里的Key），连接表（sql_select.h里的JOIN_TAB）</p><h4 id="12-1-2-1、关系"><a href="#12-1-2-1、关系" class="headerlink" title="12.1.2.1、关系"></a>12.1.2.1、关系</h4><p>MySQL在TABLE_LIST存放了查询优化阶段用到的信息以及其他阶段用到的信息，是一个逻辑上的表结构。在存储层，由TABLE结构体(table.h里)表示表对象</p><p>结构体TABLE_LIST定义如下：</p><pre class="line-numbers language-CPP"><code class="language-CPP">struct TABLE_LIST {      //表所属数据库，表名，别名  const char *db, *table_name, *alias;    //模式名  char *schema_table_name;      //与连接相关的一些信息  Item        *m_join_cond;  Item          *m_sj_cond;           //半连接的表对象  table_map     sj_inner_tables;      //查询树  st_select_lex    *select_lex;        //视图相关信息  List<TABLE_LIST> *view_tables;  /* most upper view this table belongs to */  TABLE_LIST    *belong_to_view;  /*    The view directly referencing this table    (non-zero only for merged underlying tables of a view).  */  TABLE_LIST    *referencing_view;        //安全权限相关的信息  Security_context *security_ctx;  /*    This view security context (non-zero only for views with    SQL SECURITY DEFINER)  */  Security_context *view_sctx;    GRANT_INFO    grant;        //管理相关的一些信息  //表对象上的锁信息  thr_lock_type lock_type;      //是否被缓存  bool        cacheable_table;    /* stop PS caching */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-1-2-2、索引"><a href="#12-1-2-2、索引" class="headerlink" title="12.1.2.2、索引"></a>12.1.2.2、索引</h4><p>MySQL通过Key类定义索引的类型和索引的关键信息，其中KEY_CREATE_INFO包括了索引列、索引算法等，如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517175055037.png" alt="image-20210517175055037"></p><p>首先在sql.lex.h里定义了6种索引类型</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> keytype <span class="token punctuation">{</span>  KEYTYPE_PRIMARY<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//主键索引</span>  KEYTYPE_UNIQUE<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//唯一索引</span>  KEYTYPE_MULTIPLE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//多重索引</span>  KEYTYPE_FULLTEXT<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//全文索引</span>  KEYTYPE_SPATIAL<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//空间索引</span>  KEYTYPE_FOREIGN <span class="token comment" spellcheck="true">//外键索引</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在sql_class.h里定义了索引类Key：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Key</span> <span class="token operator">:</span><span class="token keyword">public</span> Sql_alloc <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//索引类型</span>  keytype type<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//索引元信息，如索引算法、名称、注释等</span>  KEY_CREATE_INFO key_create_info<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//索引列信息，如列的名称，长度等</span>  List<span class="token operator">&lt;</span>Key_part_spec<span class="token operator">></span> columns<span class="token punctuation">;</span>  LEX_STRING name<span class="token punctuation">;</span>  <span class="token keyword">bool</span> generated<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>索引元信息中的<code>enum ha_key_alg algorithm</code>支持的索引算法如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> ha_key_alg <span class="token punctuation">{</span>  HA_KEY_ALG_UNDEF<span class="token operator">=</span>    <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* Not specified (old file) */</span>  HA_KEY_ALG_BTREE<span class="token operator">=</span>    <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* B-tree算法，默认使用       */</span>  HA_KEY_ALG_RTREE<span class="token operator">=</span>    <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* R-tree算法，用于空间搜索 */</span>  HA_KEY_ALG_HASH<span class="token operator">=</span>    <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* HASH算法，用于堆表搜索 */</span>  HA_KEY_ALG_FULLTEXT<span class="token operator">=</span>    <span class="token number">4</span>        <span class="token comment" spellcheck="true">/* 全文索引，用于MyISAM存储引擎的表 */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-1-2-3、连接表"><a href="#12-1-2-3、连接表" class="headerlink" title="12.1.2.3、连接表"></a>12.1.2.3、连接表</h4><p>连接表是介于关系（TABLE_LIST类）与连接类（JOIN类）之间的一个过渡对象，存放了关系的一些相关信息，也存放了连接操作需要的一些信息，因此称为连接表。其定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">JOIN_TAB</span> <span class="token operator">:</span> <span class="token keyword">public</span> Sql_alloc<span class="token punctuation">,</span> <span class="token keyword">public</span> QEP_shared_owner <span class="token punctuation">{</span>  TABLE_LIST    <span class="token operator">*</span>table_ref<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**&lt; points to table reference               */</span><span class="token comment" spellcheck="true">//第一个可用的索引</span>  Key_use       <span class="token operator">*</span>m_keyuse<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//join/on条件表达式中的等式</span>  COND_EQUAL    <span class="token operator">*</span>cond_equal<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//被扫描的记录行数（不是返回结果的行数）</span>  ha_rows       found_records<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用JT_ALL，JT_RANGE，JT_INDEX_MERGE访问表的花费</span>  ha_rows       read_time<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//连接时依赖的表</span>  table_map     dependent<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//快速查找的类型</span>  <span class="token keyword">enum</span> quick_type use_quick<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两表连接时使用的缓存算法等</span>  uint          m_use_join_cache<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//半连接相关的一些变量</span>  TABLE_LIST    <span class="token operator">*</span>emb_sj_nest<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// @returns semijoin strategy for this table.</span>  uint <span class="token function">get_sj_strategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-1-3、连接对象与执行计划"><a href="#12-1-3、连接对象与执行计划" class="headerlink" title="12.1.3、连接对象与执行计划"></a>12.1.3、连接对象与执行计划</h3><p>MySQL查询优化相关的连接对象主要有连接类（JOIN）、约束条件（Item）和位置（POSITION）等</p><h4 id="12-1-3-1、连接类（JOIN）"><a href="#12-1-3-1、连接类（JOIN）" class="headerlink" title="12.1.3.1、连接类（JOIN）"></a>12.1.3.1、连接类（JOIN）</h4><p>sql_optimizer.h里的JOIN类是连接操作对应的查询语句的连接关系内容，是优化和执行的基本单位，也是优化结果（查询执行计划）的存储对象，其定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">JOIN</span> <span class="token operator">:</span><span class="token keyword">public</span> Sql_alloc <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//语法分析之后得到的查询树</span>  SELECT_LEX <span class="token operator">*</span><span class="token keyword">const</span> select_lex<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//进行集合操作的查询语句</span>  SELECT_LEX_UNIT <span class="token operator">*</span><span class="token keyword">const</span> unit<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//存放连接中所有的连接关系对象，存放顺序参见get_best_combination函数</span>  JOIN_TAB <span class="token operator">*</span>join_tab<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//查询执行计划表</span>  QEP_TAB <span class="token operator">*</span>qep_tab<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//保存当前最优查询计划</span>  JOIN_TAB <span class="token operator">*</span><span class="token operator">*</span>best_ref<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//位图，标识表在连接中的位置</span>  JOIN_TAB <span class="token operator">*</span><span class="token operator">*</span>map2table<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//查询块中出现的基表数量</span>  uint     tables<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//查询块中出现的主要的表的个数（包括物化的临时表等）</span>  uint     primary_tables<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//常量表的个数</span>  uint     const_tables<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//临时表的个数</span>  uint     tmp_tables<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**     构成当前连接的最优表的连接次序（用数组线性存放各个表对象，用来表示这些表按数组指定次序连接得到当前连接）  */</span>  POSITION <span class="token operator">*</span>best_positions<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当前路径，在求解最优路径（best_positions）的过程中，表示某一刻的一个路径</span>  POSITION <span class="token operator">*</span>positions<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//最优查询路径对应的最小花费</span>  <span class="token keyword">double</span>   best_read<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//最优查询路径估计会返回的行数</span>  ha_rows  best_rowcount<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//锁信息</span>  MYSQL_LOCK <span class="token operator">*</span>lock<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//索引</span>  Key_use_array keyuse_array<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//查询语句中的所有表达式</span>  List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token operator">&amp;</span>all_fields<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//order by和group by子句</span>  ORDER_with_src order<span class="token punctuation">,</span> group_list<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//where子句</span>  Item       <span class="token operator">*</span>where_cond<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//having子句</span>  Item       <span class="token operator">*</span>having_cond<span class="token punctuation">;</span>  Item       <span class="token operator">*</span>having_for_explain<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//条件子句</span>  COND_EQUAL <span class="token operator">*</span>cond_equal<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//半连接相关</span>  List<span class="token operator">&lt;</span>TABLE<span class="token operator">></span> sj_tmp_tables<span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Semijoin_mat_exec<span class="token operator">></span> sjm_exec_list<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//查询优化器的几个主要方法</span>  <span class="token comment" spellcheck="true">//正式优化阶段，使用逻辑，物理优化方法，进行查询的各种操作代价估算</span>  <span class="token keyword">int</span> <span class="token function">optimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//重置该连接对象状态</span>  <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//得到执行计划，按查询执行计划查询</span>  <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//prepare连接结果</span>  <span class="token keyword">bool</span> <span class="token function">prepare_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-1-3-2、约束条件"><a href="#12-1-3-2、约束条件" class="headerlink" title="12.1.3.2、约束条件"></a>12.1.3.2、约束条件</h4><p>约束条件是指where或join/on或having子句中的谓词表达式，其分为两种：一种是限制条件，用来过滤单表的元组；另一种是连接条件，满足连接条件的元组才会连接，连接条件表达式一般包括两个或两个以上关系的变量。</p><p>MySQL用Item类表示约束条件表达式，这是一个父类，由一系列子类继承该父类，Item_equal类与Item类之间关系如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Item_equal    Item_bool_func        Item_int_func            Item_func                Item_result_field                    Item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>约束条件类Item的定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token operator">:</span> <span class="token keyword">public</span> Parse_tree_node <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Item是一个多用途对象，可以存放连接类中的where，having条件等</span>  <span class="token keyword">enum</span> Type <span class="token punctuation">{</span>INVALID_ITEM<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>             FIELD_ITEM<span class="token punctuation">,</span> FUNC_ITEM<span class="token punctuation">,</span> SUM_FUNC_ITEM<span class="token punctuation">,</span> STRING_ITEM<span class="token punctuation">,</span>         INT_ITEM<span class="token punctuation">,</span> REAL_ITEM<span class="token punctuation">,</span> NULL_ITEM<span class="token punctuation">,</span> VARBIN_ITEM<span class="token punctuation">,</span>         COPY_STR_ITEM<span class="token punctuation">,</span> FIELD_AVG_ITEM<span class="token punctuation">,</span> DEFAULT_VALUE_ITEM<span class="token punctuation">,</span>         PROC_ITEM<span class="token punctuation">,</span>COND_ITEM<span class="token punctuation">,</span> REF_ITEM<span class="token punctuation">,</span> FIELD_STD_ITEM<span class="token punctuation">,</span>         FIELD_VARIANCE_ITEM<span class="token punctuation">,</span> INSERT_VALUE_ITEM<span class="token punctuation">,</span>             SUBSELECT_ITEM<span class="token punctuation">,</span> ROW_ITEM<span class="token punctuation">,</span> CACHE_ITEM<span class="token punctuation">,</span> TYPE_HOLDER<span class="token punctuation">,</span>             PARAM_ITEM<span class="token punctuation">,</span> TRIGGER_FIELD_ITEM<span class="token punctuation">,</span> DECIMAL_ITEM<span class="token punctuation">,</span>             XPATH_NODESET<span class="token punctuation">,</span> XPATH_NODESET_CMP<span class="token punctuation">,</span>             VIEW_FIXER_ITEM<span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*  将一个Item类转化为一个Filed类返回,例如：    Item_int ->Field_longlong    Item_real->Field_double    Item_string->Field_string  */</span>      Field <span class="token operator">*</span><span class="token function">tmp_table_field_from_field_type</span><span class="token punctuation">(</span>TABLE <span class="token operator">*</span>table<span class="token punctuation">,</span> <span class="token keyword">bool</span> fixed_length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Item语法树</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210517205411374.png" alt="image-20210517205411374"></p><p>等值条件类COND_EQUAL：</p><pre class="line-numbers language-CPP"><code class="language-CPP">class COND_EQUAL: public Sql_alloc{public:    //本层以及本层以下的成员个数（条件有嵌套）  uint max_members;        //上层的所有等值判断的约束条件  COND_EQUAL *upper_levels;      //当前等式表达式  List<Item_equal> current_level;  COND_EQUAL()  {     upper_levels= 0;  }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示等式的类Item_equal，格式如field1=field2、field=const</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Item_equal</span><span class="token operator">:</span> <span class="token keyword">public</span> Item_bool_func <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表达式的因子，如field1=field2中的field1和field2</span>  List<span class="token operator">&lt;</span>Item_field<span class="token operator">></span> fields<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//常量因子</span>  Item <span class="token operator">*</span>const_item<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-1-3-3、位置"><a href="#12-1-3-3、位置" class="headerlink" title="12.1.3.3、位置"></a>12.1.3.3、位置</h4><p>在连接顺序中，位置是指被连接的表的位置。这个位置上存储了被访问的表、被使用的访问方法、半连接策略的选择、半连接优化状态等。MySQL多表连接算法支持的是从左到右的类似左深树的连接方式，但左深树是一个树形结构，而MySQL的多表连接算法连接表的过程是一个平面结构，先对表进行排序，然后从左到右地连接排好序的表，然后确定当前连接方式的花费。</p><p>位置st_position结构体的定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> st_position <span class="token operator">:</span> <span class="token keyword">public</span> Sql_alloc <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//rows_fetched = selectivity(access_condition) * cardinality(table)</span>  <span class="token keyword">double</span> rows_fetched<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//访问表的花费</span>  <span class="token keyword">double</span> read_cost<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//访问的连接对象</span>  JOIN_TAB <span class="token operator">*</span>table<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**  索引信息    NULL  -  'index' or 'range' or 'index_merge' or 'ALL' access is used.    Other - [eq_]ref[_or_null] access is used. Pointer to {t.keypart1 = expr}  */</span>  Key_use <span class="token operator">*</span>key<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//半连接优化策略</span>  uint sj_strategy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//首次匹配策略</span>  <span class="token comment" spellcheck="true">/*    Index of the first inner table that we intend to handle with this    strategy  */</span>  uint first_firstmatch_table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    Tables that were not in the join prefix when we've started considering     FirstMatch strategy.  */</span>  table_map first_firstmatch_rtbl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*     Tables that need to be in the prefix before we can calculate the cost    of using FirstMatch strategy.   */</span>  table_map firstmatch_need_tables<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//重复淘汰策略</span>     <span class="token comment" spellcheck="true">/* The first table that the strategy will need to handle */</span>  uint  first_dupsweedout_table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    Tables that we will need to have in the prefix to do the weedout step    (all inner and all outer that the involved semi-joins are correlated with)  */</span>  table_map dupsweedout_tables<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//半连接物化扫描策略</span>      <span class="token comment" spellcheck="true">/* The last inner table (valid once we're after it) */</span>  uint      sjm_scan_last_inner<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    Tables that we need to have in the prefix to calculate the correct cost.    Basically, we need all inner tables and outer tables mentioned in the    semi-join's ON expression so we can correctly account for fanout.  */</span>  table_map sjm_scan_need_tables<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-1-4、代价估算类"><a href="#12-1-4、代价估算类" class="headerlink" title="12.1.4、代价估算类"></a>12.1.4、代价估算类</h3><p>主要包括四个层面：</p><ul><li>IO花费</li><li>CPU花费</li><li>远程操作花费</li><li>内存操作花费</li></ul><p>代价估算类Cost_estimate定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Cost_estimate</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//IO操作花费</span>  <span class="token keyword">double</span> io_cost<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//CPU操作花费</span>  <span class="token keyword">double</span> cpu_cost<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//远程操作花费</span>  <span class="token keyword">double</span> import_cost<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//内存操作花费</span>  <span class="token keyword">double</span> mem_cost<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//5.7.19版本暂时没有考虑内存操作花费</span>      <span class="token keyword">double</span> <span class="token function">total_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> io_cost <span class="token operator">+</span> cpu_cost <span class="token operator">+</span> import_cost<span class="token punctuation">;</span> <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/// Add to IO cost</span>  <span class="token keyword">void</span> <span class="token function">add_io</span><span class="token punctuation">(</span><span class="token keyword">double</span> add_io_cost<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    io_cost<span class="token operator">+</span><span class="token operator">=</span> add_io_cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/// Add to CPU cost</span>  <span class="token keyword">void</span> <span class="token function">add_cpu</span><span class="token punctuation">(</span><span class="token keyword">double</span> add_cpu_cost<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpu_cost<span class="token operator">+</span><span class="token operator">=</span> add_cpu_cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/// Add to import cost</span>  <span class="token keyword">void</span> <span class="token function">add_import</span><span class="token punctuation">(</span><span class="token keyword">double</span> add_import_cost<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    import_cost<span class="token operator">+</span><span class="token operator">=</span> add_import_cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/// Add to memory cost</span>  <span class="token keyword">void</span> <span class="token function">add_mem</span><span class="token punctuation">(</span><span class="token keyword">double</span> add_mem_cost<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mem_cost<span class="token operator">+</span><span class="token operator">=</span> add_mem_cost<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在DsMrr_impl::get_disk_sweep_mrr_cost方法里，还是添加了内存操作花费，只是目前暂不考虑，将来的版本会考虑</p><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token comment" spellcheck="true">/*    Cost of memory is not included in the total_cost() function and    thus will not be considered when comparing costs. Still, we    record it in the cost estimate object for future use.  */</span>  cost<span class="token operator">-</span><span class="token operator">></span><span class="token function">add_mem</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-2、各个阶段主要结构体间的关系"><a href="#12-2、各个阶段主要结构体间的关系" class="headerlink" title="12.2、各个阶段主要结构体间的关系"></a>12.2、各个阶段主要结构体间的关系</h2><ul><li>SQL输入</li><li>语法分析：SQL被分解后存放到st_select_lex的各个成员上，如where等子句存在Item上、连接表存放在TABLE_LIST上</li><li>查询优化：包括逻辑和物理查询优化，此阶段所有信息存在JOIN对象中</li><li>查询执行：最后将查询执行计划交给执行器执行</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210518090720399.png" alt="image-20210518090720399"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210518092309118.png" alt="image-20210518092309118"></p><h1 id="13、MySQL查询优化器的原理解析"><a href="#13、MySQL查询优化器的原理解析" class="headerlink" title="13、MySQL查询优化器的原理解析"></a>13、MySQL查询优化器的原理解析</h1><h2 id="13-1、查询优化器整体流程"><a href="#13-1、查询优化器整体流程" class="headerlink" title="13.1、查询优化器整体流程"></a>13.1、查询优化器整体流程</h2><pre class="line-numbers language-cpp"><code class="language-cpp">handle_connection    do_command        dispatch_command            mysql_parse                mysql_execute_command                    execute_sqlcom_select                        handle_query                            SELECT_LEX<span class="token operator">::</span>prepare                                remove_redundant_subquery_clauses <span class="token comment" spellcheck="true">//去除子查询中冗余子句</span>                                resolve_subquery<span class="token comment" spellcheck="true">//子查询优化</span>                                flatten_subqueries<span class="token comment" spellcheck="true">//将子查询转换为半连接</span>                                apply_local_transforms                            SELECT_LEX<span class="token operator">::</span>optimize                                JOIN<span class="token operator">::</span>optimize                                    SELECT_LEX<span class="token operator">::</span>apply_local_transforms                                        delete_unused_merged_columns <span class="token comment" spellcheck="true">//删除未使用的列</span>                                        simplify_joins <span class="token comment" spellcheck="true">//消除外连接和嵌套连接</span>                                    <span class="token function">optimize_cond</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>where_cond<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//优化where子句</span>                                    <span class="token function">optimize_cond</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>having_cond<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//优化having子句</span>                                    opt_sum_query <span class="token comment" spellcheck="true">//优化count(*), min() and max() （适用于没有group by的情况）</span>                                    print_where <span class="token comment" spellcheck="true">//打印where条件</span>                                    JOIN<span class="token operator">::</span>make_join_plan <span class="token comment" spellcheck="true">//计算最优连接次序，初始化JOIN对象</span>                                        init_planner_arrays <span class="token comment" spellcheck="true">//为连接次序优化初始化临时数组</span>                                        propagate_dependencies<span class="token comment" spellcheck="true">//求解传播表之间的依赖关系</span>                                        update_ref_and_keys <span class="token comment" spellcheck="true">//获取索引信息，为快速定位数据，条件比较做准备</span>                                        estimate_rowcount                                            get_quick_record_count<span class="token comment" spellcheck="true">//估算每个表中有多少元组可用</span>                                        choose_table_order                                            optimize_straight_join<span class="token comment" spellcheck="true">//用户指定表连接次序</span>                                            <span class="token operator">|</span>greedy_search <span class="token comment" spellcheck="true">// |贪心算法</span>                                                best_extension_by_limited_search<span class="token comment" spellcheck="true">//确定多表连接的最优查询计划</span>                                                    best_access_path<span class="token comment" spellcheck="true">//估算访问表的最优访问路径（包括花费）</span>                                        get_best_combination <span class="token comment" spellcheck="true">//根据最优连接次序，生成执行计划</span>                                            make_outerjoin_info<span class="token comment" spellcheck="true">//计算外连接信息</span>                                    mysql_unlock_some_tables <span class="token comment" spellcheck="true">//释放常量表上的锁</span>                                    substitute_for_best_equal_field<span class="token comment" spellcheck="true">//循环遍历所有表达式，化简表达式（如去除重复等式）</span>                                    make_join_select <span class="token comment" spellcheck="true">//对条件求值，下推连接条件到表中</span>                                    JOIN<span class="token operator">::</span>optimize_distinct_group_order                                        test_if_skip_sort_order <span class="token comment" spellcheck="true">//排序操作的优化（尝试使用索引代替排序）</span>                                    optimize_fts_query <span class="token comment" spellcheck="true">//优化全文搜索</span>                                    TEST_join <span class="token comment" spellcheck="true">// 打印连接信息</span>                                    make_join_readinfo <span class="token comment" spellcheck="true">//细化查询计划</span>                                        init_join_cache <span class="token comment" spellcheck="true">//初始化连接缓存</span>                                        push_index_cond <span class="token comment" spellcheck="true">//下推索引条件（ICP）        </span>                                        pick_table_access_method <span class="token comment" spellcheck="true">//选择合适的数据读取方式</span>                            JOIN<span class="token operator">::</span>exec                                JOIN<span class="token operator">::</span>prepare_result <span class="token comment" spellcheck="true">//准备连接结果</span>                                send_result_set_metadata                                do_select                            st_select_lex_unit<span class="token operator">::</span>cleanup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-2、优化器的代码详解"><a href="#13-2、优化器的代码详解" class="headerlink" title="13.2、优化器的代码详解"></a>13.2、优化器的代码详解</h2><h3 id="13-2-1、SELECT-LEX-prepare：优化前的准备工作"><a href="#13-2-1、SELECT-LEX-prepare：优化前的准备工作" class="headerlink" title="13.2.1、SELECT_LEX::prepare：优化前的准备工作"></a>13.2.1、SELECT_LEX::prepare：优化前的准备工作</h3><h4 id="13-2-1-1、整体工作"><a href="#13-2-1-1、整体工作" class="headerlink" title="13.2.1.1、整体工作"></a>13.2.1.1、整体工作</h4><pre class="line-numbers language-cpp"><code class="language-cpp">setup_tables <span class="token comment" spellcheck="true">//初始化基表</span>check_view_privileges <span class="token comment" spellcheck="true">//权限检查</span>setup_wild <span class="token comment" spellcheck="true">//将查询语句中的*扩展为表上所有列</span>setup_fields <span class="token comment" spellcheck="true">//为列填充数据信息</span>setup_conds <span class="token comment" spellcheck="true">//解析where子句和连接条件</span>setup_group <span class="token comment" spellcheck="true">//初始化group by子句</span>setup_order <span class="token comment" spellcheck="true">//初始化order by子句</span>remove_redundant_subquery_clauses <span class="token comment" spellcheck="true">//去除子查询中的冗余子句</span>resolve_subquery <span class="token comment" spellcheck="true">//优化IN/ALL/ANY/EXISTS式子查询</span>split_sum_func2 <span class="token comment" spellcheck="true">//统计order by，having等子句中的sum操作  </span>flatten_subqueries<span class="token comment" spellcheck="true">//将子查询转换为半连接</span>apply_local_transforms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-2-1-2、remove-redundant-subquery-clauses"><a href="#13-2-1-2、remove-redundant-subquery-clauses" class="headerlink" title="13.2.1.2、remove_redundant_subquery_clauses"></a>13.2.1.2、remove_redundant_subquery_clauses</h4><p>MySQL定义的子查询类型如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">enum</span> subs_type <span class="token punctuation">{</span>UNKNOWN_SUBS<span class="token punctuation">,</span> SINGLEROW_SUBS<span class="token punctuation">,</span>          EXISTS_SUBS<span class="token punctuation">,</span> IN_SUBS<span class="token punctuation">,</span> ALL_SUBS<span class="token punctuation">,</span> ANY_SUBS<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>remove_redundant_subquery_clauses</code>的主要代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//用于去除冗余的orderby，distinct和group by子句</span><span class="token keyword">void</span> SELECT_LEX<span class="token operator">::</span><span class="token function">remove_redundant_subquery_clauses</span> <span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">,</span>                                                   <span class="token keyword">int</span> hidden_group_field_count<span class="token punctuation">,</span>                                                   <span class="token keyword">int</span> hidden_order_field_count<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subq_predicate<span class="token operator">-</span><span class="token operator">></span><span class="token function">substype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Item_subselect<span class="token operator">::</span>SINGLEROW_SUBS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不处理简单的行子查询</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//去除order by子句</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>order_list<span class="token punctuation">.</span>elements<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">empty_order_list</span><span class="token punctuation">(</span>hidden_order_field_count<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//去除distinct子句</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">remove_base_options</span><span class="token punctuation">(</span>SELECT_DISTINCT<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//去除group by子句（如果没有聚合函数和having子句）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>group_list<span class="token punctuation">.</span>elements <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">agg_func_used</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">having_cond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ORDER <span class="token operator">*</span>g<span class="token operator">=</span> group_list<span class="token punctuation">.</span>first<span class="token punctuation">;</span> g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> g<span class="token operator">=</span> g<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token operator">-</span><span class="token operator">></span>item <span class="token operator">==</span> g<span class="token operator">-</span><span class="token operator">></span>item_ptr<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token operator">-</span><span class="token operator">></span>item<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Item<span class="token operator">::</span>clean_up_after_removal<span class="token punctuation">,</span> walk_subquery<span class="token punctuation">,</span>                             <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>uchar<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        group_list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>hidden_group_field_count<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          all_fields<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ref_ptrs<span class="token punctuation">[</span>all_fields<span class="token punctuation">.</span>elements<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-2-1-3、resolve-subquery"><a href="#13-2-1-3、resolve-subquery" class="headerlink" title="13.2.1.3、resolve_subquery"></a>13.2.1.3、resolve_subquery</h4><p>主要用于对子查询进行各种优化，可优化方式如下：</p><ul><li>转换子查询为半连接</li><li>使用物化标识子查询</li><li>执行IN向EXISTS的转换</li><li>执行<op>ALL/ANY/SOME向MIN/MAX的转换，其中op为大于或小于操作</li><li>使用值替代标量子查询</li></ul><p>主要代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> SELECT_LEX<span class="token operator">::</span><span class="token function">resolve_subquery</span><span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>in_predicate<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//IN操作</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    如果左操作数和右操作数的列数量不同，报错退出函数      Check if the left and right expressions have the same # of      columns, i.e. we don't have a case like         (oe1, oe2) IN (SELECT ie1, ie2, ie3 ...)    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item_list<span class="token punctuation">.</span>elements <span class="token operator">!=</span> in_predicate<span class="token operator">-</span><span class="token operator">></span>left_expr<span class="token operator">-</span><span class="token operator">></span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">my_error</span><span class="token punctuation">(</span>ER_OPERAND_COLUMNS<span class="token punctuation">,</span> <span class="token function">MYF</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in_predicate<span class="token operator">-</span><span class="token operator">></span>left_expr<span class="token operator">-</span><span class="token operator">></span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*      如果满足以下10点，子查询就可以被扁平化为半连接操作（在flatten_subqueries函数里实现）    Check if we're in subquery that is a candidate for flattening into a    semi-join (which is done in flatten_subqueries()). The requirements are:      1. Subquery predicate is an IN/=ANY subquery predicate      2. Subquery is a single SELECT (not a UNION)      3. Subquery does not have GROUP BY      4. Subquery does not use aggregate functions or HAVING      5. Subquery predicate is (a) in an ON/WHERE clause, and (b) at      the AND-top-level of that clause.      6. Parent query block accepts semijoins (i.e we are not in a subquery of      a single table UPDATE/DELETE (TODO: We should handle this at some      point by switching to multi-table UPDATE/DELETE)      7. We're not in a confluent table-less subquery, like "SELECT 1".      8. No execution method was already chosen (by a prepared statement)      9. Parent select is not a confluent table-less select      10. Neither parent nor child select have STRAIGHT_JOIN option.  */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">semijoin_enabled</span><span class="token punctuation">(</span>thd<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      in_predicate <span class="token operator">&amp;&amp;</span>                                                   <span class="token comment" spellcheck="true">// 1</span>      <span class="token operator">!</span><span class="token function">is_part_of_union</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                                            <span class="token comment" spellcheck="true">// 2</span>      <span class="token operator">!</span>group_list<span class="token punctuation">.</span>elements <span class="token operator">&amp;&amp;</span>                                           <span class="token comment" spellcheck="true">// 3</span>      <span class="token operator">!</span>m_having_cond <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>with_sum_func <span class="token operator">&amp;&amp;</span>                               <span class="token comment" spellcheck="true">// 4</span>      <span class="token punctuation">(</span>outer<span class="token operator">-</span><span class="token operator">></span>resolve_place <span class="token operator">==</span> st_select_lex<span class="token operator">::</span>RESOLVE_CONDITION <span class="token operator">||</span>      <span class="token comment" spellcheck="true">// 5a</span>       outer<span class="token operator">-</span><span class="token operator">></span>resolve_place <span class="token operator">==</span> st_select_lex<span class="token operator">::</span>RESOLVE_JOIN_NEST<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     <span class="token comment" spellcheck="true">// 5a</span>      <span class="token operator">!</span>outer<span class="token operator">-</span><span class="token operator">></span>semijoin_disallowed <span class="token operator">&amp;&amp;</span>                                    <span class="token comment" spellcheck="true">// 5b</span>      outer<span class="token operator">-</span><span class="token operator">></span>sj_candidates <span class="token operator">&amp;&amp;</span>                                           <span class="token comment" spellcheck="true">// 6</span>      leaf_table_count <span class="token operator">&amp;&amp;</span>                                               <span class="token comment" spellcheck="true">// 7</span>      in_predicate<span class="token operator">-</span><span class="token operator">></span>exec_method <span class="token operator">==</span>                           Item_exists_subselect<span class="token operator">::</span>EXEC_UNSPECIFIED <span class="token operator">&amp;&amp;</span>   <span class="token comment" spellcheck="true">// 8</span>      outer<span class="token operator">-</span><span class="token operator">></span>leaf_table_count <span class="token operator">&amp;&amp;</span>                                        <span class="token comment" spellcheck="true">// 9</span>      <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">active_options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> outer<span class="token operator">-</span><span class="token operator">></span><span class="token function">active_options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>       SELECT_STRAIGHT_JOIN<span class="token punctuation">)</span><span class="token punctuation">)</span>                                           <span class="token comment" spellcheck="true">//10</span>  <span class="token punctuation">{</span>    <span class="token function">DBUG_PRINT</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Subquery is semi-join conversion candidate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Notify in the subquery predicate where it belongs in the query graph */</span>    in_predicate<span class="token operator">-</span><span class="token operator">></span>embedding_join_nest<span class="token operator">=</span> outer<span class="token operator">-</span><span class="token operator">></span>resolve_nest<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Register the subquery for further processing in flatten_subqueries() */</span>    outer<span class="token operator">-</span><span class="token operator">></span>sj_candidates<span class="token operator">-</span><span class="token operator">></span><span class="token function">push_back</span><span class="token punctuation">(</span>in_predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    chose_semijoin<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//如果不可以使用半连接优化，调用select_transformer->select_in_like_transformer函数进行子查询优化(IN/ALL/ANY/SOME)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chose_semijoin <span class="token operator">&amp;&amp;</span> subq_predicate<span class="token operator">-</span><span class="token operator">></span><span class="token function">select_transformer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">==</span> Item_subselect<span class="token operator">::</span>RES_ERROR<span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-2-1-4、flatten-subqueries：转换子查询为半连接"><a href="#13-2-1-4、flatten-subqueries：转换子查询为半连接" class="headerlink" title="13.2.1.4、flatten_subqueries：转换子查询为半连接"></a>13.2.1.4、flatten_subqueries：转换子查询为半连接</h4><p>即把子查询的表对象上拉到from子句，让from子句原先的表对象和子查询中被上拉的表对象进行半连接操作，从而达到扁平化子查询的效果</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519110113223.png" alt="image-20210519110113223"></p><p>上面格式的语句可以优化为下面格式语句</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519110138660.png" alt="image-20210519110138660"></p><p>转换后，经过条件替换函数replace_subcondition的处理，条件部分发生了较大变化（如subq_where合并到父查询的where子句中，生成新条件oe=ie）。</p><p>flatten_subqueries实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> SELECT_LEX<span class="token operator">::</span><span class="token function">flatten_subqueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、自底向上，转换各子句中存在的子查询</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>subq<span class="token operator">=</span> subq_begin<span class="token punctuation">;</span> subq <span class="token operator">&lt;</span> subq_end<span class="token punctuation">;</span> subq<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//目前版本（5.7.19）仅支持IN格式的子查询</span>        <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">substype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Item_subselect<span class="token operator">::</span>IN_SUBS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得子句中的查询语句</span>        st_select_lex <span class="token operator">*</span>child_select<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check that we proceeded bottom-up</span>        <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span>child_select<span class="token operator">-</span><span class="token operator">></span>sj_candidates <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>sj_convert_priority<span class="token operator">=</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span>uncacheable <span class="token operator">&amp;</span> UNCACHEABLE_DEPENDENT<span class="token punctuation">)</span> <span class="token operator">?</span> MAX_TABLES <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span>          child_select<span class="token operator">-</span><span class="token operator">></span>leaf_table_count<span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*    2、对子查询进行转换，转换前先排序，排序规则是：    1)相关子查询比不相关子查询靠前    2）有更多外表的子查询靠前    */</span>    <span class="token comment" spellcheck="true">//2.1、排序</span>    <span class="token function">my_qsort</span><span class="token punctuation">(</span>subq_begin<span class="token punctuation">,</span>           sj_candidates<span class="token operator">-</span><span class="token operator">></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sj_candidates<span class="token operator">-</span><span class="token operator">></span><span class="token function">element_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>qsort_cmp<span class="token operator">></span><span class="token punctuation">(</span>subq_sj_candidate_cmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint table_count<span class="token operator">=</span> leaf_table_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.2、对排好序的所有子查询进行转换前的准备工作：条件替换</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>subq<span class="token operator">=</span> subq_begin<span class="token punctuation">;</span> subq <span class="token operator">&lt;</span> subq_end<span class="token punctuation">;</span> subq<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Add the tables in the subquery nest plus one in case of materialization:</span>        <span class="token keyword">const</span> uint tables_added<span class="token operator">=</span>          <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>leaf_table_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>sj_chosen<span class="token operator">=</span> table_count <span class="token operator">+</span> tables_added <span class="token operator">&lt;=</span> MAX_TABLES<span class="token punctuation">;</span>        table_count<span class="token operator">+</span><span class="token operator">=</span> tables_added<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// In WHERE/ON of parent query, replace IN(subq) with "1" (&lt;=>TRUE)</span>        Item <span class="token operator">*</span><span class="token operator">*</span>tree<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>embedding_join_nest <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span>                     <span class="token operator">&amp;</span>m_where_cond <span class="token operator">:</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>embedding_join_nest<span class="token operator">-</span><span class="token operator">></span><span class="token function">join_cond_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">replace_subcondition</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token operator">*</span>subq<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">Item_int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* purecov: inspected */</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.3、对所有排好序的子查询进行转换</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>subq<span class="token operator">=</span> subq_begin<span class="token punctuation">;</span> subq <span class="token operator">&lt;</span> subq_end<span class="token punctuation">;</span> subq<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>sj_chosen<span class="token punctuation">)</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">OPT_TRACE_TRANSFORM</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> oto0<span class="token punctuation">,</span> oto1<span class="token punctuation">,</span>                            <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>select_number<span class="token punctuation">,</span>                            <span class="token string">"IN (SELECT)"</span><span class="token punctuation">,</span> <span class="token string">"semijoin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oto1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"chosen"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">convert_subquery_to_semijoin</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3、对于第2步不能通过convert_subquery_to_semijoin函数处理的子查询，将IN转换为EXISTS格式</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>subq<span class="token operator">=</span> subq_begin<span class="token punctuation">;</span> subq <span class="token operator">&lt;</span> subq_end<span class="token punctuation">;</span> subq<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    SELECT_LEX <span class="token operator">*</span>save_select_lex<span class="token operator">=</span> thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">current_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_current_select</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实现每个子查询中的优化</span>    res<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select_transformer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>unit<span class="token operator">-</span><span class="token operator">></span><span class="token function">first_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_current_select</span><span class="token punctuation">(</span>save_select_lex<span class="token punctuation">)</span><span class="token punctuation">;</span>    Item <span class="token operator">*</span><span class="token operator">*</span>tree<span class="token operator">=</span> subquery_in_join_clause <span class="token operator">?</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>subq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>embedding_join_nest<span class="token operator">-</span><span class="token operator">></span><span class="token function">join_cond_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">&amp;</span>m_where_cond<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将IN转换为EXISTS格式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">replace_subcondition</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token operator">*</span>subq<span class="token punctuation">,</span> substitute<span class="token punctuation">,</span> do_fix_fields<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-2-1-5、select-transformer：子查询优化"><a href="#13-2-1-5、select-transformer：子查询优化" class="headerlink" title="13.2.1.5、select_transformer：子查询优化"></a>13.2.1.5、select_transformer：子查询优化</h4><p>select_transformer是父类Item_subselect的一个方法，被4个子类Item_singlerow_subselect、Item_in_subselect、Item_allany_subselect、Item_exists_subselect继承，根据具体类型实现各自的优化。其内部是调用select_in_like_transformer函数来完成子查询的优化的</p><p>select_in_like_transformer的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Item_subselect<span class="token operator">::</span>trans_resItem_in_subselect<span class="token operator">::</span><span class="token function">select_in_like_transformer</span><span class="token punctuation">(</span>SELECT_LEX <span class="token operator">*</span>select<span class="token punctuation">,</span>                                              Comp_creator <span class="token operator">*</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果子查询对应优化器不存在，创建一个优化器</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optimizer<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    Prepared_stmt_arena_holder <span class="token function">ps_arena_holder</span><span class="token punctuation">(</span>thd<span class="token punctuation">)</span><span class="token punctuation">;</span>    optimizer<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Item_in_optimizer</span><span class="token punctuation">(</span>left_expr<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_current_select</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//如果IN谓词的左操作数只有一列，则认为是标量IN子查询</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left_expr<span class="token operator">-</span><span class="token operator">></span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>      res<span class="token operator">=</span> <span class="token function">single_value_transformer</span><span class="token punctuation">(</span>select<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* we do not support row operation for ALL/ANY/SOME */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>func <span class="token operator">!=</span> <span class="token operator">&amp;</span>eq_creator<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">my_error</span><span class="token punctuation">(</span>ER_OPERAND_COLUMNS<span class="token punctuation">,</span> <span class="token function">MYF</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>RES_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//否则则认为是行式IN子查询</span>      res<span class="token operator">=</span> <span class="token function">row_value_transformer</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>                                            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-2、JOIN-optimize：优化器的主入口方法"><a href="#13-2-2、JOIN-optimize：优化器的主入口方法" class="headerlink" title="13.2.2、JOIN::optimize：优化器的主入口方法"></a>13.2.2、JOIN::optimize：优化器的主入口方法</h3><p>包括逻辑查询优化和物理查询优化，得到最终查询执行计划。实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> JOIN<span class="token operator">::</span><span class="token function">optimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    apply_local_transforms <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将外连接转换为内连接（递归调用）</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">simplify_joins</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>top_join_list<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m_where_cond<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录连接的嵌套信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">record_join_nest_info</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>top_join_list<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给每个嵌套连接分配一个bit位，构建bitmap</span>        <span class="token function">build_bitmap_for_nested_joins</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>top_join_list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对查询语句中的临时关系或视图对象，使用optimize_derived函数创建临时表或物化临时关系，便于后续使用</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>select_lex<span class="token operator">-</span><span class="token operator">></span>materialized_derived_table_count<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>TABLE_LIST <span class="token operator">*</span>tl<span class="token operator">=</span> select_lex<span class="token operator">-</span><span class="token operator">></span>leaf_tables<span class="token punctuation">;</span> tl<span class="token punctuation">;</span> tl<span class="token operator">=</span> tl<span class="token operator">-</span><span class="token operator">></span>next_leaf<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tl<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_view_or_derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tl<span class="token operator">-</span><span class="token operator">></span><span class="token function">optimize_derived</span><span class="token punctuation">(</span>thd<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//优化where子句</span>    <span class="token function">optimize_cond</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>where_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cond_equal<span class="token punctuation">,</span>                      <span class="token operator">&amp;</span>select_lex<span class="token operator">-</span><span class="token operator">></span>top_join_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>select_lex<span class="token operator">-</span><span class="token operator">></span>cond_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//优化having子句</span>    <span class="token function">optimize_cond</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>having_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cond_equal<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                      <span class="token operator">&amp;</span>select_lex<span class="token operator">-</span><span class="token operator">></span>having_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对没有group子句且调用了count(*), min() and max()函数的情况进行优化</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tables_list <span class="token operator">&amp;&amp;</span> implicit_grouping<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//对每个单表（叶子表）上满足上述条件的情况进行优化</span>          <span class="token function">opt_sum_query</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> select_lex<span class="token operator">-</span><span class="token operator">></span>leaf_tables<span class="token punctuation">,</span> all_fields<span class="token punctuation">,</span>                            where_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算最优连接次序，初始化JOIN对象</span>    <span class="token function">make_join_plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//小优化：对常量表提前解锁</span>    <span class="token function">mysql_unlock_some_tables</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> ct<span class="token punctuation">,</span> const_tables<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//化简条件和每个表上的冗余等式</span>    <span class="token function">substitute_for_best_equal_field</span><span class="token punctuation">(</span>where_cond<span class="token punctuation">,</span> cond_equal<span class="token punctuation">,</span> map2table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对条件尽量求值，并下推约束条件到表中</span>    <span class="token function">make_join_select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> where_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//排序操作的优化</span>   optimize_distinct_group_order <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test_if_skip_sort_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//优化全文搜索</span>    <span class="token function">optimize_fts_query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为各种类型的表数据获取做准备工作</span>    <span class="token function">make_join_readinfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> no_jbuf_after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化临时表</span>    <span class="token function">make_tmp_tables_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-3、JOIN-make-join-plan：计算最优的查询优化执行计划"><a href="#13-2-3、JOIN-make-join-plan：计算最优的查询优化执行计划" class="headerlink" title="13.2.3、JOIN::make_join_plan：计算最优的查询优化执行计划"></a>13.2.3、JOIN::make_join_plan：计算最优的查询优化执行计划</h3><p>实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> JOIN<span class="token operator">::</span><span class="token function">make_join_plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化连接次序优化的临时数组</span>    <span class="token function">init_planner_arrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//求解传播表之间的依赖关系</span>    <span class="token function">propagate_dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将表之间的依赖关系写到优化器跟踪信息里</span>    <span class="token function">trace_table_dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取索引信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>where_cond <span class="token operator">||</span> select_lex<span class="token operator">-</span><span class="token operator">></span>outer_join<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">update_ref_and_keys</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>keyuse_array<span class="token punctuation">,</span> join_tab<span class="token punctuation">,</span> tables<span class="token punctuation">,</span> where_cond<span class="token punctuation">,</span>                            cond_equal<span class="token punctuation">,</span> <span class="token operator">~</span>select_lex<span class="token operator">-</span><span class="token operator">></span>outer_join<span class="token punctuation">,</span> select_lex<span class="token punctuation">,</span>                            <span class="token operator">&amp;</span>sargables<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//基于表之间的依赖关系，可以把一些用于半连接计算的表拉到上层，避开用半连接计算</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>select_lex<span class="token operator">-</span><span class="token operator">></span>sj_pullout_done <span class="token operator">&amp;&amp;</span> select_lex<span class="token operator">-</span><span class="token operator">></span>sj_nests<span class="token punctuation">.</span>elements <span class="token operator">&amp;&amp;</span>      <span class="token function">pull_out_semijoin_tables</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//基于行数提取常量表</span>    <span class="token function">extract_const_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//基于函数依赖提取常量表</span>    <span class="token function">extract_func_dependent_tables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">estimate_rowcount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>JOIN_TAB <span class="token operator">*</span>tab<span class="token operator">=</span> join_tab<span class="token punctuation">;</span> tab <span class="token operator">&lt;</span> tab_end<span class="token punctuation">;</span> tab<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token keyword">const</span> Cost_model_table <span class="token operator">*</span><span class="token keyword">const</span> cost_model<span class="token operator">=</span> tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果是常量表，元组数最多是1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> JT_SYSTEM <span class="token operator">||</span> tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> JT_CONST<span class="token punctuation">)</span>            <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Only one matching row and one block to read</span>          tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_records</span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>found_records<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token operator">=</span> cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tab<span class="token operator">-</span><span class="token operator">></span>read_time<span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>ha_rows<span class="token operator">></span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//计算非常量表的元组数、获取数据的时间花费和最坏搜索因子</span>            tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_records</span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>found_records<span class="token operator">=</span> tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>stats<span class="token punctuation">.</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> Cost_estimate table_scan_time<span class="token operator">=</span> tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">table_scan_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tab<span class="token operator">-</span><span class="token operator">></span>read_time<span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>ha_rows<span class="token operator">></span><span class="token punctuation">(</span>table_scan_time<span class="token punctuation">.</span><span class="token function">total_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token operator">=</span>              <span class="token function">min</span><span class="token punctuation">(</span>cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> tab<span class="token operator">-</span><span class="token operator">></span>found_records <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> tab<span class="token operator">-</span><span class="token operator">></span>read_time <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token keyword">double</span> min_worst_seek<span class="token operator">=</span> cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks <span class="token operator">&lt;</span> min_worst_seek<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Fix for small tables</span>              tab<span class="token operator">-</span><span class="token operator">></span>worst_seeks<span class="token operator">=</span> min_worst_seek<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果有group和distinct子句，则为这些操作所在的列确定是否有索引可用</span>            <span class="token function">add_group_and_distinct_keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果可以执行范围扫描，则重新计算元组数、获取数据的时间花费</span>            TABLE_LIST <span class="token operator">*</span><span class="token keyword">const</span> tl<span class="token operator">=</span> tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tab<span class="token operator">-</span><span class="token operator">></span>const_keys<span class="token punctuation">.</span><span class="token function">is_clear_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token comment" spellcheck="true">// (1)</span>                <span class="token punctuation">(</span><span class="token operator">!</span>tl<span class="token operator">-</span><span class="token operator">></span>embedding <span class="token operator">||</span>                                        <span class="token comment" spellcheck="true">// (2)</span>                 <span class="token punctuation">(</span>tl<span class="token operator">-</span><span class="token operator">></span>embedding <span class="token operator">&amp;&amp;</span> tl<span class="token operator">-</span><span class="token operator">></span>embedding<span class="token operator">-</span><span class="token operator">></span><span class="token function">sj_cond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// (3)</span>            <span class="token punctuation">{</span>              ha_rows records<span class="token operator">=</span> <span class="token function">get_quick_record_count</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> tab<span class="token punctuation">,</span> row_limit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>           <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//否则执行全表扫描</span>              <span class="token function">Opt_trace_object</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> <span class="token string">"table_scan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span> tab<span class="token operator">-</span><span class="token operator">></span>found_records<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">,</span> tab<span class="token operator">-</span><span class="token operator">></span>read_time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//为了利用好索引，对索引对象上的keyuse值进行更新</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">plan_is_const</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">optimize_keyuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用物化技术优化半连接嵌套</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sj_nests <span class="token operator">&amp;&amp;</span> <span class="token function">optimize_semijoin_nests_for_materialization</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择多表连接算法（有两个，一是使用用户指定的连接次序，二是使用贪心算法进行穷举搜索）</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Optimize_table_order</span><span class="token punctuation">(</span>thd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">choose_table_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//决定子查询的优化策略（IN->EXISTS和物化二选一）</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>unit<span class="token operator">-</span><span class="token operator">></span>item <span class="token operator">&amp;&amp;</span> <span class="token function">decide_subquery_strategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">//根据choose_table_order得到的最优路径生成执行计划</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_best_combination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-4、choose-table-order：求解多表连接最优连接路径"><a href="#13-2-4、choose-table-order：求解多表连接最优连接路径" class="headerlink" title="13.2.4、choose_table_order：求解多表连接最优连接路径"></a>13.2.4、choose_table_order：求解多表连接最优连接路径</h3><p>choose_table_order函数选择一个算法求解最优路径，实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> Optimize_table_order<span class="token operator">::</span><span class="token function">choose_table_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果全是常量表，不用做多表连接的优化</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>const_tables <span class="token operator">==</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>best_positions<span class="token punctuation">,</span> join<span class="token operator">-</span><span class="token operator">></span>positions<span class="token punctuation">,</span>       <span class="token keyword">sizeof</span><span class="token punctuation">(</span>POSITION<span class="token punctuation">)</span> <span class="token operator">*</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">)</span><span class="token punctuation">;</span>    join<span class="token operator">-</span><span class="token operator">></span>best_read<span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    join<span class="token operator">-</span><span class="token operator">></span>best_rowcount<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确定是否采用SQL语句指定的次序（SQL中通过hit指定straight join）来生成多表连接执行计划</span>    <span class="token keyword">const</span> <span class="token keyword">bool</span> straight_join<span class="token operator">=</span>join<span class="token operator">-</span><span class="token operator">></span>select_lex<span class="token operator">-</span><span class="token operator">></span><span class="token function">active_options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> SELECT_STRAIGHT_JOIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果存在半连接，则采用物化方法进行优化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>emb_sjm_nest<span class="token punctuation">)</span>      <span class="token punctuation">{</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">,</span>               join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">,</span>               <span class="token function">Join_tab_compare_embedded_first</span><span class="token punctuation">(</span>emb_sjm_nest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    join_tables<span class="token operator">=</span> emb_sjm_nest<span class="token operator">-</span><span class="token operator">></span>sj_inner_tables<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//否则，需要对多表连接进行优化求解最优路径</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用用户指定的表连接次序对表排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>straight_join<span class="token punctuation">)</span>          <span class="token function">merge_sort</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">,</span>                     join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">,</span>                     <span class="token function">Join_tab_compare_straight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//否则使用贪心算法，在这之前需要对表进行排序。排序规则是按照表的元组数从小到大排序（这是一条启发式规则）</span>          <span class="token function">merge_sort</span><span class="token punctuation">(</span>join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">,</span>                     join<span class="token operator">-</span><span class="token operator">></span>best_ref <span class="token operator">+</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">,</span>                     <span class="token function">Join_tab_compare_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//所有基表去掉常量表就是要连接的表</span>        join_tables<span class="token operator">=</span> join<span class="token operator">-</span><span class="token operator">></span>all_table_map <span class="token operator">&amp;</span> <span class="token operator">~</span>join<span class="token operator">-</span><span class="token operator">></span>const_table_map<span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>straight_join<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果使用用户指定次序连接，查询优化器不再优化</span>            <span class="token function">optimize_straight_join</span><span class="token punctuation">(</span>join_tables<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//否则使用贪心算法进行搜索</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">greedy_search</span><span class="token punctuation">(</span>join_tables<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改半连接策略并估算花费</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fix_semijoin_strategies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-5、make-join-select：对条件求值，下推连接条件到表中"><a href="#13-2-5、make-join-select：对条件求值，下推连接条件到表中" class="headerlink" title="13.2.5、make_join_select：对条件求值，下推连接条件到表中"></a>13.2.5、make_join_select：对条件求值，下推连接条件到表中</h3><p>make_join_select函数主要用于分解连接条件（where和on等条件），下推连接条件到表中，实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">make_join_select</span><span class="token punctuation">(</span>JOIN <span class="token operator">*</span>join<span class="token punctuation">,</span> Item <span class="token operator">*</span>cond<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、优化点：把列上的非NULL语义加入到条件中，有利于条件判断（语义优化技术）</span>    <span class="token function">add_not_null_conds</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、抽取表达式中的常量</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token punctuation">{</span>         const_cond<span class="token operator">=</span> <span class="token function">make_cond_for_table</span><span class="token punctuation">(</span>cond<span class="token punctuation">,</span> join<span class="token operator">-</span><span class="token operator">></span>const_table_map<span class="token punctuation">,</span>                                    <span class="token punctuation">(</span>table_map<span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">and_conditions</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>const_cond<span class="token punctuation">,</span> join<span class="token operator">-</span><span class="token operator">></span>best_ref<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//3、遍历每个表，对可能的条件进行下推</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>uint i<span class="token operator">=</span>join<span class="token operator">-</span><span class="token operator">></span>const_tables <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> join<span class="token operator">-</span><span class="token operator">></span>tables <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Item <span class="token operator">*</span>push_cond<span class="token operator">=</span> <span class="token function">make_cond_for_table</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token operator">-</span><span class="token operator">></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tab<span class="token operator">-</span><span class="token operator">></span>table_ref<span class="token operator">-</span><span class="token operator">></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>push_cond<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">cond_push</span><span class="token punctuation">(</span>push_cond<span class="token punctuation">)</span><span class="token punctuation">)</span>                tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>pushed_cond<span class="token operator">=</span> push_cond<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-6、make-join-readinfo：为连接的每个表构造信息"><a href="#13-2-6、make-join-readinfo：为连接的每个表构造信息" class="headerlink" title="13.2.6、make_join_readinfo：为连接的每个表构造信息"></a>13.2.6、make_join_readinfo：为连接的每个表构造信息</h3><p>make_join_readinfo函数用于确认连接是否要排序，并建立半连接的消除重复的策略；为连接中的每个非常量表增加缓存、下推索引条件等方式的信息处理。实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">make_join_readinfo</span><span class="token punctuation">(</span>JOIN <span class="token operator">*</span>join<span class="token punctuation">,</span> uint no_jbuf_after<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//建立半连接重复元组消除策略</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setup_semijoin_dups_elimination</span><span class="token punctuation">(</span>join<span class="token punctuation">,</span> no_jbuf_after<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>uint i<span class="token operator">=</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> join<span class="token operator">-</span><span class="token operator">></span>tables<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">use_join_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> JOIN_CACHE<span class="token operator">::</span>ALG_NONE<span class="token punctuation">)</span>                  qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">init_join_cache</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化连接缓存对象</span>          <span class="token keyword">switch</span> <span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> JT_EQ_REF<span class="token operator">:</span>            <span class="token keyword">case</span> JT_REF_OR_NULL<span class="token operator">:</span>            <span class="token keyword">case</span> JT_REF<span class="token operator">:</span>            <span class="token keyword">case</span> JT_SYSTEM<span class="token operator">:</span>            <span class="token keyword">case</span> JT_CONST<span class="token operator">:</span>               <span class="token comment" spellcheck="true">//如果有索引可用，直接使用索引</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">.</span><span class="token function">is_set</span><span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token operator">!</span>table<span class="token operator">-</span><span class="token operator">></span>no_keyread<span class="token punctuation">)</span>                table<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_keyread</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">else</span><span class="token comment" spellcheck="true">//下推索引条件，可以快速获取单表数据</span>                qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">push_index_cond</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>trace_refine_table<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> JT_ALL<span class="token operator">:</span>              join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_status_no_index_used</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* Fall through */</span>            <span class="token keyword">case</span> JT_INDEX_SCAN<span class="token operator">:</span>               <span class="token comment" spellcheck="true">//动态快速扫描</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span>use_quick <span class="token operator">==</span> QS_DYNAMIC_RANGE<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_status_no_good_index_used</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>statistics<span class="token punctuation">)</span>                  join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_range_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span>              <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>statistics<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">)</span>                          join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">else</span>                          join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_full_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> JT_RANGE<span class="token operator">:</span>            <span class="token keyword">case</span> JT_INDEX_MERGE<span class="token operator">:</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>statistics<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> join<span class="token operator">-</span><span class="token operator">></span>const_tables<span class="token punctuation">)</span>                  join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                  join<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">inc_status_select_full_range_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token operator">-</span><span class="token operator">></span>no_keyread <span class="token operator">&amp;&amp;</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> JT_RANGE<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">.</span><span class="token function">is_set</span><span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>index <span class="token operator">!=</span> MAX_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>                  table<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_keyread</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token operator">-</span><span class="token operator">></span>key_read<span class="token punctuation">)</span>                  qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">push_index_cond</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span>                                           <span class="token operator">&amp;</span>trace_refine_table<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>filter_effect <span class="token operator">!=</span> COND_FILTER_STALE_NO_CONST<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                <span class="token keyword">double</span> rows_w_const_cond<span class="token operator">=</span> qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>rows_fetched<span class="token punctuation">;</span>                qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>rows_fetched<span class="token operator">=</span> <span class="token function">rows2double</span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>filter_effect <span class="token operator">!=</span> COND_FILTER_STALE<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// Constant condition moves to filter_effect:</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>rows_fetched <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// avoid division by zero</span>                    tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>filter_effect<span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>                  <span class="token keyword">else</span>                    tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>filter_effect<span class="token operator">*</span><span class="token operator">=</span>                      <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span>rows_w_const_cond<span class="token operator">/</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>rows_fetched<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> JT_FT<span class="token operator">:</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fts_index_access</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                table<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_keyread</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                table<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">.</span><span class="token function">set_bit</span><span class="token punctuation">(</span>tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">ft_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>              <span class="token function">DBUG_PRINT</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"Table type %d found"</span><span class="token punctuation">,</span>qep_tab<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* purecov: deadcode */</span>              <span class="token function">DBUG_ASSERT</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* purecov: deadcode */</span>           <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-7、JOIN-exec：执行查询执行计划"><a href="#13-2-7、JOIN-exec：执行查询执行计划" class="headerlink" title="13.2.7、JOIN::exec：执行查询执行计划"></a>13.2.7、JOIN::exec：执行查询执行计划</h3><p>JOIN::exec函数根据查询执行计划，完成SQL语句的执行。实现如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> JOIN<span class="token operator">::</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//准备连接结果</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">prepare_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        DBUG_VOID_RETURN<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    query_result<span class="token operator">-</span><span class="token operator">></span><span class="token function">send_result_set_metadata</span><span class="token punctuation">(</span><span class="token operator">*</span>fields<span class="token punctuation">,</span>Protocol<span class="token operator">::</span>SEND_NUM_ROWS <span class="token operator">|</span> Protocol<span class="token operator">::</span>SEND_EOF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//完成执行</span>      error<span class="token operator">=</span> <span class="token function">do_select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-3、代价估算"><a href="#13-3、代价估算" class="headerlink" title="13.3、代价估算"></a>13.3、代价估算</h2><p>MySQL代价估算属于物理优化的范畴，是比较多表连接路径优劣的重要依据，计算的过程依赖统计模块提供的统计信息。</p><h3 id="13-3-1、查询代价估算模型"><a href="#13-3-1、查询代价估算模型" class="headerlink" title="13.3.1、查询代价估算模型"></a>13.3.1、查询代价估算模型</h3><p>MySQL使用代价估算公式 Cost = io_cost + cpu_cost + import_cost，对单个对象的某种扫描方式的花费进行了计算，整体上考虑IO，CPU和远程操作代价。</p><p>MySQL认为，多表连接找出每个表的最小花费就能得到最终连接的最小花费。因为多个表之间按照一定规则排好序（常量表在前，其他表按照元组数从小到大排序）。因此，MySQL代价估算的重点，在于单表扫描的花费（best_access_path）。</p><p>单表扫描分为索引扫描和全表扫描。对于全表扫描，主要涉及CPU和IO花费（计算公式为：所有元组 * 每个元组CPU花费 + 所有元组 * 每个元组IO花费）；</p><p>对于索引扫描，分解点有两个，一个是比较符，一个是索引类型。比较符分为等值比较（操作符为=或者IN）和范围比较（操作符为&lt;, &gt;, BETWEEN等）；索引类型根据是否唯一等情况进行划分。</p><p>因此MySQL的代价估算重点应该是<strong>计算基于索引的单表扫描在范围操作符作用下IO和CPU的花费。（best_access_path函数，还没细看）</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519173443006.png" alt="image-20210519173443006"></p><h3 id="13-3-2、查询代价估算过程"><a href="#13-3-2、查询代价估算过程" class="headerlink" title="13.3.2、查询代价估算过程"></a>13.3.2、查询代价估算过程</h3><p>MySQL的查询优化器，代价估算分为以下两个阶段：</p><ul><li>多表连接阶段：依据代价估算模型，求解最优的连接顺序</li><li>多表连接之后：对连接树上的每个表进行进一步计算，找出每个表的最优访问方式</li></ul><h4 id="13-3-2-1、多表连接阶段代价估算过程"><a href="#13-3-2-1、多表连接阶段代价估算过程" class="headerlink" title="13.3.2.1、多表连接阶段代价估算过程"></a>13.3.2.1、多表连接阶段代价估算过程</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519175100027.png" alt="image-20210519175100027"></p><h4 id="13-3-2-2、多表连接之后局部代价估算过程"><a href="#13-3-2-2、多表连接之后局部代价估算过程" class="headerlink" title="13.3.2.2、多表连接之后局部代价估算过程"></a>13.3.2.2、多表连接之后局部代价估算过程</h4><p>多表连接阶段已经确定了多表的连接顺序，查询执行计划基本完成。但是对部分表的扫描还可以优化，重新确认扫描方式。这个是在make_join_select函数查询优化器阶段后期。需要重新扫描的情况有如下两种：</p><p>第一种情况：</p><ul><li>存在使得范围优化器可用的条件</li><li>在一个或多个索引上存在非常量条件</li><li>部分非常量的列被读取过</li></ul><p>第二种情况：</p><ul><li>条件仅依赖常量</li><li>第一个非常量表</li><li>语句中含有LIMIT子句使得多表连接时对表的函数估算不正确</li><li>查询没有使用FOUND_ROWS()方式执行（SQL中指定了SQL_CALC_FOUND_ROWS）</li></ul><p>多表连接之后，通过调用make_join_select函数对满足上述情况的部分表重新扫描计算其花费，找出最优的。此时是对已经确定执行顺序的查询执行计划做进一步的局部优化，如下图：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210519180752524.png" alt="image-20210519180752524"></p><h3 id="13-3-3、其他的代价估算"><a href="#13-3-3、其他的代价估算" class="headerlink" title="13.3.3、其他的代价估算"></a>13.3.3、其他的代价估算</h3><h4 id="13-3-3-1、check-quick-select：计算基于索引做范围扫描的代价"><a href="#13-3-3-1、check-quick-select：计算基于索引做范围扫描的代价" class="headerlink" title="13.3.3.1、check_quick_select：计算基于索引做范围扫描的代价"></a>13.3.3.1、check_quick_select：计算基于索引做范围扫描的代价</h4><p>check_quick_select函数用于依据给定的索引（参数tree上的idx位置）做范围扫描，计算所能获得的元组个数和花费等。实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span>ha_rows <span class="token function">check_quick_select</span><span class="token punctuation">(</span>PARAM <span class="token operator">*</span>param<span class="token punctuation">,</span> uint idx<span class="token punctuation">,</span> <span class="token keyword">bool</span> index_only<span class="token punctuation">,</span>                           SEL_ARG <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">bool</span> update_tbl_stats<span class="token punctuation">,</span>                                       uint <span class="token operator">*</span>mrr_flags<span class="token punctuation">,</span> uint <span class="token operator">*</span>bufsize<span class="token punctuation">,</span> Cost_estimate <span class="token operator">*</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传递信息到seq，通过seq把check_quick_select的参数传到multi_range_read_info_const函数里</span>    seq<span class="token punctuation">.</span>keyno<span class="token operator">=</span> idx<span class="token punctuation">;</span>    seq<span class="token punctuation">.</span>real_keyno<span class="token operator">=</span> keynr<span class="token punctuation">;</span>    seq<span class="token punctuation">.</span>start<span class="token operator">=</span> tree<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//确定是使用索引的统计信息（index statistics）还是索引的精确信息（index dives）</span>    param<span class="token operator">-</span><span class="token operator">></span>use_index_statistics<span class="token operator">=</span>     <span class="token function">eq_ranges_exceeds_limit</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token operator">&amp;</span>range_count<span class="token punctuation">,</span>                             param<span class="token operator">-</span><span class="token operator">></span>thd<span class="token operator">-</span><span class="token operator">></span>variables<span class="token punctuation">.</span>eq_range_index_dive_limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//基于ROR进行扫描</span>    param<span class="token operator">-</span><span class="token operator">></span>is_ror_scan<span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    HA_KEY_SCAN_NOT_ROR表示哈希索引扫描不能返回按rowid有序的记录    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">index_flags</span><span class="token punctuation">(</span>keynr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TRUE<span class="token punctuation">)</span> <span class="token operator">&amp;</span> HA_KEY_SCAN_NOT_ROR<span class="token punctuation">)</span>        param<span class="token operator">-</span><span class="token operator">></span>is_ror_scan<span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对索引的扫描利用MRR方式（优化外存的读取，使得批量读取的读取位置有序，保障磁盘磁头不是无序运动）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token operator">-</span><span class="token operator">></span>order_direction <span class="token operator">!=</span> ORDER<span class="token operator">::</span>ORDER_NOT_RELEVANT<span class="token punctuation">)</span>        <span class="token operator">*</span>mrr_flags<span class="token operator">|</span><span class="token operator">=</span> HA_MRR_SORTED<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//根据索引利用MRR技术，获取行数、花费等信息</span>    rows<span class="token operator">=</span> file<span class="token operator">-</span><span class="token operator">></span><span class="token function">multi_range_read_info_const</span><span class="token punctuation">(</span>keynr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>seq_if<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>seq<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bufsize<span class="token punctuation">,</span> mrr_flags<span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-3-3-2、test-quick-select：快速获取数据方式的代价计算"><a href="#13-3-3-2、test-quick-select：快速获取数据方式的代价计算" class="headerlink" title="13.3.3.2、test_quick_select：快速获取数据方式的代价计算"></a>13.3.3.2、test_quick_select：快速获取数据方式的代价计算</h4><p>test_quick_select函数为MySQL获取数据提供了一种快速获取数据的方式，方便MySQL判断表上的数据量。实现代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">test_quick_select</span><span class="token punctuation">(</span>THD <span class="token operator">*</span>thd<span class="token punctuation">,</span> key_map keys_to_use<span class="token punctuation">,</span>                      table_map prev_tables<span class="token punctuation">,</span>                      ha_rows limit<span class="token punctuation">,</span> <span class="token keyword">bool</span> force_quick_range<span class="token punctuation">,</span>                      <span class="token keyword">const</span> ORDER<span class="token operator">::</span>enum_order interesting_order<span class="token punctuation">,</span>                      <span class="token keyword">const</span> QEP_shared_owner <span class="token operator">*</span>tab<span class="token punctuation">,</span>                      Item <span class="token operator">*</span>cond<span class="token punctuation">,</span>                      key_map <span class="token operator">*</span>needed_reg<span class="token punctuation">,</span>                      QUICK_SELECT_I <span class="token operator">*</span><span class="token operator">*</span>quick<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始的代价计算</span>     <span class="token keyword">double</span> scan_time<span class="token operator">=</span>cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      Cost_estimate cost_est<span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">table_scan_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cost_est<span class="token punctuation">.</span><span class="token function">add_io</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cost_est<span class="token punctuation">.</span><span class="token function">add_cpu</span><span class="token punctuation">(</span>scan_time<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>force_index<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        scan_time<span class="token operator">=</span> DBL_MAX<span class="token punctuation">;</span>        cost_est<span class="token punctuation">.</span><span class="token function">set_max_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">&lt;</span> records<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        cost_est<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Force to use index</span>        cost_est<span class="token punctuation">.</span><span class="token function">add_io</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span><span class="token function">cost_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">page_read_cost</span><span class="token punctuation">(</span>          <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cost_est<span class="token punctuation">.</span><span class="token function">add_cpu</span><span class="token punctuation">(</span>scan_time<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cost_est<span class="token punctuation">.</span><span class="token function">total_cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2.0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>force_quick_range<span class="token punctuation">)</span>        <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* No need for quick select */</span>         <span class="token comment" spellcheck="true">//根据只读索引计算扫描花费，不用读取表数据即可完成，因此单独计算</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">.</span><span class="token function">is_clear_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> key_for_use<span class="token operator">=</span> <span class="token function">find_shortest_key</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token operator">-</span><span class="token operator">></span>covering_keys<span class="token punctuation">)</span><span class="token punctuation">;</span>      Cost_estimate key_read_time<span class="token operator">=</span>        param<span class="token punctuation">.</span>table<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span><span class="token function">index_scan_cost</span><span class="token punctuation">(</span>key_for_use<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                           <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      key_read_time<span class="token punctuation">.</span><span class="token function">add_cpu</span><span class="token punctuation">(</span>cost_model<span class="token operator">-</span><span class="token operator">></span><span class="token function">row_evaluate_cost</span><span class="token punctuation">(</span>        <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">bool</span> chosen<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key_read_time <span class="token operator">&lt;</span> cost_est<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        cost_est<span class="token operator">=</span> key_read_time<span class="token punctuation">;</span>        chosen<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算单表上带有MIN/MAX聚合函数的分组操作花费</span>    group_trp<span class="token operator">=</span> <span class="token function">get_best_group_min_max</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token operator">&amp;</span>best_cost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>group_trp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      param<span class="token punctuation">.</span>table<span class="token operator">-</span><span class="token operator">></span>quick_condition_rows<span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>group_trp<span class="token operator">-</span><span class="token operator">></span>records<span class="token punctuation">,</span>                                             head<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>stats<span class="token punctuation">.</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>      Opt_trace_object <span class="token function">grp_summary</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span>                                   <span class="token string">"best_group_range_summary"</span><span class="token punctuation">,</span>                                   Opt_trace_context<span class="token operator">::</span>RANGE_OPTIMIZER<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>trace<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_started</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        group_trp<span class="token operator">-</span><span class="token operator">></span><span class="token function">trace_basic_info</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> <span class="token operator">&amp;</span>grp_summary<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>group_trp<span class="token operator">-</span><span class="token operator">></span>cost_est <span class="token operator">&lt;</span> best_cost<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        grp_summary<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"chosen"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        best_trp<span class="token operator">=</span> group_trp<span class="token punctuation">;</span>        best_cost<span class="token operator">=</span> best_trp<span class="token operator">-</span><span class="token operator">></span>cost_est<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>        grp_summary<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"chosen"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add_alnum</span><span class="token punctuation">(</span><span class="token string">"cause"</span><span class="token punctuation">,</span> <span class="token string">"cost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//基于索引做范围扫描的最优花费</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>range_trp<span class="token operator">=</span> <span class="token function">get_key_scans_params</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> TRUE<span class="token punctuation">,</span>                                             <span class="token operator">&amp;</span>best_cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          best_trp<span class="token operator">=</span> range_trp<span class="token punctuation">;</span>          best_cost<span class="token operator">=</span> best_trp<span class="token operator">-</span><span class="token operator">></span>cost_est<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>thd<span class="token operator">-</span><span class="token operator">></span>lex<span class="token operator">-</span><span class="token operator">></span>sql_command <span class="token operator">!=</span> SQLCOM_DELETE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  <span class="token comment" spellcheck="true">//非删除操作</span>            param<span class="token punctuation">.</span>index_merge_allowed <span class="token operator">&amp;&amp;</span>            interesting_order <span class="token operator">!=</span> ORDER<span class="token operator">::</span>ORDER_DESC<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不支持降序</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//基于覆盖“ROR交操作”算法求解非覆盖“ROR交操作”</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rori_trp<span class="token operator">=</span> <span class="token function">get_best_ror_intersect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token operator">&amp;</span>best_cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            best_trp<span class="token operator">=</span> rori_trp<span class="token punctuation">;</span>            best_cost<span class="token operator">=</span> best_trp<span class="token operator">-</span><span class="token operator">></span>cost_est<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算基于index merge的ROR-UNION操作的花费</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tree<span class="token operator">-</span><span class="token operator">></span>merges<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span>index_merge_allowed <span class="token operator">&amp;&amp;</span>            interesting_order <span class="token operator">!=</span> ORDER<span class="token operator">::</span>ORDER_DESC <span class="token operator">&amp;&amp;</span>            param<span class="token punctuation">.</span>table<span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>stats<span class="token punctuation">.</span>records<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>imerge<span class="token operator">=</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            new_conj_trp<span class="token operator">=</span> <span class="token function">get_best_disjunct_quick</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> imerge<span class="token punctuation">,</span>                                                  <span class="token operator">&amp;</span>best_cost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>new_conj_trp<span class="token punctuation">)</span>              <span class="token function">set_if_smaller</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>table<span class="token operator">-</span><span class="token operator">></span>quick_condition_rows<span class="token punctuation">,</span>                             new_conj_trp<span class="token operator">-</span><span class="token operator">></span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>best_conj_trp <span class="token operator">||</span>                <span class="token punctuation">(</span>new_conj_trp <span class="token operator">&amp;&amp;</span>                 new_conj_trp<span class="token operator">-</span><span class="token operator">></span>cost_est <span class="token operator">&lt;</span> best_conj_trp<span class="token operator">-</span><span class="token operator">></span>cost_est<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>              best_conj_trp<span class="token operator">=</span> new_conj_trp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>best_conj_trp<span class="token punctuation">)</span>            best_trp<span class="token operator">=</span> best_conj_trp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-3-4、对存储引擎的调用接口"><a href="#13-3-4、对存储引擎的调用接口" class="headerlink" title="13.3.4、对存储引擎的调用接口"></a>13.3.4、对存储引擎的调用接口</h3><p>MySQL支持插件式多存储引擎，比如Innodb，需要把数据刷新到外存中，也需要从外存中读取数据，IO是必不可少的。因此查询执行计划在生成的过程中，有些估算的数据需要从Innodb存储引擎获取，所以查询优化器存在对存储引擎的调用接口。</p><h4 id="13-3-4-1、存储引擎计算IO花费的基本接口"><a href="#13-3-4-1、存储引擎计算IO花费的基本接口" class="headerlink" title="13.3.4.1、存储引擎计算IO花费的基本接口"></a>13.3.4.1、存储引擎计算IO花费的基本接口</h4><h3 id="13-3-5、统计信息"><a href="#13-3-5、统计信息" class="headerlink" title="13.3.5、统计信息"></a>13.3.5、统计信息</h3><h1 id="14、从功能角度看MySQL查询优化"><a href="#14、从功能角度看MySQL查询优化" class="headerlink" title="14、从功能角度看MySQL查询优化"></a>14、从功能角度看MySQL查询优化</h1><h2 id="14-1、优化器之逻辑查询优化"><a href="#14-1、优化器之逻辑查询优化" class="headerlink" title="14.1、优化器之逻辑查询优化"></a>14.1、优化器之逻辑查询优化</h2><h2 id="14-2、优化器之物理查询优化"><a href="#14-2、优化器之物理查询优化" class="headerlink" title="14.2、优化器之物理查询优化"></a>14.2、优化器之物理查询优化</h2><h1 id="15、MySQL查询优化的关键算法"><a href="#15、MySQL查询优化的关键算法" class="headerlink" title="15、MySQL查询优化的关键算法"></a>15、MySQL查询优化的关键算法</h1><h2 id="15-1、深入理解MySQL的多表连接算法"><a href="#15-1、深入理解MySQL的多表连接算法" class="headerlink" title="15.1、深入理解MySQL的多表连接算法"></a>15.1、深入理解MySQL的多表连接算法</h2><h1 id="16、MySQL查询优化器与其他部分的关系"><a href="#16、MySQL查询优化器与其他部分的关系" class="headerlink" title="16、MySQL查询优化器与其他部分的关系"></a>16、MySQL查询优化器与其他部分的关系</h1><h2 id="16-1、查询优化器与语法分析器"><a href="#16-1、查询优化器与语法分析器" class="headerlink" title="16.1、查询优化器与语法分析器"></a>16.1、查询优化器与语法分析器</h2><h2 id="16-2、查询优化器与执行器"><a href="#16-2、查询优化器与执行器" class="headerlink" title="16.2、查询优化器与执行器"></a>16.2、查询优化器与执行器</h2><h2 id="16-3、查询优化器与缓冲区管理模块"><a href="#16-3、查询优化器与缓冲区管理模块" class="headerlink" title="16.3、查询优化器与缓冲区管理模块"></a>16.3、查询优化器与缓冲区管理模块</h2><h2 id="16-4、查询优化器与索引模块"><a href="#16-4、查询优化器与索引模块" class="headerlink" title="16.4、查询优化器与索引模块"></a>16.4、查询优化器与索引模块</h2>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20210513</title>
      <link href="2021/05/12/20210513/"/>
      <url>2021/05/12/20210513/</url>
      
        <content type="html"><![CDATA[<h1 id="2、PushdownDB论文解读"><a href="#2、PushdownDB论文解读" class="headerlink" title="2、PushdownDB论文解读"></a>2、PushdownDB论文解读</h1><h2 id="2-1、摘要"><a href="#2-1、摘要" class="headerlink" title="2.1、摘要"></a>2.1、摘要</h2><p>​        本文研究了<strong>下推一部分DBMS分析查询到简单存储服务</strong>中的有效性。最近使用的Amazon Web Services（AWS）的（S3）引擎发布了称为<strong>S3 Select</strong>的功能。 我们展示了一些DBMS原语（<strong>过滤器，投影，聚合</strong>）始终可以经济高效地移入S3。 其他更复杂的操作（<strong>连接，top-K，分组</strong>）需要重新实现以利用S3选择，这些通常是下推的候选对象。 我们展示通过使用新的DBMS进行实验来获得这些功能，即我们开发的<strong>PushdownDB</strong>。 对包括TPC-H查询的查询集合进行的实验表明，<strong>PushdownDB比不使用S3 Select的基线平均便宜30％，快6.7倍。</strong></p><h2 id="2-2、概要"><a href="#2-2、概要" class="headerlink" title="2.2、概要"></a>2.2、概要</h2><p>​        云比“本地”提供更便宜更灵活的计算。 不仅可以即时添加资源，相比于“本地”部署，大型云供应商有大规模经济体量。 现代云采用计算与存储分离架构-这两部分是独立管理的，并且通过网络连接。这样的架构允许独立计算和存储层的扩展，<strong>简化了存储层的管理并且降低了成本</strong>。大量数据仓库系统被建立来分析分布式云存储上的数据，包括Presto [1]，Snowflake [2]，Redshift Spectrum [3]等。</p><p>​        在计算与存储分离的架构中，连接计算层和存储层的<strong>网络</strong>可能是主要性能瓶颈。存储服务器中存储设备的内部带宽比外部存储服务器高得多。因此，在分离架构上运行的数据库<strong>可能会比传统的无共享架构的数据库表现更差</strong>。</p><p>​        有两种直观的解决方案可以缓解网络瓶颈：<strong>缓存和计算下推</strong>。 有了缓存，计算服务器一次从远程存储加载数据，将其缓存在主存或本地存储中，并在多次查询中重复使用，从而<strong>分摊网络传输成本</strong>。<strong>缓存已在Snowflake [2]和Redshift Spectrum [3]的Redshift [5]层中实现</strong>。计算下推时，数据库管理系统（DBMS）会将其功能推向尽可能接近存储的地方。 Hagmann [6]的开创性论文研究了存储层和应用层SQL代码之间的划分，得出的结论是：<strong>如果所有代码都移入了存储层，性能会得到提升</strong>。 此外，Britton Lee IDM 500 [7]，Oracle Exadata服务器[8]和IBM Netezza机器[9]的设计原则之一是：<strong>将计算下推到距离存储更近的特定处理器</strong>。</p><p>​        最近，Amazon Web Services（AWS）引入了一项称为“ S3 Select”的功能，通过该功能有限的计算能被推送到他们的共享云存储服务上，该服务称为<strong>S3</strong> [10]。 这提供了一个机会来重新考虑以下问题：<strong>如何在S3存储节点和计算节点之间划分查询处理任务。</strong> 这个问题是很重要的，因为S3 Select的有限计算接口仅允许某些简单的查询运算将被下推到存储层，即<strong>选择，投影和简单聚合</strong>。其他运算需要重新实现以利用S3 Select。 而且，<strong>S3 Select可能比在普通EC2节点上进行计算要更昂贵。</strong></p><p>​        在本文中，我们的目标是理解在使用<strong>计算存储分离的云环境中运行查询下推</strong>的性能。 具体来说，我们考虑<strong>过滤器（带有和不带有索引），连接，分组和top-K</strong>。 我们通过S3实现这些操作以利用计算下推并研究其成本和性能。 即使S3 select成本相对较高，我们也能看到显著的性能提升和成本的下降。 此外，我们分析了来自TPC-H基准的查询，表现出了类似的性能和成本效益。 我们还指出了当前<strong>S3 Select的局限性</strong>，并根据我们从这个项目中学到的东西提供一些建议。 据我们所知，<strong>这是在计算与存储分离架构下对数据库操作计算下推的首次广泛研究</strong>。    </p><p>​        在本文的其余部分，第二节介绍了我们评估的云环境。 第三节介绍了我们实现的PushdownDB数据库。 然后，第四到七节描述了过滤，连接，分组和top-K如何利用S3 Select，并使用微基准测试评估性能。第八节展示了对TPC-H基准套件的评估。第九节评估了Parquet数据格式。 第十节讨论了改进当前S3 Select接口的方法。最后，第十一节描述了相关工作，第十二节总结本文。</p><h2 id="2-3、云上的数据管理"><a href="#2-3、云上的数据管理" class="headerlink" title="2.3、云上的数据管理"></a>2.3、云上的数据管理</h2><p>​        AWS提供了简单存储服务<strong>S3</strong>[11]，是一个高度可用的对象存储。 S3给普通用户提供<strong>几乎无限的的存储容量</strong>，成本相对较低，并受到大多数流行的云数据库的支持，包括**Presto [1]，Hive [12]，Spark SQL [13]，Redshift Spectrum [3]，和Snowflake[2]**。 S3中的存储节点与计算节点是分离的。 因此，DBMS使用S3作为存储系统，并通过网络传输所需的数据以进行查询处理。</p><p>​        S3是云数据库的流行存储选择，因为<strong>S3存储比本地连接存储和/或基于块的替代方案（例如，弹性块存储（EBS））便宜得多</strong>。 此外，<strong>S3数据可以在多个计算实例之间共享</strong>。</p><h3 id="2-3-1、S3-Select"><a href="#2-3-1、S3-Select" class="headerlink" title="2.3.1、S3 Select"></a>2.3.1、S3 Select</h3><p>​        为了减少在计算节点上的网络流量和处理代价，在2018年AWS发布了一项名为<strong>S3 Select</strong>的新服务，该服务<strong>将有限的计算下推到存储节点</strong>。 普通的S3支持<strong>put/get的操作来write/read</strong>整个对象或对象的一部分（基于字节偏移量）。 S3 Select添加了对一组有限的SQL查询的支持。 目前，S3 Select仅<strong>支持选择，投影，聚合，不支持连接，group by，TOP-K</strong>。</p><h3 id="2-3-2、计算查询代价"><a href="#2-3-2、计算查询代价" class="headerlink" title="2.3.2、计算查询代价"></a>2.3.2、计算查询代价</h3><p>​        查询的成本是一个关键因素，因为<strong>它是将应用程序从“本地”迁移到云端的主要原因之一</strong>。 对于相同的AWS服务，费用会<strong>因用户数据和计算所在的区域而异。</strong> 我们将我们的费用计算限制为美国东部（弗吉尼亚北部）的定价。 在本节中，我们讨论与服务相关的成本。我们在实验中使用的是：<strong>存储，数据访问，数据传输，网络请求以及EC2实例上的计算</strong>。</p><h4 id="2-3-2-1、Storage-cost-（存储成本）"><a href="#2-3-2-1、Storage-cost-（存储成本）" class="headerlink" title="2.3.2.1、Storage cost.（存储成本）"></a>2.3.2.1、Storage cost.（存储成本）</h4><p>​        <strong>S3存储费用基于使用的空间量按月收取</strong>。 例如，S3标准存储费用约为$ 0.022 / GB /月。 虽然其他AWS存储服务可能会提供更好的IO性能，但是他们也比S3贵。 由于存储成本仅取决于数据大小而不是访问频率，所以本文我们在计算查询成本时将其排除了。</p><h4 id="2-3-2-2、Data-transfer-cost-（数据传输成本）"><a href="#2-3-2-2、Data-transfer-cost-（数据传输成本）" class="headerlink" title="2.3.2.2、Data transfer cost.（数据传输成本）"></a>2.3.2.2、Data transfer cost.（数据传输成本）</h4><p>​        AWS S3用户仅需支付传出流量，并且价格取决于数据目的地。 当不使用S3 Select时，此价格范围从免费（在同一区域内传输数据）至$ 0.09 / GB<br>（将数据从AWS传输出去）。 我们实验中的服务器与S3数据在同一区域内。 因此，我们不支付任何数据传输费用。</p><h4 id="2-3-2-3、S3-Select-Cost-（S3-Select-成本）"><a href="#2-3-2-3、S3-Select-Cost-（S3-Select-成本）" class="headerlink" title="2.3.2.3、S3 Select Cost.（S3 Select 成本）"></a>2.3.2.3、S3 Select Cost.（S3 Select 成本）</h4><p>​        S3 Select在处理S3 Select查询和返回数据量（$ 0.0007 / GB）时引入了新的成本构成：根据扫描的数据量进行计算（$ 0.002 / GB）。 数据返回的费用取决于查询的选择性高低。 当S3被使用时，<strong>扫描数据量和传输成本通常是整体查询成本的主要组成部分</strong>。</p><h4 id="2-3-2-4、Network-request-cost-（网络请求成本）"><a href="#2-3-2-4、Network-request-cost-（网络请求成本）" class="headerlink" title="2.3.2.4、Network request cost.（网络请求成本）"></a>2.3.2.4、Network request cost.（网络请求成本）</h4><p>​        向亚马逊S3发出HTTP请求是根据<strong>请求类型和数量</strong>收费的。我们只考虑<strong>HTTP GET</strong>请求的费用（每1,000个请求$ 0.0004），因为这是我们使用的唯一请求类型。 这笔费用是针对S3 Select请求和常规的表读取请求。</p><h4 id="2-3-2-5、Computation-cost-（计算成本）"><a href="#2-3-2-5、Computation-cost-（计算成本）" class="headerlink" title="2.3.2.5、Computation cost.（计算成本）"></a>2.3.2.5、Computation cost.（计算成本）</h4><p>​        我们在实验中使用了<strong>EC2内存优化的实例</strong>。 查询执行时间以秒为单位进行测量，并且计算费用基于主机EC2实例的每小时价格（例如，r4.8xlarge实例的费用为每小时2.128美元）。 <strong>计算费用是整个查询费用的另一个重要组成部分</strong>。</p><h2 id="2-4、数据库测试：PushdownDB"><a href="#2-4、数据库测试：PushdownDB" class="headerlink" title="2.4、数据库测试：PushdownDB"></a>2.4、数据库测试：PushdownDB</h2><p>​        为了探索如何利用S3 Select来改善查询性能或降低成本，我们实现了一个DBMS测试平台，称为<strong>PushdownDB</strong>。我们得出的结论是，修改商业多节点DBMS（例如Presto）将是一项令人望而却步的工作。相反，我们实现了<strong>具有最小优化器的PushdownDB以及执行本文中的实验的执行器</strong>。</p><p>​        我们做出了合理的努力来优化PushdownDB的性能。 虽然我们无法达到更成熟的Presto系统在所有查询上的性能表现，但是我们还是获得了不错的竞争力表现，如第八节所示。PushdownDB的源码可在github（<a href="https://github.com/yxymit/s3filter.git%EF%BC%89%E4%B8%8A%E8%8E%B7%E5%BE%97%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8**C++%E5%92%8CPython**%E3%80%82">https://github.com/yxymit/s3filter.git）上获得，并且混合使用**C++和Python**。</a></p><p>​        PushdownDB将查询计划表示为<strong>有向无环图</strong>，并以<strong>串行或并行</strong>模式执行查询。在串行模式下，单个CPU一次执行一个操作。在并行模式下，每个操作都使用多个Python进程并行执行，并从生产者到消费者批量传递元组使用<strong>队列</strong>。 大多数操作在并行模式下性能更好，但是某些操作在串行模式下更好。 例如，带过滤器的投影运行在同一进程中可以展示出更好的性能，因为这避免了进程间的数据传输。 本文中的大多数查询是两种模式混合执行的。</p><h2 id="2-5、过滤器"><a href="#2-5、过滤器" class="headerlink" title="2.5、过滤器"></a>2.5、过滤器</h2><p>​        本节讨论PushdownDB如何使用S3 Select加速过滤操作。 鉴于它<strong>直接将where子句下推到S3</strong>，我们将重点放在<strong>使用S3 Select支持索引</strong>的问题。</p><h3 id="2-5-1、Indexing-with-S3-Select"><a href="#2-5-1、Indexing-with-S3-Select" class="headerlink" title="2.5.1、Indexing with S3 Select"></a>2.5.1、Indexing with S3 Select</h3><p>​        哈希索引和基于树的索引都广泛用于数据库系统。 但是，两种实现对于云存储环境都不是一个好的选择，因为<strong>单个索引查找需要对索引的多次访问</strong>。 这导致多个S3请求会产生较长的网络延迟。为了避免这个问题，我们设计了一个索引表，可以接受S3 Select中可用的数据过滤操作。</p><p>​        索引表包含要建立索引列的值，以及其中索引记录的字节偏移量。 具体来说，索引表具有以下结构（假设索引建立在单个列上）。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512213509114.png" alt="image-20210512213509114"></p><p>​        通过索引访问表包括<strong>两个阶段</strong>。在阶段1中，<strong>索引列上的谓词使用S3 Select请求被发送到索引表</strong>。 然后<strong>返回选定行的字节偏移量给计算服务器</strong>。 在阶段2，<strong>对每一行发送HTTP请求，直接通过字节偏移量从数据表中加载相应行</strong>。 请注意，第二阶段的访问不会使用S3 Select，因此不会产生额外开销。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512113333850.png" alt="image-20210512113333850"></p><p>​        图1显示了不同过滤算法的运行时间和成本（随着过滤器选择性从10−7增加到10−2），<strong>服务器端过滤器从S3加载整个表并在计算节点上进行过滤</strong>。 S3端过滤器在一次S3 Select请求中发送过滤谓词给S3。</p><p>​        总而言之，<strong>在过滤效果很高时，S3-Side索引是最佳方法，而在任何过滤选择性情况下，S3-Side过滤器都可以很好地实现查询的性能和成本之间的平衡。</strong></p><h2 id="2-6、连接"><a href="#2-6、连接" class="headerlink" title="2.6、连接"></a>2.6、连接</h2><p>​        S3 Select在整个S3里<strong>不支持下推连接操作</strong>。 本节说明PushdownDB如何分解连接以部分利用S3 Select</p><p>​        本质上是很难下推连接的。 通常要连接的两个表跨多个S3对象分区，以便可以将数据并行加载。 如果<strong>两个表连接键不在同一个分区，那么实现连接操作需要在不同的分区之间移动数据，这在存储层很难支持</strong>。 <strong>PushdownDB支持待联接的表在联接键上处于不同分区</strong>，如下所述。</p><p>​        我们的讨论仅限于使用以下两阶段方法实现的<strong>哈希联接</strong>：<br>​        1）<strong>构建阶段</strong>：并行加载<strong>较小</strong>的表并将每个元组发送到适当的分区以构建一个哈希表;<br>​        2）<strong>探测阶段</strong>：并行加载<strong>较大</strong>的表并将元组发送到合适的分区通过<strong>探测哈希表</strong>来连接匹配的元组。</p><h3 id="2-6-1、连接算法"><a href="#2-6-1、连接算法" class="headerlink" title="2.6.1、连接算法"></a>2.6.1、连接算法</h3><p>​        PushdownDB支持三种联接算法：<strong>基准联接，过滤联接和Bloom联接</strong>。 这些算法以不同的方式来利用S3 Select。</p><p>​        在本节中，我们将讨论重点放在<strong>Bloom连接</strong>上：构建阶段之后，将基于第一个表中的连接键构造一个Bloom过滤器； 然后作为S3 Select请求将Bloom过滤器发送给第二个表进行过滤，<strong>没有通过布隆过滤器的行不会被返回。</strong></p><h3 id="2-6-2、性能评估"><a href="#2-6-2、性能评估" class="headerlink" title="2.6.2、性能评估"></a>2.6.2、性能评估</h3><p>​        我们比较了三种联接算法的运行时间和成本：基准联接，过滤联接和Bloom联接。 我们的实验使用TPC-H的Customer和Orders表（以比例因子10为基准）。以下SQL查询将用于评估。 我们的实验将扫描查询中的两个参数upper_c_acctbal和upper_o_orderdate，其默认值分别为−950和None。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512114156004.png" alt="image-20210512114156004"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512193155836.png" alt="image-20210512193155836"></p><p>​        结果如图3所示。当orders表上的过滤器处于高选择性时，过滤连接性能明显优于基线连接。当过滤器的选择性降低时，性能优势消失了。<strong>由于Bloom过滤器的原因，布隆连接表现得更好。相比其他选择Bloom连接的成本是更便宜的。</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512192940211.png" alt="image-20210512192940211"></p><p>​        图4显示了基线连接和过滤连接的运行时间和成本以及具有不同误报率的Bloom联接。我们可以看到，<strong>在误报率为0.01时达到最佳性能和最低成本</strong>。</p><h2 id="2-7、group-by"><a href="#2-7、group-by" class="headerlink" title="2.7、group by"></a>2.7、group by</h2><p>​        当前的S3 Select支持在单个属性上进行简单聚合，但<strong>不支持group-by子句</strong>。 下推一个group by聚合到S3是令人向往的，因为它可以显著减少网络流量。 在本节中，我们将探讨利用S3 Select的分组算法的设计。</p><h3 id="2-7-1、S3端分组"><a href="#2-7-1、S3端分组" class="headerlink" title="2.7.1、S3端分组"></a>2.7.1、S3端分组</h3><p>​        S3端分组算法下推整个分组逻辑到S3中，从而最大程度地减少网络流量。 我们使用以下查询来说明算法如何工作。 它根据Customer表中的nation进行分组，计算每个nation的总帐户余额。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512115721954.png" alt="image-20210512115721954"></p><p>​        执行的<strong>第一阶段收集group by子句中的分组</strong>。 对于示例查询，我们需要查找c_nationkey的所有唯一值。 这是通过使用S3 Select来运行投影仅返回<strong>c_nationkey列</strong>来完成的（即SELECT c_nationkey FROM customer）。 然后，计算节点将确定唯一列中的值。</p><p>​        在执行的<strong>第二阶段</strong>，<strong>PushdownDB请求S3对每个第一阶段确认的单独的组执行聚合</strong>。 例如，如果c_nationkey是0和1，那么下面的查询将在阶段2中发送到S3。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512120611853.png" alt="image-20210512120611853"></p><p>​        返回的第一个和第二个数字分别是c_nationkey为0和1的总余额</p><h3 id="2-7-2、混合分组"><a href="#2-7-2、混合分组" class="headerlink" title="2.7.2、混合分组"></a>2.7.2、混合分组</h3><p>​        在实践中，许多数据集高度偏斜，<strong>只有少数几个分组包含大量行，其他大部分分组只包含少数几行</strong>。 对于这些工作负载，S3端分组可能产生比较差的性能，因为分组太多会导致很长的S3 Select查询。为了解决这一问题，我们提出了一种混合分组算法，该算法<strong>根据组的大小分组</strong>。 混合分组<strong>将大组上的聚合下推到S3，小组由计算节点直接进行聚合</strong>。</p><p>​        类似于S3端分组，混合分组也包含两个阶段。 但是，在第一阶段，<strong>混合分组不会扫描整个表，而是只扫描所有行的一个样本</strong>（足以获得很多行的分组）。 特别地，<strong>PushdownDB扫描表中前1％的数据</strong>。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512131152134.png" alt="image-20210512131152134"></p><p>​        List5显示了混合分组第二阶段的S3 Select查询。 两个查询被发送到S3。 第一个查询运行<strong>大组的远程聚合</strong>（在此示例中，c_nationkey = 0）， 第二个查询加载S3分组的剩余行给服务器端，这些行的聚合在计算节点本地执行。</p><h3 id="2-7-3、Performance-Evaluation"><a href="#2-7-3、Performance-Evaluation" class="headerlink" title="2.7.3、Performance Evaluation"></a>2.7.3、Performance Evaluation</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512194220209.png" alt="image-20210512194220209"></p><p>​        图5显示了不同分组算法每个查询的运行时间和成本，随着分组数从2增加到32。每个查询在四个列上执行聚合。<strong>服务器端group-by和filter group-by的性能不会随组数的变化而改变</strong>，因为这两个算法都必须将S3中的所有行加载到计算节点。但是，过滤分组仅加载聚合时用到的四个列，而服务器端group by加载所有列。这解释了为什么过滤分组比服务端分组算法性能高出了64％。<strong>当只有几个组时，S3端分组算法比过滤分组性能高出了4.1倍</strong>。<strong>但是当存在更多组时，性能就下降了。这是由于增加了S3执行的计算开销</strong>。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512195028379.png" alt="image-20210512195028379"></p><p>​        图6显示了随着S3端的分组数量的增加，服务器端和S3端聚合的运行时间的变化。总体而言，<strong>在S3中有6到8个分组聚合时，性能最优。</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512195815937.png" alt="image-20210512195815937"></p><p>图7显示了三种分组算法的性能和成本的变化（随着分组大小的倾斜程度增加时）。可以看到，<strong>随着倾斜程度的增加，服务器端分组和过滤分组的性能和成本保持不变。在θ= 1.3的情况下，混合分组算法的性能要比过滤分组高31％。但是成本上并没有优势</strong>，因为它比过滤分组算法多扫描一次表。这可以通过<strong>改进S3 Select的接口</strong>来避免这种额外的表扫描。</p><h2 id="2-8、TOP-K"><a href="#2-8、TOP-K" class="headerlink" title="2.8、TOP-K"></a>2.8、TOP-K</h2><p>​        Top-K是根据指定的表达式从一张表里选择<strong>最大或最小的K条记录</strong>的常用操作。在本节中，我们讨论一个基于采样的方法，该方法使用S3 Select可以显著提高top-K的效率。</p><h3 id="2-8-1、基于采样的TOP-K算法"><a href="#2-8-1、基于采样的TOP-K算法" class="headerlink" title="2.8.1、基于采样的TOP-K算法"></a>2.8.1、基于采样的TOP-K算法</h3><p>​        TOP-K查询返回的记录数<strong>K通常比记录中的记录总数N小得多</strong>。因此，将整个表从S3传输到服务器本质上效率低下。 我们设计了一种<strong>基于采样的两阶段算法</strong>来解决这种效率低下的问题：<strong>第一阶段对表中的记录进行采样并确定在第二阶段加载的记录子集</strong>； 然后在第二阶段，<strong>查询执行节点加载该子集并对其执行top-K计算</strong>。对于剩下的讨论我们使用下面的示例查询。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512132653209.png" alt="image-20210512132653209"></p><p>​        在第一阶段，我们获得了必须包含前K个记录的子集的估计。 具体来说，系统从S3中加载S（&gt; K）个记录的随机样本，并使用第K小的l_extendedprice作为阈值， 采样过程确保前K条记录必须低于阈值。 </p><p>​        在第二阶段，使用<strong>小顶堆</strong>来选择所有返回的记录中的前K个记录。</p><h3 id="2-8-2、分析"><a href="#2-8-2、分析" class="headerlink" title="2.8.2、分析"></a>2.8.2、分析</h3><p>​        假设每一行包含B个字节，表包含N行，样本包含S行。 我们还假设一条记录中仅一小部分字节（α≤1）是在采样阶段需要的，因为在ORDER BY子句中不一定需要全部列。 我们假设采样过程是随机均匀的。 第一阶段期间从S3加载的字节总数是：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512145802805.png" alt="image-20210512145802805"></p><p>​        选择样本中的第K条记录作为阈值。基于随机抽样假设，系统在阶段2中加载<strong>KN / S</strong>条记录。因此，在阶段2中从S3加载的总字节数是：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512150058640.png" alt="image-20210512150058640"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512150359626.png" alt="image-20210512150359626"></p><p>​        从S3加载的数据总量是在两个阶段中加载的数据量之和：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512150636642.png" alt="image-20210512150636642"></p><p>​        通过上述公式，S = sqrt(KN/α)时D最小。给定固定的表大小，α越小S越大。</p><h3 id="2-8-3、Performance-Evaluation"><a href="#2-8-3、Performance-Evaluation" class="headerlink" title="2.8.3、Performance Evaluation"></a>2.8.3、Performance Evaluation</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512200724585.png" alt="image-20210512200724585"></p><p>​        在图8a中，每个条形图都显示了在特定的样本量大小时查询的运行时间。 每个条形图分为两个阶段：<strong>采样阶段（阶段1）和扫描阶段（阶段2）</strong>。折线显示了从S3到服务器返回的数据总量。</p><p>​        图8b显示了具有不同样本大小的查询成本。大部分成本是由于数据扫描造成的。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512201225720.png" alt="image-20210512201225720"></p><p>​        图9a显示，对于这两种算法，运行时间都会随着K的增加而增加。这是因为更大的K需要更大的堆以及在服务器端进行更多计算。这种<strong>基于采样的top-K算法始终比服务器端的TOP-K算法快</strong>，因为从S3加载的数据量减少了。</p><p>​        在图9b中，我们观察到<strong>基于采样的top-K算法始终比服务器端的top-K算法成本低</strong>。当K较小时，基于采样的算法中的大部分成本是数据扫描。随着K的增加，数据扫描成本没有明显变化，但是计算成本增加了，因为使用堆获得TOP-K个数的时间增加了。</p><h2 id="2-9、S3-Select的局限性"><a href="#2-9、S3-Select的局限性" class="headerlink" title="2.9、S3 Select的局限性"></a>2.9、S3 Select的局限性</h2><p>​        到目前为止，我们已经证明了利用S3 Select可以提高普通数据库操作的性能。 在本节中，我们列出了当前的S3选择功能的局限性并描述了我们改进的建议。</p><h3 id="2-9-1、Suggestion-1-Multiple-byte-ranges-for-GET-requests"><a href="#2-9-1、Suggestion-1-Multiple-byte-ranges-for-GET-requests" class="headerlink" title="2.9.1、Suggestion 1: Multiple byte ranges for GET requests"></a>2.9.1、Suggestion 1: Multiple byte ranges for GET requests</h3><p>​        IV-A节中讨论的索引算法发送HTTP GET请求到S3以从表中加载记录； 每个请求要求从一个索引表里查找指定范围的字节数据。 根据S3 API [20]，当前对S3的GET请求仅支持单个字节范围。 这表示如果查询选择了许多记录，必须发送大量的GET请求。过多的GET请求会损害性能，如图1所示。允许一个GET请求包含多个字节范围，HTTP是允许的，这可以大大降低HTTP请求的成本，通过在服务器和S3中共同进行处理。</p><h3 id="2-9-2、Suggestion-2-Index-inside-S3"><a href="#2-9-2、Suggestion-2-Index-inside-S3" class="headerlink" title="2.9.2、Suggestion 2: Index inside S3"></a>2.9.2、Suggestion 2: Index inside S3</h3><p>​        对于索引问题更彻底的解决方案是完全建立索引结构在S3内部。 这避免了S3和服务器之间的许多网络消息，这是由于在索引查找期间访问索引数据结构而导致的。 S3可以代表服务器处理所需的的逻辑，例如在哈希索引中处理哈希冲突或遍历B树索引中的树。</p><h3 id="2-9-3、Suggestion-3-More-efficient-Bloom-filters"><a href="#2-9-3、Suggestion-3-More-efficient-Bloom-filters" class="headerlink" title="2.9.3、Suggestion 3: More efficient Bloom filters"></a>2.9.3、Suggestion 3: More efficient Bloom filters</h3><p>​        布隆过滤器可以大大提高联接查询的性能，正如在第五节中演示的。布隆过滤器使用位数组进行表示来提高空间效率。但是当前的S3 Select不支持按位运算。我们目前S3 Select中Bloom联接的实现使用字符串0和1的整数表示位数组，这在空间和计算效率上是低下的。 我们建议S3 Select的下一个版本应该支持高效的按位操作以方便改进Bloom连接的效率。</p><h3 id="2-9-4、Suggestion-4-Partial-group-by"><a href="#2-9-4、Suggestion-4-Partial-group-by" class="headerlink" title="2.9.4、Suggestion 4: Partial group-by."></a>2.9.4、Suggestion 4: Partial group-by.</h3><p>​        第VI-B节介绍了我们的混合分组算法，并展示了其优越的性能表现。 由于S3不支持分组查询，因此我们使用CASE子句实现了S3端分组查询，这不是最搞笑的实现。 我们建议向S3添加部分分组查询以解决此性能问题。请注意，将任意分组查询完全下推到S3可能不是最好的解决方案，因为有很多组在S3中可能会占用大量内存空间和计算量。我们认为部分S3端的分组查询对于目前的混合分组算法的第二阶段是一种优化。</p><h3 id="2-9-5、Suggestion-5-Computation-aware-pricing"><a href="#2-9-5、Suggestion-5-Computation-aware-pricing" class="headerlink" title="2.9.5、Suggestion 5: Computation-aware pricing."></a>2.9.5、Suggestion 5: Computation-aware pricing.</h3><p>​        横看我们对优化的PushdownDB的评估，数据扫描成本在大多数查询占主要地位。 在当前的S3 Select定价模型中，不管正在执行什么计算，数据扫描的成本是固定的（0.002美元/ GB）。鉴于我们的查询通常在S3中只需要很少的计算，当前的定价模式可能对我们的查询收费过高。 我们认为需要一个更公平的定价模式，其中的数据扫描成本应取决于工作量。</p><h1 id="3、张轲学长优化总结"><a href="#3、张轲学长优化总结" class="headerlink" title="3、张轲学长优化总结"></a>3、张轲学长优化总结</h1><p>在<strong>CE层</strong>，提出了采用哈希连接和索引灵活选择的优化方法 <strong>CEHJ</strong>；</p><p><strong>网络 I/O 方面</strong>，进行了基于单表查询下推的优化 <strong>SPHJ</strong>，通过识别查询计划中的<strong>选择和投影</strong>并将其组装拆分成 <strong>SQL</strong> 语句下推到带有一定计算能力的存储层，存储层进行并行数据扫描；</p><p><strong>提升哈希连接执行效率方面</strong>，设计了哈希连接下推到存储层并行执行的优化方案 <strong>SEHJ</strong></p><h1 id="4、接下来还可以考虑的优化方向"><a href="#4、接下来还可以考虑的优化方向" class="headerlink" title="4、接下来还可以考虑的优化方向"></a>4、接下来还可以考虑的优化方向</h1><ul><li>聚合下推</li><li>Bloom过滤器</li><li>TOP-K</li></ul>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PushdownDB </tag>
            
            <tag> S3 Select </tag>
            
            <tag> Bloom filter </tag>
            
            <tag> TOP-K </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pushdowndb阅读笔记</title>
      <link href="2021/05/11/pushdowndb-yue-du-bi-ji/"/>
      <url>2021/05/11/pushdowndb-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="1、翻译"><a href="#1、翻译" class="headerlink" title="1、翻译"></a>1、翻译</h1><h2 id="1-1、摘要"><a href="#1-1、摘要" class="headerlink" title="1.1、摘要"></a>1.1、摘要</h2><pre><code>Abstract—This paper studies the effectiveness of pushing partsof DBMS analytics queries into the Simple Storage Service(S3) engine of Amazon Web Services (AWS), using a recentlyreleased capability called S3 Select. We show that some DBMSprimitives (filter, projection, aggregation) can always be cost effectively moved into S3. Other more complex operations (join,top-K, group-by) require reimplementation to take advantage ofS3 Select and are often candidates for pushdown. We demonstratethese capabilities through experimentation using a new DBMSthat we developed, PushdownDB. Experimentation with a collection of queries including TPC-H queries shows that PushdownDBis on average 30% cheaper and 6.7× faster than a baseline thatdoes not use S3 Select</code></pre><pre><code>摘要本文研究了下推一部分DBMS分析查询到简单存储服务中的有效性。最近使用的Amazon Web Services（AWS）的（S3）引擎发布了称为S3 Select的功能。 我们展示了一些DBMS原语（过滤器，投影，聚合）始终可以经济高效地移入S3。 其他更复杂的操作（连接，top-K，分组）需要重新实现以利用S3选择，这些通常是下推的候选对象。 我们展示通过使用新的DBMS进行实验来获得这些功能，即我们开发的PushdownDB。 对包括TPC-H查询的查询集合进行的实验表明，PushdownDB比不使用S3 Select的基线平均便宜30％，快6.7倍。</code></pre><h2 id="1-2、概要"><a href="#1-2、概要" class="headerlink" title="1.2、概要"></a>1.2、概要</h2><pre><code>Clouds offer cheaper and more flexible computing than“on-prem”. Not only can one add resources on the fly, thelarge cloud vendors have major economies of scale relative to“on-prem” deployment. Modern clouds employ an architecturewhere the computation and storage are disaggregated — thetwo components are independently managed and connectedusing a network. Such an architecture allows for independentscaling of computation and storage, which simplifies themanagement of storage and reduces its cost. A number of datawarehousing systems have been built to analyze data on disaggregated cloud storage, including Presto [1], Snowflake [2],Redshift Spectrum [3], among others.</code></pre><pre><code>云比“本地”提供更便宜更灵活的计算。 不仅可以即时添加资源，相比于“本地”部署，大型云供应商有大规模经济体量。 现代云采用计算与存储分离架构-两个组件是独立管理的，通过网络连接。 这样的架构允许独立计算和存储的扩展，简化了存储层的管理并且降低了成本。 大量数据仓库系统被建立来分析分布式云存储上的数据，包括Presto [1]，Snowflake [2]，Redshift Spectrum [3]等。</code></pre><pre><code>In a disaggregated architecture, the network that connectsthe computation and storage layers can be a major performancebottleneck. The internal bandwidth of the storage deviceswithin a storage server is much higher than the externalnetwork bandwidth commonly offered by cloud storage. As aresult, a database running on a disaggregated architecture mayunderperform a database on a conventional shared-nothingarchitecture, where the storage devices are attached to thecompute servers themselves [4].</code></pre><pre><code>在计算与存储分离的架构中，连接计算层和存储层的网络可能是主要性能瓶颈。 存储服务器中的存储设备的内部带宽比外部存储服务器高得多。 因此，在分离架构上运行的数据库可能会比传统的无共享架构的数据库表现不佳。</code></pre><pre><code>Two intuitive solutions exist to mitigate the network bottleneck: caching and computation pushdown. With caching,a compute server loads data from the remote storage once,caches it in main memory or local storage, and reuses it acrossmultiple queries, thereby amortizing the network transfer cost.Caching has been implemented in Snowflake [2] and theRedshift [5] layer of Redshift Spectrum [3]. With computationpushdown, a database management system (DBMS) pushes its functionality as close to storage as possible. A pioneering paper by Hagmann [6] studied the division of SQL code betweenthe storage layer and the application layer and concluded thatperformance was optimized if all code was moved into thestorage layer. Moreover, one of the design tenets of the BrittonLee IDM 500 [7], the Oracle Exadata server [8], and the IBMNetezza machine [9] was to push computation into specializedprocessors that are closer to storage</code></pre><pre><code>有两种直观的解决方案可以缓解网络瓶颈：缓存和计算下推。 有了缓存，计算服务器一次从远程存储加载数据，将其缓存在主内存或本地存储中，并在多次查询中重复使用，从而分摊网络传输成本。缓存已在Snowflake [2]和Redshift Spectrum [3]的Redshift [5]层中实现。计算下推时，数据库管理系统（DBMS）会将其功能推向尽可能接近存储的地方。 Hagmann [6]的开创性论文研究了存储层和应用层SQL代码之间的划分，得出的结论是：如果所有代码都移入了存储层，性能会得到提升。 此外，Britton Lee IDM 500 [7]，Oracle Exadata服务器[8]和IBM Netezza机器[9]的设计原则之一是：将计算下推到距离存储更近的特定处理器。</code></pre><pre><code>Recently, Amazon Web Services (AWS) introduced a feature called “S3 Select”, through which limited computationcan be pushed onto their shared cloud storage service calledS3 [10]. This provides an opportunity to revisit the question ofhow to divide query processing tasks between S3 storage nodesand normal computation nodes. The question is nontrivial asthe limited computational interface of S3 Select allows onlycertain simple query operators to be pushed into the storagelayer, namely selections, projections, and simple aggregations.Other operators require new implementations to take advantage of S3 Select. Moreover, S3 Select pricing can be moreexpensive than computing on normal EC2 nodes.</code></pre><pre><code>最近，Amazon Web Services（AWS）引入了一项称为“ S3 Select”的功能，通过该功能有限的计算能被推送到他们的共享云存储服务上，该服务称为S3 [10]。 这提供了一个机会来重新考虑以下问题：如何在S3存储节点和计算节点之间划分查询处理任务。 这个问题是重要的，因为S3 Select的有限计算接口仅允许某些简单的查询运算将被下推到存储层，即选择，投影和简单聚合。其他运算需要重新实现以利用S3 Select。 而且，S3 Select可能比在普通EC2节点上进行计算要更昂贵。</code></pre><pre><code>In this paper, we set our goal to understand the performanceof computation pushdown when running queries in a cloudsetting with disaggregated storage. Specifically, we considerfilter (with and without indexing), join, group-by, and top-K ascandidates. We implement these operators to take advantage ofcomputation pushdown through S3 Select and study their costand performance. We show dramatic performance improvement and cost reduction, even with the relatively high costof S3 Select. In addition, we analyze queries from the TPCH benchmark and show similar benefits of performance andcost. We also point out the limitations of the current S3 Selectservice and provide several suggestions based on the lessonswe learned from this project. To the best of our knowledge,this is the first extensive study of pushdown computing fordatabase operators in a disaggregated architecture.</code></pre><pre><code>在本文中，我们的目标是理解在使用计算存储分离的云设置中运行查询时计算下推的性能。 具体来说，我们考虑过滤器（带有和不带有索引），连接，分组和top-K。 我们通过S3实现这些操作以利用计算下推并研究其成本和性能。 即使S3 select成本相对较高，我们也能看到显著的性能提升和成本的下降。 此外，我们分析了来自TPCH基准的查询，表现出了类似的性能和成本效益。 我们还指出了当前S3 Select的局限性，并根据我们从这个项目中学到的东西提供一些建议。 据我们所知，这是在计算与存储分离架构下对数据库操作计算下推的首次广泛研究。</code></pre><pre><code>For the rest of this paper, Section II describes the cloudenvironment of our evaluation. Section III describes the PushdownDB database we implemented. Then Sections IV–VII describe how filter, join, group-by, and top-K can leverage S3 Select, and evaluates the performance using micro benchmarks.Section VIII shows evaluation on the TPC-H benchmark suite.Section IX evaluates the Parquet data format. Section X discusses ways to improve the current S3 Select interface.Finally, Section XI describes related work and Section XIIconcludes the paper</code></pre><pre><code>在本文的其余部分，第二节介绍了我们评估的云环境。 第三节介绍了我们实现的PushdownDB数据库。 然后，第IV–VII节描述了过滤，连接，分组和top-K如何利用S3选择，并使用微基准测试评估性能。第VIII节展示了对TPC-H基准套件的评估。第IX节评估了Parquet数据格式。 第X节讨论了改进当前S3 Select接口的方法。最后，第XI部分描述了相关工作，而第XII部分总结本文。</code></pre><h2 id="1-3、云上的数据管理"><a href="#1-3、云上的数据管理" class="headerlink" title="1.3、云上的数据管理"></a>1.3、云上的数据管理</h2><pre><code>Cloud providers such as AWS offer a wide variety ofcomputing services, and renting nodes is a basic one. InAWS, this service is called Elastic Compute Cloud (EC2).EC2 computing nodes (called instances) come in differentconfigurations and can have locally-attached storage</code></pre><pre><code>AWS等云提供商提供了多种计算服务，其中租用节点是基本的服务。 在AWS，此服务称为弹性计算云（EC2）。EC2计算节点（称为实例）配置不同，并且可以具有本地连接的存储。</code></pre><pre><code>In the context of a DBMS, EC2 instances are used to executeSQL queries. AWS offers Simple Storage Service (S3) [11],a highly available object store. S3 provides virtually infinitestorage capacity for regular users with relatively low cost,and is supported by most popular cloud databases, includingPresto [1], Hive [12], Spark SQL [13], Redshift Spectrum [3],and Snowflake [2]. The storage nodes in S3 are separate fromcompute nodes. Hence, a DBMS uses S3 as a storage systemand transfers needed data over a network for query processing.</code></pre><pre><code>在DBMS的环境下，使用EC2实例执行SQL查询。 AWS提供了简单存储服务（S3）[11]，是一个高度可用的对象存储。 S3给普通用户提供几乎无限的的存储容量，成本相对较低，并受到大多数流行的云数据库的支持，包括Presto [1]，Hive [12]，Spark SQL [13]，Redshift Spectrum [3]，和Snowflake[2]。 S3中的存储节点与计算节点是分离的。 因此，DBMS使用S3作为存储系统，并通过网络传输所需的数据以进行查询处理。</code></pre><pre><code>S3 is a popular storage choice for cloud databases, since S3storage is much cheaper than locally-attached and/or block-based alternatives, e.g., Elastic Block Store (EBS). In addition,S3 data can be shared across multiple computing instances.</code></pre><pre><code>S3是云数据库的流行存储选择，因为S3存储比本地连接存储和/或基于块的替代方案（例如，弹性块存储（EBS））便宜得多。 此外，S3数据可以在多个计算实例之间共享。</code></pre><h3 id="1-3-1、S3-Select"><a href="#1-3-1、S3-Select" class="headerlink" title="1.3.1、S3 Select"></a>1.3.1、S3 Select</h3><pre><code>To reduce network traffic and the associated processingon compute nodes, AWS released a new service called S3Select [10] in 2018 to push limited computation to the storagenodes. Normal S3 supports put/get operators that write/reada whole object or part of it (based on byte offsets). S3Select adds support for a limited set of SQL queries. At thecurrent time, S3 Select supports only selection, projection,and aggregation without group-by for tables using the CSVor Parquet [14] format.</code></pre><pre><code>为了减少在计算节点上的网络流量和相关处理，在2018年AWS发布了一项名为S3 Select的新服务，该服务将有限的计算下推到存储节点。 普通的S3支持put/get的操作来write/read整个对象或对象的一部分（基于字节偏移量）。 S3 Select添加了对一组有限的SQL查询的支持。 目前，S3 Select仅支持选择，投影，聚合，在使用CSV或者Parquet格式的表时，不支持group by。</code></pre><pre><code>We show examples of the SQL queries supported by S3Select in the subsequent sections. S3 Select implements theseoperators by scanning the rows in the table and returningqualifying rows to the compute node. More sophisticatedoperations such as join, group by, and top-K are not supportedby S3 Select and need to be executed at a compute node.Redesigning these more complex query operators to use S3Select is challenging. For example, supporting a join operatorwill require data shuffling among storage nodes. In this paper,we study how these advanced operators can be broken downinto simpler ones to leverage S3 Select. We propose andevaluate several implementations of these more advancedoperators and show that they can often be made faster andcheaper than loading all data into EC2 compute nodes.</code></pre><pre><code>在随后的部分中，我们展示了S3 Select支持的SQL查询的示例。 S3 Select实现了这些操作，通过扫描表中的行并返回符合条件的行给计算节点。 更复杂的操作如join，group by和top-K不被S3 Select支持，需要在计算节点上执行。重新设计这些更复杂的查询操作以使用S3 Select是具有挑战性的。 例如，支持join操作将需要在存储节点之间进行数据转移。 在本文中，我们研究了如何分解这些高级操作为更简单的操作，以利用S3 Select。 我们提出并评估这些更高级操作的几种实现，并表明它们通常比将所有数据加载到EC2计算节点更快，更便宜。</code></pre><h3 id="1-3-2、计算查询代价"><a href="#1-3-2、计算查询代价" class="headerlink" title="1.3.2、计算查询代价"></a>1.3.2、计算查询代价</h3><pre><code>The dollar cost of queries is a crucial factor, since it is one ofthe main reasons to migrate an application from “on-prem” tothe cloud. For the same AWS service, cost varies based on theregion where the users data and computation are located. Welimit our cost calculation to US East (N. Virginia) pricing. Inthis section, we discuss the costs associated with the services.we use in our experiments: storage, data access, data transfer,network requests, and computation on EC2 instances.</code></pre><pre><code>查询的美元成本是一个关键因素，因为它是将应用程序从“本地”迁移到云端的主要原因之一。 对于相同的AWS服务，费用会因用户数据和计算所在的区域而异。 我们将我们的费用计算限制为美国东部（弗吉尼亚北部）的定价。 在本节中，我们讨论与服务相关的成本。我们在实验中使用的是：存储，数据访问，数据传输，网络请求以及EC2实例上的计算。</code></pre><h4 id="1-3-2-1、Storage-cost-（存储成本）"><a href="#1-3-2-1、Storage-cost-（存储成本）" class="headerlink" title="1.3.2.1、Storage cost.（存储成本）"></a>1.3.2.1、Storage cost.（存储成本）</h4><pre><code>S3 storage cost is charged monthly based onthe amount of space used. For example, S3 standard storagecosts about $0.022/GB/month. Although other AWS storageservices may offer better IO performance, they are also moreexpensive than S3. Since the storage cost only depends ondata size and not on frequency of access, we exclude it whencalculating query cost in this paper.</code></pre><pre><code>S3存储费用基于使用的空间量按月收取。 例如，S3标准存储费用约为$ 0.022 / GB /月。 虽然其他AWS存储服务可能会提供更好的IO性能，但是他们也比S3贵。 由于存储成本仅取决于数据大小而不是访问频率，所以本文我们在计算查询成本时将其排除了。</code></pre><h4 id="1-3-2-2、Data-transfer-cost-（数据传输成本）"><a href="#1-3-2-2、Data-transfer-cost-（数据传输成本）" class="headerlink" title="1.3.2.2、Data transfer cost.（数据传输成本）"></a>1.3.2.2、Data transfer cost.（数据传输成本）</h4><pre><code>AWS S3 users are charged for only theoutgoing traffic and the price is based on the destination ofthe data. When S3 Select is not used, this price ranges fromfree (transferring data within the same region) to $0.09/GB(transferring data out of AWS). Servers in our experimentsare within the same region as the S3 data. Therefore, we donot pay any data transfer cost.</code></pre><pre><code>AWS S3用户仅需支付传出流量，并且价格基于数据目的地。 当不使用S3 Select时，此价格范围为免费（在同一区域内传输数据）至$ 0.09 / GB（将数据从AWS传输出去）。 我们实验中的服务器与S3数据在同一区域内。 因此，我们不支付任何数据传输费用。</code></pre><h4 id="1-3-2-3、S3-Select-Cost-（S3-Select-成本）"><a href="#1-3-2-3、S3-Select-Cost-（S3-Select-成本）" class="headerlink" title="1.3.2.3、S3 Select Cost.（S3 Select 成本）"></a>1.3.2.3、S3 Select Cost.（S3 Select 成本）</h4><pre><code>S3 Select introduces a new cost componentthat is based on the amount of data scanned ($0.002/GB)in processing an S3 Select query and the amount of datareturned ($0.0007/GB). The cost for data return depends on theselectivity of the query. Data scan and transfer cost is typicallya major component in overall query cost when S3 Select is inuse.</code></pre><pre><code>S3 Select在处理S3 Select查询和返回数据量（$ 0.0007 / GB）时引入了新的成本构成：根据扫描的数据量进行计算（$ 0.002 / GB）。 数据返回的费用取决于查询的选择性。 当S3被使用时，数据扫描和传输成本通常是整体查询成本的主要组成部分。</code></pre><h4 id="1-3-2-4、Network-request-cost-（网络请求成本）"><a href="#1-3-2-4、Network-request-cost-（网络请求成本）" class="headerlink" title="1.3.2.4、Network request cost.（网络请求成本）"></a>1.3.2.4、Network request cost.（网络请求成本）</h4><pre><code>Issuing HTTP requests to AmazonS3 is charged based on the request type and the number ofrequests. We consider only the cost of HTTP GET requests($0.0004 per 1,000 requests) as this is the only request typewe use. This cost is paid for both S3 Select requests andconventional table read requests.</code></pre><pre><code>向亚马逊S3发出HTTP请求是根据请求类型和数量收费的。我们只考虑HTTP GET请求的费用（每1,000个请求$ 0.0004），因为这是我们使用的唯一请求类型。 这笔费用是针对S3 Select请求和常规的表读取请求。</code></pre><h4 id="1-3-2-5、Computation-cost-（计算成本）"><a href="#1-3-2-5、Computation-cost-（计算成本）" class="headerlink" title="1.3.2.5、Computation cost.（计算成本）"></a>1.3.2.5、Computation cost.（计算成本）</h4><pre><code>We used EC2 memory-optimized instances for our experiments. The query execution time ismeasured in seconds and used to calculate the computationcost based on the hourly price of the host EC2 instance (e.g.,r4.8xlarge instances costs $2.128 per hour). The computationcost is another significant component of the overall query cost.</code></pre><pre><code>我们在实验中使用了EC2内存优化的实例。 查询执行时间以秒为单位进行测量，并且计算费用基于主机EC2实例的每小时价格（例如，r4.8xlarge实例的费用为每小时2.128美元）。 计算费用是整个查询费用的另一个重要组成部分。</code></pre><h2 id="1-4、数据库测试：PushdownDB"><a href="#1-4、数据库测试：PushdownDB" class="headerlink" title="1.4、数据库测试：PushdownDB"></a>1.4、数据库测试：PushdownDB</h2><pre><code>In order to explore how S3 Select can be leveraged to improve query performance and/or reduce cost, we implementeda bare-bone row-based DBMS testbed, called PushdownDB.We concluded that modifying a commercial multi-node DBMS(e.g., Presto) would be a prohibitive amount of work. Instead,we implemented PushdownDB which has a minimal optimizerand an executor that enables the experiments in this paper</code></pre><pre><code>为了探索如何利用S3 Select来改善查询性能或降低成本，我们实现了一个基于裸行的DBMS测试平台，称为PushdownDB。我们得出的结论是，修改商业多节点DBMS（例如Presto）将是一项令人望而却步的工作。相反，我们实现了具有最小优化器的PushdownDB以及执行本文中的实验的执行器。</code></pre><pre><code>We made a reasonable effort to optimize PushdownDB’sperformance. While we could not match the performance ofthe more mature Presto system on all queries, we obtainedcompetitive performance, as shown in Section VIII. The sourcecode of PushdownDB is available on github at https://github.com/yxymit/s3filter.git, and is implemented in a mixture ofC++ and Python.</code></pre><pre><code>我们做出了合理的努力来优化PushdownDB的性能。 虽然我们无法达到更成熟的Presto系统在所有查询上的性能表现但是我们还是获得了不错的竞争力表现，如第八节所示。PushdownDB的源码可在github（https://github.com/yxymit/s3filter.git）上获得，并且混合使用C++和Python。</code></pre><pre><code>PushdownDB represent the query plan as a directed acyclicgraph and executes queries in either serial or parallel mode. Inthe serial mode, a single CPU executes one operator at a time.In the parallel mode, each operator executes in parallel using multiple Python processes and passes batches of tuples fromproducer to consumer using a queue. Most operators achievebetter performance in the parallel mode, but some operatorscan benefit from serial mode. A projection followed by a filter,for example, can demonstrate better performance when runin the same process, because this avoids inter-process datatransfers. Most queries in this paper are executed in a mixtureof the two modes.</code></pre><pre><code>PushdownDB将查询计划表示为有向无环图，并以串行或并行模式执行查询。在串行模式下，单个CPU一次执行一个操作。在并行模式下，每个操作都使用多个Python进程并行执行，并从生产者到消费者批量传递元组使用队列。 大多数操作在并行模式下性能更好，但是某些操作在串行模式下更好。 例如，带过滤器的投影运行在同一进程中可以展示出更好的性能，因为这避免了过程间数据传输。 本文中的大多数查询是两种模式混合执行的。</code></pre><pre><code>A few performance optimizations have been built into PushdownDB. For example, PushdownDB does not use SSL as weexpect analytics workloads would typically be run in a secureenvironment. Also, PushdownDB uses the Pandas library [15]to represent collections of tuples as data frames, generatinga significant performance advantage over implementing tupleprocessing in plain Python.</code></pre><pre><code>PushdownDB中已内置了一些性能优化。 例如，PushdownDB不使用SSL，因为我们期望分析工作负载通常将运行在安全的环境中。 另外，PushdownDB使用Pandas库[15]将元组的集合表示为数据帧，用纯Python实现元组处理产生了显著的性能优势。</code></pre><pre><code>Experimental Setup. Experiments in this paper are performedon an r4.8xlarge EC2 instance, which contains 32 physicalcores, 244 GB of main memory, and a 10 GigE network. Themachine runs Ubuntu 16.04.5 LTS. PushdownDB is executedusing Python version 2.7.12.</code></pre><pre><code>实验环境配置。本文进行的实验在r4.8xlarge EC2实例上，其中包含32个物理核心，244 GB主内存和10 GigE网络。机器运行在Ubuntu 16.04.5 LTS上。 PushdownDB使用Python版本2.7.12执行。</code></pre><pre><code>Unless otherwise stated, all experiments use the same 10 GBTPC-H dataset in CSV format. We will also report Parquet experiments in Section IX. To facilitate parallel processing, eachtable is partitioned into multiple objects in S3. The techniquesdiscussed in this paper do not make any assumptions abouthow the data is partitioned. During execution, PushdownDBspawns multiple processes to load data partitions in parallel.</code></pre><pre><code>除非另有说明，否则所有实验均使用相同的10 GB CSV格式的TPC-H数据集。 我们还将在第IX节中报告Parquet格式的实验。 为了便于并行处理，每个表在S3中被划分为多个对象。 本文讨论的技术对于数据如何分区不做任何假设。 在执行期间，PushdownDB产生多个进程以并行加载数据分区。</code></pre><h2 id="1-5、过滤器"><a href="#1-5、过滤器" class="headerlink" title="1.5、过滤器"></a>1.5、过滤器</h2><pre><code>This section discusses how PushdownDB accelerates filteroperators using S3 Select. Given that it is straightforwardto pushdown a where clause to S3, we focus on the moreinteresting problem of supporting indexing using S3 Select.</code></pre><pre><code>本节讨论PushdownDB如何使用S3 Select加速过滤器操作。 鉴于它直接将where子句下推到S3，我们将重点放在使用S3 Select支持索引的有趣问题。</code></pre><h3 id="1-5-1、Indexing-with-S3-Select"><a href="#1-5-1、Indexing-with-S3-Select" class="headerlink" title="1.5.1、Indexing with S3 Select"></a>1.5.1、Indexing with S3 Select</h3><pre><code>Both hash indexes and tree-based indexes are widely used indatabase systems. Neither implementation, however, is a goodfit for a cloud storage environment because a single indexlookup requires multiple accesses to the index. This causesmultiple S3 requests that incur long network delays. To avoidthis issue, we designed an index table that is amenable to thefiltering available in S3 Select.</code></pre><pre><code>哈希索引和基于树的索引都广泛用于数据库系统。 但是，两种实现对于云存储环境都不是一个好的选择，因为单个索引查找需要对索引的多次访问。 这导致多个S3请求会产生较长的网络延迟。为了避免这个问题，我们设计了一个索引表，可以接受S3 Select中可用的过滤。</code></pre><pre><code>An index table contains the values of the columns to beindexed, as well as the byte offsets of indexed records in thattable. Specifically, an index table has the following schema(assuming the index is built on a single column).</code></pre><pre><code>索引表包含要建立索引列的值，以及其中索引记录的字节偏移量。 具体来说，索引表具有以下结构（假设索引建立在单个列上）。</code></pre><blockquote><p>|value|first_byte_offset|last_byte_offset|</p></blockquote><pre><code>Accessing a table through an index comprises two phases.In phase 1, the predicate on the indexed columns is sent to theindex table using an S3 Select request. Then the byte offsetsof selected rows are returned to the compute server. In phase2, the byte offsets are used to directly load the correspondingrows from the data table, by sending an HTTP request foreach individual row. Note that accesses in the second phasedo not use S3 Select and therefore do not incur the associatedextra cost.</code></pre><pre><code>通过索引访问表包括两个阶段。在阶段1中，索引列上的谓词使用S3 Select请求被发送到索引表。 然后选定行的字节偏移量返回给计算服务器。 在阶段2，通过对每一行发送HTTP请求，字节偏移量直接用于从数据表中装载相应行。 请注意，第二阶段的访问不会使用S3 Select，因此不会产生额外开销。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512113333850.png" alt="image-20210512113333850"></p><pre><code>图1：过滤器算法—三种过滤策略的性能和成本（随着过滤器选择性的变化）</code></pre><h3 id="1-5-2、Performance-Evaluation"><a href="#1-5-2、Performance-Evaluation" class="headerlink" title="1.5.2、Performance Evaluation"></a>1.5.2、Performance Evaluation</h3><pre><code>Figure 1 shows the runtime and cost of different filteringalgorithms as the filter selectivity increases from 10−7to 10−2.Server-side filter loads the entire table from S3 and performsfiltering on the compute node. S3-side filter sends the filteringpredicate to S3 in an S3 Select request. S3-side indexing usesthe index table implementation.</code></pre><pre><code>图1显示了不同过滤算法的运行时间和成本（随着过滤器选择性从10−7增加到10−2）服务器端过滤器从S3加载整个表并在计算节点上进行过滤。 S3端过滤器在一次S3 Select请求中发送过滤谓词给S3。 S3端索引使用索引表的实现。</code></pre><pre><code>The performance improvement (Figure 1a) from server-sidefilter to S3-side filter is a dramatic 10× and remains stableas selectivity changes in the specified range. S3-side indexinghas similar performance as S3-side filter when the filter ishighly selective, but the performance of indexing degrades asthe the filter selects more than 10−4 of the rows. In this case,more rows are returned and most of the execution time isspent requesting and receiving individual byte ranges from thedata table. Although these requests are sent in parallel, theyincur excessive CPU computation that become a performancebottleneck.</code></pre><pre><code>服务器端的过滤器到S3端过滤器的性能改进（图1a）是惊人的10倍，并且保持稳定增长（随着选择性在指定范围内变化）。 当过滤器为高选择性时，S3端索引和S3端过滤器有相似的性能表现，但当过滤器选择的行数超过10−4时，索引的性能会降低。 在这种情况下，更多行被返回了，大部分执行时间被花在请求和接收数据表范围内的单个字节。 尽管这些请求是并行发送的，但它们导致过多的CPU计算，这是一个性能瓶颈。</code></pre><pre><code>The cost (Figure 1b) of each run is broken down into fourcomponents: compute cost, S3 request cost, S3 data scan cost,and data transfer cost. Each component is denoted using adifferent type of hash marks. Overall, S3-side filter is 24%more expensive than server-side filter. Most of the cost of S3-side filter is due to S3 data scanning and loading, while mostof the cost of server-side filter is due to computation. S3-side indexing is cheaper than server-side filter by 2.7× whenthe filter is very selective, because the index table redues theamount of data being scanned and transferred. As the filterpasses more data, however, the cost of indexing grows rapidlydue to increasing HTTP requests.</code></pre><pre><code>每次运行的成本（图1b）分为四部分：计算成本，S3请求成本，S3数据扫描成本，和数据传输成本。 每个部分都使用一个不同类型的哈希标记。 总体而言，S3侧过滤器为比服务器端过滤器贵24％。 S3端过滤器的大部分费用归因于S3数据的扫描和加载，而大多数服务器端过滤器的成本归因于计算。 当过滤器的选择性很强时，S3端索引比服务器端过滤器便宜2.7倍，因为索引表会减少扫描和传输的数据量。但是随着过滤器传递更多数据，索引成本迅速增加，这是因为增加了HTTP请求。</code></pre><pre><code>In conclusion, S3-side indexing is the best approach with highly selective queries, whereas S3-side filter achieves a goodbalance between performance and cost for queries with anyselectivity.</code></pre><pre><code>总而言之，S3端索引是具有高度选择性查询的最佳方法，而S3端过滤器则可以很好地实现在任何选择性情况下查询的性能和成本之间的平衡。</code></pre><h2 id="1-6、连接"><a href="#1-6、连接" class="headerlink" title="1.6、连接"></a>1.6、连接</h2><pre><code>S3 Select does not support pushing a join operator in itsentirety into S3. This section shows how PushdownDB breaksdown a join to partially leverage S3 Select</code></pre><pre><code>S3 Select在整个S3里不支持下推连接操作。 本节说明PushdownDB如何分解连接以部分利用S3 Select</code></pre><pre><code>It is inherently difficult to take advantage of pushdownprocessing for joins. The two tables to be joined are typicallypartitioned across multiple S3 objects so that data can beloaded in parallel. If the two tables are not partitioned on thejoin key, implementing a join operator requires shuffling dataamong different partitions, which is challenging to supportat the storage layer. PushdownDB supports joining tables notpartitioned on the join key, as we describe next.</code></pre><pre><code>本质上是很难下推连接的。 通常要连接的两个表跨多个S3对象进行分区，以便可以将数据并行加载。 如果两个表连接键不在同一个分区，那么实现连接操作需要在不同的分区之间移动数据，这在存储层很难支持。 PushdownDB支持待联接的表在联接键上处于不同分区，如下所述。</code></pre><pre><code>We limit our discussion to hash joins implemented usingtwo phases: the build phase loads the smaller table in paralleland sends each tuple to the appropriate partition to build ahash table; the probe phase loads the bigger table in paralleland sends the tuples to the correct partition to join matchingtuples by probing the hash table.</code></pre><pre><code>我们的讨论仅限于使用以下两阶段方法实现的哈希联接：构建阶段并行加载较小的表并将每个元组发送到适当的分区以构建一个哈希表; 探针阶段并行加载较大的表并将元组发送到正确的分区通过探查哈希表来连接匹配的元组。</code></pre><h3 id="1-6-1、连接算法"><a href="#1-6-1、连接算法" class="headerlink" title="1.6.1、连接算法"></a>1.6.1、连接算法</h3><pre><code>PushdownDB supports three join algorithms: Baseline Join,Filtered Join, and Bloom Join. These algorithms leverage S3Select in different ways.</code></pre><pre><code>PushdownDB支持三种联接算法：基准联接，过滤联接和Bloom联接。 这些算法以不同的方式利用S3 Select。</code></pre><pre><code>In baseline join, the server loads both tables from S3 andexecutes the hash join locally, without using S3 Select. Filteredjoin pushes down selection and projection using S3 Select, andexecutes the rest of the query in the same way as baseline join.We will not discuss these two algorithms in detail due to theirlimited use of S3 Select.</code></pre><pre><code>在基准连接中，服务器从S3中加载这两个表并且在不使用S3 Select的情况下在本地执行哈希联接。 过滤连接使用S3 Select下推选择和投影，并且与基准连接相同的方式执行其余查询。由于这两种算法对S3 Select使用不多，我们将不对其进行详细讨论。</code></pre><pre><code>In this section, we focus our discussion on Bloom join: afterthe build phase, a Bloom filter is constructed based on the joinkeys in the first table; the Bloom filter is then sent as an S3Select request to load a filtered version of the second table.In other words, rows that do not pass the Bloom filter are notreturned.</code></pre><pre><code>在本节中，我们将讨论重点放在Bloom连接上：构建阶段之后，将基于第一个表中的连接键构造一个Bloom过滤器； 然后作为加载第二个表的过滤版本的S3 Select请求将Bloom过滤器发送。换句话说，没有通过布隆过滤器的行不会被返回。</code></pre><h4 id="1-6-1-1、布隆过滤器"><a href="#1-6-1-1、布隆过滤器" class="headerlink" title="1.6.1.1、布隆过滤器"></a>1.6.1.1、布隆过滤器</h4><pre><code>1) Bloom Filter: A Bloom filter [16] is a probabilistic datastructure that determines whether an element exists in a setor not. A Bloom filter has no false negatives but may havefalse positives. If a Bloom filter returns false, the elementis definitely not in the set; if a Bloom filter returns true,the element may be in the set. Compared to other datastructures achieving the same functionality, a Bloom filter hasthe advantage of high space efficiency</code></pre><pre><code>1）布隆过滤器：布隆过滤器[16]是一个概率性的数据结构，它可以确定元素是否存在于集合中。 布隆过滤器没有漏报，但可能有误报。 如果Bloom过滤器返回false，则元素绝对不在集合中； 如果Bloom过滤器返回true，该元素可能在集合中。 与其他实现相同功能的数据结构相比，布隆过滤器具有高空间效率的优势。</code></pre><pre><code>A Bloom filter contains a bit array of length m (initiallycontaining all 0’s) and uses k different hash functions. To addan element to a Bloom filter, the k hash functions are appliedto the element. The output of each hash function is a positionin the bit array, which is then set to 1. Therefore, at most kbits will be set for each added element. To query an element,the same k hash functions are applied to the element. If thecorresponding bits are all set, then the element may be in theset; otherwise, the element is definitely not in the set. The falsepositive rate of a filter is determined by the size of the set, thelength of the bit array, and the hash functions are being used.</code></pre><pre><code>布隆过滤器包含长度为m的位数组（最初全为0），并使用k个不同的哈希函数。 为了添加一个元素到布隆过滤器，将作用k个哈希函数到该元素。 每个哈希函数的输出是位数组中的某一个位置，然后将其设置为1。因此，每次添加元素时最多k个比特位被设置为1。 要查询元素时，相同的k个哈希函数作用于该元素，如果相应的比特位都已设置，则元素可能在集合里; 否则，该元素绝对不在集合中。误报率取决于集合的大小，位数组的长度以及使用的哈希函数。</code></pre><pre><code>Universal hashing [17] is a good candidate for our Bloomfilter approach as it requires only arithmetic operators (whichS3 Select supports) and represents a family of hash functions.The hash functions that we use can be generalized as:</code></pre><pre><code>全域哈希[17]是我们Bloom过滤器的一个很好的候选方法，因为它只需要算术运算（S3 Select支持），并代表一系列哈希函数。我们使用的哈希函数可以概括为：</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512110847257.png" alt="image-20210512110847257"></p><pre><code>Given a desired false positive rate p, the number of hashfunctions kp and the length of the bit array mp are determinedby the following formulas [18], where s is the number ofelements in the set.</code></pre><pre><code>给定理想的误报率p，那么哈希函数的数量kp和位数组的长度mp可以通过以下公式进行计算[18]，其中s是集合中的元素。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512111101409.png" alt="image-20210512111101409"></p><h4 id="1-6-1-2、PushdownDB里的布隆连接"><a href="#1-6-1-2、PushdownDB里的布隆连接" class="headerlink" title="1.6.1.2、PushdownDB里的布隆连接"></a>1.6.1.2、PushdownDB里的布隆连接</h4><pre><code>Bloom filters are usuallyprocessed using bitwise operators. However, since S3 Selectdoes not support bitwise operators or binary data, an alternative is required that not only represents the bit array butcan be tested for the presence of a set bit. In PushdownDB,we use strings of 1’s and 0’s to represent the bit array. Thefollowing example shows what an S3 Select query containinga Bloom filter would look like. The arithmetic expression onattr within the SUBSTRING function is the hash functionon attr.</code></pre><pre><code>布隆过滤器通常使用按位运算操作进行处理。 但是，由于S3 Select不支持位运算操作和二进制数据，因此需要一个替代数据结构，它不仅可以表示位数组而且还可以测试设置位的存在性。 在PushdownDB中，我们使用1和0的字符串表示位数组。以下示例展示了一个S3 Select查询所包含的内容（就像一个布隆过滤器）。在SUBSTRING函数中，attr上的算术表达式就是attr上的哈希函数。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512111920727.png" alt="image-20210512111920727"></p><pre><code>With Bloom join, the first table (typically the smaller one) isloaded with filtering and projection pushed to S3. The returnedtuples are used to construct both the Bloom filter and the hashtables. The Bloom filter is then sent to S3 to load the secondtable. The returned tuples then probe the hash table to finishthe join operation.</code></pre><pre><code>使用Bloom连接时，第一个表（通常是较小的表）被加载下推到S3的过滤和投影之后的数据。 返回的元组用于构造Bloom过滤器和哈希表。 然后将Bloom过滤器发送到S3以加载第二个表。 返回的元组探测哈希表以完成连接操作。</code></pre><pre><code>The current implementation of Bloom join supports onlyinteger join attributes. This is because the hash functionsonly support integer data types at present. A more generalsupport for hashing in the S3 Select API would enable Bloomjoins on arbitrary attributes. In fact, while algorithms existfor hashing variable-length strings, they require looping and/orarray processing operators that are not currently available to S3Select queries. Additionally, since the bit array is representedusing 1 and 0 characters, the bit array is much larger than itwould be if S3 Select had support for binary data or bitwiseoperators to test the presence of a set bit. We believe thatextending the S3 Select interface in this fashion would bebeneficial in our Bloom join algorithm, and perhaps elsewhere.</code></pre><pre><code>Bloom联接的当前实现仅支持整数联接属性。 这是因为哈希函数目前仅支持整数数据类型。 对S3 Select API中的哈希更一般的支持是连接任意属性。 实际上，虽然存在算法可以散列可变长度的字符串，它们需要循环或者S3选择查询当前不支持的数组处理操作。 另外，由于位数组使用字符0和1表示，如果S3 Select支持二进制数据或按位操作测试是否存在设置位，位数组将会比现在大得多。我们相信以这种方式扩展S3 Select接口将会有益于我们的Bloom联接算法，或许还有其他方面也可以。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512113250822.png" alt="image-20210512113250822"></p><pre><code>图2：Customer选择性-性能和成本变化（改变Customer表的选择性时）。</code></pre><pre><code>Figure 2 shows the runtime and cost of different joinalgorithms as the selectivity on the customer table changes.Baseline and filtered joins perform similarly, which is expectedsince they only apply selection to the smaller customer tableand load the entire orders table, which incurs the same large amount of network traffic. Bloom join performs significantlybetter than either as the high selectivity on the first table isencapsulated by the Bloom filter, which significantly reducesthe number of returned rows for the larger orders table. As thepredicate on the customer table becomes less selective, Bloomjoins performance degrades as fewer records are filtered bythe Bloom filter. Bloom join is cheaper than the other twoalgorithms with high selectivity, although the cost advantageis not as significant as the runtime advantage.</code></pre><pre><code>图2显示了不同连接算法的运行时间和成本的变化（随着Customer表上的选择性的变化）。基准连接和过滤连接的性能类似，这是预期的。因为它们仅将选择应用于较小的Customer表并加载整个订单表，这会产生相同数量的网络流量。Bloom Join比任何一个表现得更出色，因为第一张表上的高选择性被Bloom过滤器封装，这可以显著减少较大的订单表返回的行数。随着Customer表上的谓词变得越来越少，Bloom联接性能降低，因为布隆过滤器过滤的记录更少了。Bloom Join比法其他两个具有高选择性的算法更便宜，尽管成本优势没有运行时间优势那么重要。</code></pre><h3 id="1-6-2、性能评估"><a href="#1-6-2、性能评估" class="headerlink" title="1.6.2、性能评估"></a>1.6.2、性能评估</h3><pre><code>We compare the runtime and cost of the three join algorithms: baseline, filtered, and Bloom joins. Our experiments use the customer and orders tables from the TPC-Hbenchmark with a scale factor of 10. The following SQLquery will be used for evaluation. Our experiments willsweep two parameters in the query, upper_c_acctbaland upper_o_orderdate, with their default values being−950 and None, respectively.</code></pre><pre><code>我们比较了三种联接算法的运行时间和成本：基准联接，过滤联接和Bloom联接。 我们的实验使用TPC-H的Customer和Orders表（以比例因子10为基准）。以下SQL查询将用于评估。 我们的实验将扫描查询中的两个参数upper_c_acctbal和upper_o_orderdate，其默认值分别为−950和None。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512114156004.png" alt="image-20210512114156004"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512193155836.png" alt="image-20210512193155836"></p><pre><code>The results are shown in Figure 3. Filtered join performssignificantly better than baseline join when the filter on the orders table is selective. The performance advantage disappearswhen the filter becomes less selective. Bloom join performsbetter and remains fairly constant as the number of recordsreturned from the orders table remains small due to the Bloomfilter. The cost of Bloom join is either comparable or cheaperthan the alternatives</code></pre><pre><code>结果如图3所示。当orders表上的过滤器处于高选择性时，其性能明显优于基线连接。当过滤器的选择性降低时，性能优势消失了。由于Bloom过滤器，布隆连接执行得更好，并且保持稳定的从订单表返回的记录数量。相比其他选择Bloom连接的成本是相当的或者更便宜的。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512192940211.png" alt="image-20210512192940211"></p><pre><code>Figure 4 shows the runtime and cost of baseline and filteredjoin as well as Bloom join with different false positive rates.We can see that the best performance and cost numbers canbe achieved when the false positive rate is 0.01. When thefalse positive rate is low, the Bloom filter is large in size,increasing the computation requirement in S3 Select. Whenthe false positive rate is high, the Bloom filter is less selective,meaning more data will be returned from S3. A rate of 0.01strikes a balance between these two factors.</code></pre><pre><code>图4显示了基线连接和过滤连接的运行时间和成本以及具有不同误报率的Bloom联接。我们可以看到，在误报率为0.01时达到最佳性能和最低成本。当误报率低的时候，布隆过滤器大小比较大，这增加S3 Select中的计算要求。当误报率很高时，布隆过滤器的选择性较低，这意味着将从S3返回更多数据。误报率0.01在这两个因素之间取得平衡。</code></pre><h2 id="1-7、group-by"><a href="#1-7、group-by" class="headerlink" title="1.7、group by"></a>1.7、group by</h2><pre><code>The current S3 Select supports simple aggregation on individual attributes but not with a group-by clause. Pushing agroup-by aggregation to S3 is desirable as it can significantly reduce network traffic. In this section, we explore designs ofgroup-by algorithms that leverage S3 Select.</code></pre><pre><code>当前的S3 Select支持在单个属性上进行简单聚合，但不支持group-by子句。 下推一个group by聚合到S3是令人向往的，因为它可以显着减少网络流量。 在本节中，我们将探讨以下方面的设计：利用S3 Select的分组算法。</code></pre><pre><code>Group-by can be performed at the server-side by loading alldata from S3 directly (Server-side group-by) or loading S3 datausing a predicate (Filtered group-by). Both implementationsare straightforward. Therefore, we focus our discussion on twoother algorithms that are less obvious to implement but deliverbetter performance — S3-side group-by and Hybrid group-by.</code></pre><pre><code>分组可以通过直接从S3加载所有数据（服务器端group by）或者使用谓词（过滤group by）加载S3数据，在服务端被执行。 两种实现都很简单。 因此，我们将讨论重点放在两个其他不太容易实现但有更好性能的算法-S3端分组和混合分组。</code></pre><h3 id="1-7-1、S3端分组"><a href="#1-7-1、S3端分组" class="headerlink" title="1.7.1、S3端分组"></a>1.7.1、S3端分组</h3><pre><code>The S3-side group-by algorithm pushes the group-by logicentirely into S3 and thus minimizes the amount of networktraffic. We use the following query to demonstrate how thealgorithm works. It computes the total account balance foreach nation in the customer table.</code></pre><pre><code>S3端分组算法下推整个分组逻辑到S3中，从而最大程度地减少网络流量。 我们使用以下查询来说明算法如何工作。 它Customer表中的nation进行分组，计算每个nation的总帐户余额。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512115721954.png" alt="image-20210512115721954"></p><pre><code>The first phase of execution collects the values for thegroups in the group-by clause. For the example query, we needto find the unique values of c_nationkey. This is accomplished by running a projection using S3 Select to return onlythe c_nationkey column (i.e., SELECT c_nationkeyFROM customer). The compute node then finids uniquevalues in the column</code></pre><pre><code>执行的第一阶段收集group by子句中的分组。 对于示例查询，我们需要查找c_nationkey的所有唯一值。 这是通过使用S3 Select（仅返回）来运行投影仅返回c_nationkey列来完成的（即SELECT c_nationkey FROM customer）。 然后，计算节点将确定唯一列中的值。</code></pre><pre><code>In the second phase of execution, PushdownDB requestsS3 to perform aggregation for each individual group that thefirst phase identified. For example, if the unique values ofc_nationkey are 0 and 1, then the following query will besent to S3 in phase 2.</code></pre><pre><code>在执行的第二阶段，PushdownDB请求S3对每个第一阶段确认的单独的组执行聚合。 例如，如果c_nationkey是0和1，那么下面的查询将在阶段2中发送到S3。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512120611853.png" alt="image-20210512120611853"></p><pre><code>The first and second returned numbers are the total customerbalance for c_nationkey = 0 and 1, respectively. The number of columns in the S3 Select response equals the numberof unique groups multiplied by the number of aggregations.The query execution node converts the results into the rightformat and returns them to the user.</code></pre><pre><code>返回的第一个和第二个数字分别是c_nationkey为0和1的总余额。 S3 Select response中的列数等于唯一组的数量乘以聚合的数量。查询执行节点将结果转换为合适的格式并将其返回给用户。</code></pre><h3 id="1-7-2、混合分组"><a href="#1-7-2、混合分组" class="headerlink" title="1.7.2、混合分组"></a>1.7.2、混合分组</h3><pre><code>In practice, many data sets are highly skewed, with a fewlarge groups containing the majority of rows, and many groupscontaining only a few rows. For these workloads, S3-sidegroup-by will likely deliver bad performance since the largenumber of groups leads to long S3 Select queries. To solvethis problem, we propose a hybrid group-by algorithm thatdistinguishes groups based on their size. Hybrid group-bypushes the aggregation on large groups to S3, thus eliminatingthe need for transferring large amounts of data. Small groups,on the other hand, are aggregated by the query executionnodes.</code></pre><pre><code>在实践中，许多数据集高度偏斜，只有少数几个分组包含大量行，其他大部分分组只包含少数几行。 对于这些工作负载，S3端分组可能产生比较差的性能，因为分组太多会导致较长的S3 Select查询。为了解决这一问题，我们提出了一种混合分组算法，该算法根据组的大小分组。 混合分组将大组上的聚合下推到S3，从而消除了传输大量数据的需要。另一方面，小组由查询执行节点进行聚合。</code></pre><pre><code>Similar to S3-side group-by, hybrid group-by also containstwo phases. In the first phase, however, hybrid group-by doesnot scan the entire table, but only a sample of rows as theyare sufficient to capture the populous groups. In particular,PushdownDB scans the first 1% of data from the table.</code></pre><pre><code>类似于S3端分组，混合分组也包含两个阶段。 但是，在第一阶段，混合分组不会扫描整个表，而是只扫描所有行的一个样本（足以获得行很多的分组）。 特别地，PushdownDB扫描表中前1％的数据。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512131152134.png" alt="image-20210512131152134"></p><pre><code>Listing 5 shows the S3 Select query for the second phaseof hybrid group-by. Two queries are sent to S3. Q1 runsremote aggregation for the large groups (in this example,c_nationkey = 0), similar to the second phase of S3-sidegroup-by. Q2 is sent for loading rows belonging to the rest ofthe groups from S3. Aggregation for these rows is performedlocally at the compute node.</code></pre><pre><code>List5显示了混合分组第二阶段的S3 Select查询。 两个查询被发送到S3。 第一个查询运行大组的远程聚合（在此示例中，c_nationkey = 0），类似于S3-side分组的第二阶段。 第二个查询加载S3分组的剩余行。 这些行的聚合在计算节点本地执行。</code></pre><h3 id="1-7-3、Performance-Evaluation"><a href="#1-7-3、Performance-Evaluation" class="headerlink" title="1.7.3、Performance Evaluation"></a>1.7.3、Performance Evaluation</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512194220209.png" alt="image-20210512194220209"></p><pre><code>Figure 5 shows the runtime and cost per query for differentgroup-by algorithms, as the number of groups changes from2 to 32. Each query performs aggregation over four columns.The performance of server-side group-by and filtered group-by does not change with the number of groups, because bothalgorithms must load all the rows from S3 to the computenode. However, filtered group-by loads only the four columnson which aggregation is performed while server-side group-by loads all the columns. This explains the 64% higherperformance of filtered over server-side group-by. S3-sidegroup-by performs 4.1× better than filtered group-by whenthere are only a few unique groups. Performance degrades,however, when more groups exist. This is due to the increasedcomputation overhead that is performed by the S3 servers.</code></pre><pre><code>图5显示了不同分组算法每个查询的运行时间和成本，随着分组数从2增加到32。每个查询在四个列上执行聚合。服务器端group-by和filter group-by的性能不会随组数的变化而改变，因为这两个算法都必须将S3中的所有行加载到计算节点。但是，过滤分组仅加载聚合时用到的四个列，而服务器端group by加载所有列。这解释了为什么过滤分组比服务端分组算法性能高出了64％。当只有几个唯一组时，S3端分组算法比过滤分组性能高出了4.1倍。但是当存在更多组时，性能就下降了。这是由于增加了S3服务器执行的计算开销。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512195028379.png" alt="image-20210512195028379"></p><pre><code>We first investigate an important parameter in hybrid group-by: how many groups should be aggregated at S3 vs. serverside. Figure 6 shows the runtime of server-side and S3-side aggregation while increasing the number of groups aggregated inS3. The bars show the runtime and the line shows the numberof bytes returned from S3. More S3-side aggregation increasesthe execution time of the part of query executed at S3, but reduces the amount of data transferred over the network. Thefinal execution time is determined by the maximum of thetwo bars shown in Figure 6. Overall, having 6 to 8 groupsaggregated in S3 offers the best performance.</code></pre><pre><code>我们首先调查混合分组中的一个重要参数：在S3与服务器端上应聚合多少个分组。 图6显示了服务器端和S3端聚合的运行时间，同时增加了S3端的分组数量。 条形图显示运行时间，而折线显示从S3返回的字节数。 更多的S3端聚合增加了在S3端执行的查询部分的执行时间，但减少了通过网络传输的数据量。最终执行时间取决于图6中显示了两个条形图的较大值。总体而言，在S3中有6到8个分组聚合时，性能最优。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512195815937.png" alt="image-20210512195815937"></p><pre><code>Figure 7 shows the performance and cost of three group-byalgorithms as the level of skew in group sizes increases. Acrossall levels of skew, the performance and cost of server-sideand filtered group-by remain the same. In both algorithms, theamount of data loaded from S3 and the computation performedon the server are independent of data distribution. Whenthe workload has high skew, the performance advantage ofpushing group-by to S3 is evident. With θ = 1.3, hybrid group-by performs 31% better than filtered group-by. However,hybrid group-by does not have a cost advantage over the othertwo algorithms, since it has to scan the table one more timethan filtered group-by. This extra table scan can be avoidedby improving the interface of S3 Select.</code></pre><pre><code>图7显示了三种分组算法的性能和成本的变化（随着分组大小的倾斜程度增加时）。可以看到，随着倾斜程度的增加，服务器端分组和过滤分组的性能和成本保持不变。 在这两种算法中，从S3加载的数据量和执行在服务器上的计算独立于数据分发。当工作负载倾斜程度高时，将groupby下推到S3的性能优势是明显的。在θ= 1.3的情况下，混合分组算法的性能要比过滤分组高31％。 然而，混合分组算法相比其他两个分组算法并没有成本优势，因为它比过滤分组算法多扫描一次表。这可以通过改进S3 Select的接口来避免这种额外的表扫描。</code></pre><h2 id="1-8、TOP-K"><a href="#1-8、TOP-K" class="headerlink" title="1.8、TOP-K"></a>1.8、TOP-K</h2><pre><code>Top-K is a common operator that selects the maximum orminimum K records from a table according to a specifiedexpression. In this section, we discuss a sampling-based approach that can significantly improve the efficiency of top-Kusing S3 Select.</code></pre><pre><code>Top-K是根据指定的表达式从一张表里选择最大或最小的K条记录的常用操作。在本节中，我们讨论一个基于采样的方法，该方法使用S3 Select可以显著提高top-K的效率。</code></pre><h3 id="1-8-1、基于采样的TOP-K算法"><a href="#1-8-1、基于采样的TOP-K算法" class="headerlink" title="1.8.1、基于采样的TOP-K算法"></a>1.8.1、基于采样的TOP-K算法</h3><pre><code>The number of records returned by a top-K query, K, istypically much smaller than the total number of records in thetable, N. Therefore, transferring the entire table from S3 to the server is inherently inefficient. We designed a sampling-based two-phase algorithm to resolve this inefficiency: the firstphase samples the records from the table and decides whatsubset of records to load in the second phase; then in thesecond phase, the query execution node loads this subset ofrecords and performs the top-K computation on it. We use thefollowing example query for the rest of the discussion.</code></pre><pre><code>TOP-K查询返回的记录数K通常比记录中的记录总数N小得多。因此，将整个表从S3传输到服务器本质上效率低下。 我们设计了一种基于采样的两阶段算法来解决这种效率低下的问题：第一阶段对表中的记录进行采样并确定在第二阶段加载的记录子集； 然后在第二阶段，查询执行节点加载该子集并对其执行top-K计算。对于剩下的讨论我们使用下面的示例查询。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512132653209.png" alt="image-20210512132653209"></p><pre><code>During the first phase, we obtain a conservative estimateof a subset that must contain the top-K records. Specifically,the system loads a random sample of S (&gt; K) records fromthe S3 and uses the Kth smallest l_extendedprice asthe threshold. If the data in the table is random, then thealgorithm can simply request the first S records from the table.Otherwise, if the data distribution in the l_extendedpricecolumn is not random, then a random sample of S recordscan be obtained by requesting a number of data chunks usingrandom byte offsets from the data table. The sampling processguarantees that the top-K records must be below the threshold,since we have already seen K records below the threshold inthe sample. In the second phase, the algorithm uses S3 Selectto load records below the threshold.</code></pre><pre><code>在第一阶段，我们获得了保守必须包含前K个记录的子集的估计。 具体来说，系统从S3中加载S（&gt; K）个记录的随机样本，并使用第K小的l_extendedprice作为阈值。 如果表中的数据是随机的，则该算法可以简单地从表中请求第一组S个记录。否则，如果数据分布在l_extendedprice中列不是随机的，则S个记录的随机样本可以通过使用数据表中的随机字节偏移量请求多个数据块来获得。 采样过程确保前K条记录必须低于阈值，因为我们在样本里已经看到低于阈值的K条记录了。 在第二阶段，算法使用S3 Select加载低于阈值的记录。</code></pre><pre><code>The number of records returned in the second phase shouldbe between K and N. The algorithm then uses a heap to selectthe top-K records from all returned records.</code></pre><pre><code>第二阶段返回的记录数应介于K和N之间。然后该算法使用堆来选择所有返回的记录中的前K个记录。</code></pre><h3 id="1-8-2、分析"><a href="#1-8-2、分析" class="headerlink" title="1.8.2、分析"></a>1.8.2、分析</h3><pre><code>An important parameter in the sampling-based algorithm isthe sample size S, which is crucial to the efficiency of thealgorithm. A small S means the second phase will load moredata from S3, while a large S means the sampling phase willtake significant time. The goal of the sampling-based top-Kalgorithm is to reduce data traffic from S3. We can obtainthe sample size that minimizes data traffic using the followinganalysis:</code></pre><pre><code>基于采样的算法中的一个重要参数是样本大小S，这对于算法的效率是至关重要的。 较小的S表示第二阶段将加载更多来自S3的数据，而较大的S表示采样阶段将花费大量时间。 基于采样的TOP-K算法目标是减少来自S3的数据流量。 我们可以使用以下分析获得最大程度地减少数据流量的样本大小：</code></pre><pre><code>Assume each row contains B bytes, the table containsN rows, and the sample contains S rows. We also assumethat only a fraction (α ≤ 1) of the bytes in a record isneeded during the sampling phase, because the expressionin the ORDER BY clause does not necessarily require allthe columns. We assume the sampling process is uniformlyrandom. The total number of bytes loaded from S3 during thefirst phase is:</code></pre><pre><code>假设每一行包含B个字节，表包含N行，样本包含S行。 我们还假设一条记录中仅一小部分字节（α≤1）是在采样阶段需要的，因为在ORDER BY子句中不一定需要全部列。 我们假设采样过程是随机均匀的。 第一阶段期间从S3加载的字节总数是：</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512145802805.png" alt="image-20210512145802805"></p><pre><code>The Kth record from the sample is selected as the threshold.Based on the random sampling assumption, the system loadsKN/S records in phase 2. Therefore, the total number of bytesloaded from S3 in phase 2 is:</code></pre><pre><code>选择样本中的第K条记录作为阈值。基于随机抽样假设，系统在阶段2中加载KN / S记录。因此，在阶段2中从S3加载的总字节数是：</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512150058640.png" alt="image-20210512150058640"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512150359626.png" alt="image-20210512150359626"></p><pre><code>The total amount of data loaded from S3 (D) is the sum ofdata loaded during both phases:</code></pre><pre><code>从S3（D）加载的数据总量是在两个阶段中加载的数据量之和：</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512150636642.png" alt="image-20210512150636642"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512150728578.png" alt="image-20210512150728578"></p><pre><code>可以通过上述公式找到使D最小的S值： 这使S = sqrt(KN/α)。 给定固定的表大小，α越小S越大。这是因为如果采样不会消耗大量带宽，值得采样更多记录以提高整体带宽效率。</code></pre><h3 id="1-8-3、Performance-Evaluation"><a href="#1-8-3、Performance-Evaluation" class="headerlink" title="1.8.3、Performance Evaluation"></a>1.8.3、Performance Evaluation</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512200724585.png" alt="image-20210512200724585"></p><pre><code>In Figure 8a, each bar shows the runtime of a query ata particular sample size. Each bar is broken down into twoportions: the sampling phase (phase 1) and the scanning phase(phase 2). The line shows the total amount of data returnedfrom S3 to the server.</code></pre><pre><code>在图8a中，每个条形图都显示了在特定的样本量大小时查询的运行时间。 每个条形图分为两个阶段：采样阶段（阶段1）和扫描阶段（阶段2）。折线显示了从S3到服务器返回的数据总量。</code></pre><pre><code>Figure 8b shows the query cost with varying sample size.Most of the cost is due to data scanning, with most of thisdue to the scanning phase (phase 2).</code></pre><pre><code>图8b显示了具有不同样本大小的查询成本。大部分成本是由于数据扫描造成的，其中大部分是在扫描阶段（阶段2）。</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512201225720.png" alt="image-20210512201225720"></p><pre><code>Figure 9a shows that for both algorithms, runtime increasesas K increases. This is because a larger K requires a biggerheap and also more computation at the server side. Thesampling-based top-K algorithm is consistently faster than theserver-side top-K due to the reduction in the amount of dataloaded from S3.</code></pre><pre><code>图9a显示，对于这两种算法，运行时间都会随着K的增加而增加。这是因为更大的K需要更大的堆以及在服务器端进行更多计算。这种基于采样的top-K算法始终比服务器端的TOP-K算法快，因为从S3加载的数据量减少了。</code></pre><pre><code>In Figure 9b, we observe that the sampling-based top-Kalgorithm is also consistently cheaper than server-side top-K.When K is small, the majority of the cost in the samplingbased algorithm is data scanning. As K increases, the datascan cost does not significantly change, but the computationcost increases due to the longer time spent obtaining the top-Kusing the heap.</code></pre><pre><code>在图9b中，我们观察到基于采样的top-K算法始终比服务器端的top-K算法成本低。当K较小时，基于采样的算法中的大部分成本是数据扫描。随着K的增加，数据扫描成本没有明显变化，但是计算成本增加了，因为使用堆获得TOP-K个数的时间增加了。</code></pre><h2 id="1-9、TPC-H结果"><a href="#1-9、TPC-H结果" class="headerlink" title="1.9、TPC-H结果"></a>1.9、TPC-H结果</h2><pre><code>In this section, we evaluate a representative query for eachindividual operator discussed in Sections IV – VII, as well asa subset of the TPC-H queries. Each experiment evaluates thefollowing two configurations:</code></pre><pre><code>在本节中，针对第四节至第七节中讨论的每个操作，我们评估了一个具有代表性的查询，以及TPC-H查询的子集。 每个实验都会评估以下两种配置：</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210512170722568.png" alt="image-20210512170722568"></p><pre><code>PushdownDB (Baseline): This is the PushdownDB implementation described in Section III but not including S3Select features. The server loads the entire table from S3 andperforms computation locally.</code></pre><pre><code>PushdownDB（基线）：这是第三节中描述的PushdownDB实现，但不包括S3 Select功能。 服务器从S3加载整个表后在本地执行计算。</code></pre><pre><code>PushdownDB (Optimized): The PushdownDB that includes the optimizations discussed in this paper.The experiments use the 10 GB TPC-H dataset. The resultsare summarized in Figure 10. From left to right, the figureshows performance and cost of individual operators (shadedin green), TPC-H queries (shaded in yellow), and geometricmean (shaded in light blue). The geo-mean cost only containsthe total cost, not broken down into individual components.</code></pre><pre><code>PushdownDB（优化）：PushdownDB包含了本文中讨论的优化。实验使用10 GB TPC-H数据集。 结果总结在图10中。从左到右，该图显示各个操作的性能和成本（绿色阴影），TPC-H查询（黄色阴影）和几何均值（浅蓝色阴影）。 几何均值成本仅包含总成本，而不是细分为各个组成部分的成本。</code></pre><pre><code>As we can see, the optimizations discussed in this papercan significantly improve the performance of various types ofqueries. On average, the optimized PushdownDB outperformsthe baseline PushdownDB by 6.7× and reduces the cost by30%. We assume a database can use various statistics of theunderlying data to determine which algorithm to use for aparticular query. Dynamically determining which optimizationto use is orthogonal to and beyond the scope of this paper</code></pre><pre><code>如我们所见，本文讨论的优化可以显著提高各种类型查询的性能。 平均而言，优化的PushdownDB的性能比基线PushdownDB优6.7倍，成本降低了30％。 我们假设数据库可以使用各种基础统计信息，以确定对特定查询使用哪种算法。 动态确定使用哪种优化和统计学相关，这超出了本文的范围</code></pre><pre><code>To validate these results, we also compared the execution time of PushdownDB to Presto, a highly optimizedcloud database written in Java. We use Presto v0.205 as aperformance upper bound when S3 Select is not used. Onaverage, the runtime of baseline PushdownDB is slower thanPresto by less than 2×, demonstrating that the code base ofPushdownDB is reasonably well optimized. The optimizedPushdownDB outperforms Presto by 3.4×.</code></pre><pre><code>为了验证这些结果，我们还将PushdownDB的执行时间与Presto（一个高度优化的用Java编写的云数据库）进行了比较。不使用S3 Select时，我们使用Presto v0.205作为性能上限。平均而言，基准PushdownDB的运行时间慢于Presto不到2倍，这表明PushdownDB的代码库进行了合理的优化。优化的PushdownDB的性能比Presto高3.4倍。</code></pre><h2 id="1-10、PARQUET实验"><a href="#1-10、PARQUET实验" class="headerlink" title="1.10、PARQUET实验"></a>1.10、PARQUET实验</h2><h2 id="1-11、S3-Select的局限性"><a href="#1-11、S3-Select的局限性" class="headerlink" title="1.11、S3 Select的局限性"></a>1.11、S3 Select的局限性</h2><pre><code>So far, we have demonstrated substantial performance improvement on common database operators by leveraging S3Select. In this section, we present a list of limitations of thecurrent S3 Select features and describe our suggestions forimprovement.</code></pre><pre><code>到目前为止，我们已经证明了利用S3 Select可以提高普通数据库操作的性能。 在本节中，我们列出了当前的S3选择功能的局限性并描述了我们改进的建议。</code></pre><h3 id="1-11-1、Suggestion-1-Multiple-byte-ranges-for-GET-requests"><a href="#1-11-1、Suggestion-1-Multiple-byte-ranges-for-GET-requests" class="headerlink" title="1.11.1、Suggestion 1: Multiple byte ranges for GET requests"></a>1.11.1、Suggestion 1: Multiple byte ranges for GET requests</h3><pre><code>The indexing algorithm discussed in Section IV-A sends HTTPGET requests to S3 to load records from the table; each requestasks for a specified range of bytes that are derived from anindex table lookup. According the S3 API [20], the currentGET request to S3 supports only a single byte range. Thismeans that a large number of GET requests have to be sent ifmany records are selected by a query. Excessive GET requestscan hurt performance as shown in Figure 1. Allowing a singleGET request to contain multiple byte ranges, which is allowedby HTTP, can significantly reduce the cost of HTTP requestprocessing in both the server and S3.</code></pre><pre><code>IV-A节中讨论的索引算法发送HTTP GET请求到S3以从表中加载记录； 每个请求要求从一个索引表里查找指定范围的字节数据。 根据S3 API [20]，当前对S3的GET请求仅支持单个字节范围。 这表示如果查询选择了许多记录，必须发送大量的GET请求。过多的GET请求会损害性能，如图1所示。允许一个GET请求包含多个字节范围，HTTP是允许的，这可以大大降低HTTP请求的成本，通过在服务器和S3中共同进行处理。</code></pre><h3 id="1-11-2、Suggestion-2-Index-inside-S3"><a href="#1-11-2、Suggestion-2-Index-inside-S3" class="headerlink" title="1.11.2、Suggestion 2: Index inside S3"></a>1.11.2、Suggestion 2: Index inside S3</h3><pre><code>A more thorough solution tothe indexing problem is to build the index structures entirelyinside S3. This avoids many network messages between S3and the server that are caused by accesses to the index datastructure during an index lookup. S3 can handle the requiredlogic on behalf of the server, like handling hash collisions ina hash index or traversing through the tree in a B-tree index.</code></pre><pre><code>对于索引问题更彻底的解决方案是完全建立索引结构在S3内部。 这避免了S3和服务器之间的许多网络消息，这是由于在索引查找期间访问索引数据结构而导致的。 S3可以代表服务器处理所需的的逻辑，例如在哈希索引中处理哈希冲突或遍历B树索引中的树。</code></pre><h3 id="1-11-3、Suggestion-3-More-efficient-Bloom-filters"><a href="#1-11-3、Suggestion-3-More-efficient-Bloom-filters" class="headerlink" title="1.11.3、Suggestion 3: More efficient Bloom filters"></a>1.11.3、Suggestion 3: More efficient Bloom filters</h3><pre><code>Bloom filterscan substantially improve performance of join queries, asdemonstrated in Section V. A Bloom filter is representedusing a bit array for space efficiency. The current S3 Select,however, does not support bit-wise operators. Our currentimplementation of a Bloom join in S3 Select uses a stringof 0s and 1s to represent the bit array, which is space- andcomputation-inefficient. We suggest that the next version of S3Select should support efficient bit-wise operators to improvethe efficiency of Bloom join.</code></pre><pre><code>布隆过滤器可以大大提高联接查询的性能，正如在第五节中演示的。布隆过滤器使用位数组进行表示来提高空间效率。但是当前的S3 Select不支持按位运算。我们目前S3 Select中Bloom联接的实现使用字符串0和1的整数表示位数组，这在空间和计算效率上是低下的。 我们建议S3 Select的下一个版本应该支持高效的按位操作以方便改进Bloom连接的效率。</code></pre><h3 id="1-11-4、Suggestion-4-Partial-group-by"><a href="#1-11-4、Suggestion-4-Partial-group-by" class="headerlink" title="1.11.4、Suggestion 4: Partial group-by."></a>1.11.4、Suggestion 4: Partial group-by.</h3><pre><code>Section VI-B introducedour hybrid group-by algorithm and demonstrated its superiorperformance. Since S3 does not support group-by queries, weused the CASE clause to implement S3-side group-by, which isnot the most efficient implementation. We suggest adding partial group-by queries to S3 to resolve this performance issue.Note that pushing an arbitrary group-by query entirely to S3may not be the best solution, because a large number of groupscan consume significant memory space and computation in S3.We consider the partial S3-side group-by as an optimizationto the second phase of our current hybrid group-by.</code></pre><pre><code>第VI-B节介绍了我们的混合分组算法，并展示了其优越的性能表现。 由于S3不支持分组查询，因此我们使用CASE子句实现了S3端分组查询，这不是最搞笑的实现。 我们建议向S3添加部分分组查询以解决此性能问题。请注意，将任意分组查询完全下推到S3可能不是最好的解决方案，因为有很多组在S3中可能会占用大量内存空间和计算量。我们认为部分S3端的分组查询对于目前的混合分组算法的第二阶段是一种优化。</code></pre><h3 id="1-11-5、Suggestion-5-Computation-aware-pricing"><a href="#1-11-5、Suggestion-5-Computation-aware-pricing" class="headerlink" title="1.11.5、Suggestion 5: Computation-aware pricing."></a>1.11.5、Suggestion 5: Computation-aware pricing.</h3><pre><code>Across ourevaluations on the optimized PushdownDB, data scan costsdominate a majority of queries. In the current S3 Selectpricing model, data scanning costs a fixed amount ($0.002/GB)regardless of what computation is being performed. Giventhat our queries typically require little computation in S3, thecurrent pricing model may have overcharged our queries. We believe a fairer pricing model is needed, in which the datascan cost should depend on the workload.</code></pre><pre><code>横看我们对优化的PushdownDB的评估，数据扫描成本在大多数查询占主要地位。 在当前的S3 Select定价模型中，不管正在执行什么计算，数据扫描的成本是固定的（0.002美元/ GB）。鉴于我们的查询通常在S3中只需要很少的计算，当前的定价模式可能对我们的查询收费过高。 我们认为需要一个更公平的定价模式，其中的数据扫描成本应取决于工作量。</code></pre><h2 id="1-12、相关工作"><a href="#1-12、相关工作" class="headerlink" title="1.12、相关工作"></a>1.12、相关工作</h2><h3 id="1-12-1、In-Cloud-Databases"><a href="#1-12-1、In-Cloud-Databases" class="headerlink" title="1.12.1、In-Cloud Databases"></a>1.12.1、In-Cloud Databases</h3><pre><code>Database systems are moving to the cloud environmentdue to cost. Most of these in-cloud databases support storing data within S3. Vertica [21], a traditional column-storeshared nothing database, started to support S3 in its new Eonmode [22]. Snowflake [2] is a software-as-a-service (SaaS)database designed specifically for the cloud environment.Many open-source in-cloud databases have been developedand widely adopted, examples including Presto [1], Hive [12],and Spark SQL [13]. Furthermore, AWS offers a few proprietary database systems in the cloud: Athena [23], Aurora [24],and Redshift [3].</code></pre><pre><code>由于成本关系，数据库系统正在迁移到云环境。大多数这些云数据库都支持在S3内存储数据。 Vertica [21]，一个传统的列存储，share-nothing数据库，开始在其新的Eon模式[22]中支持S3。 Snowflake [2]是一种软件即服务（SaaS）专为云环境设计的数据库。许多开源的云数据库被开发出来并被广泛采用，例如Presto [1]，Hive [12]，和Spark SQL [13]。 此外，AWS在云中提供了一些专有的数据库系统：Athena [23]，Aurora [24]，和Redshift [3]。</code></pre><pre><code>Among the systems mentioned above, Presto, Spark, andHive support S3 Select in Amazon Elastic MapReduce (EMR)in limited form. For example, Presto supports pushing predicates to S3 but does not support data types like timestamp,real, or double. Furthermore, these systems currently supportonly simple filtering operations but not complex ones like join,group-by, or top-K, which are what PushdownDB focuses on.</code></pre><pre><code>在上述系统中，Presto，Spark和Hive以有限的形式支持Amazon Elastic MapReduce（EMR）中的S3 Select。 例如，Presto支持将谓词推送到S3，但不支持时间戳，实数或double数据类型。 此外，这些系统目前仅仅支持简单的过滤操作，而不支持复杂的过滤操作（例如连接，分组或top-K），这是PushdownDB所关注的。</code></pre><pre><code>The Spectrum feature of Redshift offloads some queryprocessing on data stored in S3 to the “Redshift SpectrumLayer” such that more parallelism can be exploited beyondthe capability of the cluster created by the user. The ideasdiscussed in this paper can be applied to the Redshift Spectrumsetting to improve performance of complex database operators.</code></pre><pre><code>Redshift的Spectrum功能减轻了一些查询的负担（通过将存储在S3中的数据处理移到了Redshift的Spectrum层），以便更多并行性能被充分利用（超出了用户创建的集群性能）。 本文讨论的想法可以应用于Redshift Spectrum环境下以提高复杂数据库操作的性能。</code></pre><h3 id="1-12-2、-Database-Machines"><a href="#1-12-2、-Database-Machines" class="headerlink" title="1.12.2、 Database Machines"></a>1.12.2、 Database Machines</h3><pre><code>A line of research on database machines emerged in the1970s and stayed active for more than 10 years. These systemscontain processors or special hardware to accelerate databaseaccesses, by applying the principle of pushing computation towhere the data resides.</code></pre><pre><code>在20世纪70年代出现了一系列有关数据库机器的研究，并且活跃了10多年。 这些系统包含处理器或特殊硬件来加速数据库访问，通过应用将计算下推到数据所在的位置的原理。</code></pre><pre><code>The Intelligent Database Machines (IDM) [7] from BrittonLee separated the functionality of host computers and thedatabase machine which sits closer to the disks. Much ofa DBMS functionality can be performed on the databasemachine, thereby freeing the host computers to perform othertasks. Grace [25] is a parallel database machine that containsmultiple processors connected to multiple disk modules. Eachdisk module contains a filter processor that can performselection using predicates and projection to reduce the amountof data transfer as well as computation in the main processors.</code></pre><pre><code>Britton Lee的智能数据库机（IDM）[7]分离了主机计算机和靠近磁盘的数据库机的功能。许多DBMS功能可以在数据库机上执行，从而解放主机以执行其他任务。 Grace [25]是包含以下内容的并行数据库计算机：多个处理器连接到多个多个磁盘模块。 每个磁盘模块包含一个过滤处理器，它能使用谓词进行选择，并且可以投影来减少数据传输量以及主处理器中的计算量。</code></pre><pre><code>More recently, in the 2000s, IBM Netezza data warehouseappliances [9] used FPGA-enabled near-storage processors(FAST engines) to support data compression, projection, androw selection. In Oracle’s Exadata [8] database engines, thestorage unit (Exadata Cell) can support predicate filtering,column filtering, Bloom join, encryption, and indexing amongother functionalities.</code></pre><pre><code>最近，在21世纪初，IBM Netezza数据仓库设备[9]使用了支持FPGA的近存储处理器（FAST引擎）来支持数据压缩，投影和行选择。 在Oracle Exadata [8]数据库引擎中，存储单元（Exadata单元）可以支持谓词过滤，列过滤，Bloom连接，加密和索引等等其他功能。</code></pre><h3 id="1-12-3、Near-Data-Processing-NDP"><a href="#1-12-3、Near-Data-Processing-NDP" class="headerlink" title="1.12.3、Near-Data Processing (NDP)"></a>1.12.3、Near-Data Processing (NDP)</h3><pre><code>Near-data processing has recently attracted much researchinterest in the computer architecture community [26]. Techniques have been proposed for memory and storage devicesin various part of the system. Although the techniques in thispaper were proposed assuming a cloud storage setting, manyof them can be applied to the following other settings as well.</code></pre><pre><code>邻近数据处理在计算机体系结构社区最近吸引了很多研究兴趣[26]。 在系统的各个部分已经提出了用于内存和存储设备的技术。 虽然本文提出的各种技术基于云存储环境，但是它们也可以应用于以下其他环境。</code></pre><pre><code>Processing-in-Memory (PIM) [27] exploits computationnear or inside DRAM devices to reduce data transfer betweenCPU and main memory, which is a bottleneck in modernprocessors. Recent development in 3D-stacked DRAM implements logic at the bottom layer of the memory chip [28],supporting in-memory processing with lower energy and cost.</code></pre><pre><code>内存中处理（PIM）[27]利用DRAM设备附近或内部的计算来减少CPU和主存之间的数据传输，这是现代处理器的瓶颈。3D堆栈 DRAM的最新发展在内存芯片的底层实现了逻辑[28]，以更低的能源和成本支持in-memory处理。</code></pre><pre><code>While smart disks have been studied in the early 2000s [29],[30], they have not seen wide adoption due to the limitationsof the technology. The development of FPGAs and SSDs inrecent years has made near storage computing more practical.Recent studies have proposed to push computation to bothnear-storage FPGAs [31], [32] and the processor within anSSD device [33], [34], [35]. Most of these systems onlyfocused on simple operators like filter or projection, but didnot study the effect of more complex operators as we do inPushdownDB.</code></pre><pre><code>尽管在21世纪初期已经研究了智能磁盘[29]，[30]，但由于技术局限性，他们尚未得到广泛应用。 近年来FPGA和SSD的发展让邻近的存储计算变得更加实用。最近的研究提出将计算下推到邻近存储的FPGA [31]，[32]和SSD设备[33]中的处理器，[34]，[35]。 大多数这些系统仅仅关注简单的操作（例如过滤器或投影），而不像我们在PushdownDB里的那样研究更复杂的操作的影响。</code></pre><pre><code>Hybrid shipping techniques execute some query operatorsat the client side, where the query is invoked, and some at theserver side, where data is stored [36]. However, near-storagecomputing services as S3 do not support complex operatorssuch as joins. Hybrid shipping does not consider how to pushdown only some of the steps involved in the implementationof a single operator, which is what PushdownDB addresses.</code></pre><pre><code>混合传输技术在客户端（调用查询的地方）执行一些查询操作，还有一些在服务器端（存储数据的地方）[36]。 但是，邻近存储作为S3的计算服务不支持复杂的操作，例如连接。 混合传输不考虑如何下推在单个操作中所涉及实现的仅仅一部分步骤，这就是PushdownDB所解决的问题。</code></pre><h2 id="1-13、结论"><a href="#1-13、结论" class="headerlink" title="1.13、结论"></a>1.13、结论</h2><pre><code>This paper presents PushdownDB, a data analytics enginethat accelerates common database operators by performingcomputation in S3 via S3 Select. PushdownDB reduces bothruntime and cost for a wide range of operators, includingfilter, project, join, group-by, and top-K. Using S3 Select,PushdownDB improves the average performance of a subsetof the TPC-H queries by 6.7× and reduces cost by 30%.</code></pre><pre><code>本文介绍了数据分析引擎PushdownDB，它通过S3 Select在S3中执行计算加速了一般的数据库操作。 PushdownDB减少了各种操作的运行时间和成本，包括过滤，投影，连接，分组和TOP-K。使用S3 Select，PushdownDB对于TPC-H查询子集的平均性能提升了6.7倍，成本降低了30％。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20210506</title>
      <link href="2021/05/05/20210506/"/>
      <url>2021/05/05/20210506/</url>
      
        <content type="html"><![CDATA[<h1 id="1、王阳阳学长实现部分汇总"><a href="#1、王阳阳学长实现部分汇总" class="headerlink" title="1、王阳阳学长实现部分汇总"></a>1、王阳阳学长实现部分汇总</h1><h2 id="1-1、查询内并行负载均衡读"><a href="#1-1、查询内并行负载均衡读" class="headerlink" title="1.1、查询内并行负载均衡读"></a>1.1、查询内并行负载均衡读</h2><p>查找了mPaxos里面所有代码，这一块可以确定<strong>没有实现</strong>，王阳阳学长改动的部分是在SE 层，这一块需要CE层维护一个任务队列。</p><h2 id="1-2、ConcurrentHashMap"><a href="#1-2、ConcurrentHashMap" class="headerlink" title="1.2、ConcurrentHashMap"></a>1.2、ConcurrentHashMap</h2><p>用来维护分区路由表，这部分仅仅做了一个简单的测试，并没有加到CE层</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505220617788.png" alt="image-20210505220617788"></p><h2 id="1-3、虚拟分区"><a href="#1-3、虚拟分区" class="headerlink" title="1.3、虚拟分区"></a>1.3、虚拟分区</h2><p>定义了一些数据结构，做了些简单的测试</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505220528997.png" alt="image-20210505220528997"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505220549833.png" alt="image-20210505220549833"></p><h2 id="1-4、并行写"><a href="#1-4、并行写" class="headerlink" title="1.4、并行写"></a>1.4、并行写</h2><p>将ha_ma_se里的write_from_XXX移到acceptor.cpp里的Persist里面了，但是这部分被注释了，应该是没改好</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506083448969.png" alt="image-20210506083448969"></p><p>下面周报里的东西都没找到</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506083714196.png" alt="image-20210506083714196"></p><h2 id="1-5、一些简单测试"><a href="#1-5、一些简单测试" class="headerlink" title="1.5、一些简单测试"></a>1.5、一些简单测试</h2><p>上周报告mPaxos测试部分已给出</p><h2 id="1-6、SE之间通信报文设计"><a href="#1-6、SE之间通信报文设计" class="headerlink" title="1.6、SE之间通信报文设计"></a>1.6、SE之间通信报文设计</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505222126571.png" alt="image-20210505222126571"></p><p>借鉴了phxpaxos开源项目</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Base <span class="token operator">::</span> <span class="token function">PackBaseMsg</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span> sBodyBuffer<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> iCmd<span class="token punctuation">,</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span> sBuffer<span class="token punctuation">)</span> <span class="token keyword">int</span> Base <span class="token operator">::</span> <span class="token function">UnPackBaseMsg</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span> sBuffer<span class="token punctuation">,</span> Header <span class="token operator">&amp;</span> oHeader<span class="token punctuation">,</span> size_t <span class="token operator">&amp;</span> iBodyStartPos<span class="token punctuation">,</span> size_t <span class="token operator">&amp;</span> iBodyLen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-7、通信线程和⼯作线程的衔接"><a href="#1-7、通信线程和⼯作线程的衔接" class="headerlink" title="1.7、通信线程和⼯作线程的衔接"></a>1.7、通信线程和⼯作线程的衔接</h2><p>只参考了phxpaxos的多⽣产者单消费者模型</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505222657242.png" alt="image-20210505222657242"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505223138160.png" alt="image-20210505223138160"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505223210618.png" alt="image-20210505223210618"></p><h2 id="1-8、Protobuf"><a href="#1-8、Protobuf" class="headerlink" title="1.8、Protobuf"></a>1.8、Protobuf</h2><p>借用Google的protobuf开源库加入到MA中来，实现了网络传输报文的序列化和反序列化</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505223851368.png" alt="image-20210505223851368"></p><h2 id="1-9、write-from-log"><a href="#1-9、write-from-log" class="headerlink" title="1.9、write_from_log"></a>1.9、write_from_log</h2><p>参数里需要传一个groupid标识写入的分区号，这个没有实现</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210505224741847.png" alt="image-20210505224741847"></p><h2 id="1-10、多组日志"><a href="#1-10、多组日志" class="headerlink" title="1.10、多组日志"></a>1.10、多组日志</h2><p>可执行单条指令，sysbench有问题</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506082528267.png" alt="image-20210506082528267"></p><h2 id="1-11、定点读、写"><a href="#1-11、定点读、写" class="headerlink" title="1.11、定点读、写"></a>1.11、定点读、写</h2><p><code>net_serv.cc</code>:增添<code>nodeinfo</code>结构体，<code>IP</code>和<code>Net</code>的映射<code>map</code>，节点信息列表<code>nodelist</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506084904887.png" alt="image-20210506084904887"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506084832763.png" alt="image-20210506084832763"></p><p><code>mysqld.cc</code>：修改启动函数，增添节点信息加载函数，保存<code>ip</code>和<code>net</code>的映射关系</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506090110673.png" alt="image-20210506090110673"></p><p><code>qg_quorum.h</code>:重定义<code>quorum_config_t</code>结构体，添加<code>ip</code>属性，便于后续<code>ip</code>和<code>net</code>的映射</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506085640727.png" alt="image-20210506085640727"></p><p><code>os0doc.cc</code>：修改<code>write</code>操作，通过判定文件操作对象是否为<code>redo</code>日志生成不同的<code>quorum_config_t</code>对象,在此过程中向<code>PartitionTune</code>对象传递<code>Group</code>参数获取操作节点<code>IP</code>，并将IP传递给<code>quorum_config_t</code>对象。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506085204963.png" alt="image-20210506085204963"></p><p>修改<code>read</code>操作，通过识别<code>.ibd</code>文件为读生成<code>quorum_config_t</code>对象，后续进行定点读方式同写操作。因为系统初始化函数涉及表空间打开操作，因此需要区分初始化操作和后续的读操作，由于初始化操作固定，因此可通过全局变量访问次数来区分初始化操作和读数据页操作。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506085554013.png" alt="image-20210506085554013"></p><p><code>sql_class.cc</code>：修改<code>ma_ce</code>,增添<code>ce、se</code>之间定点写操作通信函数，通过判定<code>quorum_config_t</code>对象属性进入通信流程，并通过<code>quorum_config_t</code>对象<code>ip</code>属性获取对应<code>net</code>，进入发送接收阶段。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210506084445818.png" alt="image-20210506084445818"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡读 </tag>
            
            <tag> 虚拟分区 </tag>
            
            <tag> wyy </tag>
            
            <tag> protobuf </tag>
            
            <tag> 多生产者和单消费者模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210429</title>
      <link href="2021/04/26/20210429/"/>
      <url>2021/04/26/20210429/</url>
      
        <content type="html"><![CDATA[<h1 id="1、分布式一致性写"><a href="#1、分布式一致性写" class="headerlink" title="1、分布式一致性写"></a>1、分布式一致性写</h1><h2 id="1-1、存储层网络通信模型"><a href="#1-1、存储层网络通信模型" class="headerlink" title="1.1、存储层网络通信模型"></a>1.1、存储层网络通信模型</h2><h3 id="1-1-1、论文阅读"><a href="#1-1-1、论文阅读" class="headerlink" title="1.1.1、论文阅读"></a>1.1.1、论文阅读</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428202122350.png" alt="image-20210428202122350"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428204755716.png" alt="image-20210428204755716"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428204817378.png" alt="image-20210428204817378"></p><h3 id="1-1-2、代码梳理"><a href="#1-1-2、代码梳理" class="headerlink" title="1.1.2、代码梳理"></a>1.1.2、代码梳理</h3><h4 id="1-1-2-1、TcpClient"><a href="#1-1-2-1、TcpClient" class="headerlink" title="1.1.2.1、TcpClient"></a>1.1.2.1、TcpClient</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428205301785.png" alt="image-20210428205301785"></p><h4 id="1-1-2-2、TcpAcceptor"><a href="#1-1-2-2、TcpAcceptor" class="headerlink" title="1.1.2.2、TcpAcceptor"></a>1.1.2.2、TcpAcceptor</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428205438262.png" alt="image-20210428205438262"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428205640310.png" alt="image-20210428205640310"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428205741207.png" alt="image-20210428205741207"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428210004464.png" alt="image-20210428210004464"></p><h2 id="1-2、多分区选主算法实现"><a href="#1-2、多分区选主算法实现" class="headerlink" title="1.2、多分区选主算法实现"></a>1.2、多分区选主算法实现</h2><h3 id="1-2-1、论文阅读"><a href="#1-2-1、论文阅读" class="headerlink" title="1.2.1、论文阅读"></a>1.2.1、论文阅读</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428210121620.png" alt="image-20210428210121620"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428210335811.png" alt="image-20210428210335811"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428210423697.png" alt="image-20210428210423697"></p><h3 id="1-2-2、代码梳理"><a href="#1-2-2、代码梳理" class="headerlink" title="1.2.2、代码梳理"></a>1.2.2、代码梳理</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428212437650.png" alt="image-20210428212437650"></p><h2 id="1-3、多分区并行日志复制协议"><a href="#1-3、多分区并行日志复制协议" class="headerlink" title="1.3、多分区并行日志复制协议"></a>1.3、多分区并行日志复制协议</h2><h3 id="1-3-1、论文阅读"><a href="#1-3-1、论文阅读" class="headerlink" title="1.3.1、论文阅读"></a>1.3.1、论文阅读</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428212857939.png" alt="image-20210428212857939"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428213126749.png" alt="image-20210428213126749"></p><h3 id="1-3-2、代码梳理"><a href="#1-3-2、代码梳理" class="headerlink" title="1.3.2、代码梳理"></a>1.3.2、代码梳理</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428213941159.png" alt="image-20210428213941159"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428215059640.png" alt="image-20210428215059640"></p><h3 id="1-3-3、测试"><a href="#1-3-3、测试" class="headerlink" title="1.3.3、测试"></a>1.3.3、测试</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210428232849217.png" alt="image-20210428232849217"></p><h3 id="1-3-4、多种协议比较"><a href="#1-3-4、多种协议比较" class="headerlink" title="1.3.4、多种协议比较"></a>1.3.4、多种协议比较</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210428234151429.png" alt="image-20210428234151429"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210428234302182.png" alt="image-20210428234302182"></p><h1 id="2、负载均衡读"><a href="#2、负载均衡读" class="headerlink" title="2、负载均衡读"></a>2、负载均衡读</h1><h2 id="2-1、查询间并行负载均衡策略"><a href="#2-1、查询间并行负载均衡策略" class="headerlink" title="2.1、查询间并行负载均衡策略"></a>2.1、查询间并行负载均衡策略</h2><h3 id="2-1-1、论文阅读"><a href="#2-1-1、论文阅读" class="headerlink" title="2.1.1、论文阅读"></a>2.1.1、论文阅读</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428215310521.png" alt="image-20210428215310521"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428215325883.png" alt="image-20210428215325883"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428215350577.png" alt="image-20210428215350577"></p><h3 id="2-1-2、代码梳理"><a href="#2-1-2、代码梳理" class="headerlink" title="2.1.2、代码梳理"></a>2.1.2、代码梳理</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428215551749.png" alt="image-20210428215551749"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428215609856.png" alt="image-20210428215609856"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428215639092.png" alt="image-20210428215639092"></p><h2 id="2-2、查询内并行负载均衡策略"><a href="#2-2、查询内并行负载均衡策略" class="headerlink" title="2.2、查询内并行负载均衡策略"></a>2.2、查询内并行负载均衡策略</h2><h3 id="2-2-1、论文阅读"><a href="#2-2-1、论文阅读" class="headerlink" title="2.2.1、论文阅读"></a>2.2.1、论文阅读</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210429082126895.png" alt="image-20210429082126895"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428220108133.png" alt="image-20210428220108133"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428220118091.png" alt="image-20210428220118091"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428220149638.png" alt="image-20210428220149638"></p><h3 id="2-2-2、代码梳理"><a href="#2-2-2、代码梳理" class="headerlink" title="2.2.2、代码梳理"></a>2.2.2、代码梳理</h3><p>这部分没找到相关代码，应该是没实现</p><h1 id="3、mPaxos测试"><a href="#3、mPaxos测试" class="headerlink" title="3、mPaxos测试"></a>3、mPaxos测试</h1><h2 id="3-1、分区调度测试"><a href="#3-1、分区调度测试" class="headerlink" title="3.1、分区调度测试"></a>3.1、分区调度测试</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428214554692.png" alt="image-20210428214554692"></p><h2 id="3-2、ConcurrentHashMap测试"><a href="#3-2、ConcurrentHashMap测试" class="headerlink" title="3.2、ConcurrentHashMap测试"></a>3.2、ConcurrentHashMap测试</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428214634805.png" alt="image-20210428214634805"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428214729684.png" alt="image-20210428214729684"></p><h2 id="3-3、ConcurrentQueue测试"><a href="#3-3、ConcurrentQueue测试" class="headerlink" title="3.3、ConcurrentQueue测试"></a>3.3、ConcurrentQueue测试</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428214811314.png" alt="image-20210428214811314"></p><h2 id="3-4、写时复制技术测试"><a href="#3-4、写时复制技术测试" class="headerlink" title="3.4、写时复制技术测试"></a>3.4、写时复制技术测试</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428214848330.png" alt="image-20210428214848330"></p><h2 id="3-5、mPaxos测试"><a href="#3-5、mPaxos测试" class="headerlink" title="3.5、mPaxos测试"></a>3.5、mPaxos测试</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428214913954.png" alt="image-20210428214913954"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428214928964.png" alt="image-20210428214928964"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210428214943689.png" alt="image-20210428214943689"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行写 </tag>
            
            <tag> 负载均衡读 </tag>
            
            <tag> 多分区选主 </tag>
            
            <tag> multi-Paxos </tag>
            
            <tag> [object Object] </tag>
            
            <tag> 虚拟分区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210422</title>
      <link href="2021/04/21/20210422/"/>
      <url>2021/04/21/20210422/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Gossip协议的实现"><a href="#1、Gossip协议的实现" class="headerlink" title="1、Gossip协议的实现"></a>1、Gossip协议的实现</h1><h2 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h2><h3 id="1-1-1、应用场景"><a href="#1-1-1、应用场景" class="headerlink" title="1.1.1、应用场景"></a>1.1.1、应用场景</h3><p>在<code>MA</code>多SE节点设计中，日志的一致性同步问题直接影响系统的一致性和可用性。由于在网络传输过程中可能会发生<code>redo</code>日志的缺失，从而导致某些SE节点的日志不完整，因此我们需要考虑如何来补全缺失的日志。</p><p>由<code>Gossip</code>协议，在一个有界网络中，每个节点都可以与其他任何节点进行通信，最终一定能达到一致性状态。并且当节点扩展时，理论上达到一致性状态的时间是对数级别增速，因此具有良好的可扩展性。因此本版本<code>MA</code>系统采用了<code>Gossip</code>来补全日志。</p><h3 id="1-1-2、通信方式"><a href="#1-1-2、通信方式" class="headerlink" title="1.1.2、通信方式"></a>1.1.2、通信方式</h3><p><code>Gossip</code>原始论文有<code>pull，push，pull&amp;push</code>三种通信方式，目前版本考虑到实现的简单性，采用了<code>pull</code>通信方式。</p><p>这个是在<code>ma_se_config.json</code>配置文件里进行配置的</p><pre class="line-numbers language-json"><code class="language-json">gossip_protocol"<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"node_num"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"current_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"push"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"pull"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认通信端口是33307</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"gossip_port"</span><span class="token operator">:</span> <span class="token number">33307</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1-3、pull通信方式实现"><a href="#1-1-3、pull通信方式实现" class="headerlink" title="1.1.3、pull通信方式实现"></a>1.1.3、pull通信方式实现</h3><ul><li>当SE收到CE节点的<code>redo</code>日志时，如果检测到有日志缺失，则会唤醒<code>gossip_active_thread</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hot_log_is_missing <span class="token operator">&amp;&amp;</span> is_missing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">gossip_lost_log_check_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>gossip_lost_log_check_start</code>最终会调用<code>check_lost_log_set</code>方法</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">check_lost_log_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">satisfy_gossip_condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">os_event_is_set</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">os_event_set</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果检测到有缺失日志，就向其他所有的SE节点发送缺失日志请求。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">client_thread</span><span class="token punctuation">(</span>uint id<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">auto</span> <span class="token operator">&amp;</span>node_conn <span class="token operator">=</span> m_link_node_set<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token function">read_sync_request_and_model</span><span class="token punctuation">(</span>node_conn<span class="token punctuation">.</span>request<span class="token punctuation">,</span> node_conn<span class="token punctuation">.</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node_conn<span class="token punctuation">.</span>state <span class="token operator">==</span> client_state_t<span class="token operator">::</span>NORMAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">process_node_normal</span><span class="token punctuation">(</span>node_conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">process_node_normal</span><span class="token punctuation">(</span>client_conn_t <span class="token operator">&amp;</span>node_conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node_conn<span class="token punctuation">.</span>thd<span class="token punctuation">.</span><span class="token function">send_packet</span><span class="token punctuation">(</span>node_conn<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    node_conn<span class="token punctuation">.</span>thd<span class="token punctuation">.</span><span class="token function">receive_packet</span><span class="token punctuation">(</span>node_conn<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当本地SE节点收到来自其他SE的<code>redo</code>请求时，通过<code>get_log_for_filled</code>获取相应的<code>redo</code>，返回给请求的SE节点。</li></ul><p>整体通信逻辑关键代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//gossip_active_thread</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_impl<span class="token operator">-</span><span class="token operator">></span>is_close<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">os_event_wait_time</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">,</span> m_impl<span class="token operator">-</span><span class="token operator">></span>max_wait_time<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_lost_log_information</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request<span class="token punctuation">.</span>start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>request<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         m_impl<span class="token operator">-</span><span class="token operator">></span>client<span class="token punctuation">.</span><span class="token function">send_redo_update_request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>client<span class="token punctuation">.</span><span class="token function">receive_redo_update_response</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">lost_log_filled</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>start<span class="token punctuation">,</span> request<span class="token punctuation">.</span>start <span class="token operator">+</span> response<span class="token punctuation">.</span>len<span class="token punctuation">,</span> response<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token function">os_event_set</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_close_active_thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//gossip_passive_thread</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_netin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> rec_str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">to_data</span><span class="token punctuation">(</span>rec_str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get_log_for_filled</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>start<span class="token punctuation">,</span> request<span class="token punctuation">.</span>end<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>response<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> log_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_netout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> response<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> ma_conn<span class="token operator">::</span>flush<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2、缺失日志的收集"><a href="#1-2、缺失日志的收集" class="headerlink" title="1.2、缺失日志的收集"></a>1.2、缺失日志的收集</h2><p>SE节点在收到CE的<code>redo</code>时，会检查下日志块no的连续性 ，这个是在<code>check_log_segment_integrity</code>函数里检查的。</p><pre class="line-numbers language-cpp"><code class="language-cpp">  ulint iter_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  ulint start_no <span class="token operator">=</span> <span class="token function">log_block_get_hdr_no</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> iter_start <span class="token operator">&lt;</span> len <span class="token operator">-</span> OS_FILE_LOG_BLOCK_SIZE<span class="token punctuation">;</span> iter_start <span class="token operator">+</span><span class="token operator">=</span> OS_FILE_LOG_BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token function">log_block_get_data_len</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> iter_start<span class="token punctuation">)</span> <span class="token operator">==</span> OS_FILE_LOG_BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token function">log_block_get_hdr_no</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> iter_start<span class="token punctuation">)</span> <span class="token operator">==</span> start_no<span class="token punctuation">)</span><span class="token punctuation">;</span>    start_no <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过<code>get_ce_log_range</code>函数，计算收到的<code>redo</code>的<code>lsn</code>范围</p><pre class="line-numbers language-cpp"><code class="language-cpp"> ulint no <span class="token operator">=</span> <span class="token function">log_block_get_hdr_no</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  lsn_t buf_lsn_len <span class="token operator">=</span> <span class="token function">check_log_segment_integrity</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> debug_info<span class="token punctuation">)</span><span class="token punctuation">;</span>  range<span class="token punctuation">.</span>start_lsn <span class="token operator">=</span> <span class="token function">get_log_segment_start_lsn</span><span class="token punctuation">(</span>relative_lsn<span class="token punctuation">,</span> MAX_LOST_LOG_GAP_SIZE<span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>  range<span class="token punctuation">.</span>end_lsn <span class="token operator">=</span> range<span class="token punctuation">.</span>start_lsn <span class="token operator">+</span> buf_lsn_len<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接着通过<code>hot_log_check_log_segment_gap</code>函数来判断是否有日志缺失，如果有缺失，则将缺失的那一段日志添加到<code>lost_log_list</code>里。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>start_lsn <span class="token operator">></span> missing<span class="token operator">-</span><span class="token operator">></span>start_lsn <span class="token operator">&amp;&amp;</span> segment<span class="token punctuation">.</span>start_lsn <span class="token operator">&lt;</span> missing<span class="token operator">-</span><span class="token operator">></span>end_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>end_lsn <span class="token operator">&lt;</span> missing<span class="token operator">-</span><span class="token operator">></span>end_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lost_log_t new_lost_segment<span class="token punctuation">{</span>LOST_LOG_UNPROCESS<span class="token punctuation">,</span> missing<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">,</span> segment<span class="token punctuation">.</span>start_lsn<span class="token punctuation">}</span><span class="token punctuation">;</span>            missing<span class="token operator">-</span><span class="token operator">></span>start_lsn <span class="token operator">=</span> segment<span class="token punctuation">.</span>end_lsn<span class="token punctuation">;</span>            list<span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span>missing<span class="token punctuation">,</span> new_lost_segment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3、缺失日志的补全"><a href="#1-3、缺失日志的补全" class="headerlink" title="1.3、缺失日志的补全"></a>1.3、缺失日志的补全</h2><h3 id="1-3-1、发送RPC请求"><a href="#1-3-1、发送RPC请求" class="headerlink" title="1.3.1、发送RPC请求"></a>1.3.1、发送RPC请求</h3><p>通过<code>get_lost_log_information</code>函数，获取当前<code>lost_log_list</code>第一个<code>LOST_LOG_UNPROCESS</code>的缺失日志块</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>lost_segment <span class="token operator">:</span> <span class="token operator">*</span><span class="token function">hot_log_lost_log_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lost_segment<span class="token punctuation">.</span>state <span class="token operator">==</span> LOST_LOG_UNPROCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>start_lsn <span class="token operator">=</span> lost_segment<span class="token punctuation">.</span>start_lsn<span class="token punctuation">;</span>            <span class="token operator">*</span>end_lsn <span class="token operator">=</span> lost_segment<span class="token punctuation">.</span>end_lsn<span class="token punctuation">;</span>            find_lost_segment <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过<code>send_redo_update_request</code>方法<code>write</code>请求让<code>client_thread</code>处理</p><pre class="line-numbers language-cpp"><code class="language-cpp">m_impl<span class="token operator">-</span><span class="token operator">></span>client<span class="token punctuation">.</span><span class="token function">send_redo_update_request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">check_and_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_protect_sync_data<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_protect_sync_data<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write_sync_request_and_model</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_sync_redo_msg<span class="token punctuation">.</span><span class="token function">barrier_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-CPP"><code class="language-CPP">void write_sync_request_and_model(Req &request, model_t &model) {    m_sync_request = request;    m_model = model;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>client_thread</code>读取<code>request</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">read_sync_request_and_model</span><span class="token punctuation">(</span>node_conn<span class="token punctuation">.</span>request<span class="token punctuation">,</span> node_conn<span class="token punctuation">.</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后通过<code>process_node_normal</code>方法进行处理</p><h3 id="1-3-2、处理RPC请求"><a href="#1-3-2、处理RPC请求" class="headerlink" title="1.3.2、处理RPC请求"></a>1.3.2、处理RPC请求</h3><p>通过<code>get_log_for_filled</code>函数进行处理</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">get_log_for_filled</span><span class="token punctuation">(</span>lsn_t start_lsn<span class="token punctuation">,</span> lsn_t end_lsn<span class="token punctuation">,</span> byte <span class="token operator">*</span>buf<span class="token punctuation">,</span> ulint <span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    lost_log_list_t<span class="token operator">::</span>iterator it1 <span class="token operator">=</span> lost_list<span class="token operator">-</span><span class="token operator">></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lost_log_list_t<span class="token operator">::</span>iterator it2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">next</span><span class="token punctuation">(</span>it1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> it2 <span class="token operator">!=</span> lost_list<span class="token operator">-</span><span class="token operator">></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it1<span class="token operator">++</span><span class="token punctuation">,</span> it2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start_lsn <span class="token operator">>=</span> it1<span class="token operator">-</span><span class="token operator">></span>end_lsn <span class="token operator">&amp;&amp;</span> start_lsn <span class="token operator">&lt;</span> it2<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            find_end_lsn <span class="token operator">=</span> it2<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">log_group_read_log_seg</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token function">lsn_align_down</span><span class="token punctuation">(</span>start_lsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lsn_align_up</span><span class="token punctuation">(</span>end_lsn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3、接收返回日志填充本地缺失"><a href="#1-3-3、接收返回日志填充本地缺失" class="headerlink" title="1.3.3、接收返回日志填充本地缺失"></a>1.3.3、接收返回日志填充本地缺失</h3><p>通过<code>lost_log_filled</code>函数进行处理</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">lost_log_filled</span><span class="token punctuation">(</span>lsn_t start_lsn<span class="token punctuation">,</span> lsn_t end_lsn<span class="token punctuation">,</span> byte <span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">hot_log_lost_log_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get_ce_log_range</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> log_segment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//step1. write log file</span>    <span class="token function">hot_log_write_log_to_file</span><span class="token punctuation">(</span>align_start_lsn<span class="token punctuation">,</span> align_end_lsn<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//step2. check is missing log</span>    <span class="token keyword">bool</span> is_missing <span class="token operator">=</span> <span class="token function">hot_log_check_log_segment_gap</span><span class="token punctuation">(</span>log_segment<span class="token punctuation">,</span> it<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token operator">!</span>is_missing<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hot_log_missing_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">gossip_lost_log_check_finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//step3. write log buffer</span>    <span class="token function">hot_log_write_buffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> log_segment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hot_log_sys<span class="token operator">-</span><span class="token operator">></span>buf_lsn <span class="token operator">&lt;=</span> hot_log_sys<span class="token operator">-</span><span class="token operator">></span>vdl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">os_event_set</span><span class="token punctuation">(</span>log_parse_event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果能完整填充该缺失块，则将其从<code>lost_log_list</code>里删除</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">hot_log_check_log_segment_gap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">auto</span> judge_lsn_block_no_equal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>lsn_t lsn1<span class="token punctuation">,</span> lsn_t lsn2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">log_block_convert_lsn_to_no</span><span class="token punctuation">(</span>lsn1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">log_block_convert_lsn_to_no</span><span class="token punctuation">(</span>lsn2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>start_lsn <span class="token operator">&lt;=</span> missing<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>           ret <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>end_lsn <span class="token operator">&lt;=</span> missing<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//end_offset'小于等于 start_offset，没有收到任何日志，不修改 lost_log_list</span>            cout <span class="token operator">&lt;&lt;</span> comment <span class="token operator">&lt;&lt;</span> <span class="token string">"occur completed repeat block"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>end_lsn <span class="token operator">></span> missing<span class="token operator">-</span><span class="token operator">></span>start_lsn <span class="token operator">&amp;&amp;</span> segment<span class="token punctuation">.</span>end_lsn <span class="token operator">&lt;</span> missing<span class="token operator">-</span><span class="token operator">></span>end_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*            end_offset'大于 start_offset，且小于 end_offset，接收到的日志内容少于请求的日志内容，将 lost_log_list 中第一个元素的                         start_offset 改为 end_offset'                    */</span>            missing<span class="token operator">-</span><span class="token operator">></span>start_lsn <span class="token operator">=</span> segment<span class="token punctuation">.</span>end_lsn<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>end_lsn <span class="token operator">>=</span> missing<span class="token operator">-</span><span class="token operator">></span>end_lsn <span class="token operator">&amp;&amp;</span> <span class="token function">judge_lsn_block_no_equal</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>end_lsn<span class="token punctuation">,</span> missing<span class="token operator">-</span><span class="token operator">></span>end_lsn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//end_offset'等于 end_offset，接收到的日志与请求的日志完全一致，将 lost_log_list 中第一个元素删除</span>            list<span class="token operator">-</span><span class="token operator">></span><span class="token function">erase</span><span class="token punctuation">(</span>missing<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这里的代码逻辑我们也可以看出，只要有一个SE节点能完整返回请求的缺失日志，那么就会调用<code>gossip_lost_log_check_finish</code>方法，该方法最后会调用<code>check_lost_log_reset</code>方法让<code>gossip_active_thread</code>重新进入<code>nonsignal</code>状态，即代表本次缺失日志请求成功了。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">check_lost_log_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">satisfy_gossip_condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token function">os_event_is_set</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">os_event_reset</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4、重要数据结构和函数"><a href="#1-4、重要数据结构和函数" class="headerlink" title="1.4、重要数据结构和函数"></a>1.4、重要数据结构和函数</h2><h3 id="1-4-1、lost-log-t"><a href="#1-4-1、lost-log-t" class="headerlink" title="1.4.1、lost_log_t"></a>1.4.1、lost_log_t</h3><p>每一条缺失日志都包含下面三个字段信息</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> lost_log_t <span class="token punctuation">{</span>    lost_log_state_t state<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/** State of lost log*/</span>    lsn_t start_lsn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** Start lsn of lost log */</span>    lsn_t end_lsn<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/** End lsn of lost log */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-2、redo-update-request-t"><a href="#1-4-2、redo-update-request-t" class="headerlink" title="1.4.2、redo_update_request_t"></a>1.4.2、redo_update_request_t</h3><p>请求结构体</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> redo_update_request_t <span class="token punctuation">{</span>    string <span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        string str<span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">to_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ut_a</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> pos <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">REFLECTABLE</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>lsn_t<span class="token punctuation">)</span> start<span class="token punctuation">,</span>            <span class="token punctuation">(</span>lsn_t<span class="token punctuation">)</span> end    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-3、redo-update-response-t"><a href="#1-4-3、redo-update-response-t" class="headerlink" title="1.4.3、redo_update_response_t"></a>1.4.3、redo_update_response_t</h3><p>响应结构体</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> redo_update_response_t <span class="token punctuation">{</span>    string <span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        string str<span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">to_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ulint begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ulint end <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> begin<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> end<span class="token punctuation">,</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        begin <span class="token operator">=</span> end<span class="token punctuation">;</span>        end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> log<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>redo_update_response_t <span class="token operator">&amp;</span>response<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> response<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>log<span class="token punctuation">,</span> response<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">REFLECTABLE</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>ulint<span class="token punctuation">)</span> len<span class="token punctuation">,</span>            <span class="token punctuation">(</span>string<span class="token punctuation">)</span> log    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-4、se-gossip-protocol-t"><a href="#1-4-4、se-gossip-protocol-t" class="headerlink" title="1.4.4、se_gossip_protocol_t"></a>1.4.4、se_gossip_protocol_t</h3><h4 id="1-4-4-1、init"><a href="#1-4-4-1、init" class="headerlink" title="1.4.4.1、init"></a>1.4.4.1、init</h4><p><code>Gossip</code>的初始化</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取gossip配置文件</span>        m_impl <span class="token operator">=</span> make_unique<span class="token operator">&lt;</span>impl_t<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qg_get_gossip_config</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建服务端线程(gossip_passive_thread)</span>        uint listen_port <span class="token operator">=</span> m_impl<span class="token operator">-</span><span class="token operator">></span>config<span class="token punctuation">.</span>node_config<span class="token punctuation">[</span>m_impl<span class="token operator">-</span><span class="token operator">></span>config<span class="token punctuation">.</span>current_id<span class="token punctuation">]</span><span class="token punctuation">.</span>port<span class="token punctuation">;</span>        m_impl<span class="token operator">-</span><span class="token operator">></span>server<span class="token punctuation">.</span><span class="token function">create_listener_thread</span><span class="token punctuation">(</span>listen_port<span class="token punctuation">,</span> gossip_passive_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建与其他SE通信的线程</span>        <span class="token function">init_client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//m_impl初始化</span>        <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost <span class="token operator">=</span> <span class="token function">os_event_create</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_impl<span class="token operator">-</span><span class="token operator">></span>max_wait_time <span class="token operator">=</span> g_interval_time_check_log_lost<span class="token punctuation">;</span>        m_impl<span class="token operator">-</span><span class="token operator">></span>is_close <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_close_active_thread <span class="token operator">=</span> <span class="token function">os_event_create</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建gossip_active_thread</span>        <span class="token keyword">auto</span> active_thread_func <span class="token operator">=</span>                <span class="token punctuation">[</span>self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token punctuation">{</span> self<span class="token operator">-</span><span class="token operator">></span><span class="token function">gossip_active_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">create_conn_thread</span><span class="token punctuation">(</span>active_thread_func<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-4-2、check-lost-log-set"><a href="#1-4-4-2、check-lost-log-set" class="headerlink" title="1.4.4.2、check_lost_log_set"></a>1.4.4.2、check_lost_log_set</h4><p>唤醒<code>gossip_active_thread</code></p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">void</span> <span class="token function">check_lost_log_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">satisfy_gossip_condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">os_event_is_set</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">os_event_set</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-4-3、check-lost-log-reset"><a href="#1-4-4-3、check-lost-log-reset" class="headerlink" title="1.4.4.3、check_lost_log_reset"></a>1.4.4.3、check_lost_log_reset</h4><p>让<code>gossip_active_thread</code>重新进入<code>nonsignal</code>状态</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">void</span> <span class="token function">check_lost_log_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">satisfy_gossip_condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token function">os_event_is_set</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">os_event_reset</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-4-4、gossip-passive-thread"><a href="#1-4-4-4、gossip-passive-thread" class="headerlink" title="1.4.4.4、gossip_passive_thread"></a>1.4.4.4、gossip_passive_thread</h4><p>响应其他SE的缺失日志RPC请求</p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gossip_passive_thread</span><span class="token punctuation">(</span>ma_conn<span class="token operator">::</span>THD <span class="token operator">*</span>thd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redo_update_request_t request<span class="token punctuation">;</span>        redo_update_response_t response<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">!</span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            string rec_str<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_netin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> rec_str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">to_data</span><span class="token punctuation">(</span>rec_str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">get_log_for_filled</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>start<span class="token punctuation">,</span> request<span class="token punctuation">.</span>end<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>response<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                lsn_t real_end_lsn <span class="token operator">=</span> request<span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>lsn_t<span class="token operator">></span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                string<span class="token operator">::</span>size_type log_size <span class="token operator">=</span> <span class="token function">lsn_align_up</span><span class="token punctuation">(</span>real_end_lsn<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">lsn_align_down</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> log_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>thd<span class="token operator">-</span><span class="token operator">></span><span class="token function">get_netout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> response<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> ma_conn<span class="token operator">::</span>flush<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-4-5、gossip-active-thread"><a href="#1-4-4-5、gossip-active-thread" class="headerlink" title="1.4.4.5、gossip_active_thread"></a>1.4.4.5、gossip_active_thread</h4><p>检查本地缺失日志，并向其他SE节点发缺失日志RPC请求</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">void</span> <span class="token function">gossip_active_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redo_update_request_t request<span class="token punctuation">;</span>        redo_update_response_t response<span class="token punctuation">;</span>        gossip_client_t<span class="token operator">::</span>model_t model<span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">set_write_mode</span><span class="token punctuation">(</span>receive_rule_t<span class="token operator">::</span>ONLY_ONE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>default_gossip_vaildate_response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_impl<span class="token operator">-</span><span class="token operator">></span>is_close<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">os_event_wait_time</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_check_redo_lost<span class="token punctuation">,</span> m_impl<span class="token operator">-</span><span class="token operator">></span>max_wait_time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_lost_log_information</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request<span class="token punctuation">.</span>start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>request<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                m_impl<span class="token operator">-</span><span class="token operator">></span>client<span class="token punctuation">.</span><span class="token function">send_redo_update_request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>client<span class="token punctuation">.</span><span class="token function">receive_redo_update_response</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">extern</span> <span class="token keyword">bool</span> <span class="token function">is_align_log_block</span><span class="token punctuation">(</span>lsn_t lsn<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token function">is_align_log_block</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">lost_log_filled</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>start<span class="token punctuation">,</span> request<span class="token punctuation">.</span>start <span class="token operator">+</span> response<span class="token punctuation">.</span>len<span class="token punctuation">,</span>                                    <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>byte <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">os_event_set</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>event_close_active_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-4-6、impl-t"><a href="#1-4-4-6、impl-t" class="headerlink" title="1.4.4.6、impl_t"></a>1.4.4.6、impl_t</h4><p>组合<code>Gossip</code>关键数据结构的一个结构体</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">struct</span> impl_t <span class="token punctuation">{</span>        qg_gossip_config_t config<span class="token punctuation">;</span>        gossip_client_t client<span class="token punctuation">;</span>        thread_model_server_t server<span class="token punctuation">;</span>        os_event_t event_check_redo_lost<span class="token punctuation">;</span>        ulint max_wait_time<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token keyword">bool</span> is_close<span class="token punctuation">;</span>        os_event_t event_close_active_thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>impl_t<span class="token operator">></span> m_impl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-5、thread-model-server-t"><a href="#1-4-5、thread-model-server-t" class="headerlink" title="1.4.5、thread_model_server_t"></a>1.4.5、thread_model_server_t</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">thread_model_server_t</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//创建一个服务端线程，绑定gossip_passive_thread函数，来处理其他SE节点的gossip请求</span>    <span class="token keyword">void</span> <span class="token function">create_listener_thread</span><span class="token punctuation">(</span>uint listen_port<span class="token punctuation">,</span> ma_conn<span class="token operator">::</span>user_process_t listen_func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m_listener_finished_event <span class="token operator">=</span> <span class="token function">os_event_create</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> thread_func <span class="token operator">=</span>                <span class="token punctuation">[</span>self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> port <span class="token operator">=</span> listen_port<span class="token punctuation">,</span> func <span class="token operator">=</span> listen_func<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token punctuation">{</span> self<span class="token operator">-</span><span class="token operator">></span><span class="token function">listener_thread</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">create_conn_thread</span><span class="token punctuation">(</span>thread_func<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">wait_listen_closed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ut_a</span><span class="token punctuation">(</span>m_listener_finished_event <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">os_event_wait</span><span class="token punctuation">(</span>m_listener_finished_event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">os_event_destroy</span><span class="token punctuation">(</span>m_listener_finished_event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">listener_thread</span><span class="token punctuation">(</span>uint port<span class="token punctuation">,</span> ma_conn<span class="token operator">::</span>user_process_t listen_func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> conn_mgr <span class="token operator">=</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>ma_conn<span class="token operator">::</span>ma_conn_manager_t<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册一个服务端的socket监听器</span>        <span class="token keyword">auto</span> ret <span class="token operator">=</span> conn_mgr<span class="token operator">-</span><span class="token operator">></span><span class="token function">register_socket_acceptor</span><span class="token punctuation">(</span>listen_func<span class="token punctuation">,</span> ma_conn<span class="token operator">::</span>client_identity_t<span class="token operator">::</span>SE_LEADER<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//然后创建handler线程来处理新的连接请求</span>        conn_mgr<span class="token operator">-</span><span class="token operator">></span><span class="token function">start_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn_mgr<span class="token operator">-</span><span class="token operator">></span><span class="token function">wait_till_all_connection_closed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">os_event_is_set</span><span class="token punctuation">(</span>m_listener_finished_event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">os_event_set</span><span class="token punctuation">(</span>m_listener_finished_event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    os_event_t m_listener_finished_event<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-6、thread-model-client-t"><a href="#1-4-6、thread-model-client-t" class="headerlink" title="1.4.6、thread_model_client_t"></a>1.4.6、thread_model_client_t</h3><h4 id="1-4-6-1、init"><a href="#1-4-6-1、init" class="headerlink" title="1.4.6.1、init"></a>1.4.6.1、init</h4><p><code>Gossip</code>客户端的初始化</p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> current_id<span class="token punctuation">,</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span>uint<span class="token punctuation">,</span> node_config_t<span class="token operator">>></span> <span class="token operator">&amp;</span>link_node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_current_id <span class="token operator">=</span> current_id<span class="token punctuation">;</span>        m_is_close <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        m_node_num <span class="token operator">=</span> link_node<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_link_node_set<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>m_node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>node <span class="token operator">:</span> link_node<span class="token punctuation">)</span> <span class="token punctuation">{</span>            m_link_node_set<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>ip<span class="token punctuation">,</span> std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        m_normal_node_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_get_redo_update_node_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_is_get_redo_update <span class="token operator">=</span> response_state_t<span class="token operator">::</span>NONE<span class="token punctuation">;</span>        m_sync_redo_msg<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>m_node_num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_current_term <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_protect_sync_data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_fault<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>m_node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-6-2、create-client-thread"><a href="#1-4-6-2、create-client-thread" class="headerlink" title="1.4.6.2、create_client_thread"></a>1.4.6.2、create_client_thread</h4><p>创建客户端连接线程</p><pre class="line-numbers language-CPP"><code class="language-CPP">void create_client_thread() {        for (uint id = 0; id < m_link_node_set.size(); id++) {            std::thread t(&thread_model_client_t::client_thread, this, id);            std::this_thread::sleep_for(std::chrono::milliseconds(1));            MA_ENSURE(t.joinable());            t.detach();        }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-6-3、client-thread"><a href="#1-4-6-3、client-thread" class="headerlink" title="1.4.6.3、client_thread"></a>1.4.6.3、client_thread</h4><p>这是CE和SE共用的客户端线程代码，对于SE而言，用来与其他SE进行<code>socket</code>通信。</p><pre class="line-numbers language-CPP"><code class="language-CPP">void client_thread(uint id) {        MA_ENSURE(id < m_link_node_set.size());        for (;;) {            //try reset            check_and_reset();            //wait until all thread arrive this point            m_sync_redo_msg.barrier_wait();            if (m_is_close) {                return;            }            auto &node_conn = m_link_node_set[id];            read_sync_request_and_model(node_conn.request, node_conn.model);            node_conn.response.clear();            if (m_is_get_redo_update == response_state_t::GET) {                goto finish_task;            }            if (node_conn.state == client_state_t::CLOSE) {                process_node_close(node_conn);            }            if (node_conn.state == client_state_t::NORMAL) {                process_node_normal(node_conn);            }            finish_task:            //todo: probaly occur memory berrier problem            std::lock_guard<std::mutex> guard_count(m_protect_sync_count);            node_conn.term += 1;            m_get_redo_update_node_num += 1;            if (m_get_redo_update_node_num >= node_conn.model.get_quorum_num(m_node_num)) {                m_get_redo_update_event.set();            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-7、get-lost-log-information"><a href="#1-4-7、get-lost-log-information" class="headerlink" title="1.4.7、get_lost_log_information"></a>1.4.7、get_lost_log_information</h3><p>获取<code>lost_log_list</code>里的第一条缺失日志</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">get_lost_log_information</span><span class="token punctuation">(</span>lsn_t <span class="token operator">*</span>start_lsn<span class="token punctuation">,</span> lsn_t <span class="token operator">*</span>end_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> find_lost_segment <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>lost_segment <span class="token operator">:</span> <span class="token operator">*</span><span class="token function">hot_log_lost_log_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lost_segment<span class="token punctuation">.</span>state <span class="token operator">==</span> LOST_LOG_UNPROCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>start_lsn <span class="token operator">=</span> lost_segment<span class="token punctuation">.</span>start_lsn<span class="token punctuation">;</span>            <span class="token operator">*</span>end_lsn <span class="token operator">=</span> lost_segment<span class="token punctuation">.</span>end_lsn<span class="token punctuation">;</span>            find_lost_segment <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>find_lost_segment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"get lost log information start_lsn = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>start_lsn <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"get lost log information end_lsn = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>end_lsn <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token function">print_lost_log_list</span><span class="token punctuation">(</span><span class="token string">"get lost log information function "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> find_lost_segment<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-8、get-log-for-filled"><a href="#1-4-8、get-log-for-filled" class="headerlink" title="1.4.8、get_log_for_filled"></a>1.4.8、get_log_for_filled</h3><p>获取本地日志来填充其他SE节点的缺失日志</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">get_log_for_filled</span><span class="token punctuation">(</span>lsn_t start_lsn<span class="token punctuation">,</span> lsn_t end_lsn<span class="token punctuation">,</span> byte <span class="token operator">*</span>buf<span class="token punctuation">,</span> ulint <span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log_group_t <span class="token operator">*</span>group <span class="token operator">=</span> <span class="token function">UT_LIST_GET_FIRST</span><span class="token punctuation">(</span>log_sys<span class="token operator">-</span><span class="token operator">></span>log_groups<span class="token punctuation">)</span><span class="token punctuation">;</span>    lsn_t find_end_lsn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    lost_log_list_t<span class="token operator">::</span>iterator it1 <span class="token operator">=</span> lost_list<span class="token operator">-</span><span class="token operator">></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lost_log_list_t<span class="token operator">::</span>iterator it2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">next</span><span class="token punctuation">(</span>it1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> it2 <span class="token operator">!=</span> lost_list<span class="token operator">-</span><span class="token operator">></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it1<span class="token operator">++</span><span class="token punctuation">,</span> it2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start_lsn <span class="token operator">>=</span> it1<span class="token operator">-</span><span class="token operator">></span>end_lsn <span class="token operator">&amp;&amp;</span> start_lsn <span class="token operator">&lt;</span> it2<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            find_end_lsn <span class="token operator">=</span> it2<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>find_end_lsn <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>end_lsn <span class="token operator">></span> find_end_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            end_lsn <span class="token operator">=</span> find_end_lsn<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span>len <span class="token operator">=</span> end_lsn <span class="token operator">-</span> start_lsn<span class="token punctuation">;</span>        <span class="token function">log_group_read_log_seg</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token function">lsn_align_down</span><span class="token punctuation">(</span>start_lsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lsn_align_up</span><span class="token punctuation">(</span>end_lsn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-9、lost-log-filled"><a href="#1-4-9、lost-log-filled" class="headerlink" title="1.4.9、lost_log_filled"></a>1.4.9、lost_log_filled</h3><p>填充本地缺失日志</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">lost_log_filled</span><span class="token punctuation">(</span>lsn_t start_lsn<span class="token punctuation">,</span> lsn_t end_lsn<span class="token punctuation">,</span> byte <span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">hot_log_lost_log_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get_ce_log_range</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>start_lsn<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> log_segment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//step1. write log file</span>    <span class="token function">hot_log_write_log_to_file</span><span class="token punctuation">(</span>align_start_lsn<span class="token punctuation">,</span> align_end_lsn<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//step2. check is missing log</span>    <span class="token keyword">bool</span> is_missing <span class="token operator">=</span> <span class="token function">hot_log_check_log_segment_gap</span><span class="token punctuation">(</span>log_segment<span class="token punctuation">,</span> it<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token operator">!</span>is_missing<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hot_log_missing_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">gossip_lost_log_check_finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//step3. write log buffer</span>    <span class="token function">hot_log_write_buffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> log_segment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hot_log_sys<span class="token operator">-</span><span class="token operator">></span>buf_lsn <span class="token operator">&lt;=</span> hot_log_sys<span class="token operator">-</span><span class="token operator">></span>vdl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">os_event_set</span><span class="token punctuation">(</span>log_parse_event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gossip </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210415</title>
      <link href="2021/04/15/20210415/"/>
      <url>2021/04/15/20210415/</url>
      
        <content type="html"><![CDATA[<h1 id="本周工作总结"><a href="#本周工作总结" class="headerlink" title="本周工作总结"></a>本周工作总结</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1、静态阅读gossip代码"><a href="#1、静态阅读gossip代码" class="headerlink" title="1、静态阅读gossip代码"></a>1、静态阅读gossip代码</h2><h2 id="2、尝试改动代码，构造第二台SE收包缺失，动态跟踪gossip部分代码"><a href="#2、尝试改动代码，构造第二台SE收包缺失，动态跟踪gossip部分代码" class="headerlink" title="2、尝试改动代码，构造第二台SE收包缺失，动态跟踪gossip部分代码"></a>2、尝试改动代码，构造第二台SE收包缺失，动态跟踪gossip部分代码</h2><h1 id="二、具体内容"><a href="#二、具体内容" class="headerlink" title="二、具体内容"></a>二、具体内容</h1><h2 id="1、gossip部分代码梳理"><a href="#1、gossip部分代码梳理" class="headerlink" title="1、gossip部分代码梳理"></a>1、gossip部分代码梳理</h2><h3 id="1-1、get-lost-log-information"><a href="#1-1、get-lost-log-information" class="headerlink" title="1.1、get_lost_log_information"></a>1.1、get_lost_log_information</h3><p>首先会遍历<code>lost_log_list</code>，检查是否有<code>LOST_LOG_UNPROCESS</code>的缺失日志</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414215023823.png" alt="image-20210414215023823"></p><p>如果有，就会在控制台打印缺失日志信息，并返回<code>true</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414215141453.png" alt="image-20210414215141453"></p><h3 id="1-2、thread-model-server-t"><a href="#1-2、thread-model-server-t" class="headerlink" title="1.2、thread_model_server_t"></a>1.2、thread_model_server_t</h3><h4 id="1-2-1、create-listener-thread方法"><a href="#1-2-1、create-listener-thread方法" class="headerlink" title="1.2.1、create_listener_thread方法"></a>1.2.1、create_listener_thread方法</h4><p>创建一个服务端线程，绑定<code>gossip_passive_thread</code>函数，来处理其他<code>SE</code>节点的<code>gossip</code>请求</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414220226936.png" alt="image-20210414220226936"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414220246408.png" alt="image-20210414220246408"></p><h4 id="1-2-2、listener-thread方法"><a href="#1-2-2、listener-thread方法" class="headerlink" title="1.2.2、listener_thread方法"></a>1.2.2、listener_thread方法</h4><p>主要是注册一个服务端的<code>socket</code>监听器</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414221330431.png" alt="image-20210414221330431"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414221414531.png" alt="image-20210414221414531"></p><p>然后创建<code>handler</code>线程来处理新的连接请求</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414222346794.png" alt="image-20210414222346794"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414222729654.png" alt="image-20210414222729654"></p><h3 id="1-3、se-gossip-protocol-t"><a href="#1-3、se-gossip-protocol-t" class="headerlink" title="1.3、se_gossip_protocol_t"></a>1.3、se_gossip_protocol_t</h3><h4 id="1-3-1、init"><a href="#1-3-1、init" class="headerlink" title="1.3.1、init"></a>1.3.1、init</h4><h4 id="1-3-2、check-lost-log-set和check-lost-log-reset"><a href="#1-3-2、check-lost-log-set和check-lost-log-reset" class="headerlink" title="1.3.2、check_lost_log_set和check_lost_log_reset"></a>1.3.2、check_lost_log_set和check_lost_log_reset</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414233941626.png" alt="image-20210414233941626"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414234010607.png" alt="image-20210414234010607"></p><h4 id="1-3-3、init-client"><a href="#1-3-3、init-client" class="headerlink" title="1.3.3、init_client"></a>1.3.3、init_client</h4><h4 id="1-3-4、gossip-passive-thread和gossip-active-thread"><a href="#1-3-4、gossip-passive-thread和gossip-active-thread" class="headerlink" title="1.3.4、gossip_passive_thread和gossip_active_thread"></a>1.3.4、gossip_passive_thread和gossip_active_thread</h4><h4 id="1-3-5、struct-impl-t"><a href="#1-3-5、struct-impl-t" class="headerlink" title="1.3.5、struct impl_t"></a>1.3.5、struct impl_t</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414233442773.png" alt="image-20210414233442773"></p><h2 id="2、动态跟踪"><a href="#2、动态跟踪" class="headerlink" title="2、动态跟踪"></a>2、动态跟踪</h2><p>目前三台<code>SE</code>都对齐如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414193759529.png" alt="image-20210414193759529"></p><p>现在在客户端插入一条数据</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414194143476.png" alt="image-20210414194143476"></p><p>我改动了第二台<code>SE</code>的代码，让它在每次收<code>CE</code>的<code>Write</code>请求包时，都会丢掉一个<code>log block</code>（512B）的大小</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414194128036.png" alt="image-20210414194128036"></p><p>另外两台<code>SE</code>正常收包，并且最后成功对齐如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414194500269.png" alt="image-20210414194500269"></p><p>第二台<code>SE</code>通过后台<code>gossip_active_thread</code>已经检测到了有缺失日志，打算向其他两台<code>SE</code>进行缺失日志请求，目前停留在断点处</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414194607325.png" alt="image-20210414194607325"></p><p>通过<code>send_redo_update_request</code>发送请求</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414194938496.png" alt="image-20210414194938496"></p><p>这时，另外两台<code>SE</code>都收到了<code>RPC</code>请求，通过<code>get_log_for_filled</code>函数来读取<code>[start_lsn, end_lsn]</code>日志，并返回</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414195151812.png" alt="image-20210414195151812"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414195342982.png" alt="image-20210414195342982"></p><p>下面来看看这个<code>get_log_for_filled</code>函数</p><p>首先，获取<code>lost_log_list</code>一个锁</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414195630026.png" alt="image-20210414195630026"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414195611583.png" alt="image-20210414195611583"></p><p>然后初始化两个相邻的迭代器</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414195916115.png" alt="image-20210414195916115"></p><p>接着通过一个<code>for</code>循环，找到当前<code>SE</code>本地最大的完整日志</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414201738952.png" alt="image-20210414201738952"></p><p>对应文档里的下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414201813405.png" alt="image-20210414201813405"></p><p>此时我们发现，<code>find_end_lsn</code>比请求的<code>end_lsn</code>大，也就是说当前<code>SE</code>本地能够完整地返回请求的日志区间</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414202050159.png" alt="image-20210414202050159"></p><p>然后，将<code>start_lsn</code>和<code>end_lsn</code>分别向下和向上对齐到整数个<code>log block</code>处，调用<code>log_group_read_log_seg</code>方法来读取日志到<code>buf</code>里</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414202610097.png" alt="image-20210414202610097"></p><p>然后看看<code>log_group_read_log_seg</code>方法</p><p>首先会获取<code>start_lsn</code>在<code>group</code>里的偏移</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414203141622.png" alt="image-20210414203141622"></p><p>然后判断一下一个日志文件能否获取完整日志</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414203409226.png" alt="image-20210414203409226"></p><p>接着通过<code>fil_io</code>读取<code>(space_id, page_no) = (4294967280, 4327)</code>，页内偏移<code>byte_offset = 15872</code>， <code>len = 512</code>字节的日志到<code>buf</code>里</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414203823388.png" alt="image-20210414203823388"></p><p>然后返回<code>gossip_passive_thread</code>返回给请求的<code>SE</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414204700765.png" alt="image-20210414204700765"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414204804065.png" alt="image-20210414204804065"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414205031656.png" alt="image-20210414205031656"></p><p>请求的<code>SE</code>节点在<code>gossip_active_thread</code>里通过<code>receive_redo_update_response</code>接收<code>response</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414195035896.png" alt="image-20210414195035896"></p><p>首选检查返回的<code>log</code>是否是对齐的日志块大小</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414205856985.png" alt="image-20210414205856985"></p><p>如果是的话，说明返回的日志块是正常的，可以用来填充缺失部分</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414205433096.png" alt="image-20210414205433096"></p><p>下面来看看<code>lost_log_filled</code>方法</p><p>首先会通过一系列断言检查来确保<code>start_lsn，end_lsn</code>和<code>buf</code>是满足要求的</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414210235798.png" alt="image-20210414210235798"></p><p>通过这些检查之后，就将指定内容写到日志文件里</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414210501358.png" alt="image-20210414210501358"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414210640472.png" alt="image-20210414210640472"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414210730895.png" alt="image-20210414210730895"></p><p>然后会检查下请求得到的日志是否有缺失，需要确保请求得到的<code>start_lsn &lt;= missing-&gt;start_lsn</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414211804840.png" alt="image-20210414211804840"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414212221408.png" alt="image-20210414212221408"></p><p>这里会分四种情况进行判断，如果请求到的<code>end_lsn==missing-&gt;end_lsn</code>，则说明接受到的日志与请求的日志完全相同，则将当前<code>missing</code>节点删除</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414212622616.png" alt="image-20210414212622616"></p><p>对应文档内容如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414212736157.png" alt="image-20210414212736157"></p><p>上面将<code>missing</code>节点删除之后，<code>lost_log_list</code>长度又恢复为2了，因此<code>hot_log_missing_log()</code>返回<code>false</code>，然后就调用<code>gossip_lost_log_check_finish</code>，让<code>event_check_redo_lost</code>重新进入<code>nonsignal</code>状态。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414213505586.png" alt="image-20210414213505586"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414213639745.png" alt="image-20210414213639745"></p><p>然后开始写<code>hot log buffer</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414213902767.png" alt="image-20210414213902767"></p><p>这样日志补全就完成了</p><p>最后三台<code>SE</code>日志都对齐如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414214156371.png" alt="image-20210414214156371"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414214221250.png" alt="image-20210414214221250"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414214236908.png" alt="image-20210414214236908"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210414214500613.png" alt="image-20210414214500613"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSE </tag>
            
            <tag> Quorum </tag>
            
            <tag> Gossip </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210324</title>
      <link href="2021/04/08/20210324/"/>
      <url>2021/04/08/20210324/</url>
      
        <content type="html"><![CDATA[<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><p>合力学习多SE版本，包括：</p><ul><li>多SE版的安装、分布式部署、测试</li><li>Quorum+Gossip原理解读</li><li>多SE设计文档学习和源码解读</li></ul><h1 id="1、搭建多SE环境和简单测试"><a href="#1、搭建多SE环境和简单测试" class="headerlink" title="1、搭建多SE环境和简单测试"></a>1、搭建多SE环境和简单测试</h1><h2 id="1-1、CLion编译build代码"><a href="#1-1、CLion编译build代码" class="headerlink" title="1.1、CLion编译build代码"></a>1.1、CLion编译build代码</h2><h3 id="1-1-1、cmake参数配置"><a href="#1-1-1、cmake参数配置" class="headerlink" title="1.1.1、cmake参数配置"></a>1.1.1、cmake参数配置</h3><p>在<code>file -&gt; settings -&gt; Build,Execution,Deployment -&gt; cmake</code>目录下，配置如下 <code>cmake options</code></p><pre class="line-numbers language-shell"><code class="language-shell">-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/home/zhangqu/source-code/MA_CSE/boost/boost_1_59_0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323110039534.png" alt="image-20210323110039534"></p><h3 id="1-1-2、build"><a href="#1-1-2、build" class="headerlink" title="1.1.2、build"></a>1.1.2、build</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323111427814.png" alt="image-20210323111427814"></p><h2 id="1-2、启动"><a href="#1-2、启动" class="headerlink" title="1.2、启动"></a>1.2、启动</h2><h3 id="1-2-1、修改json配置文件"><a href="#1-2-1、修改json配置文件" class="headerlink" title="1.2.1、修改json配置文件"></a>1.2.1、修改json配置文件</h3><p>修改<code>/home/zhangqu/source-code/MA_CSE/ma_se</code>下的<code>ma_se_config.json</code>文件如下（三台机器的<code>current_id</code>分别是0,1,2）：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"qg_protocol"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"quorum_protocol"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"node_num"</span><span class="token operator">:</span> <span class="token number">3</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"gossip_protocol"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"node_num"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"current_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"push"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"pull"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"node0"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token string">"192.168.100.128"</span><span class="token punctuation">,</span>      <span class="token property">"quorum_port"</span><span class="token operator">:</span> <span class="token number">33306</span><span class="token punctuation">,</span>      <span class="token property">"gossip_port"</span><span class="token operator">:</span> <span class="token number">33307</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"node1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token string">"192.168.100.133"</span><span class="token punctuation">,</span>      <span class="token property">"quorum_port"</span><span class="token operator">:</span> <span class="token number">33306</span><span class="token punctuation">,</span>      <span class="token property">"gossip_port"</span><span class="token operator">:</span> <span class="token number">33307</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"node2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token string">"192.168.100.134"</span><span class="token punctuation">,</span>      <span class="token property">"quorum_port"</span><span class="token operator">:</span> <span class="token number">33306</span><span class="token punctuation">,</span>      <span class="token property">"gossip_port"</span><span class="token operator">:</span> <span class="token number">33307</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2、设置启动参数"><a href="#1-2-2、设置启动参数" class="headerlink" title="1.2.2、设置启动参数"></a>1.2.2、设置启动参数</h3><p>三台机器的<code>SE</code>的启动参数如下：</p><pre class="line-numbers language-shell"><code class="language-shell">--datadir=/home/zhangqu/source-code/basedir/data--sehost=192.168.100.128--seuser=root--sepassword=root--se=on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CE</code>的启动参数如下：</p><pre class="line-numbers language-shell"><code class="language-shell">--datadir=/home/zhangqu/source-code/basedir/data--sehost=192.168.100.128--seuser=root--sepassword=root--ce=on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-3、按序部署启动"><a href="#1-2-3、按序部署启动" class="headerlink" title="1.2.3、按序部署启动"></a>1.2.3、按序部署启动</h3><p>按 <strong>主SE-&gt;两台从SE-&gt;主CE</strong> 的顺序依次启动</p><p>成功启动三个<code>SE</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323113211963.png" alt="image-20210323113211963"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323113314719.png" alt="image-20210323113314719"></p><p>再启动<code>主CE</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323113747490.png" alt="image-20210323113747490"></p><p><code>CE</code>启动成功之后，<code>SE</code>会在控制台一直打印下面一段日志</p><pre class="line-numbers language-shell"><code class="language-shell">hot log read from_file buffer lsn is consistency with hot log lsncheck lost segment : occur completed repeat blockcheck log segment : ---hot log list information: ------------------------------------------------------------------number         start lsn           end lsn               state             ------------------------------------------------------------------0              0                   0xad37e75             None              0x1            0x1039d675          0xffffffffffffffff    None          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3、客户端简单测试"><a href="#1-3、客户端简单测试" class="headerlink" title="1.3、客户端简单测试"></a>1.3、客户端简单测试</h2><h3 id="1-3-1、添加一条数据"><a href="#1-3-1、添加一条数据" class="headerlink" title="1.3.1、添加一条数据"></a>1.3.1、添加一条数据</h3><p>首先看下<code>sbtest1</code>的表结构</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">desc</span> sbtest1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323115319688.png" alt="image-20210323115319688"></p><p>然后再插入一条数据，并查询进行验证</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> sbtest1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token number">43782</span><span class="token punctuation">,</span><span class="token string">'64837264-324792379'</span><span class="token punctuation">,</span><span class="token string">'4368746328732784'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sbtest1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323115417304.png" alt="image-20210323115417304"></p><h3 id="1-3-2、修改数据"><a href="#1-3-2、修改数据" class="headerlink" title="1.3.2、修改数据"></a>1.3.2、修改数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> sbtest1 <span class="token keyword">set</span> k <span class="token operator">=</span> <span class="token number">20000</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sbtest1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323115652569.png" alt="image-20210323115652569"></p><h3 id="1-3-3、删除数据"><a href="#1-3-3、删除数据" class="headerlink" title="1.3.3、删除数据"></a>1.3.3、删除数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> sbtest1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sbtest1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323115828040.png" alt="image-20210323115828040"></p><h1 id="2、Quorum-Gossip原理解读"><a href="#2、Quorum-Gossip原理解读" class="headerlink" title="2、Quorum+Gossip原理解读"></a>2、Quorum+Gossip原理解读</h1><h2 id="2-1、Aurora-Quorum-Gossip协议应用概述"><a href="#2-1、Aurora-Quorum-Gossip协议应用概述" class="headerlink" title="2.1、Aurora Quorum+Gossip协议应用概述"></a>2.1、Aurora Quorum+Gossip协议应用概述</h2><h3 id="2-1-1、复制和容错处理"><a href="#2-1-1、复制和容错处理" class="headerlink" title="2.1.1、复制和容错处理"></a>2.1.1、复制和容错处理</h3><p><code>Aurora</code>存储层的复制基于<code>Quorum</code>协议，假设复制拓扑中有<code>V</code>个节点，每个节点有一个投票权，读 或 写 必须拿到<code>Vr</code> 或 <code>Vw</code>个投票才能返回。为了满足一致性，需要满足两个条件：</p><ul><li><code>Vr + Vw &gt; V</code></li><li><code>Vw &gt; V/2</code></li></ul><p><code>Aurora</code>的数据库实例部署在3个不同AZ(<code>AvailablityZone</code>)，每个<code>AZ</code>包含了2个副本，总共6个副本。结合<code>Quorum</code>模型以及前面提到的两条规则， <code>V=6，Vw=4，Vr=3</code>，<code>Aurora</code>可以容忍任何一个<code>AZ</code>出现故障，不会影响写服务；任何一个<code>AZ</code>出现故障，以及另外一个<code>AZ</code>中的一个节点出现故障，不会影响读服务且不会丢失数据。</p><h3 id="2-1-2、日志处理下推到存储层"><a href="#2-1-2、日志处理下推到存储层" class="headerlink" title="2.1.2、日志处理下推到存储层"></a>2.1.2、日志处理下推到存储层</h3><p> <code>Aurora</code>由跨<code>AZ</code>的一个主实例和多个副本实例组成，主实例与副本实例或者存储节点间只传递<strong>redo日志和元信息</strong>。主实例并发向6个存储节点和副本实例发送日志。由<code>Quorum</code>协议，当<strong>4/6</strong>的存储节点应答后，则认为日志已经持久化，对于副本实例，则不依赖其应答时间点。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323152633194.png" alt="image-20210323152633194"></p><h3 id="2-1-3、Aurora存储服务设计要点"><a href="#2-1-3、Aurora存储服务设计要点" class="headerlink" title="2.1.3、Aurora存储服务设计要点"></a>2.1.3、Aurora存储服务设计要点</h3><p>一个关键原则是<strong>减少前台用户写的响应时间</strong>，因此将尽可能多的操作移到<strong>后台异步执行</strong>，并且存储节点会根据前台的请求压力，<strong>自适应</strong>分配资源做不同的工作。</p><p> 对于<code>Aurora</code>而言，分离的存储服务层使得后台线程推进检查点动作完全不影响数据库实例，并且是推进地越快，越有利于前台的磁盘<code>IO</code>读操作(减少了回放日志过程)。</p><p><code>Aurora</code>写基于<code>Quorum</code>模型，存储分片后，按片达成多数派即可返回，由于分布足够离散，少数的磁盘<code>IO</code>压力大也不会影响到整体的写性能。</p><p>下图详细介绍了<code>Aurora</code>写的流程：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323153939337.png" alt="image-20210323153939337"></p><h3 id="2-1-4、Write和Read"><a href="#2-1-4、Write和Read" class="headerlink" title="2.1.4、Write和Read"></a>2.1.4、Write和Read</h3><h4 id="2-1-4-1、Write"><a href="#2-1-4-1、Write" class="headerlink" title="2.1.4.1、Write"></a>2.1.4.1、Write</h4><p>在<code>Aurora</code>中，数据库实例向存储节点传递<code>redo</code>日志，达成多数派后将事务标记为提交状态，然后推进<code>VDL</code>（<code>Volumn Durable LSN</code>，已持久化的最大LSN），使数据库进入一个新的一致状态。 </p><p>为了确保各个分片日志的完整性，每条日志都记录前一条日志的链接，通过前向链接确保分片拥有了完整的日志。<code>SCL</code>(<code>Segment Complete LSN</code>)表示分片拥有完整日志的位点，存储节点相互间通过<code>gossip</code>协议来弥补本地日志空洞，推进<code>SCL</code> 。</p><h4 id="2-1-4-2、Read"><a href="#2-1-4-2、Read" class="headerlink" title="2.1.4.2、Read"></a>2.1.4.2、Read</h4><p>在正常情况下，进行读操作时并不需要达成<code>Quorum</code>协议。当数据库实例需要读磁盘<code>IO</code>时，将当前最新的<code>VDL</code>作为一致性位点<code>read-point</code>，并选择一个拥有所有<code>VDL</code>位点的日志的节点作为请求节点，这样只需要访问这一个节点即可得到数据页的最新版本。</p><p>数据库实例接收客户端的读请求，以<code>PG</code>（<code>per-Group</code>）为单位计算<code>Minimum Read Point LSN</code>，在有读副本实例的情况下，每个实例都都可以作类似的计算得到位点，实例之间通过<code>gossip</code>协议得到全局的<code>per-Group MRPL</code>，称之为<code>PGMRPL</code>。<code>PGMRPL</code>是全局<code>read-point</code>的低水位，每个存储节点根据<code>PGMRPL</code>，不断推进数据页版本，并回收不再使用的日志。</p><h2 id="2-2、Quorum-Gossip原理分析"><a href="#2-2、Quorum-Gossip原理分析" class="headerlink" title="2.2、Quorum+Gossip原理分析"></a>2.2、Quorum+Gossip原理分析</h2><h3 id="2-2-1、分布式基本原则和理论"><a href="#2-2-1、分布式基本原则和理论" class="headerlink" title="2.2.1、分布式基本原则和理论"></a>2.2.1、分布式基本原则和理论</h3><h4 id="2-2-1-1、CAP"><a href="#2-2-1-1、CAP" class="headerlink" title="2.2.1.1、CAP"></a>2.2.1.1、CAP</h4><p><strong>CAP</strong>理论（即<code>Consistency</code>一致性，<code>Availability</code>可用性，<code>Partition tolerance</code>分区容错性），是当前分布式系统公认的理论，亦即一个分布式系统不可能同时满足这三个特性，只能三求其二。其中<code>P</code>是基本要求，如果没有<code>P</code>就不是分布式系统了，所以一般都是在满足<code>P</code>的情况下，在<code>C</code>和<code>A</code>之间寻求平衡。</p><h4 id="2-2-1-2、ACID"><a href="#2-2-1-2、ACID" class="headerlink" title="2.2.1.2、ACID"></a>2.2.1.2、ACID</h4><p><strong>ACID</strong>（<code>Atomicity</code>原子性，<code>Consistency</code>一致性，<code>Isolation</code>隔离性，<code>Durability</code>持久性）是事务的特点，具有<strong>强一致性</strong>，一般用于单机事务，分布式事务若采用这个原则会丧失一定的可用性，属于<code>CP</code>系统。</p><h4 id="2-2-1-3、BASE"><a href="#2-2-1-3、BASE" class="headerlink" title="2.2.1.3、BASE"></a>2.2.1.3、BASE</h4><p><strong>BASE</strong>理论（即<code>Basically Availabe</code>基本可用，<code>Soft state</code>软状态，<code>Eventually consistency</code>最终一致性）是对大规模的互联网分布式系统实践的总结，<strong>用弱一致性来换取可用性</strong>，不同于<code>ACID</code>，属于<code>AP</code>系统。</p><h4 id="2-2-1-4、NWR机制"><a href="#2-2-1-4、NWR机制" class="headerlink" title="2.2.1.4、NWR机制"></a>2.2.1.4、NWR机制</h4><p>N：有多少份数据副本<br>W：一次成功的写操作至少有w份数据写入成功<br>R：一次成功的读操作至少有R份数据读取成功</p><p><code>NWR</code>值的不同组合会产生不同的一致性效果。当<code>W+R&gt;N</code>的时候，读取操作和写入操作成功的数据一定会有交集，这样就可以保证<strong>一定能够读取到最新版本</strong>的更新数据，数据的<strong>强一致性</strong>得到了保证；反之，<code>R+W&lt;=N</code>，则无法保证数据的强一致性，因为成功写和成功读集合可能不存在交集，这样读操作无法读取到最新的更新数值，也就<strong>无法保证数据的强一致性</strong>。</p><p>版本的新旧需要版本控制算法来判别，比如<strong>向量时钟</strong>。</p><h3 id="2-2-2、Quorum机制"><a href="#2-2-2、Quorum机制" class="headerlink" title="2.2.2、Quorum机制"></a>2.2.2、Quorum机制</h3><h4 id="2-2-2-1、简介"><a href="#2-2-2-1、简介" class="headerlink" title="2.2.2.1、简介"></a>2.2.2.1、简介</h4><p><code>Quorom</code>机制，是一种分布式系统中常用的，用来<strong>保证数据冗余和最终一致性</strong>的投票算法，主要思想来源于<strong>抽屉原理</strong>。在有冗余数据的分布式存储系统当中，冗余数据对象会在不同的机器之间存放多份拷贝。但是<strong>同一时刻一个数据对象的多份拷贝只能用于读或者用于写</strong>。<br>分布式系统中的每一份数据拷贝对象都被赋予一票。每一个操作必须要获得最小的读票数（<code>Vr</code>）或者最小的写票数(<code>Vw</code>）才能读或者写。如果一个系统有<code>V</code>票（意味着一个数据对象有<code>V</code>份冗余拷贝），那么这最小读写票必须满足：</p><ul><li><code>Vr + Vw &gt; V</code></li><li><code>Vw &gt; V/2</code></li></ul><p><strong>第一条规则</strong>保证了一个数据<strong>不会被同时读写</strong>。当一个写操作请求过来的时候，它必须要获得<code>Vw</code>个冗余拷贝的许可。而剩下的数量是<code>V-Vw</code> 不够<code>Vr</code>，因此不能再接受读请求。同理，当读请求已经获得了<code>Vr</code>个冗余拷贝的许可时，写请求就无法获得许可了。<br><strong>第二条规则</strong>保证了<strong>数据的串行化修改</strong>。一份数据的冗余拷贝不可能同时被两个写请求修改。</p><p><code>Quorum</code>机制其实就类似于<code>NWR</code>机制。</p><h4 id="2-2-2-2、MA中的实现"><a href="#2-2-2-2、MA中的实现" class="headerlink" title="2.2.2.2、MA中的实现"></a>2.2.2.2、MA中的实现</h4><p><strong>第一阶段</strong>：（所有的存储层节点在一定的时间内都能收到日志）只需要大于一半的存储 层节点返回成功（这里每个节点还需要返回当前节点的 <code>VDL</code>），整个写日志过程就算成功。 </p><p><strong>第二阶段</strong>：利用 <code>gossip</code> 协议来保证空缺的日志得以补全，其检查时机是<strong>下次日志写入时</strong>检查前面的日志是否有空洞，如果存储空洞则向其他的节点取空缺的日志。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323204733832.png" alt="image-20210323204733832"></p><h3 id="2-2-3、Gossip协议"><a href="#2-2-3、Gossip协议" class="headerlink" title="2.2.3、Gossip协议"></a>2.2.3、Gossip协议</h3><h4 id="2-2-3-1、六度分割理论"><a href="#2-2-3-1、六度分割理论" class="headerlink" title="2.2.3.1、六度分割理论"></a>2.2.3.1、六度分割理论</h4><p>1967年，哈佛大学的心理学教授Stanley Milgram想要描绘一个连结人与社区的人际连系网。做过一次连锁信实验，结果发现了“六度分隔”现象。简单地说：“<strong>你和任何一个陌生人之间所间隔的人不会超过六个，也就是说，最多通过六个人你就能够认识任何一个陌生人</strong>。”</p><p>数学解释该理论：依据<a href="https://zh.wikipedia.org/wiki/%E9%82%93%E5%B7%B4%E6%95%B0">邓巴数(150定律)</a>，若每个人认识150人，其六度就是<br>$$<br>150^6 ＝11,390,625,000,000<br>$$<br>（约11.4万亿）。消除一些节点重复，那也几乎覆盖了整个地球人口数倍以上。</p><p>这也是<strong>Gossip协议的雏形</strong></p><h4 id="2-2-3-2、Gossip基本原理"><a href="#2-2-3-2、Gossip基本原理" class="headerlink" title="2.2.3.2、Gossip基本原理"></a>2.2.3.2、Gossip基本原理</h4><p><code>Gossip</code>协议与<code>Paxos</code>，<code>Raft</code>协议最大的区别就是它是<strong>去中心化</strong>的，即没有<code>Leader</code>，每个节点都是平等的。</p><p>每个节点存放了一个（<code>key,value,version</code>）构成的列表，每隔一定的时间，节点都会主动挑选一个在线节点进行下图的过程（不在线的也会挑一个尝试），两个节点各自修改自己较为落后的数据，<strong>最终数据达成一致并且都较新</strong>。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323173409190.png" alt="image-20210323173409190"></p><h4 id="2-2-3-3、MA中的实现"><a href="#2-2-3-3、MA中的实现" class="headerlink" title="2.2.3.3、MA中的实现"></a>2.2.3.3、MA中的实现</h4><p>步骤 1，当 <code>se</code> 节点收到 <code>ce</code> 节点的 <code>redo</code>，如果检查到当前节点的 <code>redo</code> 日志有空缺，随机 地向另外<code>⌈ ݊n/2 ⌉</code>个节点中的一个请求空缺的日志（肯定有一个节点有对应空缺的日志） </p><p>步骤 2，当 <code>se</code> 节点收到其他节点的 <code>redo</code> 日志请求，发送对应的 <code>redo</code> 日志。</p><p>伪代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//active thread </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">wait</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>redo log is <span class="token operator">not</span> intergrity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        send update request to other nodes<span class="token punctuation">;</span>             receive updata respon<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//passive thread </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    request <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>have redo log in request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        send redo log<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-4、Gossip协议优缺点"><a href="#2-2-3-4、Gossip协议优缺点" class="headerlink" title="2.2.3.4、Gossip协议优缺点"></a>2.2.3.4、Gossip协议优缺点</h4><p><strong>优点</strong>：</p><ul><li><strong>可扩展性</strong></li></ul><p>如下表格所示，假定<code>fanout=4</code>（一个节点将信息传给4个节点），那么在节点数<code>N</code>分别是20、40、80、160时，消息传播到所有节点需要的理论循环次数对比图如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323171629506.png" alt="image-20210323171629506"></p><p>其中，理论循环次数<code>count</code>计算公式如下：<br>$$<br>count = log (fanout) N<br>$$<br>我们发现，在节点成倍扩大的情况下，循环次数并没有增加很多。所以，<code>Gossip</code>协议具备可扩展性。</p><ul><li><strong>失败容错</strong></li></ul><p>即使因为网络故障等原因，某些节点没有收到信息，这对最终所有节点接收到消息是没有任何影响的。因为一个节点会<strong>多次</strong>分享某个需要传播的信息，即使不能连通某个节点，其他被感染的节点也会尝试向这个节点传播信息。</p><p><strong>缺点</strong>：</p><ul><li><strong>拜占庭问题</strong></li></ul><p>即如果有一个恶意传播消息的节点，<code>Gossip</code>协议的分布式系统就会出问题。</p><h1 id="3、多SE设计文档学习和源码解读"><a href="#3、多SE设计文档学习和源码解读" class="headerlink" title="3、多SE设计文档学习和源码解读"></a>3、多SE设计文档学习和源码解读</h1><h2 id="3-1、SE日志模块"><a href="#3-1、SE日志模块" class="headerlink" title="3.1、SE日志模块"></a>3.1、SE日志模块</h2><p>日志即数据库主要由四个子模块组成，整体方案图如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324115048165.png" alt="image-20210324115048165"></p><h3 id="3-1-1、hot-log-buffer（日志缓冲区）"><a href="#3-1-1、hot-log-buffer（日志缓冲区）" class="headerlink" title="3.1.1、hot log buffer（日志缓冲区）"></a>3.1.1、hot log buffer（日志缓冲区）</h3><p><code>hot log buffer</code> 实现的思路是：将 <code>hot log buffer</code> 分为两部分(<code>first buf&amp;&amp;second buf</code>)分别进行管理，一部分用于日志的收集，另一部分由于日志的解析，两部分交替使用。例如，<code>first buf</code> 收集日志后交由日志解析使用，<code>second buf</code> 用于继续收集日志，待 <code>first buf</code> 中的日志解析 完成之后，再使用 <code>second buf</code> 进行解析，<code>first buf</code> 再次用于收集日志。这样日志收集和解析可以并行进行，提高效率。</p><p><code>hot log buffer</code>，设置为两部分（<code>first buf</code> 和 <code>second buf</code>），每部分大小均设置为 32MB (<code>HOT_LOG_BUFFER_SIZE</code>)，其结构示意图见图 3-11。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324120145291.png" alt="image-20210324120145291"></p><p>主要接口如下：</p><ul><li><code>hot_log_t</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Hot log buffer to storage log records accept from computingengine, which is a circular buffer */</span><span class="token keyword">struct</span> hot_log_t <span class="token punctuation">{</span>    ib_mutex_t  mutex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*!&lt; mutex protecting the hot log buffer */</span>    byte<span class="token operator">*</span>        buf_ptr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*!&lt; unaligned log buffer, which should                    be of double of buf_size */</span>    byte<span class="token operator">*</span>        buf<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*!&lt; hot log buffer currently in use;                    this could point to either the first half of                    the aligned(buf_ptr) or the second half in                    turns, so that log parse to hash table don't                    block concurrent operation which will write                    log to this buffer */</span>    <span class="token keyword">bool</span>        first_in_use<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*!&lt; true if buf points to the                    first half of the aligned(buf_ptr), false                    if the second half */</span>    ulint   buf_free_block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*!&lt; first free block offset within                    the hot log buffer, it must accommodate                    OS_FILE_LOG_BLOCK_SIZE many times */</span>    lsn_t   last_log_file_offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*!&lt; last offset of the log                    files for log write */</span>    ulint   last_n_bytes<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*!&lt; the size of logs received last                    time */</span>    ulint   buf_size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*!&lt; hot log buffer size in bytes */</span>    <span class="token comment" spellcheck="true">/*ulint       next_to_parse; !&lt; first offset of log records                    that are not parsed */</span>  lsn_t            buf_lsn<span class="token punctuation">;</span>    ib_mutex_t       list_mutex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*!&lt; mutex protecting the lost_log_list */</span>    lost_log_list_t<span class="token operator">*</span> lost_log_list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*!&lt; list of lost log */</span>  std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span>lsn_t<span class="token operator">></span> vdl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>log_read_thread</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/******************************************************/</span><span class="token comment" spellcheck="true">/**Log read thread, read log from log files to hot log buffer.@return a dummy parameter */</span><span class="token keyword">extern</span> <span class="token string">"C"</span>os_thread_ret_t<span class="token function">DECLARE_THREAD</span><span class="token punctuation">(</span>log_read_thread<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*==============================*/</span>    <span class="token keyword">void</span><span class="token operator">*</span>    arg <span class="token function">MY_ATTRIBUTE</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unused<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>hot_log_read_from_file</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">hot_log_read_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token function">hot_log_list_mutex_own</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log_group_t<span class="token operator">*</span> group <span class="token operator">=</span> <span class="token function">UT_LIST_GET_FIRST</span><span class="token punctuation">(</span>log_sys<span class="token operator">-</span><span class="token operator">></span>log_groups<span class="token punctuation">)</span><span class="token punctuation">;</span>  lsn_t align_start_lsn <span class="token operator">=</span> <span class="token function">lsn_align_down</span><span class="token punctuation">(</span>hot_log_sys<span class="token operator">-</span><span class="token operator">></span>buf_lsn<span class="token punctuation">)</span><span class="token punctuation">;</span>  lsn_t align_end_lsn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  lsn_t current_vdl <span class="token operator">=</span> hot_log_sys<span class="token operator">-</span><span class="token operator">></span>vdl<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hot_log_lsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> current_vdl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    align_end_lsn <span class="token operator">=</span> <span class="token function">lsn_align_down</span><span class="token punctuation">(</span>current_vdl<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    align_end_lsn <span class="token operator">=</span> <span class="token function">lsn_align_up</span><span class="token punctuation">(</span><span class="token function">hot_log_lsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hot_log_sys<span class="token operator">-</span><span class="token operator">></span>buf_lsn <span class="token operator">&lt;</span> <span class="token function">hot_log_lsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hot_log_sys<span class="token operator">-</span><span class="token operator">></span>buf_lsn <span class="token operator">&lt;</span> align_end_lsn<span class="token punctuation">)</span> <span class="token punctuation">{</span>     lsn_t read_len <span class="token operator">=</span> align_end_lsn <span class="token operator">-</span> align_start_lsn<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read_len <span class="token operator">></span> HOT_LOG_READ_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      align_end_lsn <span class="token operator">=</span> HOT_LOG_READ_SIZE <span class="token operator">+</span> align_start_lsn<span class="token punctuation">;</span>      read_len <span class="token operator">=</span> HOT_LOG_READ_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    byte <span class="token operator">*</span>buffer <span class="token operator">=</span> <span class="token keyword">new</span> byte<span class="token punctuation">[</span>read_len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">log_mutex_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log_group_read_log_seg</span><span class="token punctuation">(</span>      buffer<span class="token punctuation">,</span> group<span class="token punctuation">,</span> align_start_lsn<span class="token punctuation">,</span> align_end_lsn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log_mutex_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hot_log_mutex_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log_range_t range <span class="token operator">=</span> <span class="token punctuation">{</span> LOST_LOG_NONE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">get_ce_log_range</span><span class="token punctuation">(</span>hot_log_sys<span class="token operator">-</span><span class="token operator">></span>buf_lsn<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token punctuation">(</span>ulint<span class="token punctuation">)</span>read_len<span class="token punctuation">,</span> range<span class="token punctuation">,</span> <span class="token string">"$from file$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hot_log_write_buffer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token punctuation">(</span>ulint<span class="token punctuation">)</span>read_len<span class="token punctuation">,</span> range<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hot_log_mutex_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> UNIV_DEBUG</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hot log read from_file buffer lsn is "</span>            <span class="token string">"consistency with hot log lsn"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-2、日志持久化"><a href="#3-1-2、日志持久化" class="headerlink" title="3.1.2、日志持久化"></a>3.1.2、日志持久化</h3><p>分三步：</p><p>（1）将刚接收到的日志写入磁盘；</p><p>（2）将日志写入 hot log buffer； </p><p>（3）向 CE 发送确认消息。</p><p>日志写入<code>hot log buffer</code>流程：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324125639060.png" alt="image-20210324125639060"></p><p>主要接口如下：</p><ul><li><p><code>write_from_log</code>：响应 <code>CE</code> 端写请求，将 <code>CE</code> 端传来的日志持久化</p></li><li><p><code>hot_log_buf_write_into</code> ：将日志写到 <code>hot log buffer</code></p></li><li><p><code>log_block_no_check</code>：检查日志的连续性</p></li></ul><h2 id="3-2、网络通信模块"><a href="#3-2、网络通信模块" class="headerlink" title="3.2、网络通信模块"></a>3.2、网络通信模块</h2><h3 id="3-2-1、网络监听模块"><a href="#3-2-1、网络监听模块" class="headerlink" title="3.2.1、网络监听模块"></a>3.2.1、网络监听模块</h3><p>监听模块的主要功能是监听客户端（计算层），是否有新的连接过来，并创建新的连接。 </p><p>其设计主要的模块是 <code>vio</code> 模块和 <code>sql/conn_handler</code>模块。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323213438536.png" alt="image-20210323213438536"></p><p><code>vio</code> 是底层通信模块，对上面封装了大部分与系统交互的细节，而 <code>sql/conn_handler</code> 是上层主要的监听模块。</p><p>我们知道，连接<code>MySQL</code>的方式有如下四种，类图中我们只列出了最常见的<code>TCP/IP</code>连接方式</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324091707415.png" alt="image-20210324091707415"></p><p>下面是监听模块类图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324090128086.png" alt="image-20210324090128086"></p><p>这里主要分为两层：上面一层是<strong>处理监听信息</strong>，下面是<strong>对新的连接的处理</strong>。其中，上面的结构使用了工厂方法模式，不同 <code>listener</code> 监听不同系统端口的状态信息，并生成该次监听的 <code>Channel_info</code> 信息。 下面是简单的工厂模式以面对处理新的连接时，选择不同处理方式： </p><ul><li><p><code>Per_thread_connection_handler</code> ：每当有一个连接建立时，便创建一个新的线程  </p></li><li><p><code>One_thread_connection_handler</code>：一个线程处理所有的链接请求。</p></li></ul><p>这里我们暂时只讨论 <code>Per_thread_connection_handler</code>。</p><p>在 <code>Per_thread_connection_handler</code> 模式并且采用 <code>tcp/ip</code> 通信情况下，每创建一个新的客户端线程，都会将之前的监听得到的连接信息传给新创建的 <code>work</code> 线程，其中包括与客户端连接的 <code>socket</code> ，<code>work</code> 线程通过持有该 <code>socket</code> 做进一步的初始化动作。</p><p>以 <code>Socket</code> 监听为例，之后就转到 <code>socket_conn_event_handler_s()</code> 方法来监听所有通过 <code>tcp/ip</code> 连接到存储层的计算层。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">socket_conn_event_handler_s</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> Acceptor <span class="token operator">=</span> Connection_acceptor<span class="token operator">&lt;</span>Mysqld_socket_listener<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn_event_handler<span class="token operator">&lt;</span>Acceptor<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">conn_event_handler</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">my_thread_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给线程分配内存</span>    st_wrap_thread_arg <span class="token operator">*</span>thread_arg <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">struct</span> st_wrap_thread_arg<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    T <span class="token operator">*</span>conn_acceptor <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>T <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>thread_arg<span class="token operator">-</span><span class="token operator">></span>acceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    conn_acceptor<span class="token operator">-</span><span class="token operator">></span><span class="token function">connection_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Connection acceptor循环监听来自客户端的连接</span>        Connection_handler_manager <span class="token operator">*</span>mgr<span class="token operator">=</span> Connection_handler_manager<span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>abort_loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Channel_info <span class="token operator">*</span>channel_info<span class="token operator">=</span> m_listener<span class="token operator">-</span><span class="token operator">></span><span class="token function">listen_for_connection_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>channel_info <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            mgr<span class="token operator">-</span><span class="token operator">></span><span class="token function">process_new_connection</span><span class="token punctuation">(</span>channel_info<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理新接收到的连接</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    conn_acceptor<span class="token operator">-</span><span class="token operator">></span><span class="token function">close_listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> conn_acceptor<span class="token punctuation">;</span>    thread_arg<span class="token operator">-</span><span class="token operator">></span>conn_mgr<span class="token operator">-</span><span class="token operator">></span><span class="token function">remove_handler</span><span class="token punctuation">(</span>thread_arg<span class="token operator">-</span><span class="token operator">></span>acceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">my_thread_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2、通信模块"><a href="#3-2-2、通信模块" class="headerlink" title="3.2.2、通信模块"></a>3.2.2、通信模块</h3><p>监听模块监听到有新的连接，并将该连接信息传到 <code>work</code> 线程，之后便由 <code>work</code> 线程和 <code>client</code> 进行通信，<code>work</code> 线程和 <code>client</code> 通信一般分为如下几个层次，其层次之间的关系类似于 <code>tcp/ip</code> 的四层模型之间的逻辑关系</p><p>(1) <code>THD</code>：控制该次连接所有的信息； </p><p>(2) <code>Protocol</code>：针对不同的连接方式，和处理的数据，其 Protocol 可能不同； </p><p>(3) <code>NET</code>：控制网络包的有序和相关网络通信的正确性； </p><p>(4) <code>VIO</code>：封装了 socket，named_pipe，shared_memory，以及不同平台的实现方式。 </p><p>(5) <code>Conn</code>：socket，named_pipe，shared_memory 等不同通信方式，基于操作系统的不同可能略有不同。</p><p><code>NET</code> 层主要负责 <code>Protocol</code> 层和 <code>VIO</code> 层的包的转发，当向下转发 <code>Protocol</code> 到 <code>VIO</code> 层的， <code>NET</code> 层会控制每个发送到 <code>VIO</code> 层 <code>Packet</code>（这里指要 发送到网络的数据包）的序号，并对大于 16M 的包会进行拆分成多个 <code>Packet</code>，直至其拆分之后的 <code>Packet</code> 的大小小于 16M；当向<code>Protocol</code> 提供服务时，<code>NET</code> 会先从 <code>VIO</code> 读取接受的 <code>Packet</code>，之后组装这些 <code>Packet</code>，以保持有序，<code>Protocol</code> 由此从 <code>NET</code> 获取完整的数据 服务。其中 <code>NET</code> 中比较重要的接口有:</p><pre class="line-numbers language-cpp"><code class="language-cpp">my_bool <span class="token function">my_net_write</span><span class="token punctuation">(</span>NET <span class="token operator">*</span>net<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packet<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//写数据到VIO层</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">my_net_read</span><span class="token punctuation">(</span>NET <span class="token operator">*</span>net<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从VIO层读数据</span>my_bool <span class="token function">net_write_command</span><span class="token punctuation">(</span>NET <span class="token operator">*</span>net<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> command<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>header<span class="token punctuation">,</span> size_t head_len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packet<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提供对命令数据的发送</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>VIO</code> 层是调用系统底层的模块，但是系统底层的模块又被 <code>PSI</code> 所封装，这在之前的监听模块也会遇到 <code>PSI</code> 的代码和我们要移植的代码混在一起的情况，这里对我们如何处理原有的 <code>PSI</code> 模块提出了要求。</p><p><code>Protocol</code> 层提供各种接口来对上层提供服务，以<code>send_ok</code> 接口为例，被组装之后，发送给 <code>VIO</code> 层的信息格式如图 3-23 所示。 </p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324131927429.png" alt="image-20210324131927429"></p><p>从协议格式来看，0 是一个标志位，用于表示为 <code>OK</code> 信息； <code>affect_rows</code> 是 SQL 执行影响的记录行数； <code>id</code> 为查询 id 值； <code>server_status</code> 表示 SQL 执行后，server 的状态值； <code>warn_count</code> 是 SQL 执行产生的警告信息数，最大值为 65535，大于这个数存储 65535；<code>msg</code> 表示传输的信息，没有长度限制，如果信息过长，会进行分包传输。</p><p><code>Redo</code> 线程和 <code>Page</code> 线程是由存储层 <code>work</code> 线程开启时初始化的两个网络 <code>IO</code> 线程，下面介绍下这两个线程异步通信的方式</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324132502452.png" alt="image-20210324132502452"></p><p>异步通信流程为：首先 boffer pool 发送异步 IO 请求，异步 IO 模块分配 slot，并将 IO 请求发送到 page 线程，page 线程随后向存储层的 page 线程发送 read page 请求（上面的虚 线），同时 read thread0 等待，直到 page 线程读到 slot 30 的请求的页面数据，之后 read thread0 将页面数据写入 buffer pool 并设置相关 buffer pool 参数，该次异步 IO 完毕。 </p><p>在存储层，则是由 1 个 <code>page</code> 线程和 4 个 <code>write</code> 线程组成的异步页面读取线程， </p><p>其工作方式类似于计算层，异步页面读取如图 3-25 所示。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324132713083.png" alt="image-20210324132713083"></p><p>当存储层收到来自计算层的页面请求，首先在 <code>buffer pool</code> 中查找该页面，如果该页面在存储层的 <code>buffer pool</code> 中，则直接取出来 发送给计算层 <code>page</code> 线程。如果不在则首先利用<code>异步IO</code> 从文件中取出该页面，然后发送给计算层 <code>page</code> 线程和存储层的 <code>buffer pool</code>。</p><p>主要接口设计：</p><p>(1) <code>num,num_text,num_binary</code> ：将整型和浮点型转为字节类型可网络传输的类型，这里有两种转换方式：转换为字符串的类： <code>num_text</code> ，转换为二进制传输的类：<code>num_binary</code> ，这两个类在 <code>MySQL</code> 中有对应的库直接用即可； </p><p>(2) <code>basic_io,basic_in_protocol, basic_out_protocol, basic_protocol</code> ：<strong>负责对外提供 IO 接口</strong>，其中 </p><p><code>basic_io</code>： 负责基本的 IO 功能：负责 num 的转换方式是 num_text 类型 还是 num_binary 类型， 负责数据转 换的格式如 浮点型 的转换精度 等； </p><p><code>basic_out_protocol</code> ：负责将某种协议（从某种情况来看： int , double 也可视作协 议）转换为 IO 流，并输出到 net 上去，并提供拓展的接口（借助 Command 模式，即仿函数）；</p><p><code>basic_in_protocol</code> ：负责将网络 IO 流转换为我们所需要的某种协议； </p><p><code>basic_protocol</code> ：提供 IO 的输入与输出。</p><p>(3) <code>net_io</code> ：这一层是 <code>NET</code> 层和 <code>Vio</code> 层封装，封装所有的底层操作，主要是由于 <code>MySQL</code> 对这两层的设计比较糟糕，使得层次与层次之间的区分得并不是太好。</p><h3 id="3-2-3、多线程通信"><a href="#3-2-3、多线程通信" class="headerlink" title="3.2.3、多线程通信"></a>3.2.3、多线程通信</h3><p>多线程通信的连接数= 1（独立的写日志的连接）+ n（数据页连接） </p><p><code>CE</code> 层架构限制 <code>Redo</code> 日志不支持并发传输，所以只对所有读页面和创建文件（建表）的请求采用多线程通信的方式。架构限制最多 <code>n</code> 个线程和 <code>redo</code> 日志并行传输。当第 n+1 个线程请求发生，流程如图 3-26 所示</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210324133547725.png" alt="image-20210324133547725"></p><p><code>MA</code> 项目在原本<code>Mysql</code> 通信报文的基础上添加了两种报文类型 ： <code>CE_INNOBASE_MESSAGE</code> 和 <code>SE_ADD_SLAVE</code>。</p><h3 id="3-2-4、常用接口"><a href="#3-2-4、常用接口" class="headerlink" title="3.2.4、常用接口"></a>3.2.4、常用接口</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*1.向网络写数据 @file: net_serve.cc*/</span> <span class="token function">net_write_raw</span><span class="token punctuation">(</span>NET <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packet<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*2.从网络读数据 @file: net_serve.cc*/</span> <span class="token function">net_read_raw</span><span class="token punctuation">(</span>NET <span class="token operator">*</span> net<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*3.向SE发起数据传输连接 @file: client.c*/</span> <span class="token function">mysql_real_connect_with_se</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*4.向SE发起同步vdl的连接 @file: client.c */</span> <span class="token function">mysql_real_connect_with_se_for_vdl_sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*5.建立监听 @file: socket_connection.cc*/</span> <span class="token function">setup_listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*6.监听过程 @file: socket_connection.cc */</span> <span class="token function">listen_for_connection_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*7.处理具体连接请求 @file:os0doc.cc*/</span> <span class="token function">ha_ma_se</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*8.整理和写入数据包 @sql_class.cc*/</span> <span class="token function">ma_se</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*9.向SE每0.2秒发送read_point @os0doc.**/</span> <span class="token function">sync_slave_lsn_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSE </tag>
            
            <tag> Quorum </tag>
            
            <tag> Gossip </tag>
            
            <tag> Aurora </tag>
            
            <tag> CAP </tag>
            
            <tag> ACID </tag>
            
            <tag> BASE </tag>
            
            <tag> NWR </tag>
            
            <tag> 日志即数据库 </tag>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210317</title>
      <link href="2021/04/08/20210317/"/>
      <url>2021/04/08/20210317/</url>
      
        <content type="html"><![CDATA[<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a><strong>任务</strong></h1><ul><li>具体看<code>B+树</code>分裂这一个事务过程中，内部事务<code>mtr</code>是如何组成的，<code>redo</code>日志和<code>undo</code>日志是如何写的。</li></ul><h1 id="源码调试分析"><a href="#源码调试分析" class="headerlink" title="源码调试分析"></a>源码调试分析</h1><p>注意到<code>MySQL5.7</code>默认是没有开启<code>binlog</code>，也就不支持<strong>内部XA</strong>，进而看不到两阶段提交，所以我们先开启<code>binlog</code></p><p>修改<code>my.ini</code>配置文件，添加下面三行配置</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token constant">log-bin</span><span class="token attr-value"><span class="token punctuation">=</span>mysql-bin</span><span class="token constant">binlog-format</span><span class="token attr-value"><span class="token punctuation">=</span>Row</span><span class="token constant">server-id</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启<code>mysqld</code>，执行<code>show binary logs;</code>检查<code>binlog</code>是否开启成功</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315233645193.png" alt="image-20210315233645193"></p><p>该文件在<code>data</code>目录下</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315233729710.png" alt="image-20210315233729710"></p><p>这样<code>MySQL</code>就可以利用<strong>内部XA</strong>来保证<code>redo log</code>和<code>binlog</code>之间的一致性，进而就能看到<code>2pc</code></p><p>接着我们来回顾下<code>mtr</code>的关键数据结构<code>mtr_t</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> mtr_t <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/** Impl是mtr_t的内部类用以描述mtr状态 */</span><span class="token keyword">struct</span> Impl <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/** memo stack for locks etc.mtr 持有锁的栈 */</span>mtr_buf_t m_memo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** mini-transaction log，即redo日志*/</span>mtr_buf_t m_log<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** true if mtr has made at least one buffer pool page dirty是否产生buffer pool脏页*/</span><span class="token keyword">bool</span> m_made_dirty<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** true if inside ibuf changesinsert buffer 是否修改 */</span><span class="token keyword">bool</span> m_inside_ibuf<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** true if the mini-transaction modified buffer pool pages 是否修改buffer pool pages*/</span><span class="token keyword">bool</span> m_modifications<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Count of how many page initial log records have been written to the mtr log log 记录数*/</span>ib_uint32_t m_n_log_recs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** specifies which operations should be logged; default value MTR_LOG_ALL 日志模式，默认MTR_LOG_ALL*/</span>mtr_log_t m_log_mode<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> UNIV_DEBUG</span><span class="token comment" spellcheck="true">/** Persistent user tablespace associated with the mini-transaction, or 0 (TRX_SYS_SPACE) if none yet 用户表空间id*/</span>ulint m_user_space_id<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/* UNIV_DEBUG */</span><span class="token comment" spellcheck="true">/** User tablespace that is being modified by themini-transaction 用户表空间 */</span>fil_space_t<span class="token operator">*</span> m_user_space<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Undo tablespace that is being modified by themini-transactionundo表空间*/</span>fil_space_t<span class="token operator">*</span> m_undo_space<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** System tablespace if it is being modified by themini-transaction系统表空间*/</span>fil_space_t<span class="token operator">*</span> m_sys_space<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** State of the transaction事务状态*/</span>mtr_state_t m_state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Owning mini-transaction */</span>mtr_t<span class="token operator">*</span> m_mtr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Start a mini-transaction.*/</span><span class="token comment" spellcheck="true">//@param sync true if it is a synchronous mini-transaction</span><span class="token comment" spellcheck="true">//@param read_only true if read only mini-transaction */</span><span class="token comment" spellcheck="true">//mtr的start函数对mtr_t进行了初始化。</span><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">bool</span> sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> read_only <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/** Commit the mini-transaction. */</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">:</span><span class="token comment" spellcheck="true">/** Look up the system tablespace. */</span><span class="token keyword">void</span> <span class="token function">lookup_sys_space</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Look up the user tablespace.*/</span><span class="token comment" spellcheck="true">//@param[in] space_id tablespace ID</span><span class="token keyword">void</span> <span class="token function">lookup_user_space</span><span class="token punctuation">(</span>ulint space_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>Impl m_impl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** LSN at commit time */</span><span class="token keyword">volatile</span> lsn_t m_commit_lsn<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** true if it is synchronous mini-transaction */</span><span class="token keyword">bool</span> m_sync<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在整个<code>B+树</code>索引分裂这一个事务过程中，据调试分析应该是有<code>5</code>个<code>mtr</code>，下面我们来详细看看</p><p>我们从<code>row_ins_clust_index_entry_low</code>入口函数开始看起，第<code>2477</code>行我们能看到下面代码，即开启一个<code>mtr</code>，我们记之为<code>mtr-1</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315215852584.png" alt="image-20210315215852584"></p><blockquote><p>mtr_start主要包括：</p><ol><li>初始化mtr的各个<strong>状态变量</strong></li><li>默认模式为<strong>MTR_LOG_ALL</strong>，表示记录所有的数据变更</li><li>mtr状态设置为<strong>ACTIVE</strong>状态（MTR_STATE_ACTIVE）</li><li>为锁管理对象和日志管理对象<strong>初始化内存</strong>（mtr_buf_t）,<strong>初始化对象链表</strong></li></ol></blockquote><p>然后会执行下面一行代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    mtr<span class="token punctuation">.</span><span class="token function">set_named_space</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>space<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该方法是<code>MySQL5.7</code>新增的逻辑，将当前修改的表空间对象<code>fil_space_t</code>保存下来：如果是系统表空间，则赋值给<code>m_impl.m_sys_space</code>, 否则赋值给<code>m_impl.m_user_space</code></p><p>接着会对<code>index</code>加一个<code>S锁</code>（首先会尝试乐观插入）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315220334295.png" alt="image-20210315220334295"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210317104223521.png" alt="image-20210317104223521"></p><p>接着找到预插入<code>page</code>对应的<code>block</code>将<code>block锁</code> <code>RW_S_LATCH</code> 入栈（m_memo）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315220500299.png" alt="image-20210315220500299"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315220635936.png" alt="image-20210315220635936"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210317104547971.png" alt="image-20210317104547971"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210317104520539.png" alt="image-20210317104520539"></p><p>查看<code>memo_push</code>源码可以发现加锁入栈思路挺简单，就是根据锁类型和锁对象构建<code>mtr_memo_slot_t</code>然后加入到<code>m_impl.m_memo</code>中</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>type <span class="token operator">==</span> MTR_MEMO_PAGE_X_FIX <span class="token operator">||</span> type <span class="token operator">==</span> MTR_MEMO_PAGE_SX_FIX<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> MTR_MEMO_BUF_FIX <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m_impl<span class="token punctuation">.</span>m_made_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    mtr_memo_slot_t<span class="token operator">*</span>    slot<span class="token punctuation">;</span>    slot <span class="token operator">=</span> m_impl<span class="token punctuation">.</span>m_memo<span class="token punctuation">.</span>push<span class="token operator">&lt;</span>mtr_memo_slot_t<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slot<span class="token operator">-</span><span class="token operator">></span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    slot<span class="token operator">-</span><span class="token operator">></span>object <span class="token operator">=</span> object<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>往下走，一直走到<code>trx_undo_report_row_operation</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315221200846.png" alt="image-20210315221200846"></p><p>继续往下走，我们能看到开启了一个<code>mtr</code>，我们记之为<code>mtr-2</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315204722389.png" alt="image-20210315204722389"></p><p>主要用来记录<code>undo log</code>，接下往下走，会走到<code>trx_undo_assign_undo</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315204922343.png" alt="image-20210315204922343"></p><p>我们跟进去看下，发现里面又开启了一个<code>mtr</code>，我们记之为<code>mtr-3</code>，它主要用来分配或者复用一个<code>undo log</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315205050182.png" alt="image-20210315205050182"></p><p>然后我们接着往下走，直到<code>trx_undo_reuse_cached</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315205407084.png" alt="image-20210315205407084"></p><p>这里表示我们会先尝试复用<code>undo log</code>，复用失败的话，就分配新的<code>undo log</code>，我们跟到<code>trx_undo_reuse_cached</code>方法里面去，往下走，直到<code>trx_undo_page_get</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315205702300.png"></p><p>这里表示会去获取<code>undo log</code>和一个<code>x-latch</code>，最终会调用<code>buf_page_get_gen</code>方法，我们继续往下走，直到<code>mtr_memo_push</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315210157470.png" alt="image-20210315210157470"></p><p>此时我们观察<code>fix_type</code>的值是<code>MTR_MEMO_PAGE_X_FIX</code>，对应的<code>rw_latch</code> 为 <code>RW_X_LATCH</code>，即我们把<code>undo log page</code>加<code>RW_X_LATCH</code>入栈</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315210239042.png" alt="image-20210315210239042"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315210441460.png" alt="image-20210315210441460"></p><p>接着，我们回溯至<code>trx_undo_reuse_cached</code>方法，接着往下走，直到<code>trx_undo_insert_header_reuse</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315210649237.png" alt="image-20210315210649237"></p><p>该方法主要是用来写<code>undo log header</code>，就不细看了，然后我们接着往下走，直到<code>trx_undo_header_add_space_for_xid</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315210919594.png" alt="image-20210315210919594"></p><p>该方法主要用来在<code>undo log header</code>中预留<code>XA事务</code>的<code>xid</code>空间</p><p><code>trx_undo_reuse_cached</code>至此关键代码都走完了，接着回溯至<code>trx_undo_assign_undo</code>方法，提交<code>mtr-3</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315211237454.png" alt="image-20210315211237454"></p><p>然后我们接着回溯至<code>trx_undo_report_row_operation</code>方法，接着往下走，直到<code>buf_page_get_gen</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315212604618.png" alt="image-20210315212604618"></p><p>跟进去然后走到<code>mtr_memo_push</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315221736270.png" alt="image-20210315221736270"></p><p>即将写入的 <code>undo log page</code> 加 <code>RW_X_LATCH</code> 入栈，接着回溯至<code>trx_undo_report_row_operation</code>，然后往下走，直到<code>trx_undo_page_report_insert</code>方法<img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315213348452.png" alt="image-20210315213348452"></p><p>该方法主要是<code>undo log</code>记录<code>insert</code>操作，接着往下走，提交<code>mtr-2</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315214123709.png" alt="image-20210315214123709"></p><p><code>mtr-2</code>提交完之后，回溯至<code>btr_cur_pessimistic_insert</code>方法，开始分裂，最后尝试插入记录<code>page_cur_tuple_insert</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315225322127.png" alt="image-20210315225322127"></p><p>我们跟进去，走到<code>page_cur_insert_rec_low</code>，执行具体<code>insert</code>操作</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315225601780.png" alt="image-20210315225601780"></p><p>跟进去，走到<code>page_cur_insert_rec_write_log</code>方法，写<code>insert</code>操作的<code>redo log</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315230014265.png" alt="image-20210315230014265"></p><p>接下来我们跟到<code>page_cur_insert_rec_write_log</code>方法里去看看<code>redo log</code>到底怎么写的</p><p><strong>第一步</strong>：会调用方法<code>mlog_open_and_write_index</code>记录索引相关信息</p><p>1）调用<code>mlog_open</code>，分配足够日志写入的内存地址，并返回内存指针</p><pre class="line-numbers language-cpp"><code class="language-cpp">ulint    n    <span class="token operator">=</span> <span class="token function">dict_index_get_n_fields</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>ulint    total    <span class="token operator">=</span> <span class="token number">11</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>ulint    alloc    <span class="token operator">=</span> total<span class="token punctuation">;</span>log_start <span class="token operator">=</span> log_ptr <span class="token operator">=</span> <span class="token function">mlog_open</span><span class="token punctuation">(</span>mtr<span class="token punctuation">,</span> alloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2）调用<code>mlog_write_initial_log_record_fast</code>，初始化日志记录</p><pre class="line-numbers language-cpp"><code class="language-cpp">log_ptr <span class="token operator">=</span> <span class="token function">mlog_write_initial_log_record_fast</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span> type<span class="token punctuation">,</span> log_ptr<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3)存储当前索引列数<code>n</code>到<code>log_ptr</code>里面，占两个字节</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">mach_write_to_2</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>log_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4)写入行记录上决定唯一性的列的个数，占两个字节</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_is_leaf</span><span class="token punctuation">(</span><span class="token function">page_align</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//对于聚集索引，就是PK上的列数</span>    <span class="token function">mach_write_to_2</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span> <span class="token function">dict_index_get_n_unique_in_tree</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//对于二级索引，就是二级索引列 + PK列个数</span>    <span class="token function">mach_write_to_2</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span> <span class="token function">dict_index_get_n_unique_in_tree_nonleaf</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>log_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5)写入每个列的长度信息，每个列占两个字节</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">mach_write_to_2</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>log_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第二步</strong>：写入记录在<code>page</code>上的偏移量，占两个字节</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210317113611064.png" alt="image-20210317113611064"></p><p><strong>第三步</strong>：写入记录其它相关信息，包括<code>rec size、info bits、extra_size</code></p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/* Write the record end segment length and the extra info storage flag */</span>        log_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">mach_write_compressed</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>rec_size <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Write the info bits */</span>        <span class="token function">mach_write_to_1</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span>                <span class="token function">rec_get_info_and_status_bits</span><span class="token punctuation">(</span>                    insert_rec<span class="token punctuation">,</span>                    <span class="token function">page_rec_is_comp</span><span class="token punctuation">(</span>insert_rec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log_ptr<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Write the record origin offset */</span>        log_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">mach_write_compressed</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span> extra_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Write the mismatch index */</span>        log_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">mach_write_compressed</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现这里采用了压缩写入的方法<code>mach_write_compressed</code>，我们阅读<code>mach_write_compressed</code>源码可以发现，它是根据写入数字<code>n</code>的大小来选定1到4个字节来记录整数，从而可以节省<code>redo log</code>空间</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 0nnnnnnn (7 bits) */</span>    <span class="token function">mach_write_to_1</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0x4000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 10nnnnnn nnnnnnnn (14 bits) */</span>    <span class="token function">mach_write_to_2</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> n <span class="token operator">|</span> <span class="token number">0x8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0x200000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 110nnnnn nnnnnnnn nnnnnnnn (21 bits) */</span>    <span class="token function">mach_write_to_3</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> n <span class="token operator">|</span> <span class="token number">0xC00000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0x10000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 1110nnnn nnnnnnnn nnnnnnnn nnnnnnnn (28 bits) */</span>    <span class="token function">mach_write_to_4</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> n <span class="token operator">|</span> <span class="token number">0xE0000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 11110000 nnnnnnnn nnnnnnnn nnnnnnnn nnnnnnnn (32 bits) */</span>    <span class="token function">mach_write_to_1</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mach_write_to_4</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第四步</strong>： 将插入的记录拷贝到<code>redo</code>文件，同时关闭<code>mlog</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">memcpy</span><span class="token punctuation">(</span>log_ptr<span class="token punctuation">,</span> ins_ptr<span class="token punctuation">,</span> rec_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mlog_close</span><span class="token punctuation">(</span>mtr<span class="token punctuation">,</span> log_ptr <span class="token operator">+</span> rec_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们来看看<code>mtr</code>的提交过程，入口函数为<code>mtr_t::commit()</code>，当修改产生脏页或者日志记录时，调用<code>mtr_t::Command::execute</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Write the redo log record, add dirty pages to the flush list and releasethe resources. 写redo log，添加脏页到flush list，释放资源*/</span><span class="token keyword">void</span> mtr_t<span class="token operator">::</span>Command<span class="token operator">::</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ut_ad</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>m_log_mode <span class="token operator">!=</span> MTR_LOG_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ulint len <span class="token operator">=</span> <span class="token function">prepare_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">finish_write</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>m_made_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log_flush_order_mutex_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* It is now safe to release the log mutex because the    flush_order mutex will ensure that we are the first one    to insert into the flush list. */</span>    <span class="token function">log_mutex_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_impl<span class="token operator">-</span><span class="token operator">></span>m_mtr<span class="token operator">-</span><span class="token operator">></span>m_commit_lsn <span class="token operator">=</span> m_end_lsn<span class="token punctuation">;</span>    <span class="token function">release_blocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>m_made_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log_flush_order_mutex_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">release_latches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">release_resources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行过程如下：</p><p><strong>第一步</strong>：调用<code>mtr_t::Command::prepare_write()</code>，准备写<code>m_log</code>到<code>redo log buffer</code></p><p>1）若当前<code>m_log_mode</code>为<code>MTR_LOG_NO_REDO</code>或者<code>MTR_LOG_NONE</code>，则获取<code>log_sys-&gt;mutex</code>，然后返回</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">case</span> MTR_LOG_NO_REDO<span class="token operator">:</span><span class="token keyword">case</span> MTR_LOG_NONE<span class="token operator">:</span>    <span class="token function">ut_ad</span><span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>m_log<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log_mutex_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_end_lsn <span class="token operator">=</span> m_start_lsn <span class="token operator">=</span> log_sys<span class="token operator">-</span><span class="token operator">></span>lsn<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）若当前要写入<code>redo log</code>记录大小超过<code>log buffer</code>的一半，将<code>log buffer</code>扩大为原来两倍</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> log_sys<span class="token operator">-</span><span class="token operator">></span>buf_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">log_buffer_extend</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3）获取<code>log_sys-&gt;mutex</code>锁</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">log_mutex_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）调用函数<code>fil_names_write_if_was_clean</code>检查本次修改的表空间是否是上次<code>checkpoint</code>后第一次修改</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">bool</span>    was_clean <span class="token operator">=</span> space<span class="token operator">-</span><span class="token operator">></span>max_lsn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">ut_ad</span><span class="token punctuation">(</span>space<span class="token operator">-</span><span class="token operator">></span>max_lsn <span class="token operator">&lt;=</span> log_sys<span class="token operator">-</span><span class="token operator">></span>lsn<span class="token punctuation">)</span><span class="token punctuation">;</span>space<span class="token operator">-</span><span class="token operator">></span>max_lsn <span class="token operator">=</span> log_sys<span class="token operator">-</span><span class="token operator">></span>lsn<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首先会将space->max_lsn赋值为log_sys->lsn</span><span class="token keyword">if</span> <span class="token punctuation">(</span>was_clean<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//即space->max_lsn == 0，表示自上次checkpoint后第一次修改该表空间，调用fil_names_dirty_and_write将该tablespace加入到fil_system->named_spaces链表上，同时调用fil_names_write写入一条类型为MLOG_FILE_NAME的日志</span>    <span class="token function">fil_names_dirty_and_write</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* This was not the first time of dirtying a        tablespace since the latest checkpoint.         不是从上一次checkpoint后第一次修改该表，则根据mtr中log的个数，选择标识日志头最高位为MLOG_SINGLE_REC_FLAG，或者附加一个1字节的        MLOG_MULTI_REC_END日志。*/</span>        <span class="token function">ut_ad</span><span class="token punctuation">(</span>n_recs <span class="token operator">==</span> m_impl<span class="token operator">-</span><span class="token operator">></span>m_n_log_recs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n_recs <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ut_ad</span><span class="token punctuation">(</span>n_recs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Flag the single log record as the            only record in this mini-transaction. */</span>            <span class="token operator">*</span>m_impl<span class="token operator">-</span><span class="token operator">></span>m_log<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">|</span><span class="token operator">=</span> MLOG_SINGLE_REC_FLAG<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* Because this mini-transaction comprises            multiple log records, append MLOG_MULTI_REC_END            at the end. */</span>            <span class="token function">mlog_catenate_ulint</span><span class="token punctuation">(</span>                <span class="token operator">&amp;</span>m_impl<span class="token operator">-</span><span class="token operator">></span>m_log<span class="token punctuation">,</span> MLOG_MULTI_REC_END<span class="token punctuation">,</span>                MLOG_1BYTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）调用函数<code>log_margin_checkpoint_age</code>检查本次写入</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* check and attempt a checkpoint if exceeding capacity */</span><span class="token function">log_margin_checkpoint_age</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>    ulint    margin <span class="token operator">=</span> <span class="token function">log_calculate_actual_len</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>margin <span class="token operator">></span> log_sys<span class="token operator">-</span><span class="token operator">></span>log_group_capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* return with warning output to avoid deadlock         如果margin size超过redo log文件capacity，则打印一条错误信息*/</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>log_has_printed_chkp_margine_warning            <span class="token operator">||</span> <span class="token function">difftime</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                log_last_margine_warning_time<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log_has_printed_chkp_margine_warning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            log_last_margine_warning_time <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ib<span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"The transaction log files are too"</span>                <span class="token string">" small for the single transaction log (size="</span>                <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span> <span class="token string">"). So, the last checkpoint age"</span>                <span class="token string">" might exceed the log group capacity "</span>                <span class="token operator">&lt;&lt;</span> log_sys<span class="token operator">-</span><span class="token operator">></span>log_group_capacity <span class="token operator">&lt;&lt;</span> <span class="token string">"."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Our margin check should ensure that we never reach this condition.    Try to do checkpoint once. We cannot keep waiting here as it might    result in hang in case the current mtr has latch on oldest lsn */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>log_sys<span class="token operator">-</span><span class="token operator">></span>lsn <span class="token operator">-</span> log_sys<span class="token operator">-</span><span class="token operator">></span>last_checkpoint_lsn <span class="token operator">+</span> margin        <span class="token operator">></span> log_sys<span class="token operator">-</span><span class="token operator">></span>log_group_capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* The log write of 'len' might overwrite the transaction log        after the last checkpoint. Makes checkpoint.         若本次写入可能覆盖检查点，还需要去强制做一次同步checkpoint*/</span>        <span class="token keyword">bool</span>    flushed_enough <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log_sys<span class="token operator">-</span><span class="token operator">></span>lsn <span class="token operator">-</span> <span class="token function">log_buf_pool_get_oldest_modification</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> margin            <span class="token operator">&lt;=</span> log_sys<span class="token operator">-</span><span class="token operator">></span>log_group_capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            flushed_enough <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log_sys<span class="token operator">-</span><span class="token operator">></span>check_flush_or_checkpoint <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">log_mutex_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DEBUG_SYNC_C</span><span class="token punctuation">(</span><span class="token string">"margin_checkpoint_age_rescue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flushed_enough<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">os_thread_sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">log_checkpoint</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log_mutex_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二步</strong>：调用<code>mtr_t::Command::finish_write</code>，将日志从mtr中拷贝到公共<code>log buffer</code>，这里有两种方式</p><p>1）如果<code>mtr</code>中日志较小，则调用函数<code>log_reserve_and_write_fast</code>尝试将日志拷贝到<code>log buffer</code>最近的一个<code>block</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210317131225532.png" alt="image-20210317131225532"></p><p>2）检查是否有足够的空闲空间后，返回当前的<code>lsn</code>赋值给<code>m_start_lsn</code>（<code>log_reserve_and_open(len)</code>），随后将日志记录写入到<code>log buffer</code>中</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/* Open the database log for log_write_low */</span>    m_start_lsn <span class="token operator">=</span> <span class="token function">log_reserve_and_open</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    mtr_write_log_t    write_log<span class="token punctuation">;</span>    m_impl<span class="token operator">-</span><span class="token operator">></span>m_log<span class="token punctuation">.</span><span class="token function">for_each_block</span><span class="token punctuation">(</span>write_log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3）在完成将<code>redo</code> 拷贝到<code>log buffer</code>后，需要调用<code>log_close</code>, 如果最后一个<code>block</code>未写满，则设置该<code>block</code>头部的<code>LOG_BLOCK_FIRST_REC_GROUP</code>信息</p><pre class="line-numbers language-cpp"><code class="language-cpp">first_rec_group <span class="token operator">=</span> <span class="token function">log_block_get_first_rec_group</span><span class="token punctuation">(</span>log_block<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first_rec_group <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* We initialized a new log block which was not written        full by the current mtr: the next mtr log record group        will start within this block at the offset data_len */</span>        <span class="token function">log_block_set_first_rec_group</span><span class="token punctuation">(</span>            log_block<span class="token punctuation">,</span> <span class="token function">log_block_get_data_len</span><span class="token punctuation">(</span>log_block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token operator">-</span><span class="token operator">></span>buf_free <span class="token operator">></span> log<span class="token operator">-</span><span class="token operator">></span>max_buf_free<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token operator">-</span><span class="token operator">></span>check_flush_or_checkpoint <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    checkpoint_age <span class="token operator">=</span> lsn <span class="token operator">-</span> log<span class="token operator">-</span><span class="token operator">></span>last_checkpoint_lsn<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>checkpoint_age <span class="token operator">>=</span> log<span class="token operator">-</span><span class="token operator">></span>log_group_capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>log_has_printed_chkp_warning            <span class="token operator">||</span> <span class="token function">difftime</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log_last_warning_time<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log_has_printed_chkp_warning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            log_last_warning_time <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ib<span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"The age of the last checkpoint is "</span>                <span class="token operator">&lt;&lt;</span> checkpoint_age <span class="token operator">&lt;&lt;</span> <span class="token string">", which exceeds the log"</span>                <span class="token string">" group capacity "</span> <span class="token operator">&lt;&lt;</span> log<span class="token operator">-</span><span class="token operator">></span>log_group_capacity                <span class="token operator">&lt;&lt;</span> <span class="token string">"."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>checkpoint_age <span class="token operator">&lt;=</span> log<span class="token operator">-</span><span class="token operator">></span>max_modified_age_sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">goto</span> function_exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    oldest_lsn <span class="token operator">=</span> <span class="token function">buf_pool_get_oldest_modification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*满足如下情况时，设置log_sys->check_flush_or_checkpoint为true：1、当前bp中最老lsn为0 （没有脏页）2、bp中最老lsn和当前lsn的距离超过log_sys->max_modified_age_sync3、当前未checkpoint的lsn age超过log_sys->max_checkpoint_age_async当check_flush_or_checkpoint被设置时，用户线程在每次修改数据前调用log_free_check时，会根据该标记决定是否刷redo日志或者脏页*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldest_lsn        <span class="token operator">||</span> lsn <span class="token operator">-</span> oldest_lsn <span class="token operator">></span> log<span class="token operator">-</span><span class="token operator">></span>max_modified_age_sync        <span class="token operator">||</span> checkpoint_age <span class="token operator">></span> log<span class="token operator">-</span><span class="token operator">></span>max_checkpoint_age_async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token operator">-</span><span class="token operator">></span>check_flush_or_checkpoint <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三步</strong>：如果本次修改产生了脏页，获取<code>log_sys-&gt;log_flush_order_mutex</code>，随后释放<code>log_sys-&gt;mutex</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>m_made_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">log_flush_order_mutex_enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* It is now safe to release the log mutex because the    flush_order mutex will ensure that we are the first one    to insert into the flush list. */</span><span class="token function">log_mutex_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第四步</strong>： 将当前<code>mtr</code>修改的脏页加入到<code>flush list</code>上，<strong>脏页上记录的lsn为当前mtr写入的结束点lsn</strong>。基于上述加锁逻辑，能够保证<code>flush list</code>上的脏页总是以<code>lsn</code>排序。</p><pre class="line-numbers language-cpp"><code class="language-cpp">m_impl<span class="token operator">-</span><span class="token operator">></span>m_mtr<span class="token operator">-</span><span class="token operator">></span>m_commit_lsn <span class="token operator">=</span> m_end_lsn<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第五步</strong>：释放<code>log_sys-&gt;log_flush_order_mutex</code>锁</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>m_impl<span class="token operator">-</span><span class="token operator">></span>m_made_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">log_flush_order_mutex_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第六步</strong>：释放当前mtr持有的锁和相关资源</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">release_latches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">release_resources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后回溯到<code>row_ins_clust_index_entry_low</code>方法，提交<code>mtr-1</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315230229786.png" alt="image-20210315230229786"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315230413641.png" alt="image-20210315230413641"></p><p>这样<code>insert</code>语句就执行完毕了，接下来进行事务提交，会有两个<code>mtr</code></p><p>第一个<code>mtr</code>从<code>trx_prepare_low</code>开始</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315234300639.png" alt="image-20210315234300639"></p><p>走到<code>mtr_start_sync</code>会启动一个<code>mtr</code>，我们记之为<code>mtr-4</code>，主要用于<code>prepare</code>事务</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315234335143.png" alt="image-20210315234335143"></p><p>接着往下走，会走到<code>trx_undo_set_state_at_prepare</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315234544943.png" alt="image-20210315234544943"></p><p>我们跟进去，最后会走到<code>buf_page_get_gen</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315234844001.png" alt="image-20210315234844001"></p><p>再次给<code>undo page</code> 加 <code>RW_X_LATCH</code> 入栈</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315235008175.png" alt="image-20210315235008175"></p><p>接着回溯至<code>trx_undo_set_state_at_prepare</code>方法，继续往下走，会依次写入<code>TRX_UNDO_STATE、TRX_UNDO_XID_EXISTS、xid</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315235321267.png" alt="image-20210315235321267"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315235345755.png" alt="image-20210315235345755"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315235405534.png" alt="image-20210315235405534"></p><p>然后，返回回溯至<code>trx_prepare_low</code>方法，提交<code>mtr-4</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315235523933.png" alt="image-20210315235523933"></p><p>至此，<code>prepare</code>阶段就结束了，接下来会进入<code>commit</code>阶段</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315235916346.png" alt="image-20210315235916346"></p><p>进入<code>trx_commit</code>方法，往下走到<code>mtr_start_sync</code>方法，会开启一个<code>mtr</code>，我们记之为<code>mtr-5</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210315235929716.png" alt="image-20210315235929716"></p><p>之后我们走到<code>trx_undo_set_state_at_finish</code>，其调用链如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316000231627.png" alt="image-20210316000231627"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316000258827.png" alt="image-20210316000258827"></p><p>最后会调用<code>mtr_memo_push</code>方法给<code>undo log</code>加<code>RW_X_LATCH</code>入栈</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316000713076.png" alt="image-20210316000713076"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316000725973.png" alt="image-20210316000725973"></p><p>接着我们回溯到<code>trx_write_serialisation_history</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316001238065.png" alt="image-20210316001238065"></p><p>往下走，直到<code>trx_sys_update_mysql_binlog_offset</code>方法，该方法主要用来更新偏移量信息到系统表空间</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316001356451.png" alt="image-20210316001356451"></p><p>跟进去，往下走，最后会通过<code>mtr_memo_push</code>将系统表空间 <code>transaction system header page</code> 加 <code>RW_X_LATCH</code> 入栈</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316001739088.png" alt="image-20210316001739088"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316001855609.png" alt="image-20210316001855609"></p><p>然后回溯至<code>trx_commit_low</code>方法，提交<code>mtr-5</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210316002049765.png" alt="image-20210316002049765"></p><p>至此，本次<code>insert</code>导致<code>B+树</code>索引分裂涉及的<code>mtr</code>全部结束了</p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B+树 </tag>
            
            <tag> 索引分裂 </tag>
            
            <tag> binlog </tag>
            
            <tag> mtr </tag>
            
            <tag> redo </tag>
            
            <tag> undo </tag>
            
            <tag> lsn </tag>
            
            <tag> XA事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210310</title>
      <link href="2021/04/08/20210310/"/>
      <url>2021/04/08/20210310/</url>
      
        <content type="html"><![CDATA[<h1 id="任务："><a href="#任务：" class="headerlink" title="任务："></a>任务：</h1><ul><li>再细看事务，在一个事务中，构造<code>B树</code>分裂或者合并场景，看<code>MySQL</code>是如何实现的。</li></ul><h1 id="1、B-树索引分裂"><a href="#1、B-树索引分裂" class="headerlink" title="1、B+树索引分裂"></a>1、B+树索引分裂</h1><p>入口函数是：<code>storage/innobase/row/row0ins.cc</code>下的<code>row_ins_index_entry</code>，分为聚集索引和辅助索引插入两类，源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dict_index_is_clust</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">row_ins_clust_index_entry</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> thr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">row_ins_sec_index_entry</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> thr<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们首先来看看聚集索引的插入函数：<code>row_ins_clust_index_entry</code>，其核心源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//以BTR_MODIFY_LEAF模式(乐观模式)调用row_ins_clust_index_entry_low</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dict_table_is_intrinsic</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">dict_index_is_auto_gen_clust</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    err <span class="token operator">=</span> <span class="token function">row_ins_sorted_clust_index_entry</span><span class="token punctuation">(</span>        BTR_MODIFY_LEAF<span class="token punctuation">,</span> index<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> n_ext<span class="token punctuation">,</span> thr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    err <span class="token operator">=</span> <span class="token function">row_ins_clust_index_entry_low</span><span class="token punctuation">(</span>        flags<span class="token punctuation">,</span> BTR_MODIFY_LEAF<span class="token punctuation">,</span> index<span class="token punctuation">,</span> n_uniq<span class="token punctuation">,</span> entry<span class="token punctuation">,</span>        n_ext<span class="token punctuation">,</span> thr<span class="token punctuation">,</span> dup_chk_only<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//以BTR_MODIFY_TREE模式（悲观模式）调用row_ins_clust_index_entry_low</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dict_table_is_intrinsic</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">dict_index_is_auto_gen_clust</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    err <span class="token operator">=</span> <span class="token function">row_ins_sorted_clust_index_entry</span><span class="token punctuation">(</span>        BTR_MODIFY_TREE<span class="token punctuation">,</span> index<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> n_ext<span class="token punctuation">,</span> thr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    err <span class="token operator">=</span> <span class="token function">row_ins_clust_index_entry_low</span><span class="token punctuation">(</span>        flags<span class="token punctuation">,</span> BTR_MODIFY_TREE<span class="token punctuation">,</span> index<span class="token punctuation">,</span> n_uniq<span class="token punctuation">,</span> entry<span class="token punctuation">,</span>        n_ext<span class="token punctuation">,</span> thr<span class="token punctuation">,</span> dup_chk_only<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们来看看<code>row_ins_clust_index_entry_low</code>函数</p><pre class="line-numbers language-cpp"><code class="language-cpp">dberr_t <span class="token function">row_ins_clust_index_entry_low</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*==========================*/</span>    ulint        flags<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: undo logging and locking flags */</span>    ulint        mode<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: BTR_MODIFY_LEAF or BTR_MODIFY_TREE,                depending on whether we wish optimistic or                pessimistic descent down the index tree */</span>    dict_index_t<span class="token operator">*</span>    index<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: clustered index */</span>    ulint        n_uniq<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: 0 or index->n_uniq */</span>    dtuple_t<span class="token operator">*</span>    entry<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in/out: index entry to insert */</span>    ulint        n_ext<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: number of externally stored columns */</span>    que_thr_t<span class="token operator">*</span>    thr<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: query thread */</span>    <span class="token keyword">bool</span>        dup_chk_only<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">/*!&lt; in: if true, just do duplicate check                and return. don't execute actual insert. */</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//mode==BTR_MODIFY_LEAF,调用乐观插入方法btr_cur_optimistic_insert</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">!=</span> BTR_MODIFY_TREE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            err <span class="token operator">=</span> <span class="token function">btr_cur_optimistic_insert</span><span class="token punctuation">(</span>                flags<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offsets<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offsets_heap<span class="token punctuation">,</span>                entry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>insert_rec<span class="token punctuation">,</span> <span class="token operator">&amp;</span>big_rec<span class="token punctuation">,</span>                n_ext<span class="token punctuation">,</span> thr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//mode==BTR_MODIFY_TREE,首先会进行乐观插入</span>            err <span class="token operator">=</span> <span class="token function">btr_cur_optimistic_insert</span><span class="token punctuation">(</span>                flags<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span>                <span class="token operator">&amp;</span>offsets<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offsets_heap<span class="token punctuation">,</span>                entry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>insert_rec<span class="token punctuation">,</span> <span class="token operator">&amp;</span>big_rec<span class="token punctuation">,</span>                n_ext<span class="token punctuation">,</span> thr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//乐观插入失败了，就尝试悲观插入btr_cur_pessimistic_insert</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> DB_FAIL<span class="token punctuation">)</span> <span class="token punctuation">{</span>                err <span class="token operator">=</span> <span class="token function">btr_cur_pessimistic_insert</span><span class="token punctuation">(</span>                    flags<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span>                    <span class="token operator">&amp;</span>offsets<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offsets_heap<span class="token punctuation">,</span>                    entry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>insert_rec<span class="token punctuation">,</span> <span class="token operator">&amp;</span>big_rec<span class="token punctuation">,</span>                    n_ext<span class="token punctuation">,</span> thr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来重点看看<code>btr_cur_pessimistic_insert</code>函数，源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*************************************************************/</span><span class="token comment" spellcheck="true">/**Performs an insert on a page of an index tree. It is assumed that mtrholds an x-latch on the tree and on the cursor page. If the insert ismade on the leaf level, to avoid deadlocks, mtr must also own x-latchesto brothers of page, if those brothers exist.@return DB_SUCCESS or error number */</span>dberr_t <span class="token function">btr_cur_pessimistic_insert</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*=======================*/</span>    ulint        flags<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: undo logging and locking flags: if not                zero, the parameter thr should be                specified; if no undo logging is specified,                then the caller must have reserved enough                free extents in the file space so that the                insertion will certainly succeed */</span>    btr_cur_t<span class="token operator">*</span>    cursor<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: cursor after which to insert;                cursor stays valid */</span>    ulint<span class="token operator">*</span><span class="token operator">*</span>        offsets<span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*!&lt; out: offsets on *rec */</span>    mem_heap_t<span class="token operator">*</span><span class="token operator">*</span>    heap<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in/out: pointer to memory heap                that can be emptied, or NULL */</span>    dtuple_t<span class="token operator">*</span>    entry<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in/out: entry to insert */</span>    rec_t<span class="token operator">*</span><span class="token operator">*</span>        rec<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; out: pointer to inserted record if                succeed */</span>    big_rec_t<span class="token operator">*</span><span class="token operator">*</span>    big_rec<span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*!&lt; out: big rec vector whose fields have to                be stored externally by the caller, or                NULL */</span>    ulint        n_ext<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: number of externally stored columns */</span>    que_thr_t<span class="token operator">*</span>    thr<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: query thread or NULL */</span>    mtr_t<span class="token operator">*</span>        mtr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*!&lt; in/out: mini-transaction */</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、检查锁，如果是聚集索引，还要记录undo日志和回滚段指针（trx_undo_report_row_operation）</span>    err <span class="token operator">=</span> <span class="token function">btr_cur_ins_lock_and_undo</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> entry<span class="token punctuation">,</span>                    thr<span class="token punctuation">,</span> mtr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>inherit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、预留足够的页空间</span>    ulint    n_extents <span class="token operator">=</span> cursor<span class="token operator">-</span><span class="token operator">></span>tree_height <span class="token operator">/</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>    success <span class="token operator">=</span> <span class="token function">fsp_reserve_free_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n_reserved<span class="token punctuation">,</span> index<span class="token operator">-</span><span class="token operator">></span>space<span class="token punctuation">,</span>                           n_extents<span class="token punctuation">,</span> FSP_NORMAL<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、检查当前记录是否需要进行外部存储</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_zip_rec_needs_ext</span><span class="token punctuation">(</span><span class="token function">rec_get_converted_size</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> n_ext<span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token function">dict_table_is_comp</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token function">dtuple_get_n_fields</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token function">dict_table_page_size</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* The record is so big that we have to store some fields        externally on separate database pages */</span>                big_rec_vec <span class="token operator">=</span> <span class="token function">dtuple_convert_big_rec</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> entry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n_ext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">page_zip_rec_needs_ext</span><span class="token punctuation">(</span><span class="token function">rec_get_converted_size</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> entry<span class="token punctuation">,</span>                                 <span class="token operator">*</span>n_ext<span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token function">dict_table_is_comp</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token function">dict_index_get_n_fields</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token function">dict_table_page_size</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">dict_index_get_n_unique_in_tree</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>             i <span class="token operator">&lt;</span> <span class="token function">dtuple_get_n_fields</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ulint    savings<span class="token punctuation">;</span>            dfield <span class="token operator">=</span> <span class="token function">dtuple_get_nth_field</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取数据项的第n个字段</span>            ifield <span class="token operator">=</span> <span class="token function">dict_index_get_nth_field</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取索引的第n个字段</span>            <span class="token comment" spellcheck="true">/* Skip fixed-length, NULL, externally stored,            or short columns             跳过固定长度列、空列、外部存储列或者长度小于40字节的列*/</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ifield<span class="token operator">-</span><span class="token operator">></span>fixed_len                <span class="token operator">||</span> <span class="token function">dfield_is_null</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token function">dfield_is_ext</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token function">dfield_get_len</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> local_len                <span class="token operator">||</span> <span class="token function">dfield_get_len</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span>                <span class="token operator">&lt;=</span> BTR_EXTERN_LOCAL_STORED_MAX_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">goto</span> skip_field<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            savings <span class="token operator">=</span> <span class="token function">dfield_get_len</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span> <span class="token operator">-</span> local_len<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Check that there would be savings */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>longest <span class="token operator">>=</span> savings<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">goto</span> skip_field<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*在是用DYNAMIC和COMPRESSED格式时，任何最大长度小于256字节的非BLOB列都是本地存储；而对于REDUNDANT和COMPACT类型而言，最大不超过788字节时                都会本地存储。 */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">DATA_BIG_COL</span><span class="token punctuation">(</span>ifield<span class="token operator">-</span><span class="token operator">></span>col<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">goto</span> skip_field<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            longest_i <span class="token operator">=</span> i<span class="token punctuation">;</span>            longest <span class="token operator">=</span> savings<span class="token punctuation">;</span>skip_field<span class="token operator">:</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找不到满足要求的最大列，返回NULL</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>longest<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* Cannot shorten more */</span>            <span class="token function">mem_heap_free</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* Move data from field longest_i to big rec vector.    添加longest_i字段到big rec向量中        We store the first bytes locally to the record. Then        we can calculate all ordering fields in all indexes        from locally stored data. */</span>        dfield <span class="token operator">=</span> <span class="token function">dtuple_get_nth_field</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> longest_i<span class="token punctuation">)</span><span class="token punctuation">;</span>        ifield <span class="token operator">=</span> <span class="token function">dict_index_get_nth_field</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> longest_i<span class="token punctuation">)</span><span class="token punctuation">;</span>        local_prefix_len <span class="token operator">=</span> local_len <span class="token operator">-</span> BTR_EXTERN_FIELD_REF_SIZE<span class="token punctuation">;</span>        vector<span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span>            <span class="token function">big_rec_field_t</span><span class="token punctuation">(</span>                longest_i<span class="token punctuation">,</span>                <span class="token function">dfield_get_len</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span> <span class="token operator">-</span> local_prefix_len<span class="token punctuation">,</span>                <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">dfield_get_data</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">+</span> local_prefix_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Allocate the locally stored part of the column. */</span>        data <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>byte<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">mem_heap_alloc</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> local_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Copy the local prefix. */</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token function">dfield_get_data</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span><span class="token punctuation">,</span> local_prefix_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Clear the extern field reference (BLOB pointer). */</span>        <span class="token function">memset</span><span class="token punctuation">(</span>data <span class="token operator">+</span> local_prefix_len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BTR_EXTERN_FIELD_REF_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//替换原记录上的外部指针，并存储实际数据。</span>        <span class="token function">dfield_set_data</span><span class="token punctuation">(</span>dfield<span class="token punctuation">,</span> data<span class="token punctuation">,</span> local_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfield_set_ext</span><span class="token punctuation">(</span>dfield<span class="token punctuation">)</span><span class="token punctuation">;</span>        n_fields<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>n_ext<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">ut_ad</span><span class="token punctuation">(</span>n_fields <span class="token operator">&lt;</span> <span class="token function">dtuple_get_n_fields</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span>           <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//4、开始进行索引分裂</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dict_index_get_page</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">btr_cur_get_block</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>page<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">page_no</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* The page is the root page        如果当前记录的cursor在根Page上，则分裂节点，提升BTREE高度，然后再插入记录*/</span>        <span class="token operator">*</span>rec <span class="token operator">=</span> <span class="token function">btr_root_raise_and_insert</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> offsets<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> n_ext<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1、首先为B-TREE分配一个新Page，并进行初始化前后page指针</span>            <span class="token comment" spellcheck="true">//1.1、给B-Tree分配一个新的Page页</span>            level <span class="token operator">=</span> <span class="token function">btr_page_get_level</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            new_block <span class="token operator">=</span> <span class="token function">btr_page_alloc</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FSP_NO_DIR<span class="token punctuation">,</span> level<span class="token punctuation">,</span> mtr<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            new_page <span class="token operator">=</span> <span class="token function">buf_block_get_frame</span><span class="token punctuation">(</span>new_block<span class="token punctuation">)</span><span class="token punctuation">;</span>            new_page_zip <span class="token operator">=</span> <span class="token function">buf_block_get_page_zip</span><span class="token punctuation">(</span>new_block<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">btr_page_create</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> new_page_zip<span class="token punctuation">,</span> index<span class="token punctuation">,</span> level<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/* Set the next node and previous node fields of new page             1.2、设置new page 页前后节点指针*/</span>            <span class="token function">btr_page_set_next</span><span class="token punctuation">(</span>new_page<span class="token punctuation">,</span> new_page_zip<span class="token punctuation">,</span> FIL_NULL<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">btr_page_set_prev</span><span class="token punctuation">(</span>new_page<span class="token punctuation">,</span> new_page_zip<span class="token punctuation">,</span> FIL_NULL<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//2、将root节点的记录一个个拷贝到new_page中    </span>            <span class="token comment" spellcheck="true">/* Copy the page byte for byte.             2.1、一个字节一个字节地拷贝*/</span>        <span class="token function">page_zip_copy_recs</span><span class="token punctuation">(</span>new_page_zip<span class="token punctuation">,</span> new_page<span class="token punctuation">,</span> root_page_zip<span class="token punctuation">,</span> root<span class="token punctuation">,</span> index<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.2、迁移显式锁到new page上</span>            <span class="token function">lock_move_rec_list_end</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> root_block<span class="token punctuation">,</span> <span class="token function">page_get_infimum_rec</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">lock_prdt_rec_move</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> root_block<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.3、迁移或者删除hash索引</span>            <span class="token function">btr_search_move_or_delete_hash_entries</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> root_block<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.4、将root页上supremum记录上的锁迁移到新block的supremum记录上</span>            <span class="token function">lock_update_root_raise</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> root_block<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">lock_rec_move</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> root<span class="token punctuation">,</span> PAGE_HEAP_NO_SUPREMUM<span class="token punctuation">,</span> PAGE_HEAP_NO_SUPREMUM<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//3、构建节点指针（node_ptr）</span>            <span class="token comment" spellcheck="true">//3.1、读取新page上的第一个用户记录，根据rec和new_page_no创建节点指针</span>            rec <span class="token operator">=</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span><span class="token function">page_get_infimum_rec</span><span class="token punctuation">(</span>new_page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           new_page_no <span class="token operator">=</span> new_block<span class="token operator">-</span><span class="token operator">></span>page<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">page_no</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node_ptr <span class="token operator">=</span> <span class="token function">dict_index_build_node_ptr</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> rec<span class="token punctuation">,</span> new_page_no<span class="token punctuation">,</span> <span class="token operator">*</span>heap<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.2、设置node_ptr的flag为REC_INFO_MIN_REC_FLAG，代表这是该层的最小记录</span>            <span class="token function">dtuple_set_info_bits</span><span class="token punctuation">(</span>node_ptr<span class="token punctuation">,</span> <span class="token function">dtuple_get_info_bits</span><span class="token punctuation">(</span>node_ptr<span class="token punctuation">)</span> <span class="token operator">|</span> REC_INFO_MIN_REC_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4、清空重置root节点，并将node_ptr写入root节点       </span>            <span class="token comment" spellcheck="true">/* Rebuild the root page to get free space            4.1、 清空root page*/</span>            <span class="token function">btr_page_empty</span><span class="token punctuation">(</span>root_block<span class="token punctuation">,</span> root_page_zip<span class="token punctuation">,</span> index<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.2、设置root page前后page为NULL</span>            <span class="token function">btr_page_set_next</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root_page_zip<span class="token punctuation">,</span> FIL_NULL<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">btr_page_set_prev</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root_page_zip<span class="token punctuation">,</span> FIL_NULL<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.3、将node_ptr插入到root page</span>           page_cursor <span class="token operator">=</span> <span class="token function">btr_cur_get_page_cur</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">page_cur_set_before_first</span><span class="token punctuation">(</span>root_block<span class="token punctuation">,</span> page_cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>           node_ptr_rec <span class="token operator">=</span> <span class="token function">page_cur_tuple_insert</span><span class="token punctuation">(</span>page_cursor<span class="token punctuation">,</span> node_ptr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> offsets<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//5、重置page cursor</span>            <span class="token comment" spellcheck="true">/* Reposition the cursor to the child node */</span>            <span class="token function">page_cur_search</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> index<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> page_cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对new page进行split</span>            <span class="token function">btr_page_split_and_insert</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> offsets<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> n_ext<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果当前记录cursor不在根节点page上，走一般的索引分裂逻辑</span>        <span class="token operator">*</span>rec <span class="token operator">=</span> <span class="token function">btr_page_split_and_insert</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> offsets<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> n_ext<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1、选择分裂中间点的记录</span>            <span class="token comment" spellcheck="true">//1.1、已经做过一次split，但记录依然无法插入成功，则继续进行分裂</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n_iterations <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 direction <span class="token operator">=</span> FSP_UP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//#define    FSP_UP        ((byte)111)    </span><span class="token comment" spellcheck="true">/*!&lt; alphabetically upwards */</span>                hint_page_no <span class="token operator">=</span> page_no <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                split_rec <span class="token operator">=</span> <span class="token function">btr_page_get_split_rec</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> n_ext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>split_rec <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    insert_left <span class="token operator">=</span> <span class="token function">btr_page_tuple_smaller</span><span class="token punctuation">(</span>                        cursor<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> offsets<span class="token punctuation">,</span> n_uniq<span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//1.2、推荐往右进行分裂</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">btr_page_get_split_rec_to_right</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>split_rec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                direction <span class="token operator">=</span> FSP_UP<span class="token punctuation">;</span>                hint_page_no <span class="token operator">=</span> page_no <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//1.3、推荐往左进行分裂    </span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">btr_page_get_split_rec_to_left</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>split_rec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                direction <span class="token operator">=</span> FSP_DOWN<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//#define    FSP_DOWN    ((byte)112)    </span><span class="token comment" spellcheck="true">/*!&lt; alphabetically downwards */</span>                hint_page_no <span class="token operator">=</span> page_no <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//1.4、以上都不满足</span>                direction <span class="token operator">=</span> FSP_UP<span class="token punctuation">;</span>                hint_page_no <span class="token operator">=</span> page_no <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* If there is only one record in the index page, we                can't split the node in the middle by default. We need                to determine whether the new record will be inserted                to the left or right. */</span>                <span class="token comment" spellcheck="true">//1.4.1、如果page上记录不止一个，则从中间开始分裂</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_get_n_recs</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    split_rec <span class="token operator">=</span> <span class="token function">page_get_middle_rec</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.4.2、如果当前插入记录比page上记录要小，则插到最左边</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">btr_page_tuple_smaller</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span>                                  offsets<span class="token punctuation">,</span> n_uniq<span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    split_rec <span class="token operator">=</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span>                        <span class="token function">page_get_infimum_rec</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    split_rec <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                                   <span class="token comment" spellcheck="true">//2、给索引分配一个new page </span>            new_block <span class="token operator">=</span> <span class="token function">btr_page_alloc</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> hint_page_no<span class="token punctuation">,</span> direction<span class="token punctuation">,</span>                   <span class="token function">btr_page_get_level</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">,</span> mtr<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            new_page <span class="token operator">=</span> <span class="token function">buf_block_get_frame</span><span class="token punctuation">(</span>new_block<span class="token punctuation">)</span><span class="token punctuation">;</span>            new_page_zip <span class="token operator">=</span> <span class="token function">buf_block_get_page_zip</span><span class="token punctuation">(</span>new_block<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">btr_page_create</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> new_page_zip<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span>                    <span class="token function">btr_page_get_level</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//3、计算上半部分的page的第一个记录，以及在原始page上的第一个记录</span>            <span class="token comment" spellcheck="true">//3.1、如果split_rec不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>split_rec<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first_rec <span class="token operator">=</span> move_limit <span class="token operator">=</span> split_rec<span class="token punctuation">;</span>            <span class="token operator">*</span>offsets <span class="token operator">=</span> <span class="token function">rec_get_offsets</span><span class="token punctuation">(</span>split_rec<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> <span class="token operator">*</span>offsets<span class="token punctuation">,</span> n_uniq<span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span class="token punctuation">;</span>            insert_left <span class="token operator">=</span> <span class="token function">cmp_dtuple_rec</span><span class="token punctuation">(</span>tuple<span class="token punctuation">,</span> split_rec<span class="token punctuation">,</span> <span class="token operator">*</span>offsets<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//表示当前记录是插入到split_rec的左边还是右边</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>insert_left <span class="token operator">&amp;&amp;</span> new_page_zip <span class="token operator">&amp;&amp;</span> n_iterations <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* If a compressed page has already been split,                    avoid further splits by inserting the record                    to an empty page. */</span>                    split_rec <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                    <span class="token keyword">goto</span> insert_empty<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//3.2、insert_left为TRUE</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>insert_left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">ut_a</span><span class="token punctuation">(</span>n_iterations <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只有在n_iterations>0时才会发生</span>                first_rec <span class="token operator">=</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span><span class="token function">page_get_infimum_rec</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                move_limit <span class="token operator">=</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span><span class="token function">btr_cur_get_rec</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//以上都不满足（split_rec为空）</span>                insert_empty<span class="token operator">:</span>                buf <span class="token operator">=</span> <span class="token function">UT_NEW_ARRAY_NOKEY</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> <span class="token function">rec_get_converted_size</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> n_ext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                first_rec <span class="token operator">=</span> <span class="token function">rec_convert_dtuple_to_rec</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> n_ext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前插入的记录</span>                move_limit <span class="token operator">=</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span><span class="token function">btr_cur_get_rec</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前插入的记录下一条</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//4、修改B树结构</span>            <span class="token comment" spellcheck="true">//4.1、将新page attach到b-tree上对应的层次上，并向上层节点插入node指针，更新当前层次的节点链表指针</span>            <span class="token function">btr_attach_half_pages</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> block<span class="token punctuation">,</span> first_rec<span class="token punctuation">,</span> new_block<span class="token punctuation">,</span> direction<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.2、判断新记录是否能够满足插入</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>split_rec<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//对于压缩表，new_page_zip为true，因此insert_will_fit总为false</span>                insert_will_fit <span class="token operator">=</span> <span class="token operator">!</span>new_page_zip                    <span class="token operator">&amp;&amp;</span> <span class="token function">btr_page_insert_fits</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> split_rec<span class="token punctuation">,</span>                                offsets<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> n_ext<span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//split_rec为空，表示分裂记录就是当前插入记录</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>insert_left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">UT_DELETE_ARRAY</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">//同样的insert_will_fit对于压缩表而言，总是为FALSE。这意味着在索引分裂的过程中，会一直持有索引上的排他锁，这会导致压缩表分裂的开销非常大</span>                insert_will_fit <span class="token operator">=</span> <span class="token operator">!</span>new_page_zip                    <span class="token operator">&amp;&amp;</span> <span class="token function">btr_page_insert_fits</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                                offsets<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> n_ext<span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//4.3、判断是否释放索引上的排他锁（x lock）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>srv_read_only_mode            <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">dict_table_is_intrinsic</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> insert_will_fit            <span class="token operator">&amp;&amp;</span> <span class="token function">page_is_leaf</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">dict_index_is_online_ddl</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mtr<span class="token operator">-</span><span class="token operator">></span><span class="token function">memo_release</span><span class="token punctuation">(</span><span class="token function">dict_index_get_lock</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> MTR_MEMO_X_LOCK <span class="token operator">|</span> MTR_MEMO_SX_LOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                         <span class="token comment" spellcheck="true">//5、迁移记录到new page上</span>            <span class="token comment" spellcheck="true">//5.1、迁移记录到new block上</span>            <span class="token function">page_move_rec_list_end</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> block<span class="token punctuation">,</span> move_limit<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将block上从move_limit(包含该记录)开始拷贝到new_block中。</span>                <span class="token function">page_copy_rec_list_end</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> block<span class="token punctuation">,</span> split_rec<span class="token punctuation">,</span> index<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//删除转移的记录</span>                <span class="token function">page_delete_rec_list_end</span><span class="token punctuation">(</span>split_rec<span class="token punctuation">,</span> block<span class="token punctuation">,</span> index<span class="token punctuation">,</span> new_n_recs <span class="token operator">-</span> old_n_recs<span class="token punctuation">,</span> new_data_size <span class="token operator">-</span> old_data_size<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//5.2、将原page中的记录按字节拷到new page中</span>            <span class="token function">page_zip_copy_recs</span><span class="token punctuation">(</span>new_page_zip<span class="token punctuation">,</span> new_page<span class="token punctuation">,</span> page_zip<span class="token punctuation">,</span> page<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.3、从新page上删除从move_limit开始的记录，不包括move_limit记录本身以及Infimum和Supremum Records</span>            <span class="token function">page_delete_rec_list_start</span><span class="token punctuation">(</span>move_limit <span class="token operator">-</span> page <span class="token operator">+</span> new_page<span class="token punctuation">,</span> new_block<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.4、更新锁表和AHI</span>            <span class="token function">lock_move_rec_list_end</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> block<span class="token punctuation">,</span> move_limit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">btr_search_move_or_delete_hash_entries</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> block<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.5、从源表上删除从move_limit（包括move_limit）开始的记录</span>            <span class="token function">page_delete_rec_list_end</span><span class="token punctuation">(</span>move_limit<span class="token punctuation">,</span> block<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> ULINT_UNDEFINED<span class="token punctuation">,</span> ULINT_UNDEFINED<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.6、更新记录锁</span>             left_block <span class="token operator">=</span> block<span class="token punctuation">;</span>            right_block <span class="token operator">=</span> new_block<span class="token punctuation">;</span>            <span class="token function">lock_update_split_right</span><span class="token punctuation">(</span>right_block<span class="token punctuation">,</span> left_block<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//6、到了这一步，索引树的分裂和修改已经结束了，这时根据insert_left来选择把记录插入到哪个block中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>insert_left<span class="token punctuation">)</span> <span class="token punctuation">{</span>               insert_block <span class="token operator">=</span> left_block<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                insert_block <span class="token operator">=</span> right_block<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//7、开始尝试插入</span>            page_cursor <span class="token operator">=</span> <span class="token function">btr_cur_get_page_cur</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">page_cur_search</span><span class="token punctuation">(</span>insert_block<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> page_cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>            rec <span class="token operator">=</span> <span class="token function">page_cur_tuple_insert</span><span class="token punctuation">(</span>page_cursor<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span>                    offsets<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> n_ext<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//8、如果插入失败，则重新reorgnize page，n_iterations++;然后从头开始继续分裂</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_cur_get_page_zip</span><span class="token punctuation">(</span>page_cursor<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">btr_page_reorganize</span><span class="token punctuation">(</span>page_cursor<span class="token punctuation">,</span> cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">goto</span> insert_failed<span class="token punctuation">;</span>           <span class="token punctuation">}</span>            insert_failed<span class="token operator">:</span>                <span class="token comment" spellcheck="true">/* We play safe and reset the free bits for new_page */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dict_index_is_clust</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">dict_table_is_temporary</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">ibuf_reset_free_bits</span><span class="token punctuation">(</span>new_block<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ibuf_reset_free_bits</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                n_iterations<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">ut_ad</span><span class="token punctuation">(</span>n_iterations <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token function">buf_block_get_page_zip</span><span class="token punctuation">(</span>insert_block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token operator">!</span>insert_will_fit<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">goto</span> func_start<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//9、对于辅助索引，更新insert buffer</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dict_index_is_clust</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">dict_table_is_temporary</span><span class="token punctuation">(</span>cursor<span class="token operator">-</span><span class="token operator">></span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">page_is_leaf</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">ibuf_update_free_bits_for_two_pages_low</span><span class="token punctuation">(</span>left_block<span class="token punctuation">,</span> right_block<span class="token punctuation">,</span> mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//5、更新AHI</span>    <span class="token function">btr_search_update_hash_on_insert</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//6、更新记录锁信息</span>    <span class="token function">lock_update_insert</span><span class="token punctuation">(</span><span class="token function">btr_cur_get_block</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>rec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7、如果之前分配了extend,则更新space->n_reserved_extents计数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n_reserved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fil_space_release_free_extents</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>space<span class="token punctuation">,</span> n_reserved<span class="token punctuation">)</span> <span class="token punctuation">{</span>            space <span class="token operator">=</span> <span class="token function">fil_space_get_by_id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            space<span class="token operator">-</span><span class="token operator">></span>n_reserved_extents <span class="token operator">-</span><span class="token operator">=</span> n_reserved<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于往右进行分裂，在<code>btr_page_get_split_rec_to_right</code>中进行了实现，源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*************************************************************/</span><span class="token comment" spellcheck="true">/**决定是否向右分裂@return TRUE if split recommended */</span>ibool<span class="token function">btr_page_get_split_rec_to_right</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*============================*/</span>    btr_cur_t<span class="token operator">*</span>    cursor<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: cursor at which to insert */</span>    rec_t<span class="token operator">*</span><span class="token operator">*</span>        split_rec<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*!&lt; out: if split recommended,                the first record on upper half page,                or NULL if tuple to be inserted should                be first */</span><span class="token punctuation">{</span>    page_t<span class="token operator">*</span>    page<span class="token punctuation">;</span>    rec_t<span class="token operator">*</span>    insert_point<span class="token punctuation">;</span>    page <span class="token operator">=</span> <span class="token function">btr_cur_get_page</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>    insert_point <span class="token operator">=</span> <span class="token function">btr_cur_get_rec</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否是向右顺序插入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_header_get_ptr</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> PAGE_LAST_INSERT<span class="token punctuation">)</span> <span class="token operator">==</span> insert_point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rec_t<span class="token operator">*</span>    next_rec<span class="token punctuation">;</span>        next_rec <span class="token operator">=</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span>insert_point<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//insert_point后面不足两条用户记录（if和else），则将split_rec赋值为NULL，即为insert_point</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_rec_is_supremum</span><span class="token punctuation">(</span>next_rec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>split_at_new<span class="token operator">:</span>            <span class="token comment" spellcheck="true">/* Split at the new record to insert */</span>            <span class="token operator">*</span>split_rec <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            rec_t<span class="token operator">*</span>    next_next_rec <span class="token operator">=</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span>next_rec<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_rec_is_supremum</span><span class="token punctuation">(</span>next_next_rec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">goto</span> split_at_new<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/* 否则（insert_point后面不少于两条记录），则将其赋值为insert_point后的第二条记录，*/</span>            <span class="token operator">*</span>split_rec <span class="token operator">=</span> next_next_rec<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>insert_point</code>后面有不少于<code>2</code>条用户记录，<code>split_rec</code>赋值为第二条记录</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210309153130890.png" alt="image-20210309153130890"></p><p>对于不足<code>2</code>条记录的，赋值<code>split_rec</code>为<code>NULL</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210309155001462.png" alt="image-20210309155001462"></p><p>往左进行分裂，则在<code>btr_page_get_split_rec_to_left</code>中进行了实现，源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*************************************************************/</span><span class="token comment" spellcheck="true">/**决定是否向左分裂@return TRUE if split recommended */</span>ibool<span class="token function">btr_page_get_split_rec_to_left</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*===========================*/</span>    btr_cur_t<span class="token operator">*</span>    cursor<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: cursor at which to insert */</span>    rec_t<span class="token operator">*</span><span class="token operator">*</span>        split_rec<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*!&lt; out: if split recommended,                the first record on upper half page,                or NULL if tuple to be inserted should                be first */</span><span class="token punctuation">{</span>    page_t<span class="token operator">*</span>    page<span class="token punctuation">;</span>    rec_t<span class="token operator">*</span>    insert_point<span class="token punctuation">;</span>    rec_t<span class="token operator">*</span>    infimum<span class="token punctuation">;</span>    page <span class="token operator">=</span> <span class="token function">btr_cur_get_page</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>    insert_point <span class="token operator">=</span> <span class="token function">btr_cur_get_rec</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否是向左顺序插入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_header_get_ptr</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> PAGE_LAST_INSERT<span class="token punctuation">)</span>        <span class="token operator">==</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span>insert_point<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        infimum <span class="token operator">=</span> <span class="token function">page_get_infimum_rec</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//insert_point不为Infimum并且不为第一个用户记录，将split_rec赋值为insert_point</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>infimum <span class="token operator">!=</span> insert_point            <span class="token operator">&amp;&amp;</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span>infimum<span class="token punctuation">)</span> <span class="token operator">!=</span> insert_point<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>split_rec <span class="token operator">=</span> insert_point<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//insert_point为Infimum或者第一个用户记录，将则split_rec赋值为insert_point下一个记录</span>            <span class="token operator">*</span>split_rec <span class="token operator">=</span> <span class="token function">page_rec_get_next</span><span class="token punctuation">(</span>insert_point<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>if</code>的情况，如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210309160330729.png" alt="image-20210309160330729"></p><p>对于<code>else</code>的情况，如下图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210309160443960.png" alt="image-20210309160443960"></p><h1 id="2、构造分裂场景"><a href="#2、构造分裂场景" class="headerlink" title="2、构造分裂场景"></a>2、构造分裂场景</h1><p>首先创建如下<code>test_split</code>表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>test_split<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test_split<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">blob</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token number">c</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>idx_c<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">c</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到每个<code>page</code>大小默认为<code>16KB</code>，我们构造每条<code>record</code>记录大小大约在<code>5K</code>，可以推算出在插入第<code>4</code>条记录时，会发生分裂</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210310102331937.png" alt="image-20210310102331937"></p><p>对于前<code>3</code>次插入，在<code>vs</code>里跟踪源码可以发现都是走乐观插入(<code>btr_cur_optimistic_insert</code>)，并且都成功了，即没有发生索引分裂</p><p>对于第<code>4</code>次插入，在<code>vs</code>里跟踪源码，也能发现首先尝试乐观插入，失败之后进行悲观插入(<code>btr_cur_pessimistic_insert</code>)，会发生索引分裂</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210310103704919.png" alt="image-20210310103704919"></p><p>让程序在<code>btr_cur_pessimistic_insert</code>里继续往下运行，直到走到上述第<code>4</code>步进行索引分裂的地方</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210310104143763.png" alt="image-20210310104143763"></p><p>因为当前表只有一个<code>root page</code>，即当前记录的<code>cursor</code>在<code>root page</code>上，则会先走<code>btr_root_raise_and_insert</code>方法，分裂节点，然后再插入记录，我们进入<code>btr_root_raise_and_insert</code>方法去看一下，会发现最后调用了<code>btr_page_split_and_insert</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210310105256861.png" alt="image-20210310105256861"></p><p>然后在<code>btr_page_split_and_insert</code>里进行分裂和插入，走完上述<code>9</code>步流程</p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B+树 </tag>
            
            <tag> 索引分裂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210408</title>
      <link href="2021/04/08/20210408/"/>
      <url>2021/04/08/20210408/</url>
      
        <content type="html"><![CDATA[<h1 id="本周工作总结"><a href="#本周工作总结" class="headerlink" title="本周工作总结"></a>本周工作总结</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1、搭建多SE自动测试环境"><a href="#1、搭建多SE自动测试环境" class="headerlink" title="1、搭建多SE自动测试环境"></a>1、搭建多SE自动测试环境</h2><h2 id="2、进一步学习Quorum-Gossip相关代码"><a href="#2、进一步学习Quorum-Gossip相关代码" class="headerlink" title="2、进一步学习Quorum+Gossip相关代码"></a>2、进一步学习Quorum+Gossip相关代码</h2><h1 id="二、具体内容"><a href="#二、具体内容" class="headerlink" title="二、具体内容"></a>二、具体内容</h1><h2 id="1、搭建多SE自动测试环境-1"><a href="#1、搭建多SE自动测试环境-1" class="headerlink" title="1、搭建多SE自动测试环境"></a>1、搭建多SE自动测试环境</h2><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407153020376.png" alt="image-20210407153020376"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407153400273.png" alt="image-20210407153400273"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407153449735.png" alt="image-20210407153449735"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407153629824.png" alt="image-20210407153629824"></p><h2 id="2、Quorum-Gossip源码进一步学习"><a href="#2、Quorum-Gossip源码进一步学习" class="headerlink" title="2、Quorum+Gossip源码进一步学习"></a>2、Quorum+Gossip源码进一步学习</h2><h3 id="2-1、线程梳理"><a href="#2-1、线程梳理" class="headerlink" title="2.1、线程梳理"></a>2.1、线程梳理</h3><h4 id="2-1-1、CE"><a href="#2-1-1、CE" class="headerlink" title="2.1.1、CE"></a>2.1.1、CE</h4><p><code>thread-1</code> <code>main</code>线程，监听客户端连接</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407210242673.png" alt="image-20210407210242673"></p><p><code>thread2-4</code> 是<code>CE</code>用来与三台<code>SE</code>通信的线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407210507497.png" alt="image-20210407210507497"></p><p><code>thread-5</code>是用来管理<code>Quorum</code>心跳计时器的线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407210841971.png" alt="image-20210407210841971"></p><p><code>thread7-16</code>是<code>IO</code>处理线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407211209150.png" alt="image-20210407211209150"></p><p><code>thread-17</code>是刷脏线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407211402201.png" alt="image-20210407211402201"></p><p><code>thread-19</code>是<code>lock_wait_timeout_thread</code>，用来唤醒那些等待锁超时的线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407211714352.png" alt="image-20210407211714352"></p><p><code>thread-20</code>是<code>srv_error_monitor_thread</code>，用来打印信号等待时间太长的警告信息，可以用来追踪导致挂起的<code>bug</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407213429548.png" alt="image-20210407213429548"></p><p><code>thread-21</code>是<code>srv_monitor_thread</code>，用来打印各种<code>Innodb</code>监视器的相关信息</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407213448922.png" alt="image-20210407213448922"></p><p><code>thread-22</code>是<code>srv_master_thread</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407213705019.png" alt="image-20210407213705019"></p><p><code>thread-23</code>是<code>srv_purge_coordinator_thread</code>，用来执行<code>purge</code>任务</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407214425675.png" alt="image-20210407214425675"></p><p><code>thread24-26</code>是<code>srv_worker_thread</code>，用来执行<code>work</code>队列里的任务</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407214632174.png" alt="image-20210407214632174"></p><p><code>thread-28</code>是<code>dict_stats_thread</code>，用来收集后台数据，并重新计算</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407215337023.png" alt="image-20210407215337023"></p><h4 id="2-1-2、SE"><a href="#2-1-2、SE" class="headerlink" title="2.1.2、SE"></a>2.1.2、SE</h4><p><code>thread-1</code>是<code>main</code>线程</p><p><code>thread2-11</code>是<code>IO</code>处理线程</p><p><code>thread-12</code>是<code>SE</code> 的<code>buffer pool</code>的页面回收线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210326130526798.png" alt="image-20210326130526798"></p><p><code>thread-13</code>是<code>SE</code>的后台刷脏线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210326130600126.png" alt="image-20210326130600126"></p><p><code>thread-14</code>是日志应用线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210326130648365.png" alt="image-20210326130648365"></p><p><code>thread-15</code>是日志解析线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210326130750223.png" alt="image-20210326130750223"></p><h3 id="2-2、CE和SE通信梳理"><a href="#2-2、CE和SE通信梳理" class="headerlink" title="2.2、CE和SE通信梳理"></a>2.2、CE和SE通信梳理</h3><h4 id="2-2-1、CE发包"><a href="#2-2-1、CE发包" class="headerlink" title="2.2.1、CE发包"></a>2.2.1、CE发包</h4><p>从<code>quorum_send_and_receive</code>函数看起</p><p>首先从<code>Quorum</code>配置里获取读写模式和<code>receive</code>规则（<code>Quorum</code>默认是<code>majority</code>）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407222946195.png" alt="image-20210407222946195"></p><p>然后设置<code>response</code>验证函数</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407224211252.png" alt="image-20210407224211252"></p><p>接着根据是读还是写，进行相应的设置，如果是读的话，会多设置一个<code>compare</code>函数，用来比较三个<code>SE</code>返回的<code>packet</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210407235259958.png" alt="image-20210407235259958"></p><p>然后给<code>s_protect_redo_com</code>加锁</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408000330470.png" alt="image-20210408000330470"></p><p>接下来就进行<code>packet</code>的<code>send</code>和<code>receive</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408000820105.png" alt="image-20210408000820105"></p><p>我们看看<code>send_replicate_redo</code>函数</p><p>会先封装一个<code>redo_replicate_request_t</code>，然后再调用<code>client_model_t</code>的<code>send_redo_update_request</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408001255522.png" alt="image-20210408001255522"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408001438344.png" alt="image-20210408001438344"></p><p>然后我们进去<code>send_redo_update_request</code>函数里看看</p><p>首先会调用一个<code>check_and_reset</code>方法</p><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token keyword">void</span> <span class="token function">check_and_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">bool</span> is_checked <span class="token operator">=</span> <span class="token punctuation">(</span>m_is_get_redo_update <span class="token operator">!=</span> response_state_t<span class="token operator">::</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否收到过response</span>      <span class="token comment" spellcheck="true">//如果全部SE节点都成功收到redo，重置一些信息，global_count++</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_get_redo_update_node_num <span class="token operator">==</span> m_node_num <span class="token operator">&amp;&amp;</span> is_checked<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      m_get_redo_update_node_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      m_is_get_redo_update <span class="token operator">=</span> response_state_t<span class="token operator">::</span>NONE<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>m_get_redo_update_event<span class="token punctuation">.</span><span class="token function">is_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        m_get_redo_update_event<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      m_protect_sync_data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m_fault<span class="token punctuation">.</span><span class="token function">count_up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就会写一下<code>m_sync_request</code>和<code>m_model</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408004056704.png" alt="image-20210408004056704"></p><p>之后会在<code>client_thread</code>里进行读取</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408003923909.png" alt="image-20210408003923909"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408004238830.png" alt="image-20210408004238830"></p><p>接下来看看<code>receive_replicate_redo</code>，也是会封装一个<code>redo_replicate_result_t</code>，然后调用<code>m_client</code>的<code>receive_redo_update_response</code>方法</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408004614166.png" alt="image-20210408004614166"></p><p>然后我们来看看<code>CE</code>往三台<code>SE</code>发包的过程，这里<code>CE</code>用了三个线程分别进行发包</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408005726366.png" alt="image-20210408005726366"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408005828174.png" alt="image-20210408005828174"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408010040826.png" alt="image-20210408010040826"></p><p><code>send_packet</code>里会调用<code>net_send</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408010314035.png" alt="image-20210408010314035"></p><p>接着调用<code>net_write_raw</code>-&gt;<code>net_write_command</code></p><p>定义了一个<code>buff[5]</code>，进行了一系列设置之后，调用<code>net_write_buff</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408020518174.png" alt="image-20210408020518174"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408020930640.png" alt="image-20210408020930640"></p><p>接着往下会调用 <code>net_write_packet</code>-&gt;<code>net_write_raw_loop</code>-&gt;<code>vio_write</code>-&gt;<code>mysql_socket_send:inline_mysql_socket_send</code>-&gt;<code>send</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408022536619.png" alt="image-20210408022536619"></p><h4 id="2-2-2、SE收包"><a href="#2-2-2、SE收包" class="headerlink" title="2.2.2、SE收包"></a>2.2.2、SE收包</h4><p>从<code>ha_ma_se</code>看起</p><p>首先对<code>request_buf</code>进行反序列化</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408013122761.png" alt="image-20210408013122761"></p><p>然后获取请求类型</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408013156024.png" alt="image-20210408013156024"></p><p>对不同的请求类型，分别进行相应的处理</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408013307185.png" alt="image-20210408013307185"></p><p>然后根据是否<code>shutdown SE</code>，来决定给<code>response_buf</code>第一个字符设置为<code>+</code>或者<code>-</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408013928392.png" alt="image-20210408013928392"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408014035109.png" alt="image-20210408014035109"></p><p>最后将<code>response</code>序列化为<code>response_buf</code>后返回</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408014301473.png" alt="image-20210408014301473"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408014332845.png" alt="image-20210408014332845"></p><p>然后最后也会调用<code>net_write_command</code>将<code>packet</code>返回给<code>CE</code></p><h4 id="2-2-3、CE读取SE的response包"><a href="#2-2-3、CE读取SE的response包" class="headerlink" title="2.2.3、CE读取SE的response包"></a>2.2.3、CE读取SE的response包</h4><p>通过<code>net_receive</code>进行接收</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408023011611.png" alt="image-20210408023011611"></p><p>依次会调用<code>net_read_raw</code>-&gt;<code>my_net_read</code>-&gt;<code>net_read_packet</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">net_read_packet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//读取包头</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">net_read_packet_header</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> error<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment" spellcheck="true">// 读取包体</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">net_read_raw_loop</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> pkt_len<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">goto</span> error<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>net_read_raw_loop</code>往下会继续调用<code>vio_read</code>-&gt;<code>mysql_socket_recv:inline_mysql_socket_recv</code>-&gt;<code>recv</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210408024810294.png" alt="image-20210408024810294"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSE </tag>
            
            <tag> Quorum </tag>
            
            <tag> Gossip </tag>
            
            <tag> Socket </tag>
            
            <tag> 自动测试环境 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSE系统debug记录</title>
      <link href="2021/04/05/mse-xi-tong-debug-ji-lu/"/>
      <url>2021/04/05/mse-xi-tong-debug-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="1、small-problems"><a href="#1、small-problems" class="headerlink" title="1、small problems"></a>1、small problems</h1><h2 id="1-1、mysqld-Unknown-error-1158，Signal-SIGSEGV-Segmentation-fault"><a href="#1-1、mysqld-Unknown-error-1158，Signal-SIGSEGV-Segmentation-fault" class="headerlink" title="1.1、mysqld: Unknown error 1158，Signal: SIGSEGV (Segmentation fault)"></a>1.1、mysqld: Unknown error 1158，Signal: SIGSEGV (Segmentation fault)</h2><p>1158：网络错误出现读错误请检查网络连接状况 </p><p>经排查应该是网络通信出现了错误。检查虚拟机IP，发现IP地址发现了变化。</p><p>要改配置文件和cLion启动参数</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405175410552.png" alt="image-20210405175410552"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405175449195.png" alt="image-20210405175447964"></p><h2 id="1-2、fatal-error-google-protobuf-stubs-common-h-没有那个文件或目录"><a href="#1-2、fatal-error-google-protobuf-stubs-common-h-没有那个文件或目录" class="headerlink" title="1.2、fatal error: google/protobuf/stubs/common.h: 没有那个文件或目录"></a>1.2、fatal error: google/protobuf/stubs/common.h: 没有那个文件或目录</h2><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2、big-problems"><a href="#2、big-problems" class="headerlink" title="2、big problems"></a>2、big problems</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>myMall环境搭建部署记录</title>
      <link href="2021/04/04/mymall-huan-jing-da-jian-bu-shu-ji-lu/"/>
      <url>2021/04/04/mymall-huan-jing-da-jian-bu-shu-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="1、本地环境搭建"><a href="#1、本地环境搭建" class="headerlink" title="1、本地环境搭建"></a>1、本地环境搭建</h1><h2 id="1-1、后端环境"><a href="#1-1、后端环境" class="headerlink" title="1.1、后端环境"></a>1.1、后端环境</h2><h3 id="1-1-1、IDEA"><a href="#1-1-1、IDEA" class="headerlink" title="1.1.1、IDEA"></a>1.1.1、IDEA</h3><ul><li>下载</li></ul><p><a href="https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows">https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows</a></p><ul><li><p>安装激活</p><p>用<code>edu</code>邮箱注册的<code>jetbrains</code>账号和密码</p></li><li><p>导入<code>settings.jar</code>配置文件</p></li></ul><p>下载<code>Lombok</code>插件（IDEA2020.3.2已经集成）</p><h3 id="1-1-2、MySQL"><a href="#1-1-2、MySQL" class="headerlink" title="1.1.2、MySQL"></a>1.1.2、MySQL</h3><p><a href="https://dev.mysql.com/downloads/installer/%EF%BC%8C%E4%B8%8B%E8%BD%BDMySQL5.7%E7%89%88%E6%9C%AC">https://dev.mysql.com/downloads/installer/，下载MySQL5.7版本</a></p><p>安装的时候，挑选几个必要组件即可</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404214734029.png" alt="image-20210404214734029"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404214818018.png" alt="image-20210404214818018"></p><p>下载Navicat，连上MySQL服务器，创建数据库mall，然后运行document/sql/mall.sql文件</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404215356315.png" alt="image-20210404215356315"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404215503728.png" alt="image-20210404215503728"></p><h3 id="1-1-3、Redis"><a href="#1-1-3、Redis" class="headerlink" title="1.1.3、Redis"></a>1.1.3、Redis</h3><p><a href="https://github.com/MicrosoftArchive/redis/releases">https://github.com/MicrosoftArchive/redis/releases</a></p><p>下载完解压到指定目录</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404214159956.png" alt="image-20210404214159956"></p><p>然后通过<code>redis-server.exe redis.windows.conf</code> 命令启动</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404214251153.png" alt="image-20210404214251153"></p><h3 id="1-1-4、Elasticsearch"><a href="#1-1-4、Elasticsearch" class="headerlink" title="1.1.4、Elasticsearch"></a>1.1.4、Elasticsearch</h3><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-6-2">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-6-2</a></p><p>下载Elasticsearch<code>7.6.2</code>的zip包，并解压到指定目录</p><ul><li>安装中文分词插件，在<code>elasticsearch-7.6.2\bin</code>目录下执行以下命令：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404215942018.png" alt="image-20210404215942018"></p><ul><li>运行bin目录下的<code>elasticsearch.bat</code>启动Elasticsearch服务。</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404220139083.png" alt="image-20210404220139083"></p><h3 id="1-1-5、Kibana"><a href="#1-1-5、Kibana" class="headerlink" title="1.1.5、Kibana"></a>1.1.5、Kibana</h3><ul><li><p>下载Kibana，作为访问Elasticsearch的客户端，请下载<code>7.6.2</code>版本的zip包，并解压到指定目录，</p></li><li><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases/kibana-7-6-2">https://www.elastic.co/cn/downloads/past-releases/kibana-7-6-2</a></p></li><li><p>解压到制定目录</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404221026837.png" alt="image-20210404221026837"></p><ul><li>运行bin目录下的<code>kibana.bat</code>，启动Kibana服务；</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404221134598.png" alt="image-20210404221134598"></p><ul><li>打开Kibana的用户界面，访问地址：<a href="http://localhost:5601/">http://localhost:5601</a></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404221249845.png" alt="image-20210404221249845"></p><h3 id="1-1-6、LogStash"><a href="#1-1-6、LogStash" class="headerlink" title="1.1.6、LogStash"></a>1.1.6、LogStash</h3><ul><li><p>下载Logstash，用于收集日志，请下载<code>7.6.2</code>版本的zip包，并解压到指定目录，</p></li><li><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases/logstash-7-6-2">https://www.elastic.co/cn/downloads/past-releases/logstash-7-6-2</a></p></li><li><p>解压到指定路径</p></li><li><p>将Logstash的配置文件<code>logstash.conf</code>拷贝到安装目录的<code>bin</code>目录下，配置文件地址：<a href="https://github.com/macrozheng/mall/blob/master/document/elk/logstash.conf">https://github.com/macrozheng/mall/blob/master/document/elk/logstash.conf</a></p><pre class="line-numbers language-nginx"><code class="language-nginx">input <span class="token punctuation">{</span>  tcp <span class="token punctuation">{</span>    mode <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"server"</span>    host <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0.0.0.0"</span>    port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">4560</span>    codec <span class="token operator">=</span><span class="token operator">></span> json_lines    type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"debug"</span>  <span class="token punctuation">}</span>  tcp <span class="token punctuation">{</span>    mode <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"server"</span>    host <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0.0.0.0"</span>    port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">4561</span>    codec <span class="token operator">=</span><span class="token operator">></span> json_lines    type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"error"</span>  <span class="token punctuation">}</span>  tcp <span class="token punctuation">{</span>    mode <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"server"</span>    host <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0.0.0.0"</span>    port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">4562</span>    codec <span class="token operator">=</span><span class="token operator">></span> json_lines    type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"business"</span>  <span class="token punctuation">}</span>  tcp <span class="token punctuation">{</span>    mode <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"server"</span>    host <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"0.0.0.0"</span>    port <span class="token operator">=</span><span class="token operator">></span> <span class="token number">4563</span>    codec <span class="token operator">=</span><span class="token operator">></span> json_lines    type <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"record"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>filter<span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"record"</span> <span class="token punctuation">{</span>    mutate <span class="token punctuation">{</span>      remove_field <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"port"</span>      remove_field <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"host"</span>      remove_field <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"@version"</span>    <span class="token punctuation">}</span>    json <span class="token punctuation">{</span>      source <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"message"</span>      remove_field <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span>  elasticsearch <span class="token punctuation">{</span>    hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"localhost:9200"</span>    <span class="token keyword">index</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"mall-%{type}-%{+YYYY.MM.dd}"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404222035873.png" alt="image-20210404222035873"></p><ul><li>Logstash需要安装json_lines插件（一定要以管理员身份运行cmd，否则会找不到JAVA_HOME）。</li></ul><pre><code>logstash-plugin install logstash-codec-json_lines</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404224919270.png" alt="image-20210404224919270"></p><ul><li>运行bin目录下的<code>logstash.bat</code>，启动Logstash服务，启动命令如下：</li></ul><pre><code>logstash -f logstash.conf</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404225122205.png" alt="image-20210404225122205"></p><h3 id="1-1-7、MongoDB"><a href="#1-1-7、MongoDB" class="headerlink" title="1.1.7、MongoDB"></a>1.1.7、MongoDB</h3><ul><li><p>下载MongoDB安装包，选择<code>Windows x64</code>版本安装，下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></p></li><li><p>运行MongoDB安装包并选择自定义安装，设置好安装路径；</p></li><li><p>配置MongoDB，让MongoDB作为服务运行，并配置好数据目录和日志目录；</p></li></ul><p><img src="http://www.macrozheng.com/images/mall_windows_deploy_17.png" alt="img"></p><ul><li>取消MongoDB Compass的安装选项（不取消安装极慢），需要可自行安装；</li></ul><p><img src="http://www.macrozheng.com/images/mall_windows_deploy_18.png" alt="img"></p><ul><li>双击<code>mongo.exe</code>可以运行MongoDB自带客户端，操作MongoDB；</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405111700532.png" alt="image-20210405111700532"></p><ul><li>如果需要移除MongoDB服务，只需使用管理员权限运行<code>cmd</code>工具，并输入如下命令。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sc.exe delete MongoDB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>下载客户端工具<code>Robo 3T</code>，下载地址：<a href="https://robomongo.org/download">https://robomongo.org/download</a></li></ul><p><img src="http://www.macrozheng.com/images/mall_windows_deploy_21.png" alt="img"></p><ul><li><p>下载完成后解压，双击<code>robo3t.exe</code>即可使用；</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405111849992.png" alt="image-20210405111849992"></p></li><li><p>之后创建一个到MongoDB的连接；</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405112251927.png" alt="image-20210405112251927"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405112307283.png" alt="image-20210405112307283"></p><h3 id="1-1-8、rabbitmq"><a href="#1-1-8、rabbitmq" class="headerlink" title="1.1.8、rabbitmq"></a>1.1.8、rabbitmq</h3><ul><li>安装Erlang，下载地址：<a href="http://erlang.org/download/otp_win64_21.3.exe">http://erlang.org/download/otp_win64_21.3.exe</a></li><li>安装RabbitMQ，下载地址：<a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe">https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe</a></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405111004266.png" alt="image-20210405111004266"></p><ul><li>安装完成后，进入RabbitMQ安装目录下的sbin目录</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405112345371.png" alt="image-20210405112345371"></p><ul><li><p>以管理员身份启动cmd，并进入该sbin目录，然后输入以下命令启动管理功能：</p><pre><code>rabbitmq-plugins enable rabbitmq_management</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405112629188.png" alt="image-20210405112629188"></p><p>以管理员身份运行rabbitmq-server.bat</p></li><li><p>访问地址查看是否安装成功：<a href="http://localhost:15672/">http://localhost:15672/</a></p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405112736939.png" alt="image-20210405112736939"></p><ul><li><p>输入账号密码并登录：guest guest</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405112841588.png" alt="image-20210405112841588"></p></li><li><p>创建帐号并设置其角色为管理员：mall mall</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405112928607.png" alt="image-20210405112928607"></p><ul><li><p>创建一个新的虚拟host为：/mall</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405113143115.png" alt="image-20210405113143115"></p></li><li><p>点击mall用户进入用户配置页面</p></li><li><p>给mall用户配置该虚拟host的权限</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405113324330.png" alt="image-20210405113324330"></p><p>至此就配置完成了。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405113414804.png" alt="image-20210405113414804"></p><h3 id="1-1-9、OSS"><a href="#1-1-9、OSS" class="headerlink" title="1.1.9、OSS"></a>1.1.9、OSS</h3><h3 id="1-1-10、mall-admin"><a href="#1-1-10、mall-admin" class="headerlink" title="1.1.10、mall-admin"></a>1.1.10、mall-admin</h3><ul><li><p>启动项目：直接运行com.macro.mall.MallAdminApplication的main方法即可；</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405114753069.png" alt="image-20210405114753069"></p></li><li><p>接口文档地址：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405114836314.png" alt="image-20210405114836314"></p></li></ul><h3 id="1-1-11、mall-search"><a href="#1-1-11、mall-search" class="headerlink" title="1.1.11、mall-search"></a>1.1.11、mall-search</h3><ul><li><p>启动项目：直接运行com.macro.mall.search.MallSearchApplication的main方法即可；</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405115204443.png" alt="image-20210405115204443"></p></li><li><p>接口文档地址：<a href="http://localhost:8081/swagger-ui.html">http://localhost:8081/swagger-ui.html</a></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405115230623.png" alt="image-20210405115230623"></p></li><li><p>使用前需要先调用接口导入数据；<a href="http://localhost:8081/esProduct/importAll">http://localhost:8081/esProduct/importAll</a></p></li><li><p>如出现无法启动的问题，可以先删除<code>Elasticsearch</code>里面的数据再启动</p></li></ul><h3 id="1-1-12、mall-portal"><a href="#1-1-12、mall-portal" class="headerlink" title="1.1.12、mall-portal"></a>1.1.12、mall-portal</h3><ul><li><p>启动mall-portal项目：直接运行com.macro.mall.portal.MallPortalApplication的main方法即可；</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405115732853.png" alt="image-20210405115732853"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405115858459.png" alt="image-20210405115858459"></p></li><li><p>接口文档地址：<a href="http://localhost:8085/swagger-ui.html">http://localhost:8085/swagger-ui.html</a></p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405115924435.png" alt="image-20210405115924435"></p><h2 id="1-2、前端环境"><a href="#1-2、前端环境" class="headerlink" title="1.2、前端环境"></a>1.2、前端环境</h2><h3 id="1-2-1、nodejs"><a href="#1-2-1、nodejs" class="headerlink" title="1.2.1、nodejs"></a>1.2.1、nodejs</h3><h3 id="1-2-2、从IDEA中打开mall-admin-web项目"><a href="#1-2-2、从IDEA中打开mall-admin-web项目" class="headerlink" title="1.2.2、从IDEA中打开mall-admin-web项目"></a>1.2.2、从IDEA中打开mall-admin-web项目</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405120458903.png" alt="image-20210405120458903"></p><p>在控制台通过 <code>cnpm install</code> 命令安装相关依赖</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405121522743.png" alt="image-20210405121522743"></p><p>运行本地mall-admin服务</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405122739891.png" alt="image-20210405122739891"></p><p>在IDEA控制台中输入如下命令：</p><pre class="line-numbers language-shell"><code class="language-shell">npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210405121715450.png" alt="image-20210405121715450"></p><h1 id="2、分离部署到Linux服务器"><a href="#2、分离部署到Linux服务器" class="headerlink" title="2、分离部署到Linux服务器"></a>2、分离部署到Linux服务器</h1><h2 id="2-1、后端部署"><a href="#2-1、后端部署" class="headerlink" title="2.1、后端部署"></a>2.1、后端部署</h2><h2 id="2-2、前端部署"><a href="#2-2、前端部署" class="headerlink" title="2.2、前端部署"></a>2.2、前端部署</h2><h1 id="3、debug记录"><a href="#3、debug记录" class="headerlink" title="3、debug记录"></a>3、debug记录</h1><h2 id="3-1、后端"><a href="#3-1、后端" class="headerlink" title="3.1、后端"></a>3.1、后端</h2><h3 id="3-1-1、project-‘org-springframework-boot-spring-boot-starter-parent-2-3-0-RELEASE’-not-found"><a href="#3-1-1、project-‘org-springframework-boot-spring-boot-starter-parent-2-3-0-RELEASE’-not-found" class="headerlink" title="3.1.1、project ‘org.springframework.boot:spring-boot-starter-parent:2.3.0.RELEASE’ not found"></a>3.1.1、project ‘org.springframework.boot:spring-boot-starter-parent:2.3.0.RELEASE’ not found</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404213423557.png" alt="image-20210404213423557"></p><h3 id="3-1-2、docker-maven-plugin-not-found"><a href="#3-1-2、docker-maven-plugin-not-found" class="headerlink" title="3.1.2、docker-maven-plugin not found"></a>3.1.2、docker-maven-plugin not found</h3><p><a href="https://mvnrepository.com/artifact/com.spotify/docker-maven-plugin/1.2.2">https://mvnrepository.com/artifact/com.spotify/docker-maven-plugin/1.2.2</a></p><p>指定1.2.2版本</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210409154654686.png" alt="image-20210409154654686"></p><h3 id="3-1-3、Method-annotated-with-Bean-is-called-directly-Use-dependency-injection-instead"><a href="#3-1-3、Method-annotated-with-Bean-is-called-directly-Use-dependency-injection-instead" class="headerlink" title="3.1.3、Method annotated with @Bean is called directly. Use dependency injection instead."></a>3.1.3、Method annotated with @Bean is called directly. Use dependency injection instead.</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210409171318863.png" alt="image-20210409171318863"></p><p>类上漏了@Configuration注解，加上即可</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210409171415235.png" alt="image-20210409171415235"></p><h2 id="3-2、前端"><a href="#3-2、前端" class="headerlink" title="3.2、前端"></a>3.2、前端</h2><h1 id="4、参考文章"><a href="#4、参考文章" class="headerlink" title="4、参考文章"></a>4、参考文章</h1><p><a href="http://www.macrozheng.com/#/deploy/mall_deploy_windows">http://www.macrozheng.com/#/deploy/mall_deploy_windows</a></p><p><a href="https://stackoverflow.com/questions/61909247/dependency-org-springframework-bootspring-boot-starter-web2-3-0-release-not">https://stackoverflow.com/questions/61909247/dependency-org-springframework-bootspring-boot-starter-web2-3-0-release-not</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> MySQL </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> Vue </tag>
            
            <tag> Java </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> LogStash </tag>
            
            <tag> Kibana </tag>
            
            <tag> MongoDB </tag>
            
            <tag> OSS </tag>
            
            <tag> nodejs </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="2021/04/03/linux-chang-yong-ming-ling/"/>
      <url>2021/04/03/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="1、shell简介"><a href="#1、shell简介" class="headerlink" title="1、shell简介"></a>1、shell简介</h1><h2 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h2><p><code>shell</code>命令解释过程：用户在命令行输入命令提交后，<code>shell</code>程序首先检测是否是内置命令，如果是，就通过<code>shell</code>内部的解释器将命令解释为系统调用，然后提交给内核执行；如果不是，<code>shell</code>会按照用户给出路径或者环境变量路径在硬盘寻找相应命令，然后调入内存，最后解释为系统调用，提交给内核执行。</p><h2 id="1-2、语法分析"><a href="#1-2、语法分析" class="headerlink" title="1.2、语法分析"></a>1.2、语法分析</h2><h3 id="1-2-1、命令格式"><a href="#1-2-1、命令格式" class="headerlink" title="1.2.1、命令格式"></a>1.2.1、命令格式</h3><pre class="line-numbers language-shell"><code class="language-shell">command [options] [arguments]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>command</strong>：命令名称</li><li><strong>options</strong>：命令选项</li><li><strong>arguments</strong>：命令参数</li></ul><p>在<code>shell</code>一个命令行中，可以输入多个命令，用分号隔开</p><pre class="line-numbers language-shell"><code class="language-shell">ls -al; cp 1.txt 2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以在多行中输入一个命令，用”\“将一个命令持续到下一行</p><pre class="line-numbers language-shell"><code class="language-shell">cp -i \1.txt \2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2、通配符"><a href="#1-2-2、通配符" class="headerlink" title="1.2.2、通配符"></a>1.2.2、通配符</h3><h4 id="1-2-2-1、-匹配任意一个或多个字符"><a href="#1-2-2-1、-匹配任意一个或多个字符" class="headerlink" title="1.2.2.1、* 匹配任意一个或多个字符"></a>1.2.2.1、* 匹配任意一个或多个字符</h4><pre class="line-numbers language-shell"><code class="language-shell">ls *.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令列出当前目录下所有txt文件</p><pre class="line-numbers language-shell"><code class="language-shell">ls -al /etc/*/*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令列出etc目录下所有子目录下以.conf结尾的文件，不包括etc目录下的conf文件</p><h4 id="1-2-2-2、-匹配任意单一字符"><a href="#1-2-2-2、-匹配任意单一字符" class="headerlink" title="1.2.2.2、? 匹配任意单一字符"></a>1.2.2.2、? 匹配任意单一字符</h4><pre class="line-numbers language-shell"><code class="language-shell">ls ab?.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出当前目录下ab开头，随后一个字符任意字符的txt文件</p><h4 id="1-2-2-3、-匹配任何包括在方括号内的单字符"><a href="#1-2-2-3、-匹配任何包括在方括号内的单字符" class="headerlink" title="1.2.2.3、[] 匹配任何包括在方括号内的单字符"></a>1.2.2.3、[] 匹配任何包括在方括号内的单字符</h4><pre class="line-numbers language-shell"><code class="language-shell">ls /dev/sda[1-5]或者 ls /dev/sda[12345]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-3、shell重定向"><a href="#1-2-3、shell重定向" class="headerlink" title="1.2.3、shell重定向"></a>1.2.3、shell重定向</h3><p>重定向是指不使用系统默认的输入输出，而是重新指定，分为输入，输出和错误输出重定向</p><h4 id="1-2-3-1、输入重定向"><a href="#1-2-3-1、输入重定向" class="headerlink" title="1.2.3.1、输入重定向"></a>1.2.3.1、输入重定向</h4><p>操作符有 &lt; 和 &lt;&lt;</p><pre class="line-numbers language-shell"><code class="language-shell">wc</etc/shadow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用<code>wc</code>命令统计输入给他的文件的行数，单词数和字符数</p><p>&lt;&lt;告诉<code>shell</code>当前输入来自命令行中一对分隔号之间的内容</p><h4 id="1-2-3-2、输出重定向"><a href="#1-2-3-2、输出重定向" class="headerlink" title="1.2.3.2、输出重定向"></a>1.2.3.2、输出重定向</h4><pre class="line-numbers language-shell"><code class="language-shell">ps -ef >ps.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将进程运行信息全部输入到了<code>ps.txt</code>文件，而不输出到屏幕，&gt;默认会覆盖文件内容，而&gt;&gt;是追加</p><h4 id="1-2-3-3、错误重定向"><a href="#1-2-3-3、错误重定向" class="headerlink" title="1.2.3.3、错误重定向"></a>1.2.3.3、错误重定向</h4><p>使用 2&gt; 或者 2&gt;&gt;</p><h3 id="1-2-4、shell管道"><a href="#1-2-4、shell管道" class="headerlink" title="1.2.4、shell管道"></a>1.2.4、shell管道</h3><p>管道的作用就是将一个命令的输出当作下一个命令的输入，而不经过任何中间文件。</p><pre class="line-numbers language-shell"><code class="language-shell">ls -al /etc/* | more<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令将<code>etc</code>目录以及其子目录下所有文件分屏显示</p><pre class="line-numbers language-shell"><code class="language-shell">ps -ef | grep httpd|wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令用来查看系统中正在运行的<code>httpd</code>进程，并统计<code>httpd</code>进程数</p><h3 id="1-2-5、shell中的引用"><a href="#1-2-5、shell中的引用" class="headerlink" title="1.2.5、shell中的引用"></a>1.2.5、shell中的引用</h3><h4 id="1-2-5-1、转义字符"><a href="#1-2-5-1、转义字符" class="headerlink" title="1.2.5.1、转义字符\"></a>1.2.5.1、转义字符\</h4><pre class="line-numbers language-shell"><code class="language-shell">mv abc\?\* abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令将<code>abc?*</code>重命名为<code>abc</code></p><h4 id="1-2-5-2、单引号’"><a href="#1-2-5-2、单引号’" class="headerlink" title="1.2.5.2、单引号’"></a>1.2.5.2、单引号’</h4><p>将字符串放到一对单引号之间，那么字符串中所有特殊含义都会被忽略</p><pre class="line-numbers language-shell"><code class="language-shell">mv 'C:\backup' backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-shell"><code class="language-shell">mv C\:\\backup backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-5-3、双引号”"><a href="#1-2-5-3、双引号”" class="headerlink" title="1.2.5.3、双引号”"></a>1.2.5.3、双引号”</h4><p>和单引号作用基本相同，但仍有一些字符用双引号括起来也还是保留自己的特殊含义，如**$,\和`**</p><h3 id="1-2-6、shell自动补全命令行"><a href="#1-2-6、shell自动补全命令行" class="headerlink" title="1.2.6、shell自动补全命令行"></a>1.2.6、shell自动补全命令行</h3><p>Tab键</p><h1 id="2、系统管理与维护"><a href="#2、系统管理与维护" class="headerlink" title="2、系统管理与维护"></a>2、系统管理与维护</h1><h2 id="2-1、ls命令"><a href="#2-1、ls命令" class="headerlink" title="2.1、ls命令"></a>2.1、ls命令</h2><pre class="line-numbers language-shell"><code class="language-shell">ls [选项] [路径或文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如</p><pre class="line-numbers language-shell"><code class="language-shell">ls -l /home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出<code>home</code>目录下文件及其子目录</p><h2 id="2-2、pwd命令"><a href="#2-2、pwd命令" class="headerlink" title="2.2、pwd命令"></a>2.2、pwd命令</h2><p>显示当前工作目录</p><h2 id="2-3、cd命令"><a href="#2-3、cd命令" class="headerlink" title="2.3、cd命令"></a>2.3、cd命令</h2><p>改变当前工作目录</p><h2 id="2-4、date命令"><a href="#2-4、date命令" class="headerlink" title="2.4、date命令"></a>2.4、date命令</h2><p>普通用户只能显示日期和时间，超级用户才能修改日期和时间</p><p>用指定格式显示日期和时间</p><pre class="line-numbers language-shell"><code class="language-shell">date '+this date now is:%x, time is now:%X, thanks!'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改系统时间</p><pre class="line-numbers language-shell"><code class="language-shell">date -s 20210512date -s 14:58date -s "20210512 14:58"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-5、passwd命令"><a href="#2-5、passwd命令" class="headerlink" title="2.5、passwd命令"></a>2.5、passwd命令</h2><p>设置用户密码</p><p>普通用户使用 <code>passwd</code>根据提示连续输入两次密码即可</p><p>超级用户可以使用 <code>passwd [用户名]</code>修改某个用户的密码</p><h2 id="2-6、su命令"><a href="#2-6、su命令" class="headerlink" title="2.6、su命令"></a>2.6、su命令</h2><p>用于改变用户身份</p><pre class="line-numbers language-shell"><code class="language-shell">su -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据提示输入超级用户密码，即可切到超级用户（-是加载<code>root</code>环境变量，不加也可，可能有些命令无法执行）</p><h2 id="2-7、clear命令"><a href="#2-7、clear命令" class="headerlink" title="2.7、clear命令"></a>2.7、clear命令</h2><p>清除屏幕信息</p><h2 id="2-8、man命令"><a href="#2-8、man命令" class="headerlink" title="2.8、man命令"></a>2.8、man命令</h2><p>显示指定命令的帮助信息</p><pre class="line-numbers language-shell"><code class="language-shell">man ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令可以得到ls命令的帮助信息</p><h2 id="2-9、who命令"><a href="#2-9、who命令" class="headerlink" title="2.9、who命令"></a>2.9、who命令</h2><p>显示目前登陆到系统的用户</p><pre class="line-numbers language-shell"><code class="language-shell">who -r    #查询系统处于什么运行级别who -buT  #显示系统最近启动日期，以及当前每个用户的登陆详情、终端状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-10、w命令"><a href="#2-10、w命令" class="headerlink" title="2.10、w命令"></a>2.10、w命令</h2><p>显示登陆到系统的用户信息</p><pre class="line-numbers language-shell"><code class="language-shell">w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513152330155.png" alt="image-20210513152330155"></p><h2 id="2-11、uname命令"><a href="#2-11、uname命令" class="headerlink" title="2.11、uname命令"></a>2.11、uname命令</h2><p>显示操作系统相关信息</p><pre><code>uname -a</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513152429018.png" alt="image-20210513152429018"></p><h2 id="2-12、uptime命令"><a href="#2-12、uptime命令" class="headerlink" title="2.12、uptime命令"></a>2.12、uptime命令</h2><p>输出系统任务队列信息</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513152527878.png" alt="image-20210513152527878"></p><h2 id="2-13、last命令"><a href="#2-13、last命令" class="headerlink" title="2.13、last命令"></a>2.13、last命令</h2><p>列出目前和过去登陆系统的用户相关信息</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513152622469.png" alt="image-20210513152622469"></p><h2 id="2-14、dmesg命令"><a href="#2-14、dmesg命令" class="headerlink" title="2.14、dmesg命令"></a>2.14、dmesg命令</h2><p>显示开机信息</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513152741190.png" alt="image-20210513152741190"></p><h2 id="2-15、free命令"><a href="#2-15、free命令" class="headerlink" title="2.15、free命令"></a>2.15、free命令</h2><p>显示系统内存状态，包括物理内存，虚拟内存，共享内存和系统缓存</p><pre><code>free -m</code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513152902832.png" alt="image-20210513152902832"></p><h2 id="2-16、ps命令"><a href="#2-16、ps命令" class="headerlink" title="2.16、ps命令"></a>2.16、ps命令</h2><p>显示系统进程在瞬间的运行状态</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513153025402.png" alt="image-20210513153025402"></p><p>显示系统所有进程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513153101716.png" alt="image-20210513153101716"></p><h2 id="2-17、top命令"><a href="#2-17、top命令" class="headerlink" title="2.17、top命令"></a>2.17、top命令</h2><p>实时显示系统中各个进程的资源占用情况</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513153250987.png" alt="image-20210513153250987"></p><h1 id="3、文件管理与编辑"><a href="#3、文件管理与编辑" class="headerlink" title="3、文件管理与编辑"></a>3、文件管理与编辑</h1><h2 id="3-1、mkdir命令"><a href="#3-1、mkdir命令" class="headerlink" title="3.1、mkdir命令"></a>3.1、mkdir命令</h2><p>创建一个目录</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /home/user1/user2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>home</code>目录下创建嵌套目录<code>user1/user2</code>，如果<code>user1</code>不存在会同时创建<code>user1</code>和<code>user2</code>目录</p><h2 id="3-2、more命令"><a href="#3-2、more命令" class="headerlink" title="3.2、more命令"></a>3.2、more命令</h2><p><code>more</code>命令读取文本文件时，每次显示一屏，并且在每屏后暂停，同时在屏幕底部显示单词more，按enter键会显示下一行</p><h2 id="3-3、cat命令"><a href="#3-3、cat命令" class="headerlink" title="3.3、cat命令"></a>3.3、cat命令</h2><p>将文件的内容输出到标准输出</p><pre class="line-numbers language-shell"><code class="language-shell">cat -Ab Kconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看Kconfig文件的内容，同时将制表符显示为”^I”， 对非空行进行编号输出</p><pre class="line-numbers language-shell"><code class="language-shell">cat file1.txt file2.txt >file3.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上命令将file1.txt和file2.txt内容合并后输出到file3.txt</p><h2 id="3-4、diff命令"><a href="#3-4、diff命令" class="headerlink" title="3.4、diff命令"></a>3.4、diff命令</h2><p>用来比较文件的差异</p><pre class="line-numbers language-shell"><code class="language-shell">diff [选项] file1 file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-5、grep命令"><a href="#3-5、grep命令" class="headerlink" title="3.5、grep命令"></a>3.5、grep命令</h2><p><code>Linux</code>下的文本过滤工具，<code>grep</code>根据指定的字符串，对文件的每一行进行搜索，如果找到了该字符串，就输出该行</p><pre class="line-numbers language-shell"><code class="language-shell">grep rpm install.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令列出install.log文件中含有RPM字符串的行</p><h2 id="3-6、rm命令"><a href="#3-6、rm命令" class="headerlink" title="3.6、rm命令"></a>3.6、rm命令</h2><p>用来删除某个目录及其下的所有文件和子目录。对于链接文件，只是断开了链接，原文件保持不变。</p><pre class="line-numbers language-shell"><code class="language-shell">rm [选项] 文件或者目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-7、touch命令"><a href="#3-7、touch命令" class="headerlink" title="3.7、touch命令"></a>3.7、touch命令</h2><p>改变指定文件的访问时间和修改时间，若文件不存在，则创建该文件</p><pre class="line-numbers language-shell"><code class="language-shell">touch test.txt  #创建test.txt文件touch -a test.txt  #改变文件访问时间为系统当前时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-8、ln命令"><a href="#3-8、ln命令" class="headerlink" title="3.8、ln命令"></a>3.8、ln命令</h2><p>用来在文件或者目录之间创建链接。链接分硬链接和符号链接（软链接）两种。<code>ln</code>默认创建硬链接</p><p>硬链接：多个文件指向同一个<code>iNode</code>文件节点</p><p>软链接：类似<code>Windows</code>快捷方式，是一个指向真正文件位置的符号链接</p><pre class="line-numbers language-shell"><code class="language-shell">ln [选项] 源文件目标链接名ln /etc/inittab /opt/backup  #将/etc/inittab文件硬链接到/opt/backup目录下ln -s /etc/inittab /opt  #将/etc/inittab文件符号链接到/opt下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-9、file命令"><a href="#3-9、file命令" class="headerlink" title="3.9、file命令"></a>3.9、file命令</h2><p>显示文件的类型</p><pre class="line-numbers language-shell"><code class="language-shell">file /ect/init.d/halt  #显示为shell可执行文件file /bin/sh    #显示为符号链接文件file file1.txt #显示为ASCII文本文件file /dev/had #显示为块设备文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-10、cp命令"><a href="#3-10、cp命令" class="headerlink" title="3.10、cp命令"></a>3.10、cp命令</h2><p>用来将给的文件或目录复制到另一个文件或者目录中。</p><pre class="line-numbers language-shell"><code class="language-shell">cp [选项] 源文件或目录 目标文件或目录cp -r ./* /tmp  #将当前目录下所有文件复制到/tmp目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-11、find命令"><a href="#3-11、find命令" class="headerlink" title="3.11、find命令"></a>3.11、find命令</h2><p>在指定路径下查找指定文件</p><pre class="line-numbers language-shell"><code class="language-shell">find path-name[-options] [-print -exec -ok命令{} \;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-12、split命令"><a href="#3-12、split命令" class="headerlink" title="3.12、split命令"></a>3.12、split命令</h2><p>用来分割文档，将一个文件分成数个</p><pre class="line-numbers language-shell"><code class="language-shell">split [选项] [input_file] [output_file]split -b 10M access_log access_log_bak  #将access_log文件进行分割，设定每个分割文件大小为10M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-13、mv命令"><a href="#3-13、mv命令" class="headerlink" title="3.13、mv命令"></a>3.13、mv命令</h2><p>将文件或目录改名或者将文件由一个目录移入另一个目录</p><pre class="line-numbers language-shell"><code class="language-shell">mv [选项] 源文件或目录 目标文件或目录mkdir myDocumenttouch Documentls -lamv Document myDocumentmv myDocument myDocument_1ls -la  #此时只有my_Document_1目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4、压缩与解压"><a href="#4、压缩与解压" class="headerlink" title="4、压缩与解压"></a>4、压缩与解压</h1><h2 id="4-1、zip-unzip命令"><a href="#4-1、zip-unzip命令" class="headerlink" title="4.1、zip/unzip命令"></a>4.1、zip/unzip命令</h2><pre class="line-numbers language-shell"><code class="language-shell">zip [选项] 压缩文件名 需要压缩的文档列表unzip [选项] 压缩文件名zip -9r /opt/etc.zip /etc  #将etc目录下所有文件和目录进行压缩，并设置压缩级别为最高unzip -o /opt/etc.zip -x etc/inittab -d /etc  #将/opt/etc.zip压缩文件全部解压到/etc目录下，除了etc/inittab文件，并在解压过程出现相同文件就覆盖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2、gzip-gunzip命令"><a href="#4-2、gzip-gunzip命令" class="headerlink" title="4.2、gzip/gunzip命令"></a>4.2、gzip/gunzip命令</h2><p>将一般的文件进行压缩或者解压，压缩文件默认是<code>.gz</code>文件</p><pre class="line-numbers language-shell"><code class="language-shell">gzip [选项] 压缩（解压缩）的文档名zip -r /opt/etc.zip /etc   gzip -9v /opt/etc.zip   #对etc.zip文件进行gzip压缩，并设置压缩级别为9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3、bzip2-bunzip2命令"><a href="#4-3、bzip2-bunzip2命令" class="headerlink" title="4.3、bzip2/bunzip2命令"></a>4.3、bzip2/bunzip2命令</h2><p>对文件进行压缩和解压缩，生成<code>bz2</code>压缩包，类似于<code>gzip/gunzip</code></p><h2 id="4-4、tar命令"><a href="#4-4、tar命令" class="headerlink" title="4.4、tar命令"></a>4.4、tar命令</h2><p>对文件或目录进行打包归档</p><pre class="line-numbers language-shell"><code class="language-shell">tar [主选项+辅助选项] 文件或者目录tar -cvf /opt/etc.tar /etc  #将etc目录下所有文件打包，并显示打包详细信息tar -zcvf /opt/etc.tar.gz /etc #将etc目录打包成etc.tar文件，并在打包完成后进行gzip压缩，最终打包成tar.gz文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-5、dd命令"><a href="#4-5、dd命令" class="headerlink" title="4.5、dd命令"></a>4.5、dd命令</h2><p>转换或者复制文件，也可以对设备进行备份</p><pre class="line-numbers language-shell"><code class="language-shell">dd if="input_file" of="output_file" bs="block_size" count="number"dd if="/etc/inittab" of="/opt/inittab.bak"  #将/etc/inittab文件备份到/opt/inittab.bak文件中dd if=/dev/sda2 of=/opt/sda2.back  #将/dev/sda2整个分区进行备份，保存备份文件到/opt目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-6、cpio命令"><a href="#4-6、cpio命令" class="headerlink" title="4.6、cpio命令"></a>4.6、cpio命令</h2><p>通过重定向的方式对文件进行打包、备份、还原、恢复的工具，可以解压以<code>.cpio</code>或者<code>.tar</code>结尾的文件</p><pre class="line-numbers language-shell"><code class="language-shell">cpio [选项] >文件名或者设备名cpio [选项] <文件名或者设备名find /etc -type f | cpio -ocvB >/opt/etc.cpio   #将/etc下的所有普通文件都备份到/opt/etc.cpio中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="5、磁盘管理与维护"><a href="#5、磁盘管理与维护" class="headerlink" title="5、磁盘管理与维护"></a>5、磁盘管理与维护</h1><h2 id="5-1、df命令"><a href="#5-1、df命令" class="headerlink" title="5.1、df命令"></a>5.1、df命令</h2><p>检查<code>Linux</code>系统磁盘空间占用情况</p><pre class="line-numbers language-shell"><code class="language-shell">df [选项]df -hT  #以人性化方式显示当前磁盘分区情况，并显示文件系统类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513164104452.png" alt="image-20210513164104452"></p><h2 id="5-2、du命令"><a href="#5-2、du命令" class="headerlink" title="5.2、du命令"></a>5.2、du命令</h2><p>显示文件或目录占用的磁盘空间情况</p><pre class="line-numbers language-shell"><code class="language-shell">du [选项] 文化或目录du -sh /etc  #显示 /etc目录的总大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-3、fsck命令"><a href="#5-3、fsck命令" class="headerlink" title="5.3、fsck命令"></a>5.3、fsck命令</h2><p>检查文件系统并尝试修复错误</p><pre class="line-numbers language-shell"><code class="language-shell">fsck [选项] [-t <文件系统类型>] [设备名]fsck -rV -t ext3 /dev/sda10 #检查并尝试修复出问题的磁盘分区/dev/sda10, 修复时进行询问让用户确认并决定处理方式，显示修复详细过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-4、sync命令"><a href="#5-4、sync命令" class="headerlink" title="5.4、sync命令"></a>5.4、sync命令</h2><p>强制把内存中的数据写回硬盘，以免数据丢失</p><h2 id="5-5、eject命令"><a href="#5-5、eject命令" class="headerlink" title="5.5、eject命令"></a>5.5、eject命令</h2><p>用来退出抽取式设备，如光驱，磁带</p><h2 id="5-6、mount-umount命令"><a href="#5-6、mount-umount命令" class="headerlink" title="5.6、mount/umount命令"></a>5.6、mount/umount命令</h2><p>挂载/卸载指定的文件系统</p><h1 id="6、网络设置与维护"><a href="#6、网络设置与维护" class="headerlink" title="6、网络设置与维护"></a>6、网络设置与维护</h1><h2 id="6-1、ifconfig命令"><a href="#6-1、ifconfig命令" class="headerlink" title="6.1、ifconfig命令"></a>6.1、ifconfig命令</h2><p>配置网络或者显示当前网络接口状态，必须以<code>root</code>用户执行</p><pre><code>ifconfig [选项] [interface] [inet|up|down|netmask|addr|broadcast]</code></pre><h2 id="6-2、scp命令"><a href="#6-2、scp命令" class="headerlink" title="6.2、scp命令"></a>6.2、scp命令</h2><p>secure copy的缩写，用户将文件或目录从一个<code>Linux</code>系统复制到另一个<code>Linux</code>系统</p><h2 id="6-3、netstat命令"><a href="#6-3、netstat命令" class="headerlink" title="6.3、netstat命令"></a>6.3、netstat命令</h2><p>显示本机网络连接、运行端口和路由表等信息</p><pre class="line-numbers language-shell"><code class="language-shell">netstat [选项]netstat -rn   #显示当前系统的路由信息netstat -an #显示系统当前所有有效的TCP连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513165540273.png" alt="image-20210513165540273"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513165703317.png" alt="image-20210513165703317"></p><h2 id="6-4、traceroute命令"><a href="#6-4、traceroute命令" class="headerlink" title="6.4、traceroute命令"></a>6.4、traceroute命令</h2><p>显示网络数据包传输到制定主机的路径信息，追踪数据传输路由状况。</p><pre class="line-numbers language-shell"><code class="language-shell">traceroute [选项] [远程主机名或者IP地址] [数据包大小]traceroute -s 192.168.100.137 -w 10 www.baidu.com 100   #在指定超时时间10S内检测不到某个路由节点的回应信息，就输出*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513170657615.png" alt="image-20210513170657615"></p><h2 id="6-5、telnet命令"><a href="#6-5、telnet命令" class="headerlink" title="6.5、telnet命令"></a>6.5、telnet命令</h2><p>通过<code>telnet</code>协议与远程主机通信或者获取远程主机对应端口的信息</p><pre class="line-numbers language-shell"><code class="language-shell">telnet 主机名或者IP地址端口telnet 192.168.60.123 23  #连接192.168.60.123主机的23端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-6、wget命令"><a href="#6-6、wget命令" class="headerlink" title="6.6、wget命令"></a>6.6、wget命令</h2><p>用于从网络上下载某个软件</p><pre class="line-numbers language-shell"><code class="language-shell">wget [要下载软件的网址]wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.0.3.tar.xz  #下载linux-5.0.3内核<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210513171430658.png" alt="image-20210513171430658"></p><h1 id="7、vi"><a href="#7、vi" class="headerlink" title="7、vi"></a>7、vi</h1><p>有命令模式和输入模式两种模式</p><pre class="line-numbers language-shell"><code class="language-shell">vi filename  #打开或者新建一个文件，并将光标置于第一行的首部ESC   #返回命令行模式i #在光标前输入文字a #在光标后输入文字/abc  #在文件中向前查找字符串abc?abc  #在文件中向后查找字符串abcn  #在同一方向重复上次的搜索命令N  #在反方向重复上次搜索命令:wq  #保存并退出vi:q  #不保存退出vi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>招聘管理系统环境搭建部署记录</title>
      <link href="2021/04/02/zhao-pin-guan-li-xi-tong-huan-jing-da-jian-bu-shu-ji-lu/"/>
      <url>2021/04/02/zhao-pin-guan-li-xi-tong-huan-jing-da-jian-bu-shu-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="1、本地环境搭建"><a href="#1、本地环境搭建" class="headerlink" title="1、本地环境搭建"></a>1、本地环境搭建</h1><h2 id="1-1、后端环境"><a href="#1-1、后端环境" class="headerlink" title="1.1、后端环境"></a>1.1、后端环境</h2><h3 id="1-1-1、jdk1-8下载安装和配置"><a href="#1-1-1、jdk1-8下载安装和配置" class="headerlink" title="1.1.1、jdk1.8下载安装和配置"></a>1.1.1、jdk1.8下载安装和配置</h3><ul><li>下载安装</li></ul><p><a href="https://download.oracle.com/otn/java/jdk/8u281-b09/89d678f2be164786b292527658ca1605/jdk-8u281-windows-x64.exe">https://download.oracle.com/otn/java/jdk/8u281-b09/89d678f2be164786b292527658ca1605/jdk-8u281-windows-x64.exe</a></p><ul><li><p>配置</p><p>新建<code>JAVA_HOME</code>系统变量</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402160025173.png" alt="image-20210402160025173"></p><p>在系统变量<code>path</code>里添加下面两项（<code>path</code>环境变量的作用就是指定<code>java</code>命令要搜索的路径，以便在<strong>任何目录</strong>下都可以执行<code>java</code>，<code>javac</code>等命令）</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402160334321.png" alt="image-20210402160334321"></p><p>​    新建<code>CLASSPATH</code>系统变量（<code>CLASSPATH</code>环境变量保存的是一些目录和<code>jar</code>文件的地址，这些路径是为<code>Java</code>程序在<strong>编译和运行的时候搜索类</strong>而用的）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402160620725.png" alt="image-20210402160620725"></p><p>配置成功</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402161357077.png" alt="image-20210402161357077"></p><h3 id="1-1-2、IDEA下载安装和配置"><a href="#1-1-2、IDEA下载安装和配置" class="headerlink" title="1.1.2、IDEA下载安装和配置"></a>1.1.2、IDEA下载安装和配置</h3><ul><li>下载</li></ul><p><a href="https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows">https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows</a></p><ul><li><p>安装激活</p><p>用<code>edu</code>邮箱注册的<code>jetbrains</code>账号和密码</p></li><li><p>导入<code>settings.jar</code>配置文件</p></li></ul><h3 id="1-1-3、maven下载和配置"><a href="#1-1-3、maven下载和配置" class="headerlink" title="1.1.3、maven下载和配置"></a>1.1.3、maven下载和配置</h3><ul><li><p>下载</p><p><a href="https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip">https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip</a></p></li><li><p>配置</p><p>1）配置环境变量</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402162154515.png" alt="image-20210402162154515"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402162219496.png" alt="image-20210402162219496"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402162245919.png" alt="image-20210402162245919"></p><p>2）配置<code>settings</code>文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements.  See the NOTICE filedistributed with this work for additional informationregarding copyright ownership.  The ASF licenses this fileto you under the Apache License, Version 2.0 (the"License"); you may not use this file except in compliancewith the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied.  See the License for thespecific language governing permissions and limitationsunder the License.--></span><span class="token comment" spellcheck="true">&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | |  1. User Level. This settings.xml file provides configuration for a single user, |                 and is normally provided in ${user.home}/.m2/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -s /path/to/user/settings.xml | |  2. Global Level. This settings.xml file provides configuration for all Maven |                 users on a machine (assuming they're all using the same Maven |                 installation). It's normally provided in |                 ${maven.conf}/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: ${user.home}/.m2/repository  &lt;localRepository>/path/to/local/repo&lt;/localRepository>  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:/repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- interactiveMode   | This will determine whether maven prompts you when it needs input. If set to false,   | maven will use a sensible default value, perhaps based on some other setting, for   | the parameter in question.   |   | Default: true  &lt;interactiveMode>true&lt;/interactiveMode>  --></span>  <span class="token comment" spellcheck="true">&lt;!-- offline   | Determines whether maven should attempt to connect to the network when executing a build.   | This will have an effect on artifact downloads, artifact deployment, and others.   |   | Default: false  &lt;offline>false&lt;/offline>  --></span>  <span class="token comment" spellcheck="true">&lt;!-- pluginGroups   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- pluginGroup     | Specifies a further group identifier to use for plugin lookup.    &lt;pluginGroup>com.your.plugins&lt;/pluginGroup>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- proxies   | This is a list of proxies which can be used on this machine to connect to the network.   | Unless otherwise specified (by system property or command-line switch), the first proxy   | specification in this list marked as active will be used.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- proxy     | Specification for one proxy, to be used in connecting to the network.     |    &lt;proxy>      &lt;id>optional&lt;/id>      &lt;active>true&lt;/active>      &lt;protocol>http&lt;/protocol>      &lt;username>proxyuser&lt;/username>      &lt;password>proxypass&lt;/password>      &lt;host>proxy.host.net&lt;/host>      &lt;port>80&lt;/port>      &lt;nonProxyHosts>local.net|some.host.com&lt;/nonProxyHosts>    &lt;/proxy>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- servers   | This is a list of authentication profiles, keyed by the server-id used within the system.   | Authentication profiles can be used whenever maven must make a connection to a remote server.   |--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- server     | Specifies the authentication information to use when connecting to a particular server, identified by     | a unique name within the system (referred to by the 'id' attribute below).     |     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are     |       used together.     |    &lt;server>      &lt;id>deploymentRepo&lt;/id>      &lt;username>repouser&lt;/username>      &lt;password>repopwd&lt;/password>    &lt;/server>    --></span>    <span class="token comment" spellcheck="true">&lt;!-- Another sample, using keys to authenticate.    &lt;server>      &lt;id>siteServer&lt;/id>      &lt;privateKey>/path/to/private/key&lt;/privateKey>      &lt;passphrase>optional; leave empty if not used.&lt;/passphrase>    &lt;/server>    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- mirrors   | This is a list of mirrors to be used in downloading artifacts from remote repositories.   |   | It works like this: a POM may declare a repository to use in resolving certain artifacts.   | However, this repository may have problems with heavy traffic at times, so people have mirrored   | it to several places.   |   | That repository definition will have a unique id, so we can create a mirror reference for that   | repository, to be used as an alternate download site. The mirror site will be the preferred   | server for that repository.   |--></span>      <span class="token comment" spellcheck="true">&lt;!-- mirror    &lt;mirrors>     | Specifies a repository mirror site to use instead of a given repository. The repository that     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.     |    &lt;mirror>      &lt;id>mirrorId&lt;/id>      &lt;mirrorOf>repositoryId&lt;/mirrorOf>      &lt;name>Human Readable Name for this Mirror.&lt;/name>      &lt;url>http://my.repository.com/repo/path&lt;/url>    &lt;/mirror>     &lt;/mirrors>     --></span>     <span class="token comment" spellcheck="true">&lt;!-- 阿里云仓库 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- profiles   | This is a list of profiles which can be activated in a variety of ways, and which can modify   | the build process. Profiles provided in the settings.xml are intended to provide local machine-   | specific paths and repository locations which allow the build to work in the local environment.   |   | For example, if you have an integration testing plugin - like cactus - that needs to know where   | your Tomcat instance is installed, you can provide a variable here such that the variable is   | dereferenced during the build process to configure the cactus plugin.   |   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles   | section of this document (settings.xml) - will be discussed later. Another way essentially   | relies on the detection of a system property, either matching a particular value for the property,   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.   | Finally, the list of active profiles can be specified directly from the command line.   |   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact   |       repositories, plugin repositories, and free-form properties to be used as configuration   |       variables for plugins in the POM.   |   |--></span>    <span class="token comment" spellcheck="true">&lt;!-- profile    &lt;profiles>     | Specifies a set of introductions to the build process, to be activated using one or more of the     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/>     | or the command line, profiles have to have an ID that is unique.     |     | An encouraged best practice for profile identification is to use a consistent naming convention     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.     | This will make it more intuitive to understand what the set of introduced profiles is attempting     | to accomplish, particularly when you only have a list of profile id's for debug.     |     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.    &lt;profile>      &lt;id>jdk-1.4&lt;/id>      &lt;activation>        &lt;jdk>1.4&lt;/jdk>      &lt;/activation>      &lt;repositories>        &lt;repository>          &lt;id>jdk14&lt;/id>          &lt;name>Repository for JDK 1.4 builds&lt;/name>          &lt;url>http://www.myhost.com/maven/jdk14&lt;/url>          &lt;layout>default&lt;/layout>          &lt;snapshotPolicy>always&lt;/snapshotPolicy>        &lt;/repository>      &lt;/repositories>    &lt;/profile>    --></span>    <span class="token comment" spellcheck="true">&lt;!--     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration     | might hypothetically look like:     |     | ...     | &lt;plugin>     |   &lt;groupId>org.myco.myplugins&lt;/groupId>     |   &lt;artifactId>myplugin&lt;/artifactId>     |     |   &lt;configuration>     |     &lt;tomcatLocation>${tomcatPath}&lt;/tomcatLocation>     |   &lt;/configuration>     | &lt;/plugin>     | ...     |     | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to     |       anything, you could just leave off the &lt;value/> inside the activation-property.     |    &lt;profile>      &lt;id>env-dev&lt;/id>      &lt;activation>        &lt;property>          &lt;name>target-env&lt;/name>          &lt;value>dev&lt;/value>        &lt;/property>      &lt;/activation>      &lt;properties>        &lt;tomcatPath>/path/to/tomcat/instance&lt;/tomcatPath>      &lt;/properties>    &lt;/profile>          --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- activeProfiles   | List of profiles that are active for all builds.   |  &lt;activeProfiles>    &lt;activeProfile>alwaysActiveProfile&lt;/activeProfile>    &lt;activeProfile>anotherAlwaysActiveProfile&lt;/activeProfile>  &lt;/activeProfiles>  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）IDEA配置Maven</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402165107437.png" alt="image-20210402165107437"></p><p>修改完之后，<code>IDEA</code>会去<code>aliyun</code>中央仓库下载你的<code>maven</code>依赖包到你本地仓库里。</p><h3 id="1-1-4、启动项目"><a href="#1-1-4、启动项目" class="headerlink" title="1.1.4、启动项目"></a>1.1.4、启动项目</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402170351415.png" alt="image-20210402170351415"></p><h2 id="1-2、前端环境"><a href="#1-2、前端环境" class="headerlink" title="1.2、前端环境"></a>1.2、前端环境</h2><h3 id="1-2-1、nodejs"><a href="#1-2-1、nodejs" class="headerlink" title="1.2.1、nodejs"></a>1.2.1、nodejs</h3><p><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a> 选择Windows 64位安装包，安装一直next就好了</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210402170700984.png" alt="image-20210402170700984"></p><h3 id="1-2-2、cnpm"><a href="#1-2-2、cnpm" class="headerlink" title="1.2.2、cnpm"></a>1.2.2、cnpm</h3><p>即使<code>npm</code>配置了<code>taobao</code>源，有些包<code>npm</code>下载还是会请求超时，用<code>cnpm</code>就可以下载成功。</p><pre class="line-numbers language-shell"><code class="language-shell">npm install -g cnpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-3、yarn"><a href="#1-2-3、yarn" class="headerlink" title="1.2.3、yarn"></a>1.2.3、yarn</h3><p>用<code>npm</code>全局安装<code>yarn</code></p><pre class="line-numbers language-shell"><code class="language-shell">npm install -g yarn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过<code>yarn serve</code>命令会启动一个开发服务器 (基于 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>) 并附带开箱即用的模块热重载 (<code>Hot-Module-Replacement</code>)。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403155710342.png" alt="image-20210403155710342"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403160202869.png" alt="image-20210403160202869"></p><h1 id="2、分离部署到Linux服务器"><a href="#2、分离部署到Linux服务器" class="headerlink" title="2、分离部署到Linux服务器"></a>2、分离部署到Linux服务器</h1><h2 id="2-1、后端部署"><a href="#2-1、后端部署" class="headerlink" title="2.1、后端部署"></a>2.1、后端部署</h2><h3 id="2-1-1、打包"><a href="#2-1-1、打包" class="headerlink" title="2.1.1、打包"></a>2.1.1、打包</h3><p>使用<code>IDEA</code>里的<code>maven</code>插件，跳过<code>test</code>，<code>package</code>打包</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404191547174.png" alt="image-20210404191547174"></p><p>打包完成后，会发现<code>target</code>目录下多了两个<code>jar</code>包</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403160830934.png" alt="image-20210403160830934"></p><p>其中<code>.jar</code>包含了<code>pom.xml</code>文件中的依赖，是可执行<code>jar</code>包，可以通过<code>java -jar</code>直接运行，一般<strong>部署</strong>时使用。</p><p><code>.jar.original</code>是普通<code>jar</code>包，不包含依赖，不可以直接运行，但可以<strong>给别的项目使用</strong>。</p><h3 id="2-1-2、在服务器里启动"><a href="#2-1-2、在服务器里启动" class="headerlink" title="2.1.2、在服务器里启动"></a>2.1.2、在服务器里启动</h3><p>使用<code>xftp</code>将本地<code>jar</code>包，传输服务器某个目录下，比如我是在<code>/usr/local</code>目录下</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403161348166.png" alt="image-20210403161348166"></p><p>编写<code>start.sh</code>脚本</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/shRESOURCE_NAME=recruitsystem-1.0.0-SNAPSHOT.jar tpid=`ps -ef|grep $RESOURCE_NAME|grep -v grep|grep -v kill|awk '{print $2}'`if [ ${tpid} ]; thenecho 'Stop Process...'kill -15 $tpidfisleep 5tpid=`ps -ef|grep $RESOURCE_NAME|grep -v grep|grep -v kill|awk '{print $2}'`if [ ${tpid} ]; thenecho 'Kill Process!'kill -9 $tpidelseecho 'Stop Success!'fi tpid=`ps -ef|grep $RESOURCE_NAME|grep -v grep|grep -v kill|awk '{print $2}'`if [ ${tpid} ]; then    echo 'App is running.'else    echo 'App is NOT running.'fi rm -f tpidnohup java -jar ./$RESOURCE_NAME &echo $! > tpidecho Start Success!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行脚本 <code>./start.sh</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403162356438.png" alt="image-20210403162356438"></p><p>至此，后端项目就部署成功了。</p><h2 id="2-2、前端部署"><a href="#2-2、前端部署" class="headerlink" title="2.2、前端部署"></a>2.2、前端部署</h2><h3 id="2-2-1、打包"><a href="#2-2-1、打包" class="headerlink" title="2.2.1、打包"></a>2.2.1、打包</h3><p>通过<code>yarn build</code>命令会在 <code>dist/</code> 目录产生一个可用于生产环境的包，带有 <code>JS/CSS/HTML</code> 的压缩，和为更好的缓存而做的自动的 <code>vendor chunk splitting</code>。它的 <code>chunk manifest</code> 会内联在 <code>HTML</code> 里。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403160055646.png" alt="image-20210403160055646"></p><h3 id="2-2-2、使用Nginx部署"><a href="#2-2-2、使用Nginx部署" class="headerlink" title="2.2.2、使用Nginx部署"></a>2.2.2、使用Nginx部署</h3><h4 id="2-2-2-1、Nginx安装"><a href="#2-2-2-1、Nginx安装" class="headerlink" title="2.2.2.1、Nginx安装"></a>2.2.2.1、Nginx安装</h4><p>使用<code>yum</code>进行安装</p><pre class="line-numbers language-shell"><code class="language-shell">yum -y install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>-y</code> 表示安装过程中提示选择全为<code>yes</code></p><p>默认会安装在<code>/etc/nginx</code>目录下</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403163307297.png" alt="image-20210403163307297"></p><p>此时直接通过<code>service nginx start</code> 命令启动的话，会启动失败，通过<code>systemctl status nginx.service</code>命令查看报错信息，会发现是第5行的错。</p><p>查看<code>nginx.conf</code>配置文件，发现第5行是 <code>user nginx</code>; 而我们系统里并没有<code>nginx</code>这个用户，因此会报错。</p><p>这里改成 <code>user nobody</code>就可以了。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403163451509.png" alt="image-20210403163451509"></p><p>然后再通过<code>service nginx start</code> 命令就可以启动成功了。</p><h4 id="2-2-2-2、Nginx配置"><a href="#2-2-2-2、Nginx配置" class="headerlink" title="2.2.2.2、Nginx配置"></a>2.2.2.2、Nginx配置</h4><p>修改<code>nginx.conf</code>文件</p><p>修改<code>server</code>配置如下：</p><pre class="line-numbers language-nginx"><code class="language-nginx">    <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span>       <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span>  <span class="token number">121.4</span><span class="token punctuation">.</span><span class="token number">20.119</span><span class="token punctuation">;</span>        <span class="token keyword">root</span>         <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Load configuration files for the default server block.</span>        <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>default<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#重写nginx默认欢迎页面</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>         <span class="token keyword">root</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>dist<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#dist目录绝对路径</span>         <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>         <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#重定向</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#配置后端的接口，将访问域名/api的路径代理给我们后端的接口</span>    <span class="token keyword">location</span> <span class="token operator">/</span>api <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">121.4</span><span class="token punctuation">.</span><span class="token number">20.119</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">error_page</span> <span class="token number">404</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过 <code>service nginx restart</code> 命令重启<code>nginx</code>，就可以通过 <a href="http://121.4.20.119:8080/">http://121.4.20.119:8080/</a> 正常在线访问了。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403164710280.png" alt="image-20210403164710280"></p><h1 id="3、debug记录"><a href="#3、debug记录" class="headerlink" title="3、debug记录"></a>3、debug记录</h1><h2 id="3-1、后端"><a href="#3-1、后端" class="headerlink" title="3.1、后端"></a>3.1、后端</h2><h3 id="3-1-1、spring-boot-maven-plugin-not-found"><a href="#3-1-1、spring-boot-maven-plugin-not-found" class="headerlink" title="3.1.1、spring-boot-maven-plugin not found"></a>3.1.1、spring-boot-maven-plugin not found</h3><p>加上<code>version</code>坐标就可以了</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403170020319.png" alt="image-20210403170020319"></p><h2 id="3-2、前端"><a href="#3-2、前端" class="headerlink" title="3.2、前端"></a>3.2、前端</h2><h3 id="3-2-1、PowerShell-yarn-无法加载文件-C-Users-Admin-AppData-Roaming-npm-yarn-ps1-因为在此系统因为在此系统上禁止运行脚本。"><a href="#3-2-1、PowerShell-yarn-无法加载文件-C-Users-Admin-AppData-Roaming-npm-yarn-ps1-因为在此系统因为在此系统上禁止运行脚本。" class="headerlink" title="3.2.1、PowerShell yarn : 无法加载文件 C:\Users\Admin\AppData\Roaming\npm\yarn.ps1,因为在此系统因为在此系统上禁止运行脚本。"></a>3.2.1、PowerShell yarn : 无法加载文件 C:\Users\Admin\AppData\Roaming\npm\yarn.ps1,因为在此系统因为在此系统上禁止运行脚本。</h3><p>以管理员方式启动<code>powershell</code>，执行以下命令更改计算机执行策略</p><pre class="line-numbers language-shell"><code class="language-shell">set-ExecutionPolicy RemoteSigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是否要更改执行策略，选择<code>Y</code></p><p>然后查看执行策略</p><pre class="line-numbers language-shell"><code class="language-shell">get-ExecutionPolicy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210403170520037.png" alt="image-20210403170520037"></p><p>再重新执行<code>yarn</code>命令就OK了。</p><h3 id="3-2-2、Error-Node-Sass-version-5-0-0-is-incompatible-with-4-0-0"><a href="#3-2-2、Error-Node-Sass-version-5-0-0-is-incompatible-with-4-0-0" class="headerlink" title="3.2.2、Error: Node Sass version 5.0.0 is incompatible with ^4.0.0"></a>3.2.2、Error: Node Sass version 5.0.0 is incompatible with ^4.0.0</h3><p>将<code>node-sass@5.0</code>版本卸载</p><pre class="line-numbers language-shell"><code class="language-shell">yarn remove node-sass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后安装<code>4.14.1</code>版本</p><pre class="line-numbers language-shell"><code class="language-shell">yarn add node-sass@4.14.1 --dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-3、npm的connect-etimedout-xx-xx-xx-xx-443"><a href="#3-2-3、npm的connect-etimedout-xx-xx-xx-xx-443" class="headerlink" title="3.2.3、npm的connect etimedout xx.xx.xx.xx:443"></a>3.2.3、npm的connect etimedout xx.xx.xx.xx:443</h3><p>这个是我在将<code>npm</code>配置了<code>taobao</code>源之后仍然出现的问题，尝试用<code>cnpm</code></p><ul><li><p>安装</p><pre class="line-numbers language-shell"><code class="language-shell">npm install -g cnpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-shell"><code class="language-shell">cnpm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-2-4、Linux环境下安装nginx-启动报错-nginx：nginx-emerg-getpwnam-“nginx”-failed"><a href="#3-2-4、Linux环境下安装nginx-启动报错-nginx：nginx-emerg-getpwnam-“nginx”-failed" class="headerlink" title="3.2.4、Linux环境下安装nginx,启动报错 nginx：nginx: [emerg] getpwnam(“nginx”) failed"></a>3.2.4、Linux环境下安装nginx,启动报错 nginx：nginx: [emerg] getpwnam(“nginx”) failed</h3><p>将<code>nginx.conf</code>第5行的<code>user nginx;</code> 改成 <code>user nobody;</code></p><h3 id="3-2-5、前端项目打包之后index-html会出现三个不消退的div提示信息"><a href="#3-2-5、前端项目打包之后index-html会出现三个不消退的div提示信息" class="headerlink" title="3.2.5、前端项目打包之后index.html会出现三个不消退的div提示信息"></a>3.2.5、前端项目打包之后index.html会出现三个不消退的div提示信息</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210404201107179.png" alt="image-20210404201107179"></p><p>直接删掉index.html里这三个div即可。</p><h1 id="4、参考文章"><a href="#4、参考文章" class="headerlink" title="4、参考文章"></a>4、参考文章</h1><p><a href="https://www.cnblogs.com/cnwutianhao/p/5487758.html">Windows10 Java环境变量配置</a></p><p><a href="https://blog.csdn.net/a805814077/article/details/100545928">Maven安装与配置</a></p><p><a href="https://blog.csdn.net/WXZCYQ/article/details/106353406">部署vue+Springboot前后端分离项目</a></p><p><a href="https://my.oschina.net/u/3957231/blog/3153641">npm的connect etimedout xx.xx.xx.xx:443</a></p><p><a href="https://stackoverflow.com/questions/64625050/error-node-sass-version-5-0-0-is-incompatible-with-4-0-0">Error: Node Sass version 5.0.0 is incompatible with ^4.0.0</a></p><p><a href="https://blog.csdn.net/qq_41539461/article/details/103245337">PowerShell yarn : 无法加载文件 C:\Users\Admin\AppData\Roaming\npm\yarn.ps1</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue </tag>
            
            <tag> Java </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> nodejs </tag>
            
            <tag> Nginx </tag>
            
            <tag> 招聘管理系统 </tag>
            
            <tag> 本科毕设 </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210401</title>
      <link href="2021/04/01/20210401/"/>
      <url>2021/04/01/20210401/</url>
      
        <content type="html"><![CDATA[<h1 id="本周工作总结"><a href="#本周工作总结" class="headerlink" title="本周工作总结"></a>本周工作总结</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1、学习《MA项目设计文档V5》网络通信模块设计，Socket-IO复用"><a href="#1、学习《MA项目设计文档V5》网络通信模块设计，Socket-IO复用" class="headerlink" title="1、学习《MA项目设计文档V5》网络通信模块设计，Socket  IO复用"></a>1、学习《MA项目设计文档V5》网络通信模块设计，Socket  IO复用</h2><h2 id="2、调试多SE代码，梳理流程以及熟悉CE，SE之间的通信"><a href="#2、调试多SE代码，梳理流程以及熟悉CE，SE之间的通信" class="headerlink" title="2、调试多SE代码，梳理流程以及熟悉CE，SE之间的通信"></a>2、调试多SE代码，梳理流程以及熟悉CE，SE之间的通信</h2><h1 id="二、具体内容"><a href="#二、具体内容" class="headerlink" title="二、具体内容"></a>二、具体内容</h1><h2 id="1、文档学习"><a href="#1、文档学习" class="headerlink" title="1、文档学习"></a>1、文档学习</h2><h3 id="1-1、Quorum-Gossip"><a href="#1-1、Quorum-Gossip" class="headerlink" title="1.1、Quorum+Gossip"></a>1.1、Quorum+Gossip</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331210956912.png" alt="image-20210331210956912"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331211027091.png" alt="image-20210331211027091"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331212638306.png" alt="image-20210331212638306"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331212806431.png" alt="image-20210331212806431"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331212922548.png" alt="image-20210331212922548"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331213024736.png" alt="image-20210331213024736"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331213158381.png" alt="image-20210331213158381"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331213515119.png" alt="image-20210331213515119"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331213612116.png" alt="image-20210331213612116"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331213711864.png" alt="image-20210331213711864"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331213831414.png" alt="image-20210331213831414"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331213915103.png" alt="image-20210331213915103"></p><h3 id="1-2、select和poll"><a href="#1-2、select和poll" class="headerlink" title="1.2、select和poll"></a>1.2、select和poll</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331211217673.png" alt="image-20210331211217673"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331211334436.png" alt="image-20210331211334436"></p><h2 id="2、源码调试（1CE-3SE）"><a href="#2、源码调试（1CE-3SE）" class="headerlink" title="2、源码调试（1CE+3SE）"></a>2、源码调试（1CE+3SE）</h2><h3 id="2-1、初始化"><a href="#2-1、初始化" class="headerlink" title="2.1、初始化"></a>2.1、初始化</h3><h4 id="2-1-1、SE"><a href="#2-1-1、SE" class="headerlink" title="2.1.1、SE"></a>2.1.1、SE</h4><h5 id="2-1-1-1、plugin-innobase-init-only"><a href="#2-1-1-1、plugin-innobase-init-only" class="headerlink" title="2.1.1.1、plugin_innobase_init_only"></a>2.1.1.1、plugin_innobase_init_only</h5><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331214304272.png" alt="image-20210331214304272"></p><p>关键函数是<code>innobase_start_for_se</code></p><h6 id="1、初始化buffer-pool"><a href="#1、初始化buffer-pool" class="headerlink" title="1、初始化buffer pool"></a>1、初始化buffer pool</h6><pre><code>err = buf_pool_init(srv_buf_pool_size, srv_buf_pool_instances);</code></pre><h6 id="2、创建IO线程"><a href="#2、创建IO线程" class="headerlink" title="2、创建IO线程"></a>2、创建IO线程</h6><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331215934167.png" alt="image-20210331215934167"></p><h6 id="3、崩溃恢复检查"><a href="#3、崩溃恢复检查" class="headerlink" title="3、崩溃恢复检查"></a>3、崩溃恢复检查</h6><h6 id="4、初始化hot-log-buffer"><a href="#4、初始化hot-log-buffer" class="headerlink" title="4、初始化hot log buffer"></a>4、初始化hot log buffer</h6><p>4.1、初始化一些参数</p><p>比如<code>buf_size</code>初始化为<br>$$<br>32M*0.75=24M<br>$$<br><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331221155222.png" alt="image-20210331221155222"></p><p>4.2、初始化日志缺失列表</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331221426955.png" alt="image-20210331221426955"></p><p>4.3、初始化buf_lsn</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331222132982.png" alt="image-20210331222132982"></p><h6 id="5、创建缓冲池页回收线程和刷脏线程"><a href="#5、创建缓冲池页回收线程和刷脏线程" class="headerlink" title="5、创建缓冲池页回收线程和刷脏线程"></a>5、创建缓冲池页回收线程和刷脏线程</h6><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331222356055.png" alt="image-20210331222356055"></p><h6 id="6、创建日志应用和日志解析线程"><a href="#6、创建日志应用和日志解析线程" class="headerlink" title="6、创建日志应用和日志解析线程"></a>6、创建日志应用和日志解析线程</h6><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331222445362.png" alt="image-20210331222445362"></p><h6 id="7、gossip初始化"><a href="#7、gossip初始化" class="headerlink" title="7、gossip初始化"></a>7、gossip初始化</h6><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331222628602.png" alt="image-20210331222628602"></p><p>7.1、读取<code>gossip</code>配置信息</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331222919265.png" alt="image-20210331222919265"></p><p>7.2、创建服务端监听线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331223116223.png" alt="image-20210331223116223"></p><p><code>gossip</code>监听端口是<code>33307</code></p><p>7.3、初始化与另外两台<code>SE</code>节点的连接，并创建连接线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331223617639.png" alt="image-20210331223617639"></p><p>7.4、创建两个信号量</p><p>创建<strong>检查日志缺失信号量</strong>和<strong>关闭活动线程的信号量</strong>，初始化检查日志缺失最大间隔时间为<strong>0.5秒</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331224217940.png" alt="image-20210331224217940"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331224108115.png" alt="image-20210331224108115"></p><p>7.5、创建活动线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331224443753.png" alt="image-20210331224443753"></p><h5 id="2-1-1-2、network-init"><a href="#2-1-1-2、network-init" class="headerlink" title="2.1.1.2、network_init"></a>2.1.1.2、network_init</h5><h6 id="1、初始化socket监听器"><a href="#1、初始化socket监听器" class="headerlink" title="1、初始化socket监听器"></a>1、初始化socket监听器</h6><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331232034161.png" alt="image-20210331232034161"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331232125049.png" alt="image-20210331232125049"></p><h6 id="2、设置socket监听器"><a href="#2、设置socket监听器" class="headerlink" title="2、设置socket监听器"></a>2、设置socket监听器</h6><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331232257497.png" alt="image-20210331232257497"></p><p>创建一个<code>tcp socket</code>和一个本地<code>Unix socket</code>，并加到<code>socket map</code>中</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331232645656.png" alt="image-20210331232645656"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331232713831.png" alt="image-20210331232713831"></p><p>设置<code>socket</code>描述符和地址，初始化<code>m_poll_info</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331233125792.png" alt="image-20210331233125792"></p><h5 id="2-1-1-3、connection-event-loop"><a href="#2-1-1-3、connection-event-loop" class="headerlink" title="2.1.1.3、connection_event_loop"></a>2.1.1.3、connection_event_loop</h5><p>通过饿汉式单例模式创建一个<code>Connection_handler_manager</code>，用来处理客户端新的连接请求</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331233914043.png" alt="image-20210331233914043"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331234003705.png" alt="image-20210331234003705"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331233436357.png" alt="image-20210331233436357"></p><p>然后<code>SE</code>就会阻塞在这里，等待<code>CE</code>的请求</p><h4 id="2-1-2、CE"><a href="#2-1-2、CE" class="headerlink" title="2.1.2、CE"></a>2.1.2、CE</h4><h5 id="2-1-2-1、Quorum-start"><a href="#2-1-2-1、Quorum-start" class="headerlink" title="2.1.2.1、Quorum_start"></a>2.1.2.1、Quorum_start</h5><p>读取<code>quorum</code>配置信息</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331235524945.png" alt="image-20210331235524945"></p><p>初始化<code>link_node</code>，保存要通信的<code>SE</code>节点信息</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331235653296.png" alt="image-20210331235653296"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210331235723416.png" alt="image-20210331235723416"></p><p>创建并开启三个独立线程分别用来和三个<code>SE</code>通信<br><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401000300465.png" alt="image-20210401000300465"></p><p>初始化并开启心跳计时器线程</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401000927774.png" alt="image-20210401000927774"></p><p><code>heatbeat_timeout</code>这里刚开始设置的是500毫秒，但是一开断点，<code>CE</code>就会因为心跳等待超时而挂掉，问学姐才知道这里调试的时候一般设为**-1（无穷）**</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401001234762.png" alt="image-20210401001234762"></p><h5 id="2-1-2-2、net-start"><a href="#2-1-2-2、net-start" class="headerlink" title="2.1.2.2、net_start"></a>2.1.2.2、net_start</h5><p>初始化一个<code>MySQL</code>对象</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> st_mysql<span class="token punctuation">{</span>  NET        net<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Communication parameters */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span>    <span class="token operator">*</span>connector_fd<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* ConnectorFd for SSL */</span>  <span class="token keyword">char</span>        <span class="token operator">*</span>host<span class="token punctuation">,</span><span class="token operator">*</span>user<span class="token punctuation">,</span><span class="token operator">*</span>passwd<span class="token punctuation">,</span><span class="token operator">*</span>unix_socket<span class="token punctuation">,</span><span class="token operator">*</span>server_version<span class="token punctuation">,</span><span class="token operator">*</span>host_info<span class="token punctuation">;</span>  <span class="token keyword">char</span>          <span class="token operator">*</span>info<span class="token punctuation">,</span> <span class="token operator">*</span>db<span class="token punctuation">;</span>  <span class="token keyword">struct</span> charset_info_st <span class="token operator">*</span>charset<span class="token punctuation">;</span>  MYSQL_FIELD    <span class="token operator">*</span>fields<span class="token punctuation">;</span>  MEM_ROOT    field_alloc<span class="token punctuation">;</span>  my_ulonglong affected_rows<span class="token punctuation">;</span>  my_ulonglong insert_id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* id if insert on table with NEXTNR */</span>  my_ulonglong extra_info<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Not used */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> thread_id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Id for connection in server */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> packet_length<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    port<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> client_flag<span class="token punctuation">,</span>server_capabilities<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    protocol_version<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    field_count<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>     server_status<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  server_language<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    warning_count<span class="token punctuation">;</span>  <span class="token keyword">struct</span> st_mysql_options options<span class="token punctuation">;</span>  <span class="token keyword">enum</span> mysql_status status<span class="token punctuation">;</span>  my_bool    free_me<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* If free in mysql_close */</span>  my_bool    reconnect<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* set to 1 if automatic reconnect */</span>  <span class="token comment" spellcheck="true">/* session-wide random string */</span>  <span class="token keyword">char</span>            scramble<span class="token punctuation">[</span>SCRAMBLE_LENGTH<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  my_bool unused1<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>unused2<span class="token punctuation">,</span> <span class="token operator">*</span>unused3<span class="token punctuation">,</span> <span class="token operator">*</span>unused4<span class="token punctuation">,</span> <span class="token operator">*</span>unused5<span class="token punctuation">;</span>  LIST  <span class="token operator">*</span>stmts<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/* list of all statements */</span>  <span class="token keyword">const</span> <span class="token keyword">struct</span> st_mysql_methods <span class="token operator">*</span>methods<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>thd<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*    Points to boolean flag in MYSQL_RES  or MYSQL_STMT. We set this flag     from mysql_stmt_close if close had to cancel result set of this object.  */</span>  my_bool <span class="token operator">*</span>unbuffered_fetch_owner<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* needed for embedded server - no net buffer to store the 'info' */</span>  <span class="token keyword">char</span> <span class="token operator">*</span>info_buffer<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>extension<span class="token punctuation">;</span><span class="token punctuation">}</span> MYSQL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401001752620.png" alt="image-20210401001752620"></p><p>与<code>SE</code>进行连接</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401002244271.png" alt="image-20210401002244271"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401002215353.png" alt="image-20210401002215353"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401002426229.png" alt="image-20210401002426229"></p><p><code>SE</code>端收到连接请求后，首先在<code>socket_map</code>里找对应的<code>listen_socket</code>,然后创建<code>MySQL socket</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401003044276.png" alt="image-20210401003044276"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401003106718.png" alt="image-20210401003106718"></p><p>然后创建<code>tcp socket</code>的<code>channel info</code>并返回让<code>mgr</code>进行处理</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401003524887.png" alt="image-20210401003524887"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401003601724.png" alt="image-20210401003601724"></p><p>身份认证</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401004020226.png" alt="image-20210401004020226"></p><h5 id="2-1-2-3、init-server-components"><a href="#2-1-2-3、init-server-components" class="headerlink" title="2.1.2.3、init_server_components"></a>2.1.2.3、init_server_components</h5><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401004402108.png" alt="image-20210401004402108"></p><p>首先发一个<code>STAT</code>类型请求，<code>SE</code>处理该请求，并返回<code>stat</code>信息给<code>CE</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401011157409.png" alt="image-20210401011157409"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401010415776.png" alt="image-20210401010415776"></p><p>网络传输中，对<code>request</code>和<code>response</code>进行了序列化处理</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401010635607.png" alt="image-20210401010635607"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401020458607.png" alt="image-20210401020458607"></p><p>并在另一端进行反序列化</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401010746993.png" alt="image-20210401010746993"></p><p>接着<code>CE</code>又传了一个<code>OPEN</code> 请求给<code>SE</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401011500986.png" alt="image-20210401011500986"></p><p>尝试Open <code>./ibdata1</code></p><p>然后返回结果给<code>CE</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401011826438.png" alt="image-20210401011826438"></p><p><code>CE</code>通过<code>net_receive</code>进行接收</p><p>接着<code>CE</code>又传了一个<code>SIZE</code> 请求给<code>SE</code>，获取<code>ibdata1</code>文件大小</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401012403218.png" alt="image-20210401012403218"></p><p>然后又传了一个<code>READ</code>请求，获取<code>ibdata1</code>文件里第一个页（<code>n_bytes=16384，offset=0</code>）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401012652422.png" alt="image-20210401012652422"></p><p>然后又发了一个<code>Read</code>请求，获取<code>ibdata1</code>的第二个页（<code>n_bytes=16384，offset=16384</code>）</p><p>然后请求第三个页</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401013329185.png" alt="image-20210401013329185"></p><p>然后请求<code>ib_logfile0,，ib_logfile1，ib_logfile2</code>同样是<code>STAT，OPEN，SIZE</code></p><p>然后又开始请求<code>ibdata1</code>里的页….</p><h3 id="2-2、插入数据，跟踪Quorum"><a href="#2-2、插入数据，跟踪Quorum" class="headerlink" title="2.2、插入数据，跟踪Quorum"></a>2.2、插入数据，跟踪Quorum</h3><p>启动完毕之后，<code>OMLSN</code>为0xad37e75 ，<code>max_lsn</code>为0x1039d675</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401020409915.png" alt="image-20210401020409915"></p><p>客户端插入一条数据</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401022115992.png" alt="image-20210401022115992"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401022031098.png" alt="image-20210401022031098"></p><p><code>CE</code>会请求<code>sbtest1</code>偏移量为65536的一个页, 即第五个页</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401022435232.png" alt="image-20210401022435232"></p><p>然后发送<code>WRITE</code>请求，往<code>ib_logfile1</code>的20571136偏移量的地方写1536个字节，并告知<code>SE</code>当前<code>VDL</code>为272225909</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401022722537.png" alt="image-20210401022722537"></p><p><code>SE</code>从<code>log buffer</code>里写到日志文件里</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401023026937.png" alt="image-20210401023026937"></p><p>首先解析文件路径</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401023140181.png" alt="image-20210401023140181"></p><p>然后写<code>redo log</code>，分以下8步</p><h4 id="1、读日志文件到hot-log-buffer"><a href="#1、读日志文件到hot-log-buffer" class="headerlink" title="1、读日志文件到hot log buffer"></a>1、读日志文件到hot log buffer</h4><p>如果<code>hot log buffer</code>当前解析的<code>buf_lsn</code>比<code>VDL</code>小的话，就通知日志解析线程进行日志解析，至少解析到<code>VDL</code>为止</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401023453990.png" alt="image-20210401023453990"></p><h4 id="2、计算日志组全局偏移量"><a href="#2、计算日志组全局偏移量" class="headerlink" title="2、计算日志组全局偏移量"></a>2、计算日志组全局偏移量</h4><p>如果是<code>Checkpoint</code>，不写日志，直接退出</p><pre class="line-numbers language-c++"><code class="language-c++">fil_node_t*    node = UT_LIST_GET_FIRST(fil_space->chain);            page_no = offset >> UNIV_PAGE_SIZE_SHIFT;            byte_offset = offset - ((os_offset_t) page_no << UNIV_PAGE_SIZE_SHIFT);            while (node != NULL) {                if(ut_memcmp(full_file,node->name,strlen(full_file)) == 0){                    break;                }                page_no += node->size;                node_size += node->size;                node = UT_LIST_GET_NEXT(chain, node);            }      //TODO: To be optimized!            log_group_offset = (lsn_t) offset;            /** calculate the global offset of log group. */            if (node_size != 0 && page_no >= node_size) {                node_num = page_no / node_size;                log_group_offset += (node_num * node_size * UNIV_PAGE_SIZE);            }            //ce checkpoint never write new redo log , se never flush the checkpoint info to disk            //se write the checkpoint info only by itself            if(log_group_offset == LOG_CHECKPOINT_1 ||          log_group_offset == LOG_CHECKPOINT_2){        hot_log_list_mutex_exit();                goto exit;            }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、设置心跳信息标志"><a href="#3、设置心跳信息标志" class="headerlink" title="3、设置心跳信息标志"></a>3、设置心跳信息标志</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401024243697.png" alt="image-20210401024243697"></p><h4 id="4、确保OMLSN不会被覆盖"><a href="#4、确保OMLSN不会被覆盖" class="headerlink" title="4、确保OMLSN不会被覆盖"></a>4、确保OMLSN不会被覆盖</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401024902711.png" alt="image-20210401024902711"></p><h4 id="5、写日志"><a href="#5、写日志" class="headerlink" title="5、写日志"></a>5、写日志</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401024944983.png" alt="image-20210401024944983"></p><h4 id="6、检查是否有日志缺失，并激活gossip活动线程"><a href="#6、检查是否有日志缺失，并激活gossip活动线程" class="headerlink" title="6、检查是否有日志缺失，并激活gossip活动线程"></a>6、检查是否有日志缺失，并激活gossip活动线程</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401025054007.png" alt="image-20210401025054007"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401025209018.png" alt="image-20210401025209018"></p><h4 id="7、更新OMLSN"><a href="#7、更新OMLSN" class="headerlink" title="7、更新OMLSN"></a>7、更新OMLSN</h4><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401025312481.png" alt="image-20210401025312481"></p><h4 id="8、写hot-log-buffer"><a href="#8、写hot-log-buffer" class="headerlink" title="8、写hot log buffer"></a>8、写hot log buffer</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token function">hot_log_buf_write_into</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*=================*/</span>    <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; in: buffer where to read log */</span>    lsn_t offset<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*!&lt; in: offset of log write in log group */</span>    ulint n_bytes<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*!&lt; in: the size of log block in bytes */</span>  log_range_t<span class="token operator">&amp;</span> log_segment<span class="token punctuation">)</span><span class="token punctuation">{</span>    log_group_t<span class="token operator">*</span> group <span class="token operator">=</span> <span class="token function">UT_LIST_GET_FIRST</span><span class="token punctuation">(</span>log_sys<span class="token operator">-</span><span class="token operator">></span>log_groups<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** write header information or checkpoint information to     * log file header, this information needn't write to hot     * log buffer.      日志组文件头和checkpoint不用写*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">%</span> group<span class="token operator">-</span><span class="token operator">></span>file_size <span class="token operator">==</span> <span class="token number">0</span>            <span class="token operator">||</span> offset <span class="token operator">==</span> LOG_CHECKPOINT_1            <span class="token operator">||</span> offset <span class="token operator">==</span> LOG_CHECKPOINT_2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ut_a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token function">hot_log_mutex_own</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hot_log_sys<span class="token operator">-</span><span class="token operator">></span>last_log_file_offset <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ut_ad</span><span class="token punctuation">(</span>hot_log_sys<span class="token operator">-</span><span class="token operator">></span>buf_free_block <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token function">hot_log_write_buffer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> byte <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> n_bytes<span class="token punctuation">,</span> log_segment<span class="token punctuation">)</span><span class="token punctuation">;</span>    hot_log_sys<span class="token operator">-</span><span class="token operator">></span>last_log_file_offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>    hot_log_sys<span class="token operator">-</span><span class="token operator">></span>last_n_bytes <span class="token operator">=</span> n_bytes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后<code>SE</code>返回两个参数给<code>CE</code>，一个是写入日志长度，一个是<code>CPL</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401025917281.png" alt="image-20210401025917281"></p><p>然后又写了<code>512B</code>给<code>SE</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401030539315.png" alt="image-20210401030539315"></p><p>又写了<code>512B</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401030856753.png" alt="image-20210401030856753"></p><p>另外两个<code>SE</code>也是一样，最终都会写入成功，所以<code>gossip</code>并没有用到</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401032247623.png" alt="image-20210401032247623"></p><p>最终三台<code>SE</code>都没有缺失日志，<code>OMLSN</code>同步到了0xad382b0，<code>max_lsn</code>同步到了0x1039dab0</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401031915661.png" alt="image-20210401031915661"></p><h3 id="2-3、尝试制造网络异常，让某个SE丢失日志，从而使得gossip起作用"><a href="#2-3、尝试制造网络异常，让某个SE丢失日志，从而使得gossip起作用" class="headerlink" title="2.3、尝试制造网络异常，让某个SE丢失日志，从而使得gossip起作用"></a>2.3、尝试制造网络异常，让某个SE丢失日志，从而使得gossip起作用</h3><p>让第二台<code>SE</code>断网，再插入一条数据</p><p>插入完成之后，我们发现</p><p>第一台和第三台<code>SE</code>都成功收到<code>redo</code>，并更新了自己的<code>OMLSN</code>和<code>max_lsn</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401033513255.png" alt="image-20210401033513255"></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401033643634.png" alt="image-20210401033643634"></p><p>第二台<code>SE</code>因为没有收到<code>redo</code>，还停留在插入之前的状态</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401033736506.png" alt="image-20210401033736506"></p><p>现在我们再将第二台<code>SE</code>连上网络</p><p>但是好像并没有走<code>gossip</code>，而是还是走的<code>Quorum</code>，<code>CE</code>又开始往三台机器写<code>redo</code>了？？？</p><p>最终三台<code>SE</code>都同步到</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401034813869.png" alt="image-20210401034813869"></p><p><code>CE</code>的控制台输出</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401034958000.png" alt="image-20210401034958000"></p><p><code>lsn</code>，<code>log_flush_lsn</code>，<code>page_flush_lsn</code>都是272231612</p><p>这和三台<code>SE</code>的<code>max_lsn</code>是一样的</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210401035128840.png" alt="image-20210401035128840"></p>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
          <category> 周会总结报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSE </tag>
            
            <tag> Quorum </tag>
            
            <tag> Gossip </tag>
            
            <tag> Socket </tag>
            
            <tag> MA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统基本结构学习</title>
      <link href="2021/03/22/linux-xi-tong-ji-ben-jie-gou-xue-xi/"/>
      <url>2021/03/22/linux-xi-tong-ji-ben-jie-gou-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="1、系统与硬件"><a href="#1、系统与硬件" class="headerlink" title="1、系统与硬件"></a>1、系统与硬件</h1><h2 id="1-1、Linux硬件资源管理"><a href="#1-1、Linux硬件资源管理" class="headerlink" title="1.1、Linux硬件资源管理"></a>1.1、Linux硬件资源管理</h2><h3 id="1-1-1、查看系统PCI设备"><a href="#1-1-1、查看系统PCI设备" class="headerlink" title="1.1.1、查看系统PCI设备"></a>1.1.1、查看系统PCI设备</h3><p><code>lspci</code>命令可以列出所有<code>PCI</code>设备，如主板、声卡、显卡、网卡、<code>USB</code>接口设备等</p><pre class="line-numbers language-shell"><code class="language-shell">lspci<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322115754500.png" alt="image-20210322115754500"></p><p>下面我们来分析下上面的输出结果</p><pre class="line-numbers language-shell"><code class="language-shell">00:00.0 Host bridge: Intel Corporation 440BX/ZX/DX - 82443BX/ZX/DX Host bridge (rev 01)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面显示集成主板类型是：<code>Intel Corporation 440BX/ZX/DX</code></p><pre class="line-numbers language-shell"><code class="language-shell">00:0f.0 VGA compatible controller: VMware SVGA II Adapter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面显示<code>VGA</code>显卡设备是：<code>VMware SVGA II Adapter</code></p><pre class="line-numbers language-shell"><code class="language-shell">02:00.0 USB controller: VMware USB1.1 UHCI Controller02:02.0 USB controller: VMware USB2 EHCI Controller<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面显示了两个<code>USB</code>设备</p><pre class="line-numbers language-shell"><code class="language-shell">02:01.0 Ethernet controller: Intel Corporation 82545EM Gigabit Ethernet Controller (Copper) (rev 01)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面显示的是千兆网卡设备</p><p>此外 <code>lspci -v</code>命令能看到更详细的<code>PCI</code>设备信息</p><pre class="line-numbers language-shell"><code class="language-shell">lspci -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322124822835.png" alt="image-20210322124822835"></p><h3 id="1-1-2、查看CPU信息"><a href="#1-1-2、查看CPU信息" class="headerlink" title="1.1.2、查看CPU信息"></a>1.1.2、查看CPU信息</h3><pre class="line-numbers language-shell"><code class="language-shell">more /proc/cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322125619974.png" alt="image-20210322125619974"></p><p>各参数含义说明如下表</p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td><code>processor</code></td><td>逻辑处理器的唯一标识符</td></tr><tr><td><code>vendor_id</code></td><td>处理器类型，<code>GenuineIntel</code>代表是<code>Intel</code>处理器</td></tr><tr><td><code>physical id</code></td><td>每个物理封装的唯一标识符，也就是一个物理<code>CPU</code></td></tr><tr><td><code>siblings</code></td><td>位于相同物理封装中的逻辑处理器的数量</td></tr><tr><td><code>core id</code></td><td>每个内核的唯一标识符</td></tr><tr><td><code>cpu cores</code></td><td>位于相同物理封装中的内核数量</td></tr></tbody></table><p>如果<code>siblings</code>等于<code>cpu cores</code>，那么说明系统不支持超线程，或者超线程未打开；如果<code>siblings</code>是<code>cpu cores</code>的两倍，则说明系统支持超线程。</p><p>查看系统物理<code>CPU</code>的数量：</p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322131521356.png" alt="image-20210322131521356"></p><p>查看每个物理<code>CPU</code>中内核的个数：</p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/cpuinfo | grep "cpu cores"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322131203441.png" alt="image-20210322131203441"></p><p>查看系统所有逻辑<code>CPU</code>个数（所有物理CPU中内核个数+超线程个数）</p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/cpuinfo | grep "processor" | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322130951630.png"></p><p>由以上结果可知，我本人的<code>CentOS7</code>系统有2个物理<code>CPU</code>，每个物理<code>CPU</code>中有2个内核，并且没有启动超线程，总共有4个逻辑<code>CPU</code>。</p><p>这和我个人设置的配置完全吻合</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322132123821.png" alt="image-20210322132123821"></p><h3 id="1-1-3、查看系统内存信息"><a href="#1-1-3、查看系统内存信息" class="headerlink" title="1.1.3、查看系统内存信息"></a>1.1.3、查看系统内存信息</h3><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/meminfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322132440097.png" alt="image-20210322132440097"></p><p>由以上信息可知，系统目前物理内存<code>MemTotal</code>大约为5.3G，可用物理内存<code>MemFree</code>大约为2.7G，缓冲区<code>Buffers</code>占用了1772KB，缓存<code>Cached</code>占用了约1.5G</p><h3 id="1-1-4、查看磁盘分区信息"><a href="#1-1-4、查看磁盘分区信息" class="headerlink" title="1.1.4、查看磁盘分区信息"></a>1.1.4、查看磁盘分区信息</h3><pre class="line-numbers language-shell"><code class="language-shell">fdisk -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322141629087.png" alt="image-20210322141629087"></p><p>通过以上输出可知，该系统一共有一个107.4G的磁盘，划分了三个分区，分别是<code>centos-root</code>，<code>centos-swap</code>，<code>centos-home</code></p><h2 id="1-2、Linux外在设备的使用"><a href="#1-2、Linux外在设备的使用" class="headerlink" title="1.2、Linux外在设备的使用"></a>1.2、Linux外在设备的使用</h2><p>有时候我们需要使用软盘，U盘，光驱，磁带等外在设备，这需要挂载才能使用。</p><h3 id="1-2-1、硬件与设备文件"><a href="#1-2-1、硬件与设备文件" class="headerlink" title="1.2.1、硬件与设备文件"></a>1.2.1、硬件与设备文件</h3><p>在<code>Linux</code>系统下， 硬件设备都是以文件方式存在，不同硬件设备有不同的文件类型，我们把硬件与系统下相对应的文件称为<strong>设备文件</strong>。设备文件存放在</p><p><code>/dev</code>下面，命名方式是主设备号（设备类型）+次设备号（具体哪一个设备）</p><ul><li><p><strong>软盘</strong>在<code>Linux</code>下对应设备文件是<code>/dev/fdx</code>，<code>fd</code>是主设备号，次设备号<code>x</code>是软盘驱动器相应的编号。如<code>/dev/fd0</code>就表示系统中第一个软盘驱动器。</p></li><li><p><strong>U盘</strong>在<code>Linux</code>下对应设备文件是<code>/dev/sdax</code>，主设备号<code>sd</code>表示<code>SCSI disk</code>，<code>a</code>表示第一块<code>SCSI</code>设备；<code>b</code>表示第二块，其设备文件是<code>/dev/sdb</code>；以此类推。<code>x</code>表示<code>SCSI</code>设备的相应分区编号。如：<code>/dev/sda1</code>表示第一块<code>SCSI</code>设备的第一个分区。</p></li><li><p><strong>IDE光驱</strong>在<code>Linux</code>下对应的设备文件是<code>/dev/had</code>，表示在第一个<code>IDE</code>口（<code>Master</code>）的IDE光驱；<strong>SCSI光驱</strong>在<code>Linux</code>下对应的设备文件为<code>/dev/srx</code>，<code>x</code>表示<code>SCSI ID</code>;很多<code>Linux</code>发行版还有一个<code>/dev/cdrom</code>设备文件，它是一个指向光驱的符号链接。</p></li><li><p><strong>磁带</strong>驱动器对应设备文件是<code>/dev/stx</code>，<code>st</code>代表<code>SCSI tape</code>，<code>x</code>是磁带驱动器的编号。系统第一个磁带驱动器设备文件为<code>/dev/st0</code>，以此类推。</p></li></ul><h3 id="1-2-2、常见文件系统类型"><a href="#1-2-2、常见文件系统类型" class="headerlink" title="1.2.2、常见文件系统类型"></a>1.2.2、常见文件系统类型</h3><p>​    </p><table><thead><tr><th>文件系统格式</th><th>备注</th></tr></thead><tbody><tr><td><code>msdos</code></td><td><code>DOS</code>文件系统类型</td></tr><tr><td><code>vfat</code></td><td><code>Windows</code>文件系统类型</td></tr><tr><td><code>ISO9660</code></td><td>光盘格式文件系统类型类型</td></tr><tr><td><code>ext2/ext3/ext4</code></td><td><code>Linux</code>下主流文件系统类型</td></tr><tr><td><code>xfs</code></td><td><code>Linux</code>下一种高性能日志文件系统，在<code>CentOS7.x</code>版本是默认文件系统</td></tr></tbody></table><p>了解了设备文件与对应的文件系统类型后，我们就能在<code>Linux</code>下挂载使用这些设备了。</p><h3 id="1-2-3、设备的挂载使用"><a href="#1-2-3、设备的挂载使用" class="headerlink" title="1.2.3、设备的挂载使用"></a>1.2.3、设备的挂载使用</h3><p><code>Linux</code>下的挂载命令是<code>mount</code>，格式如下：</p><pre class="line-numbers language-shell"><code class="language-shell">mount -t 文件系统类型 设备名 挂载点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将设备指定到这个挂载目录之后，以后访问这个目录就相当于访问这个设备了。</p><p><code>Linux</code>系统有一个<code>/mnt</code>目录，专门用作临时挂载点（<code>Mount Point</code>）目录，主要用于系统管理员临时挂载一些媒体设备。此外，<code>Linux</code>还有一个<code>/media</code>目录，主要用于自动挂载U盘，光盘。在<code>CentOS7</code>中新出现了一个<code>/run</code>目录，现在所有的移动设备都会自动挂载到这个目录下。</p><h4 id="1-2-3-1、挂载软盘"><a href="#1-2-3-1、挂载软盘" class="headerlink" title="1.2.3.1、挂载软盘"></a>1.2.3.1、挂载软盘</h4><pre class="line-numbers language-shell"><code class="language-shell">mount -t msdos /dev/fd0 /mnt/floppy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令把一个<code>DOS</code>文件格式的软盘挂载在<code>/mnt/floppy</code>目录下</p><h4 id="1-2-3-2、挂载U盘"><a href="#1-2-3-2、挂载U盘" class="headerlink" title="1.2.3.2、挂载U盘"></a>1.2.3.2、挂载U盘</h4><p>首先通过下面命令查看U盘设备名以及是否挂载</p><pre class="line-numbers language-shell"><code class="language-shell">df -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322222946637.png" alt="image-20210322222946637"></p><p>然后建立挂载点</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir /mnt/usb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，进行挂载</p><pre class="line-numbers language-shell"><code class="language-shell">mount -t xfs /dev/sda1 /mnt/usb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样我们就能通过<code>/mnt/usb</code>目录来访问<code>sda1</code>里面的内容了</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210322223236485.png" alt="image-20210322223236485"></p><h4 id="1-2-3-3、挂载光盘"><a href="#1-2-3-3、挂载光盘" class="headerlink" title="1.2.3.3、挂载光盘"></a>1.2.3.3、挂载光盘</h4><pre class="line-numbers language-shell"><code class="language-shell">mount -t iso9660 /dev/hda /mnt/cdrom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意使用<code>mount</code>挂载的软盘，光盘，U盘，而非软驱（软盘驱动器），光驱，因此，我们需要挂载另外一个软盘，光盘时，需要先卸载，然后重新挂载。</p><h1 id="2、文件系统结构介绍"><a href="#2、文件系统结构介绍" class="headerlink" title="2、文件系统结构介绍"></a>2、文件系统结构介绍</h1><h2 id="2-1、目录结构"><a href="#2-1、目录结构" class="headerlink" title="2.1、目录结构"></a>2.1、目录结构</h2><h3 id="2-1-1、经典树形结构"><a href="#2-1-1、经典树形结构" class="headerlink" title="2.1.1、经典树形结构"></a>2.1.1、经典树形结构</h3><p>典型的树形结构，<code>root</code>目录下有<code>dev，bin，home，usr，var，boot</code>等目录，<code>var</code>下有<code>log，run</code>等目录</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210327203349453.png" alt="image-20210327203349453"></p><p><code>Linux</code>系统是一种一切皆文件的操作系统，整个系统以文件的形式存放在根目录下，分层分级组织在一起，形成了一个树形目录结构。</p><h3 id="2-1-2、目录功能介绍"><a href="#2-1-2、目录功能介绍" class="headerlink" title="2.1.2、目录功能介绍"></a>2.1.2、目录功能介绍</h3><h4 id="2-1-2-1、-etc目录"><a href="#2-1-2-1、-etc目录" class="headerlink" title="2.1.2.1、/etc目录"></a>2.1.2.1、/etc目录</h4><p>主要用于存放系统管理相关的配置文件和其子目录。</p><table><thead><tr><th>文件或目录</th><th>主要作用</th></tr></thead><tbody><tr><td><code>passwd</code></td><td>用户库文件，存放每个用户的用户名，<code>UID，GID</code>和工作目录</td></tr><tr><td><code>shadow</code></td><td>存放用户加密后的密码文件</td></tr><tr><td><code>group</code></td><td>存放用户组信息</td></tr><tr><td><code>fstab</code></td><td>系统开机启动自动挂载分区列表</td></tr><tr><td><code>systemd</code></td><td>配置文件目录，是<code>CentOS7.x</code>新增目录，<code>Linux</code>系统启动用来对整个系统进行初始化配置</td></tr><tr><td><code>hosts</code></td><td>设定用户的<code>IP</code>和名字对应表，类似<code>Windows</code>系统的<code>hosts</code>文件</td></tr><tr><td><code>resolv.conf</code></td><td>客户端<code>DNS</code>配置文件</td></tr><tr><td><code>sysconfig/network-scripts/ifcfg-xxx</code></td><td><code>IP</code>地址配置文件</td></tr><tr><td><code>X11</code></td><td><code>X-Windows</code>配置文件</td></tr><tr><td><code>rsyslog.conf</code></td><td>系统日志输出配置文件</td></tr><tr><td><code>sysctl.conf</code></td><td>系统内核参数配置文件，<code>CentOS7.x</code>移到了<code>/usr/lib/sysctl.d</code>目录下，但该配置文件依然存在，并且有效</td></tr><tr><td><code>services</code></td><td>定义系统服务与端口的对应关系</td></tr><tr><td><code>profile</code></td><td>系统全局环境变量配置文件</td></tr></tbody></table><h4 id="2-1-2-2、-usr目录"><a href="#2-1-2-2、-usr目录" class="headerlink" title="2.1.2.2、/usr目录"></a>2.1.2.2、/usr目录</h4><p>主要存放应用程序和文件。此目录空间最大，默认软件包会安装在此目录下。</p><table><thead><tr><th>文件或目录</th><th>主要作用</th></tr></thead><tbody><tr><td><code>lib64</code>和<code>local/lib64</code></td><td>64位操作系统的函数库目录</td></tr><tr><td><code>src</code></td><td>包含所有程序源代码，主要是<code>Linux</code>核心程序源代码</td></tr><tr><td><code>local</code></td><td>主要存放本地安装的软件和其他文件</td></tr><tr><td><code>bin</code>和<code>local/bin</code></td><td>使用者可执行的二进制文件目录</td></tr><tr><td><code>lib</code>和<code>local/lib</code></td><td>32位操作系统的函数库目录</td></tr><tr><td><code>sbin</code>和<code>local/sbin</code></td><td>存放系统管理员才能执行的命令</td></tr><tr><td><code>include</code></td><td>包含C语言的头文件，扩展名大多是<code>.h</code></td></tr><tr><td><code>share</code></td><td>存放共享文件和数据库</td></tr></tbody></table><h4 id="2-1-2-3、-var目录"><a href="#2-1-2-3、-var目录" class="headerlink" title="2.1.2.3、/var目录"></a>2.1.2.3、/var目录</h4><p>主要存放系统运行和软件运行的日志信息</p><table><thead><tr><th>文件或目录</th><th>主要作用</th></tr></thead><tbody><tr><td><code>log</code></td><td>存放各种应用程序的日志文件，需要定期清理</td></tr><tr><td><code>lib</code></td><td>存放系统正常运行时需要改变的库文件</td></tr><tr><td><code>spool</code></td><td>是<code>mail，new</code>，打印机队列和其他队列的输入，输出的缓冲目录</td></tr><tr><td><code>tmp</code></td><td>该目录可以比<code>/tmp</code>存放更大的文件</td></tr><tr><td><code>lock</code></td><td>存放被锁定的文件</td></tr><tr><td><code>local</code></td><td>存放<code>/usr/local</code>中所安装程序的可变数据</td></tr><tr><td><code>account</code></td><td>存放已经格式化的<code>man</code>页</td></tr><tr><td><code>run</code></td><td>包含到下次系统启动前的系统信息</td></tr></tbody></table><h4 id="2-1-2-4、-dev目录"><a href="#2-1-2-4、-dev目录" class="headerlink" title="2.1.2.4、/dev目录"></a>2.1.2.4、/dev目录</h4><p>包含系统所有的设备文件</p><table><thead><tr><th>设备名</th><th>具体含义</th></tr></thead><tbody><tr><td><code>fd*</code></td><td>软盘设备</td></tr><tr><td><code>audio*</code></td><td>声卡设备</td></tr><tr><td><code>hd*</code></td><td><code>IDE</code>硬盘设备</td></tr><tr><td><code>sd*</code></td><td><code>SCSI</code>设备，<code>sda</code>代表第一块<code>SCSI</code>硬盘</td></tr><tr><td><code>lp*</code></td><td>并行串口</td></tr><tr><td><code>pty*</code></td><td>网络中登录的远程终端设备</td></tr><tr><td><code>ram*</code></td><td>系统内存</td></tr><tr><td><code>tty*</code></td><td>虚拟/字符控制台，我的<code>CentOS7.x</code>系统上有64个<code>tty*</code>文件</td></tr><tr><td><code>ttyS*</code></td><td>串行端口，类似<code>Windows</code>下的<code>COM*</code></td></tr><tr><td><code>console</code></td><td>系统控制台，即桌面控制台</td></tr><tr><td><code>null</code></td><td>输出空设备</td></tr></tbody></table><h4 id="2-1-2-5、-proc目录"><a href="#2-1-2-5、-proc目录" class="headerlink" title="2.1.2.5、/proc目录"></a>2.1.2.5、/proc目录</h4><p><strong>虚拟目录</strong>，存在于内存中，里面所有信息都是内存的映射，可以获取进程的有用信息，也可以在系统运行中修改内核参数。</p><table><thead><tr><th>文件或目录</th><th>说明</th></tr></thead><tbody><tr><td><code>cpuinfo</code></td><td>系统<code>CPU</code>的有关信息，包括<code>CPU</code>名称，型号，类型等</td></tr><tr><td><code>meminfo</code></td><td>内存信息，包括物理内存和虚拟内存</td></tr><tr><td><code>filesystems</code></td><td>当前系统支持的文件系统类型</td></tr><tr><td><code>devices</code></td><td>内核中的设备驱动程序列表</td></tr><tr><td><code>net</code></td><td>网络使用协议及状态信息</td></tr><tr><td><code>dma</code></td><td>当前使用的<code>dma</code>通道</td></tr><tr><td><code>ioports</code></td><td>当前使用的<code>IO</code>端口</td></tr><tr><td><code>modules</code></td><td>当前系统加载的内核模块信息</td></tr><tr><td><code>stat</code></td><td>系统的各种状态信息</td></tr><tr><td><code>uptime</code></td><td>系统总的启动时间和空闲时间，以秒为单位</td></tr><tr><td><code>version</code></td><td>内核版本信息</td></tr><tr><td><code>loadavg</code></td><td>系统平均负载</td></tr><tr><td><code>kcore</code></td><td>系统物理内存的映像</td></tr><tr><td><code>kmsg</code></td><td>内核输出信息，同时输出到<code>rsyslog</code></td></tr></tbody></table><h4 id="2-1-2-6、-boot目录"><a href="#2-1-2-6、-boot目录" class="headerlink" title="2.1.2.6、/boot目录"></a>2.1.2.6、/boot目录</h4><p>存放启动<code>Linux</code>的一些核心文件，包含一些<strong>镜像文件和链接文件</strong>，如果遭到破坏，系统将无法启动。</p><h4 id="2-1-2-7、-bin和-sbin目录"><a href="#2-1-2-7、-bin和-sbin目录" class="headerlink" title="2.1.2.7、/bin和/sbin目录"></a>2.1.2.7、/bin和/sbin目录</h4><p>都是存放<strong>可执行的二进制文件</strong></p><ul><li><code>/bin</code>存放我们经常使用的<code>Linux</code>命令，如文件操作命令<code>ls，cd，cp</code>；文本编辑命令<code>vi，ed</code>；磁盘操作命令<code>dd，df，mount</code>等</li><li><code>/sbin</code>中的<code>s</code>是<code>super user</code>的意思，只有<code>root</code>用户才能执行这些命令，如磁盘检查修复命令<code>fcsk</code>，磁盘分区命令<code>fdisk</code>，创建文件系统命令<code>mkfs</code>，关机命令<code>shutdown</code>，初始化系统命令<code>init</code>等</li></ul><h4 id="2-1-2-8、-home目录"><a href="#2-1-2-8、-home目录" class="headerlink" title="2.1.2.8、/home目录"></a>2.1.2.8、/home目录</h4><p>用户的工作目录。每个用户都有一个自己的目录，以<strong>用户账号</strong>命名</p><h4 id="2-1-2-9、-lib目录"><a href="#2-1-2-9、-lib目录" class="headerlink" title="2.1.2.9、/lib目录"></a>2.1.2.9、/lib目录</h4><p>存放<strong>共享程序库和映像文件</strong>，可供多个程序使用。</p><h4 id="2-1-2-10、-root目录"><a href="#2-1-2-10、-root目录" class="headerlink" title="2.1.2.10、/root目录"></a>2.1.2.10、/root目录</h4><p>是<code>root</code>用户默认的主目录</p><h4 id="2-1-2-11、-run和-mnt目录"><a href="#2-1-2-11、-run和-mnt目录" class="headerlink" title="2.1.2.11、/run和/mnt目录"></a>2.1.2.11、/run和/mnt目录</h4><p><code>/run</code>是外在设备的<strong>自动挂载</strong>目录，<code>CentOS7.x</code>以前是<code>/media</code>目录</p><p><code>/mnt</code>是<strong>手动挂载</strong>移动设备的目录</p><h4 id="2-1-2-12、-tmp目录"><a href="#2-1-2-12、-tmp目录" class="headerlink" title="2.1.2.12、/tmp目录"></a>2.1.2.12、/tmp目录</h4><p>存放临时文件，可随时删除</p><h2 id="2-2、系统核心组成"><a href="#2-2、系统核心组成" class="headerlink" title="2.2、系统核心组成"></a>2.2、系统核心组成</h2><p>最核心的就是<code>Linux</code>内核，它由5个部分组成，分别是<strong>内存管理，进程管理，进程间通信，虚拟文件系统和网络接口</strong></p><h3 id="2-2-1、内存管理"><a href="#2-2-1、内存管理" class="headerlink" title="2.2.1、内存管理"></a>2.2.1、内存管理</h3><p>合理有效地管理系统的物理内存，快速响应各个子系统对内存分配的请求，<strong>支持虚拟内存</strong>。</p><h3 id="2-2-2、进程管理"><a href="#2-2-2、进程管理" class="headerlink" title="2.2.2、进程管理"></a>2.2.2、进程管理</h3><p>进程调度器基于优先级的调度算法来对<strong>时间片的分配</strong>进行管理，在多个进程间快速切换，可以达到一个<code>CPU</code>多个程序同时运行的效果。实际上，同一时间只有一个进程在运行（一个<code>CPU</code>）。</p><h3 id="2-2-3、进程间通信"><a href="#2-2-3、进程间通信" class="headerlink" title="2.2.3、进程间通信"></a>2.2.3、进程间通信</h3><p>控制不同进程之间在用户空间的<strong>同步、数据共享和交换</strong>。</p><h3 id="2-2-4、虚拟文件系统"><a href="#2-2-4、虚拟文件系统" class="headerlink" title="2.2.4、虚拟文件系统"></a>2.2.4、虚拟文件系统</h3><p>包括逻辑文件系统和设备驱动程序。</p><ul><li><strong>逻辑文件系统</strong>：<code>Linux</code>支持的文件系统，如<code>ext2，ext3，ext4，xfs，fat</code>等</li><li><strong>设备驱动程序</strong>：为每一种硬件控制器编写的设备驱动程序模块</li></ul><h3 id="2-2-5、网络接口"><a href="#2-2-5、网络接口" class="headerlink" title="2.2.5、网络接口"></a>2.2.5、网络接口</h3><p>提供了对各种网络标准的实现和各种网络硬件的支持。一般分为网络协议和网络设备驱动程序。</p><ul><li><strong>网络协议</strong>：负责实现每一种可能的网络传输协议。</li><li><strong>网络设备驱动程序</strong>：主要负责与硬件设备进行通信。</li></ul><h1 id="3、运行机制介绍"><a href="#3、运行机制介绍" class="headerlink" title="3、运行机制介绍"></a>3、运行机制介绍</h1><h2 id="3-1、Linux初始化init系统"><a href="#3-1、Linux初始化init系统" class="headerlink" title="3.1、Linux初始化init系统"></a>3.1、Linux初始化init系统</h2><h3 id="3-1-1、初始化init系统"><a href="#3-1-1、初始化init系统" class="headerlink" title="3.1.1、初始化init系统"></a>3.1.1、初始化init系统</h3><p><code>Linux</code>启动：<code>BIOS</code>-&gt;内核初始化</p><p>内核初始化最后一步是启动<code>PID</code>为1的<code>init</code>进程，该进程负责产生其他所有的用户进程。但是需要一个系统和管理init进程的行为，该系统就是<code>init</code>系统。</p><p><code>CentOS7.x</code>之前都采用的是<code>sysvinit</code>，<code>CentOS7.x</code>开始采用<code>systemd</code>，<code>ubuntu</code>采用的是<code>upstart</code></p><h3 id="3-1-2、系统关机过程"><a href="#3-1-2、系统关机过程" class="headerlink" title="3.1.2、系统关机过程"></a>3.1.2、系统关机过程</h3><h4 id="3-1-2-1、shutdown命令"><a href="#3-1-2-1、shutdown命令" class="headerlink" title="3.1.2.1、shutdown命令"></a>3.1.2.1、shutdown命令</h4><p>必须由超级用户才能执行，该命令执行后，会以广播的形式通知正在工作的用户，系统将在指定时间内关闭。当指定时间已到时，<code>shutdown</code>发送信号给<code>init</code>进程改变系统运行级别。关机就执行<code>init 0</code>，重启就执行<code>init 6</code></p><ul><li><p>立即重启</p><pre class="line-numbers language-shell"><code class="language-shell">shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>立即关机</p><pre class="line-numbers language-shell"><code class="language-shell">shutdown -h now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设定时间关机</p><pre class="line-numbers language-shell"><code class="language-shell">shutdown +5 "system will shutdown after 5 mins"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="3-1-2-2、halt命令"><a href="#3-1-2-2、halt命令" class="headerlink" title="3.1.2.2、halt命令"></a>3.1.2.2、halt命令</h4><p><code>halt</code>相当于<code>shutdown -h</code></p><pre class="line-numbers language-shell"><code class="language-shell">halt [-finp]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-1-2-3、reboot命令"><a href="#3-1-2-3、reboot命令" class="headerlink" title="3.1.2.3、reboot命令"></a>3.1.2.3、reboot命令</h4><p>系统重启</p><h4 id="3-1-2-4、init命令"><a href="#3-1-2-4、init命令" class="headerlink" title="3.1.2.4、init命令"></a>3.1.2.4、init命令</h4><p>用于系统不同运行级别之间的转换</p><p>0：关机模式</p><p>1：单用户模式，只有管理员能登陆</p><p>6：重启模式</p><h1 id="4、系统服务管理工具systemd"><a href="#4、系统服务管理工具systemd" class="headerlink" title="4、系统服务管理工具systemd"></a>4、系统服务管理工具systemd</h1><p><code>systemd</code>提供了一个很强大的命令行工具<code>systemctl</code>，可以用来查看、启动、停止、重启、启用或禁用系统服务。</p><h2 id="4-1、启动、停止、重启服务"><a href="#4-1、启动、停止、重启服务" class="headerlink" title="4.1、启动、停止、重启服务"></a>4.1、启动、停止、重启服务</h2><p>在<code>root</code>账户下：</p><ul><li>启动</li></ul><pre class="line-numbers language-shell"><code class="language-shell">systemctl start httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就启动了httpd服务（Apache Http服务器）</p><ul><li><p>停止</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl stop httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="4-2、查看、禁止、启用服务"><a href="#4-2、查看、禁止、启用服务" class="headerlink" title="4.2、查看、禁止、启用服务"></a>4.2、查看、禁止、启用服务</h2><ul><li><p>开机启动</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl enable httpd.service    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭开机启动</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl disable httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看服务运行状态</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl status httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="4-3、电源管理命令"><a href="#4-3、电源管理命令" class="headerlink" title="4.3、电源管理命令"></a>4.3、电源管理命令</h2><ul><li><p>关闭系统</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl poweroff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启系统</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入待机模式</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl suspend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入休眠模式</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl hibernate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入混合休眠模式</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl hybrid-sleep<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="5、参考文献"><a href="#5、参考文献" class="headerlink" title="5、参考文献"></a>5、参考文献</h1><p><a href="https://book.douban.com/subject/26758194/">高俊峰《循序渐进Linux》第二版</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码分析</title>
      <link href="2021/03/20/arraylist-yuan-ma-fen-xi/"/>
      <url>2021/03/20/arraylist-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="1、概览"><a href="#1、概览" class="headerlink" title="1、概览"></a>1、概览</h1><h2 id="1-1、基本特点"><a href="#1-1、基本特点" class="headerlink" title="1.1、基本特点"></a>1.1、基本特点</h2><p><code>ArrayList</code>相当于一个动态数组，容量可以动态增长，继承自抽象类<code>AbstractList</code>，实现了<code>List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</code>接口，因此具有<code>List</code>的一些特性，支持<strong>随机访问，克隆和序列化</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>            <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-1、标记接口"><a href="#1-1-1、标记接口" class="headerlink" title="1.1.1、标记接口"></a>1.1.1、标记接口</h3><p>一般我们认为<strong>没有任何方法</strong>的接口是标记接口。这并不是<code>Java</code>的一种语法，而是一种<strong>设计理念</strong>，用来标记类提供的某项功能。</p><h3 id="1-1-2、RandomAccess-Cloneable-java-io-Serializable"><a href="#1-1-2、RandomAccess-Cloneable-java-io-Serializable" class="headerlink" title="1.1.2、RandomAccess, Cloneable, java.io.Serializable"></a>1.1.2、RandomAccess, Cloneable, java.io.Serializable</h3><p>这三个接口我们去看源码会发现里面什么方法都没有，因此它们都是标记接口，分别用来标记实现类支持随机访问，克隆和序列化。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RandomAccess</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2、线程安全型"><a href="#1-2、线程安全型" class="headerlink" title="1.2、线程安全型"></a>1.2、线程安全型</h2><p>对<code>ArrayList</code>的修改操作，我们可以分为两种：</p><ul><li><p>一种是对数组元素<strong>位置的调整</strong>，比如添加删除元素</p></li><li><p>另一种是对数组<strong>元素的修改</strong>，比如修改某个元素。这在多线程环境下是无法保证原子性的，而<code>ArrayList</code>又没有采用加锁机制来保证操作的原子性，因此是线程不安全的。如果你想要在多线程环境下使用这种结构，建议用<code>Vector</code>，它就相当于一个线程安全的<code>ArrayList</code>。</p></li></ul><h1 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h1><h2 id="2-1、DEFAULT-CAPACITY"><a href="#2-1、DEFAULT-CAPACITY" class="headerlink" title="2.1、DEFAULT_CAPACITY"></a>2.1、DEFAULT_CAPACITY</h2><p>默认初始化容量<code>DEFAULT_CAPACITY</code>为10</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-2、EMPTY-ELEMENTDATA"><a href="#2-2、EMPTY-ELEMENTDATA" class="headerlink" title="2.2、EMPTY_ELEMENTDATA"></a>2.2、EMPTY_ELEMENTDATA</h2><p><code>EMPTY_ELEMENTDATA</code>是一个静态常量的空数组对象，用来初始化<code>elementData</code></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-3、DEFAULTCAPACITY-EMPTY-ELEMENTDATA"><a href="#2-3、DEFAULTCAPACITY-EMPTY-ELEMENTDATA" class="headerlink" title="2.3、DEFAULTCAPACITY_EMPTY_ELEMENTDATA"></a>2.3、DEFAULTCAPACITY_EMPTY_ELEMENTDATA</h2><p><code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>也是一个静态常量，也是用来初始化<code>elementData</code>，关于它和<code>EMPTY_ELEMENTDATA</code>不同的地方，后面扩容的部分会谈到。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-4、elementData"><a href="#2-4、elementData" class="headerlink" title="2.4、elementData"></a>2.4、elementData</h2><p>保存数组元素的对象数组，并且加上了<code>transient</code>关键字，表示该属性不使用<code>Java</code>默认序列化机制进行序列化</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// non-private to simplify nested class access</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-5、size"><a href="#2-5、size" class="headerlink" title="2.5、size"></a>2.5、size</h2><p>保存数组当前<strong>实际的大小</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-6、MAX-ARRAY-SIZE"><a href="#2-6、MAX-ARRAY-SIZE" class="headerlink" title="2.6、MAX_ARRAY_SIZE"></a>2.6、MAX_ARRAY_SIZE</h2><p>静态常量，定义数组容量的最大值，在扩容的时候会用到。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-7、modCount"><a href="#2-7、modCount" class="headerlink" title="2.7、modCount"></a>2.7、modCount</h2><p><code>modCount</code> 用来记录 <code>ArrayList</code> 结构发生变化的次数，如果一个动作前后 <code>modCount</code> 的值不相等，说明 <code>ArrayList</code> 被其它线程修改了</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-8、serialVersionUID"><a href="#2-8、serialVersionUID" class="headerlink" title="2.8、serialVersionUID"></a>2.8、serialVersionUID</h2><p>实现了<code>Serializable</code>接口的类如果我们不显示的指定<code>serialVersionUID</code>的话，那么会基于类的属性方法等参数生成一个默认的<code>serialVersionUID</code>，如果类的属性或方法有所改动，那么这个默认的<code>serialVersionUID</code>也会随之改动。</p><p>所以<strong>如果我们不显示的指定serialVersionUID的话，只要类有所改动serialVersionUID就会变化，从而导致反序列化失败</strong>。</p><p>对于<code>serialVersionUID</code>的显式赋值，一般情况下直接设置成<code>1L</code>就行了，当然了也可以使用<code>IDEA</code>帮我们自动生成的<code>serialVersionUID</code>作为默认值。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 8683452581122892189L<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3、构造方法"><a href="#3、构造方法" class="headerlink" title="3、构造方法"></a>3、构造方法</h1><h2 id="3-1、无参构造"><a href="#3-1、无参构造" class="headerlink" title="3.1、无参构造"></a>3.1、无参构造</h2><p>如果是无参构造，就会初始化一个默认容量为10的空数组</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-2、带初始化容量的构造"><a href="#3-2、带初始化容量的构造" class="headerlink" title="3.2、带初始化容量的构造"></a>3.2、带初始化容量的构造</h2><p>如果是传初始容量进行构造，则会分三种情况，如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会发现，当传入参数<code>initialCapacity</code>为0时，会将<code>elementData</code>初始化为<code>EMPTY_ELEMENTDATA</code>空数组，上面的无参构造是初始化为<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>，对于两者的区别，后面的扩容会进行分析。</p><h2 id="3-3、传一个集合构造"><a href="#3-3、传一个集合构造" class="headerlink" title="3.3、传一个集合构造"></a>3.3、传一个集合构造</h2><p>如果是给传一个集合进行构造，会分两种情况进行讨论</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// replace with empty array.</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果集合为空，则也是会将<code>elementData</code>初始化为<code>EMPTY_ELEMENTDATA</code>，如果集合不为空，我们注意到会判断<code>elementData.getClass() != Object[].class</code></p><p>首先我们查看<code>Collection</code>接口的<code>toArray</code>方法，可以发现它返回一个Object对象数组</p><pre class="line-numbers language-java"><code class="language-java">    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是为什么它的<code>getClass()</code>不一定等于<code>Object[].class</code>呢？我们接着查看下<code>getClass()</code>的源码，可以发现<code>getClass()</code>是返回该对象的运行时的类，而<code>class</code>获得的是类型类即<code>Object[]</code>类型。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//@return The {@code Class} object that represents the runtime class of this object.   </span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们来看看下面这段代码</p><pre class="line-numbers language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            User<span class="token punctuation">[</span><span class="token punctuation">]</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                    <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"maco"</span><span class="token punctuation">,</span> <span class="token string">"maco@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"kitty"</span><span class="token punctuation">,</span> <span class="token string">"kitty@163.com"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> users<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// class [Ltest.User;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>objects<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                objects <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> objects<span class="token punctuation">.</span>length<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// class [Ljava.lang.Object;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码运行结果如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210321100035967.png" alt="image-20210321100035967"></p><p>所以如果我们的<code>Collection</code>是<code>Collection&lt;User&gt;</code>那么<code>c.toArray().getClass()</code>将返回<code>User[]</code>类型，这样会导致后面我们插入<code>Object</code>对象会报错，因此我们有必要进行判断，如果不是<code>Object[]</code>类型的话，就调用<code>Arrays.copyOf</code>方法进行拷贝，将<code>elementData</code>转成<code>Object[]</code>类型，下面我们来看看<code>Arrays.copyOf</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span>U<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>U<span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> newType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        T<span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>newType <span class="token operator">==</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>newType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                         Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先会根据<code>newType</code>和<code>newLength</code>初始化一个<code>copy</code>数组，用来存放从<code>original</code>拷贝过来的数组，并返回给调用者。其实上述三目运算符应该是可以省略的，即我们可以直接写成</p><pre class="line-numbers language-java"><code class="language-java">T<span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>newType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为<code>Object[]</code>类型的<code>getComponentType</code>方法是<code>Object</code>，最后两者的初始化基本是相同的。至于作者为什么这么写，我想应该是针对<code>Object[]</code>初始化的一种小优化吧，毕竟<code>Array.newInstance</code>会调用本地<code>newArray</code>方法进行初始化相对比较耗时。</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> componentType<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>        <span class="token keyword">throws</span> NegativeArraySizeException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">newArray</span><span class="token punctuation">(</span>componentType<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> Object <span class="token function">newArray</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> componentType<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>        <span class="token keyword">throws</span> NegativeArraySizeException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4、关键方法"><a href="#4、关键方法" class="headerlink" title="4、关键方法"></a>4、关键方法</h1><h2 id="4-1、trimToSize"><a href="#4-1、trimToSize" class="headerlink" title="4.1、trimToSize"></a>4.1、trimToSize</h2><p>该方法用来最小化<code>ArrayList</code>实例存储空间，将容器大小调整为当前元素所占用的大小。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token operator">?</span> EMPTY_ELEMENTDATA              <span class="token operator">:</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到这里<code>size==0</code>时，我们是将<code>elementData</code>初始化为<code>EMPTY_ELEMENTDATA</code>，而非<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>。然后我们看看<code>Arrays.copyOf(elementData, size)</code>的源码</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> newLength<span class="token punctuation">,</span> original<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们会发现它调用了另外一个<code>copyOf</code>方法，这个方法前面<code>ArrayList</code>的容器构造方法提到过，只不过这里我们的第三个参数就是第一个参数的类型，因为最终都是调用底层<code>System.arraycopy()</code>方法，我们可以来看看<code>System.arraycopy()</code>源码注释</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** If the &lt;code>src&lt;/code> and &lt;code>dest&lt;/code> arguments refer to the     * same array object, then the copying is performed as if the     * components at positions &lt;code>srcPos&lt;/code> through     * &lt;code>srcPos+length-1&lt;/code> were first copied to a temporary     * array with &lt;code>length&lt;/code> components and then the contents of     * the temporary array were copied into positions     * &lt;code>destPos&lt;/code> through &lt;code>destPos+length-1&lt;/code> of the     * destination array.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致意思就是，如果<code>src</code>和<code>dest</code>是同一个数组的引用时，在拷贝的时候，会先将<code>src</code>数组拷贝<code>length</code>长度到一个<strong>临时数组</strong>，然后再将临时数组的内容拷贝到<code>dest</code>数组的<code>destPos</code>位置，而如果<code>src</code>和<code>dest</code>指向不同数组的话，就直接进行拷贝</p><h2 id="4-2、添加元素与扩容"><a href="#4-2、添加元素与扩容" class="headerlink" title="4.2、添加元素与扩容"></a>4.2、添加元素与扩容</h2><h3 id="4-2-1、在最后添加一个元素"><a href="#4-2-1、在最后添加一个元素" class="headerlink" title="4.2.1、在最后添加一个元素"></a>4.2.1、在最后添加一个元素</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现首先会调用<code>ensureCapacityInternal</code>保证数组有足够空间容纳这一个元素，我们来看看<code>ensureCapacityInternal</code>源码</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们发现它传给<code>ensureExplicitCapacity</code>的<code>minCapacity</code>并不是形参<code>minCapacity</code>，而是通过<code>calculateCapacity</code>方法计算之后的<code>minCapacity</code>，我们来看看这个<code>calculateCapacity</code>方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会发现当<code>elementData</code>为<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>空数组的时候，会返回<code>DEFAULT_CAPACITY</code>和<code>minCapacity</code>的较大值，比如我们现在就添加一个元素，那么此时<code>minCapacity</code>就是1，那么方法就会返回<code>DEFAULT_CAPACITY</code>即10，接着就按照<code>DEFAULT_CAPACITY</code>进行扩容，而如果<code>elementData</code>为<code>EMPTY_ELEMENTDATA</code>的时候那么就会返回1，就会只扩充1个元素容量。这里就体现出了两者的差别。</p><p>然后我们来看看<code>ensureExplicitCapacity</code>方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>elementData.length &gt;= minCapacity</code>的话，就表示我们当前<code>elementData</code>足够容纳新添加的元素，因此就不用扩容；否则，我们就会调用<code>grow</code>方法进行扩容。</p><p>下面我们来看看<code>grow</code>方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现<code>newCapacity</code>先尝试扩大为<code>oldCapacity</code>的<strong>1.5倍</strong>，如果还不够的话就直接扩大到<code>minCapacity</code>。然后需要判断下<code>newCapacity</code>是否超出<code>MAX_ARRAY_SIZE</code>的大小，如果是，需要调用<code>hugeCapacity</code>方法进行容量调整</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>            Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>            MAX_ARRAY_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后调用<code>Arrays.copyOf</code>方法进行数组拷贝</p><h3 id="4-2-2、在指定位置添加一个元素"><a href="#4-2-2、在指定位置添加一个元素" class="headerlink" title="4.2.2、在指定位置添加一个元素"></a>4.2.2、在指定位置添加一个元素</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先会调用<code>rangeCheckForAdd</code>方法进行下标范围检查</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后调用<code>ensureCapacityInternal</code>方法确保至少有<code>size + 1</code>的空间，接着会调用<code>System.arraycopy</code>方法进行数组移位（将<code>index</code>后面的元素往后移一位），然后再将<code>element</code>插到<code>index</code>的位置，数组的大小加一。</p><h3 id="4-2-3、在最后添加一个集合元素"><a href="#4-2-3、在最后添加一个集合元素" class="headerlink" title="4.2.3、在最后添加一个集合元素"></a>4.2.3、在最后添加一个集合元素</h3><p>该方法用来添加集合c里面的所有元素，所以至少需要保证容量至少要有<code>size + numNew</code>即两者的<code>size</code>大小之和，然后调用 <code>System.arraycopy</code> 将要添加的集合中的元素复制到原集合已有元素的后面</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3、删除元素"><a href="#4-3、删除元素" class="headerlink" title="4.3、删除元素"></a>4.3、删除元素</h2><h3 id="4-3-1、删除指定索引位置的元素"><a href="#4-3-1、删除指定索引位置的元素" class="headerlink" title="4.3.1、删除指定索引位置的元素"></a>4.3.1、删除指定索引位置的元素</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要移动的元素数量</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先会做下标范围检查</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后计算需要移动的元素数量，如果<code>index==size-1</code>，即<code>numMoved</code>为0，不需要移动。否则调用<code>System.arraycopy</code>方法将<code>numMoved</code>个元素往前移一位</p><p>最后，将<code>elementData</code>之前最后一个元素的位置赋值为<code>null</code>，建议<code>GC</code>进行回收</p><h3 id="4-3-2、删除指定对象"><a href="#4-3-2、删除指定对象" class="headerlink" title="4.3.2、删除指定对象"></a>4.3.2、删除指定对象</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据o是否为<code>null</code>分两种情况，然后遍历数组进行查找，如果找到了就调用<code>fastRemove</code>方法进行删除，返回<code>true</code>；遍历完没找到就返回<code>false</code>。</p><p>看完<code>fastRemove</code>源码后，我们发现它和<code>remove(int)</code>方法几乎完全相同，只是没做<code>rangeCheck</code>，没返回删除的元素值。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-3、删除集合c里的所有元素"><a href="#4-3-3、删除集合c里的所有元素" class="headerlink" title="4.3.3、删除集合c里的所有元素"></a>4.3.3、删除集合c里的所有元素</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Objects类的requireNonNull静态方法定义如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">requireNonNull</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即当集合c为<code>null</code>时，会抛出空指针异常。</p><p>然后调用<code>batchRemove</code>方法进行批量删除，我们来重点看看<code>batchRemove</code>方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">boolean</span> complement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//r用来表示当前下标，w用来表示需要保留的元素数量</span>        <span class="token keyword">boolean</span> modified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> complement<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断elementData[r]是否需要保留</span>                    elementData<span class="token punctuation">[</span>w<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Preserve behavioral compatibility with AbstractCollection,</span>            <span class="token comment" spellcheck="true">// even if c.contains() throws.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//可能是elementData[r]为null，c.contains(elementData[r])方法抛出了空指针异常,将r后面的元素都拷贝到w后面</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> r<span class="token punctuation">,</span>                                 elementData<span class="token punctuation">,</span> w<span class="token punctuation">,</span>                                 size <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                w <span class="token operator">+=</span> size <span class="token operator">-</span> r<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要保留的元素数量增加size-r</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//表明有元素被删除了，将modified赋值为true</span>                <span class="token comment" spellcheck="true">// clear to let GC do its work</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将w之后的元素都设为null，建议GC进行回收</span>                    elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                modCount <span class="token operator">+=</span> size <span class="token operator">-</span> w<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除的元素数量为size-w</span>                size <span class="token operator">=</span> w<span class="token punctuation">;</span>                modified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> modified<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-4、删除除集合c里的所有元素"><a href="#4-3-4、删除除集合c里的所有元素" class="headerlink" title="4.3.4、删除除集合c里的所有元素"></a>4.3.4、删除除集合c里的所有元素</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和<code>removeAll</code>类似，只是<code>retainAll</code>是保留集合c里面的元素，其他的全部删除。</p><h2 id="4-4、遍历"><a href="#4-4、遍历" class="headerlink" title="4.4、遍历"></a>4.4、遍历</h2><h3 id="4-4-1、迭代器"><a href="#4-4-1、迭代器" class="headerlink" title="4.4.1、迭代器"></a>4.4.1、迭代器</h3><p>迭代器有两个，分别是<code>Itr</code>和<code>ListItr</code> ，两个都是<code>ArrayList</code>的内部类，我们来看看两者的类结构图</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210321135714119.png" alt="image-20210321135714119"></p><ul><li><strong>ListItr 有 add()</strong> 方法，可以向<code>List</code>中添加对象，而 Itr 不能</li><li><code>ListItr</code> 和 Itr 都有 <code>hasNext()</code> 和 <code>next()</code> 方法，可以实现顺序向后遍历，但是 <strong>ListItr 有 hasPrevious() 和 previous() 方法，可以实现逆向遍历</strong>。Itr 就不可以。</li><li><code>ListItr</code> 可以定位当前的索引位置，<strong>nextIndex() 和 previousIndex()</strong> 可以实现。Itr 没有此功能。</li><li><strong>都可实现删除对象</strong>，但是 <strong>ListItr 可以实现对象的修改，set() 方法可以实现</strong>。<code>Iierator</code> 仅能遍历，不能修改</li></ul><h3 id="4-4-2、forEach"><a href="#4-4-2、forEach" class="headerlink" title="4.4.2、forEach"></a>4.4.2、forEach</h3><p><code>forEach()</code> 方法与 <a href="https://www.runoob.com/java/java-arraylist-foreach.html">Java-foreach循环</a> 不同。</p><p> 前者用于遍历动态数组中每一个元素并执行特定操作，而后者用于遍历数组中的每个元素</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">final</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>action</code>是对每个元素执行的操作，一般是一个<code>lambda</code>表达式</p><p>我们看下面的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个数组</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 往数组中添加元素</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ArrayList: "</span> <span class="token operator">+</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 所有元素乘以 10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"更新 ArrayList: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 将 lambda 表达式传递给 forEach</span>        numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            e <span class="token operator">=</span> e <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码输出为：</p><pre class="line-numbers language-java"><code class="language-java">ArrayList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>更新 ArrayList<span class="token operator">:</span> <span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">40</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上实例中，我们将匿名函数 <code>lambda</code> 的表达式作为 <code>forEach()</code> 方法的参数传入，<code>lambda</code> 表达式将动态数组中的每个元素乘以 10，然后输出结果。</p><h2 id="4-5、序列化"><a href="#4-5、序列化" class="headerlink" title="4.5、序列化"></a>4.5、序列化</h2><p>通常我们序列化一个对象的目的是为了可以反序列化回来，使用场景有很多，比如说：</p><ul><li>把对象保存到文件中，然后可以再恢复</li><li>使用网络<code>IO</code>传递一个对象</li><li>因为<code>memcached</code>不支持存储对象，把对象序列化后存到<code>memcached</code>中，用的时候再序列化回来</li></ul><p>我们会发现<code>ArrayList</code>有两个字段用<code>transient</code>关键字进行了修饰，让其不被序列化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是为什么最重要的<code>elementData</code>都不让序列化呢？因为<code>ArrayList</code>不想用<code>Java</code>默认序列化机制来序列化<code>elementData</code>，因为这可能造成空间浪费，降低序列化和反序列化的效率。对此，<code>ArrayList</code>自定义了序列化和反序列化的策略</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Write out element count, and any hidden stuff</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写当前类的 non-static 和 non-transient 字段到s输出流中</span>        s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写入数组的实际大小，而非容量</span>        s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只序列化数组的前 size 个对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化方法如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从输入流s中读取当前类的 non-static 和 non-transient 字段，包括size</span>        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read in capacity</span>        s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ignored</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// be like clone(), allocate array based upon size not capacity</span>            <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            SharedSecrets<span class="token punctuation">.</span><span class="token function">getJavaOISAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkArray</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> elementData<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//依次读取对象</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看一下<code>ObjectStreamClass</code>类的私有构造方法的部分源码：</p><pre class="line-numbers language-java"><code class="language-java">                  <span class="token keyword">if</span> <span class="token punctuation">(</span>externalizable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        cons <span class="token operator">=</span> <span class="token function">getExternalizableConstructor</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        cons <span class="token operator">=</span> <span class="token function">getSerializableConstructor</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>                        writeObjectMethod <span class="token operator">=</span> <span class="token function">getPrivateMethod</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> <span class="token string">"writeObject"</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ObjectOutputStream<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                            Void<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        readObjectMethod <span class="token operator">=</span> <span class="token function">getPrivateMethod</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> <span class="token string">"readObject"</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ObjectInputStream<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                            Void<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        readObjectNoDataMethod <span class="token operator">=</span> <span class="token function">getPrivateMethod</span><span class="token punctuation">(</span>                            cl<span class="token punctuation">,</span> <span class="token string">"readObjectNoData"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Void<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        hasWriteObjectData <span class="token operator">=</span> <span class="token punctuation">(</span>writeObjectMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面这段源码中可以看出，在序列化（反序列化）的时候，<code>ObjectOutputStream</code>（<code>ObjectInputStream</code>）会寻找目标类中的私有的<code>writeObject</code>（<code>readObject</code>）方法，赋值给变量<code>writeObjectMethod</code>（<code>readObjectMethod</code>）。</p><p>再来看看<code>ObjectOutputStream</code>中的最终序列化对象的方法<code>writeSerialData</code>，如果<code>writeObjectMethod != null</code>（目标类中定义了私有的<code>writeObject</code>方法），那么将调用目标类中的<code>writeObject</code>方法，如果如果<code>writeObjectMethod == null</code>，那么将调用默认的<code>defaultWriteFields</code>方法来读取目标类中的属性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeSerialData</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> ObjectStreamClass desc<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    ObjectStreamClass<span class="token punctuation">.</span>ClassDataSlot<span class="token punctuation">[</span><span class="token punctuation">]</span> slots <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getClassDataLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ObjectStreamClass slotDesc <span class="token operator">=</span> slots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>desc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slotDesc<span class="token punctuation">.</span><span class="token function">hasWriteObjectMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            slotDesc<span class="token punctuation">.</span><span class="token function">invokeWriteObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">defaultWriteFields</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> slotDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">hasWriteObjectMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">requireInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>writeObjectMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-6、fail-fast"><a href="#4-6、fail-fast" class="headerlink" title="4.6、fail-fast"></a>4.6、fail-fast</h2><p>如果在创建迭代器之后的任何时候以任何方式修改了列表（增加、删除、修改），除了通过迭代器自己的<code>remove</code> 或 <code>add</code>方法，迭代器将抛出 <code>ConcurrentModificationException</code> 异常</p><p>需要注意的是：这里异常的抛出条件是检测到 <code>modCount != expectedmodCount</code>，如果并发场景下一个线程修改了<code>modCount</code>值时另一个线程又 “及时地” 修改了<code>expectedmodCount</code>值，则异常不会抛出。所以<strong>不能依赖于这个异常来检测程序的正确性</strong>。</p><p>下面是用到<code>modCount</code>的一些情景</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream s<span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">{</span>    <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录下当前的 modCount</span>    <span class="token comment" spellcheck="true">// 一些操作之后....</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 比较现在与之前的 modCount，不相等表示在中间过程中被修改了</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一些操作之后....</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeIf</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一些操作之后....</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>UnaryOperator<span class="token operator">&lt;</span>E<span class="token operator">></span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一些操作之后....</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改了要加一</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一些操作之后....</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 内部迭代器</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5、参考资料"><a href="#5、参考资料" class="headerlink" title="5、参考资料"></a>5、参考资料</h1><p><a href="https://laijianfeng.org/2019/01/ArrayList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://laijianfeng.org/2019/01/ArrayList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p><p><a href="https://my.oschina.net/u/4309288/blog/3338206">https://my.oschina.net/u/4309288/blog/3338206</a></p><p><a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a></p><p><a href="https://www.runoob.com/java/java-arraylist-foreach.html">https://www.runoob.com/java/java-arraylist-foreach.html</a></p><p><a href="https://blog.csdn.net/Leon_cx/article/details/81517603">https://blog.csdn.net/Leon_cx/article/details/81517603</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Jdk源码 </category>
          
          <category> Java容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArrayList </tag>
            
            <tag> jdk源码 </tag>
            
            <tag> Java容器 </tag>
            
            <tag> 序列化 </tag>
            
            <tag> fail-fast </tag>
            
            <tag> forEach </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程间通信方式大总结</title>
      <link href="2021/03/20/jin-cheng-jian-tong-xin-fang-shi-da-zong-jie/"/>
      <url>2021/03/20/jin-cheng-jian-tong-xin-fang-shi-da-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为<strong>进程间通信（IPC，InterProcess Communication）</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210614090529075.png" alt="image-20210614090529075"></p><p>进程间通信常见有以下7种方式：</p><h1 id="1、匿名管道"><a href="#1、匿名管道" class="headerlink" title="1、匿名管道"></a>1、匿名管道</h1><ul><li><p>管道是半双工的，数据只能向一个方向流动；需要双方通信时，需要建立起两个管道。</p></li><li><p>只能用于父子进程或者兄弟进程之间(具有亲缘关系的进程);</p></li><li><p>单独构成一种独立的文件系统：管道对于管道两端的进程而言，就是一个文件，但它不是普通的文件，它不属于某种文件系统，而是自立门户，单独构成一种文件系统，并且只存在与内存中。</p></li><li><p>数据的读出和写入：一个进程向管道中写的内容被管道另一端的进程读出。写入的内容每次都添加在管道缓冲区的末尾，并且每次都是从缓冲区的头部读出数据</p></li><li><p>当缓冲区读空或者写满时，有一定的规则控制相应的读进程或者写进程进入等待队列，当空的缓冲区有新数据写入或者满的缓冲区有数据读出来时，就唤醒等待队列中的进程继续读写</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210614090938540.png" alt="image-20210614090938540"></p><p>管道的局限性：</p><ul><li><p>只支持单向数据流；</p></li><li><p>只能用于具有亲缘关系的进程之间；</p></li><li><p>没有名字；</p></li><li><p>管道的缓冲区是有限的（管道制存在于内存中，在管道创建时，为缓冲区分配一个页面大小）；</p></li><li><p>管道所传送的是无格式字节流，这就要求管道的读出方和写入方必须事先约定好数据的格式，比如多少字节算作一个消息（或命令、或记录）等等；</p></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 需要的头文件</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token comment" spellcheck="true">// 通过pipe()函数来创建匿名管道</span><span class="token comment" spellcheck="true">// 返回值：成功返回0，失败返回-1</span><span class="token comment" spellcheck="true">// fd参数返回两个文件描述符</span><span class="token comment" spellcheck="true">// fd[0]指向管道的读端，fd[1]指向管道的写端</span><span class="token comment" spellcheck="true">// fd[1]的输出是fd[0]的输入。</span><span class="token keyword">int</span> <span class="token function">pipe</span> <span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过匿名管道实现进程间通信的步骤如下：</p><ul><li>父进程创建管道，得到两个⽂件描述符指向管道的两端</li><li>父进程fork出子进程，⼦进程也有两个⽂件描述符指向同⼀管道。</li><li>父进程关闭fd[0],子进程关闭fd[1]，即⽗进程关闭管道读端,⼦进程关闭管道写端（因为管道只支持单向通信）。⽗进程可以往管道⾥写,⼦进程可以从管道⾥读,管道是⽤环形队列实现的,数据从写端流⼊从读端流出,这样就实现了进程间通信。</li></ul><h1 id="2、有名管道"><a href="#2、有名管道" class="headerlink" title="2、有名管道"></a>2、有名管道</h1><p>有名管道不同于匿名管道之处在于它提供了一个路径名与之关联，<strong>以有名管道的文件形式存在于文件系统中</strong>，这样，<strong>即使与有名管道的创建进程不存在亲缘关系的进程，只要可以访问该路径，就能够彼此通过有名管道相互通信</strong>，因此，通过有名管道不相关的进程也能交换数据。</p><p><strong>匿名管道和有名管道总结：</strong><br> （1）管道是特殊类型的文件，在满足先入先出的原则条件下可以进行读写，但不能进行定位读写。<br> （2）匿名管道是单向的，只能在有亲缘关系的进程间通信；有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。<br> （3）<strong>无名管道阻塞问题：</strong>无名管道无需显示打开，创建时直接返回文件描述符，在读写时需要确定对方的存在，否则将退出。如果当前进程向无名管道的一端写数据，必须确定另一端有某一进程。如果写入无名管道的数据超过其最大值，写操作将阻塞，如果管道中没有数据，读操作将阻塞，如果管道发现另一端断开，将自动退出。<br> （4）<strong>有名管道阻塞问题：</strong>有名管道在打开时需要确实对方的存在，否则将阻塞。即以读方式打开某管道，在此之前必须一个进程以写方式打开管道，否则阻塞。此外，可以以读写（O_RDWR）模式打开有名管道，即当前进程读，当前进程写，不会阻塞。</p><h1 id="3、信号（signal）"><a href="#3、信号（signal）" class="headerlink" title="3、信号（signal）"></a>3、信号（signal）</h1><ul><li><p>信号是Linux系统中用于进程间互相通信或者操作的一种机制，信号可以在任何时候发给某一进程，而无需知道该进程的状态。</p></li><li><p>如果该进程当前并未处于执行状态，则该信号就有内核保存起来，知道该进程回复执行并传递给它为止。</p></li><li><p>如果一个信号被进程设置为阻塞，则该信号的传递被延迟，直到其阻塞被取消是才被传递给进程</p></li></ul><p><strong>Linux系统中常用信号：</strong><br> （1）<strong>SIGHUP：</strong>用户从终端注销，所有已启动进程都将收到该进程。系统缺省状态下对该信号的处理是终止进程。<br> （2）<strong>SIGINT：</strong>程序终止信号。程序运行过程中，按<code>Ctrl+C</code>键将产生该信号。<br> （3）<strong>SIGQUIT：</strong>程序退出信号。程序运行过程中，按<code>Ctrl+\\</code>键将产生该信号。<br> （4）<strong>SIGBUS和SIGSEGV：</strong>进程访问非法地址。<br> （5）<strong>SIGFPE：</strong>运算中出现致命错误，如除零操作、数据溢出等。<br> （6）<strong>SIGKILL：</strong>用户终止进程执行信号。shell下执行<code>kill -9</code>发送该信号。<br> （7）<strong>SIGTERM：</strong>结束进程信号。shell下执行<code>kill 进程pid</code>发送该信号。<br> （8）<strong>SIGALRM：</strong>定时器信号。<br> （9）<strong>SIGCLD：</strong>子进程退出信号。如果其父进程没有忽略该信号也没有处理该信号，则子进程退出后将形成僵尸进程。</p><p><strong>信号来源</strong><br>信号是软件层次上对中断机制的一种模拟，是一种异步通信方式，信号可以在用户空间进程和内核之间直接交互，内核可以利用信号来通知用户空间的进程发生了哪些系统事件，信号事件主要有两个来源：</p><ul><li>硬件来源：用户按键输入<code>Ctrl+C</code>退出、硬件异常如无效的存储访问等。</li><li>软件终止：终止进程信号、其他进程调用kill函数、软件异常产生信号。</li></ul><p><strong>信号生命周期和处理流程</strong><br> （1）信号被某个进程产生，并设置此信号传递的对象（一般为对应进程的pid），然后传递给操作系统；<br> （2）操作系统根据接收进程的设置（是否阻塞）而选择性的发送给接收者，如果接收者阻塞该信号（且该信号是可以阻塞的），操作系统将暂时保留该信号，而不传递，直到该进程解除了对此信号的阻塞（如果对应进程已经退出，则丢弃此信号），如果对应进程没有阻塞，操作系统将传递此信号。<br> （3）目的进程接收到此信号后，将根据当前进程对此信号设置的预处理方式，暂时终止当前代码的执行，保护上下文（主要包括临时寄存器数据，当前程序位置以及当前CPU的状态）、转而执行中断服务程序，执行完成后在回复到中断的位置。当然，对于抢占式内核，在中断返回时还将引发新的调度</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210614092611719.png" alt="image-20210614092611719"></p><h1 id="4、消息队列"><a href="#4、消息队列" class="headerlink" title="4、消息队列"></a>4、消息队列</h1><ul><li><p>消息队列是存放在内核中的消息链表，每个消息队列由消息队列标识符表示。</p></li><li><p>与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显示地删除一个消息队列时，该消息队列才会被真正的删除。</p></li><li><p>另外与管道不同的是，消息队列在某个进程往一个队列写入消息之前，并不需要另外某个进程在该队列上等待消息的到达。</p></li></ul><p><strong>消息队列特点总结：</strong><br> （1）消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识.<br> （2）消息队列允许一个或多个进程向它写入与读取消息.<br> （3）管道和消息队列的通信数据都是先进先出的原则。<br> （4）消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比FIFO更有优势。<br> （5）消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺。<br> （6）目前主要有两种类型的消息队列：POSIX消息队列以及System V消息队列，System V消息队列目前被大量使用。System V消息队列是随内核持续的，只有在内核重启或者人工删除时，该消息队列才会被删除。</p><h1 id="5、共享内存"><a href="#5、共享内存" class="headerlink" title="5、共享内存"></a>5、共享内存</h1><ul><li><p>使得多个进程可以可以直接读写同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。</p></li><li><p>为了在多个进程间交换信息，内核专门留出了一块内存区，可以由需要访问的进程将其映射到自己的私有地址空间。进程就可以直接读写这一块内存而不需要进行数据的拷贝，从而大大提高效率。</p></li><li><p>由于多个进程共享一段内存，因此需要依靠某种同步机制（如信号量）来达到进程间的同步及互斥。</p></li></ul><p>通信流程大概这样：</p><p>写端：</p><ul><li>获取mutex对象，锁定共享区域。</li><li>将要通信的数据写入共享区域。</li><li>释放mutex对象</li></ul><p>读端：</p><ul><li>获取mutex对象，锁定共享区域。</li><li>从共享区域读数据。</li><li>释放mutex对象</li></ul><p>用于共享内存API：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h></span></span><span class="token keyword">int</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key_t key<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> <span class="token keyword">int</span> shmflg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分配一个共享内存块</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">shmat</span><span class="token punctuation">(</span><span class="token keyword">int</span> shm_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>shm_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> shmflg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将共享内存区映射到本地进程的虚拟地址空间</span><span class="token keyword">int</span> <span class="token function">shmdt</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>shm_addr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解除映射</span><span class="token keyword">int</span> <span class="token function">shmctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> shm_id<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">struct</span> shmid_ds <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//控制对共享内存的使用，如删除共享内存等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6、信号量（semaphore）"><a href="#6、信号量（semaphore）" class="headerlink" title="6、信号量（semaphore）"></a>6、信号量（semaphore）</h1><p>信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。<br> 为了获得共享资源，进程需要执行下列操作：<br> （1）<strong>创建一个信号量</strong>：这要求调用者指定初始值，对于二值信号量来说，它通常是1，也可是0。<br> （2）<strong>等待一个信号量</strong>：该操作会测试这个信号量的值，如果小于0，就阻塞。也称为P操作。<br> （3）<strong>挂出一个信号量</strong>：该操作将信号量的值加1，也称为V操作。</p><p>为了正确地实现信号量，信号量值的测试及减1操作应当是原子操作。为此，信号量通常是在内核中实现的。Linux环境中，有三种类型：<strong>Posix（<a href="https://link.jianshu.com/?t=http://baike.baidu.com/link?url=hYEo6ngm9MlqsQHT3h28baIDxEooeSPX6wr_FdGF-F8mf7wDp2xJWIDtQWGEDxthtPNiJtlsw460g1_N0txJYa">可移植性操作系统接口</a>）有名信号量（使用Posix IPC名字标识）</strong>、<strong>Posix基于内存的信号量（存放在共享内存区中）</strong>、<strong>System V信号量（在内核中维护）</strong>。这三种信号量都可用于进程间或线程间的同步。</p><p><strong>信号量与互斥量之间的区别：</strong><br> （1）互斥量用于线程的互斥，信号量用于线程的同步。这是互斥量和信号量的根本区别，也就是互斥和同步之间的区别。<br> <strong>互斥：</strong>是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。<br> <strong>同步：</strong>是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。<br> 在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源<br> （2）互斥量值只能为0/1，信号量值可以为非负整数。<br> 也就是说，一个互斥量只能用于一个资源的互斥访问，它不能实现多个资源的多线程互斥问题。信号量可以实现多个同类资源的多线程互斥和同步。当信号量为单值信号量是，也可以完成一个资源的互斥访问。<br> （3）互斥量的加锁和解锁必须由同一线程分别对应使用，信号量可以由一个线程释放，另一个线程得到。</p><h1 id="7、Socket"><a href="#7、Socket" class="headerlink" title="7、Socket"></a>7、Socket</h1><p>套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）系统的开发工作既可以在本地单机上进行，也可以跨网络进行。也就是说它可以让不在同一台计算机但通过网络连接计算机上的进程进行通信。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210614095833280.png" alt="image-20210614095833280"></p><p>套接字是支持TCP/IP的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</p><p><strong>套接字特性</strong><br> 套接字的特性由3个属性确定，它们分别是：域、端口号、协议类型。<br> <strong>（1）套接字的域</strong><br> 它指定套接字通信中使用的网络介质，最常见的套接字域有两种：<br> <strong>一是AF_INET，它指的是Internet网络。</strong>当客户使用套接字进行跨网络的连接时，它就需要用到服务器计算机的IP地址和端口来指定一台联网机器上的某个特定服务，所以在使用socket作为通信的终点，服务器应用程序必须在开始通信之前绑定一个端口，服务器在指定的端口等待客户的连接。<br> <strong>另一个域AF_UNIX，表示UNIX文件系统，</strong>它就是文件输入/输出，而它的地址就是文件名。<br> <strong>（2）套接字的端口号</strong><br> 每一个基于TCP/IP网络通讯的程序(进程)都被赋予了唯一的端口和端口号，端口是一个信息缓冲区，用于保留Socket中的输入/输出信息，端口号是一个16位无符号整数，范围是0-65535，以区别主机上的每一个程序（端口号就像房屋中的房间号），低于256的端口号保留给标准应用程序，比如pop3的端口号就是110，每一个套接字都组合进了IP地址、端口，这样形成的整体就可以区别每一个套接字。<br> <strong>（3）套接字协议类型</strong><br> 因特网提供三种通信机制，<br> <strong>一是流套接字，</strong>流套接字在域中通过TCP/IP连接实现，同时也是AF_UNIX中常用的套接字类型。流套接字提供的是一个有序、可靠、双向字节流的连接，因此发送的数据可以确保不会丢失、重复或乱序到达，而且它还有一定的出错后重新发送的机制。<br> <strong>二个是数据报套接字，</strong>它不需要建立连接和维持一个连接，它们在域中通常是通过UDP/IP协议实现的。它对可以发送的数据的长度有限制，数据报作为一个单独的网络消息被传输,它可能会丢失、复制或错乱到达，UDP不是一个可靠的协议，但是它的速度比较高，因为它并一需要总是要建立和维持一个连接。<br> <strong>三是原始套接字，</strong>原始套接字允许对较低层次的协议直接访问，比如IP、 ICMP协议，它常用于检验新的协议实现，或者访问现有服务中配置的新设备，因为RAW SOCKET可以自如地控制Windows下的多种协议，能够对网络底层的传输机制进行控制，所以可以应用原始套接字来操纵网络层和传输层应用。比如，我们可以通过RAW SOCKET来接收发向本机的ICMP、IGMP协议包，或者接收TCP/IP栈不能够处理的IP包，也可以用来发送一些自定包头或自定协议的IP包。网络监听技术很大程度上依赖于SOCKET_RAW。</p><p><strong>套接字通信的建立</strong></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210614100118396.png" alt="image-20210614100118396"></p><p><strong>服务器端</strong><br> （1）首先服务器应用程序用系统调用socket来创建一个套接字，它是系统分配给该服务器进程的类似文件描述符的资源，它不能与其他的进程共享。<br> （2）然后，服务器进程会给套接字起个名字，我们使用系统调用bind来给套接字命名。然后服务器进程就开始等待客户连接到这个套接字。<br> （3）接下来，系统调用listen来创建一个队列并将其用于存放来自客户的进入连接。<br> （4）最后，服务器通过系统调用accept来接受客户的连接。它会创建一个与原有的命名套接不同的新套接字，这个套接字只用于与这个特定客户端进行通信，而命名套接字（即原先的套接字）则被保留下来继续处理来自其他客户的连接（建立客户端和服务端的用于通信的流，进行通信）。</p><p><strong>客户端</strong><br> （1）客户应用程序首先调用socket来创建一个未命名的套接字，然后将服务器的命名套接字作为一个地址来调用connect与服务器建立连接。<br> （2）一旦连接建立，我们就可以像使用底层的文件描述符那样用套接字来实现双向数据的通信（通过流进行数据传输）。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> 进程通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> 管道 </tag>
            
            <tag> Signal </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> 共享内存 </tag>
            
            <tag> 信号量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的个人博客搭建笔记</title>
      <link href="2021/03/19/wo-de-ge-ren-bo-ke-da-jian-bi-ji/"/>
      <url>2021/03/19/wo-de-ge-ren-bo-ke-da-jian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="1、搭建hexo博客，并部署到GitHub-Pages"><a href="#1、搭建hexo博客，并部署到GitHub-Pages" class="headerlink" title="1、搭建hexo博客，并部署到GitHub Pages"></a>1、搭建hexo博客，并部署到GitHub Pages</h1><h2 id="1-1、安装node"><a href="#1-1、安装node" class="headerlink" title="1.1、安装node"></a>1.1、安装node</h2><h3 id="1-1-1、下载安装nodejs"><a href="#1-1-1、下载安装nodejs" class="headerlink" title="1.1.1、下载安装nodejs"></a>1.1.1、下载安装nodejs</h3><p><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a>  选择Windows 64位安装包，安装一直next就好了</p><h3 id="1-1-2、查看node和npm版本"><a href="#1-1-2、查看node和npm版本" class="headerlink" title="1.1.2、查看node和npm版本"></a>1.1.2、查看node和npm版本</h3><pre class="line-numbers language-bash"><code class="language-bash">node -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-3、修改npm地址为淘宝镜像"><a href="#1-1-3、修改npm地址为淘宝镜像" class="headerlink" title="1.1.3、修改npm地址为淘宝镜像"></a>1.1.3、修改npm地址为淘宝镜像</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-2、安装并使用hexo"><a href="#1-2、安装并使用hexo" class="headerlink" title="1.2、安装并使用hexo"></a>1.2、安装并使用hexo</h2><h3 id="1-2-1、安装hexo框架"><a href="#1-2-1、安装hexo框架" class="headerlink" title="1.2.1、安装hexo框架"></a>1.2.1、安装hexo框架</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会装在<code>nodejs/node_global</code>目录下（<code>D:\Program Files\nodejs\node_global</code>），然后查看<code>hexo</code>版本</p><pre class="line-numbers language-bash"><code class="language-bash">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-2、初始化hexo博客"><a href="#1-2-2、初始化hexo博客" class="headerlink" title="1.2.2、初始化hexo博客"></a>1.2.2、初始化hexo博客</h3><ul><li><p>在指定目录下创建<code>myBlog</code>空目录，用来存放个人<code>hexo</code>博客网站所有内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> D:\myBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入上一步创建的<code>myBlog</code>目录</p><pre class="line-numbers language-bash"><code class="language-bash">d:    <span class="token comment" spellcheck="true">#切换到D盘</span><span class="token function">cd</span> myBlog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>初始化<code>hexo</code>博客，会默认生成一篇<code>helloworld</code>博客</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="1-2-3、启动本地博客服务"><a href="#1-2-3、启动本地博客服务" class="headerlink" title="1.2.3、启动本地博客服务"></a>1.2.3、启动本地博客服务</h3><pre class="line-numbers language-bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动成功之后，就可以通过 <a href="http://localhost:4000/">http://localhost:4000/</a> 访问本地博客地址了</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="1-2-4、创建新的文章"><a href="#1-2-4、创建新的文章" class="headerlink" title="1.2.4、创建新的文章"></a>1.2.4、创建新的文章</h3><pre class="line-numbers language-bash"><code class="language-bash">hexo n <span class="token string">"我的个人博客搭建笔记-1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>_post</code>目录下就会生成 <strong>我的个人博客搭建笔记-1.md</strong> 文件</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319102050556.png" alt="image-20210319102050556"></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><h3 id="1-2-5、清理hexo"><a href="#1-2-5、清理hexo" class="headerlink" title="1.2.5、清理hexo"></a>1.2.5、清理hexo</h3><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-6、生成静态文件"><a href="#1-2-6、生成静态文件" class="headerlink" title="1.2.6、生成静态文件"></a>1.2.6、生成静态文件</h3><pre class="line-numbers language-bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h2 id="1-3、部署到GitHub-Pages"><a href="#1-3、部署到GitHub-Pages" class="headerlink" title="1.3、部署到GitHub Pages"></a>1.3、部署到GitHub Pages</h2><h3 id="1-3-1、在GitHub新建一个空仓库"><a href="#1-3-1、在GitHub新建一个空仓库" class="headerlink" title="1.3.1、在GitHub新建一个空仓库"></a>1.3.1、在GitHub新建一个空仓库</h3><p>命名必须是<strong>YourGithubName</strong>.github.io</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319104953604.png" alt="image-20210319104953604"></p><h3 id="1-3-2、在myBlog目录下安装Git部署插件"><a href="#1-3-2、在myBlog目录下安装Git部署插件" class="headerlink" title="1.3.2、在myBlog目录下安装Git部署插件"></a>1.3.2、在myBlog目录下安装Git部署插件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-deployer-git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-3、修改全局配置文件-config-yml"><a href="#1-3-3、修改全局配置文件-config-yml" class="headerlink" title="1.3.3、修改全局配置文件_config.yml"></a>1.3.3、修改全局配置文件_config.yml</h3><p>该文件位于你的博客根目录下，比如我的在<code>D:\myBlog\_config.yml</code>，修改里面的<code>Deployment</code>配置部分如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span>  git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/zhangqu999/zhangqu999.github.io  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    <code>repo</code>后面是你刚刚在<code>GitHub</code>新建的空仓库的地址</p><h3 id="1-3-4、部署到GitHub"><a href="#1-3-4、部署到GitHub" class="headerlink" title="1.3.4、部署到GitHub"></a>1.3.4、部署到GitHub</h3><pre class="line-numbers language-bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你就可以通过 <a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a> 这个地址访问你的博客（<code>GitHub</code>默认必须通过<code>HTTPS</code>访问，<code>HTTP</code>访问会报404）</p><h2 id="1-4、修改博客主题"><a href="#1-4、修改博客主题" class="headerlink" title="1.4、修改博客主题"></a>1.4、修改博客主题</h2><h3 id="1-4-1、yilia"><a href="#1-4-1、yilia" class="headerlink" title="1.4.1、yilia"></a>1.4.1、yilia</h3><ul><li><p>在<code>myBlog</code>目录下执行下面命令，将<code>yilia</code>主题克隆到<code>myBlog/themes/yilia</code>目录下</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">git</span> clone https://github.com/litten/hexo-theme-yilia.git themes/yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改<code>hexo</code>根目录（myBlog）下的 <code>_config.yml</code> 文件 </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>依次执行下面<code>hexo</code>命令</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clean    <span class="token comment" spellcheck="true">#修改主题，必须清理</span>hexo g        <span class="token comment" spellcheck="true">#c重新生成静态文件</span>hexo d    <span class="token comment" spellcheck="true">#部署到远程Github仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看<code>GitHub Pages</code>是否更新成功</p><p><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a> ，这个更新可能会比较慢，多强制刷新几次</p></li></ul><h2 id="1-5、在typora里配置图片上传服务PicGo"><a href="#1-5、在typora里配置图片上传服务PicGo" class="headerlink" title="1.5、在typora里配置图片上传服务PicGo"></a>1.5、在typora里配置图片上传服务PicGo</h2><h3 id="1-5-1、下载安装PicGo"><a href="#1-5-1、下载安装PicGo" class="headerlink" title="1.5.1、下载安装PicGo"></a>1.5.1、下载安装PicGo</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> Windows下载exe文件，安装一直next就可以了</p><h3 id="1-5-2、在typora里配置PicGo"><a href="#1-5-2、在typora里配置PicGo" class="headerlink" title="1.5.2、在typora里配置PicGo"></a>1.5.2、在typora里配置PicGo</h3><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319115728475.png" alt="image-20210319115728475"></p><h3 id="1-5-3、配置PicGo"><a href="#1-5-3、配置PicGo" class="headerlink" title="1.5.3、配置PicGo"></a>1.5.3、配置PicGo</h3><p>我用的是阿里云的<code>OSS</code>图床，配置下<code>KeyID</code>和<code>KeySecret</code>，存储空间名（<code>bucket</code>），存储区域和图片上传路径（<strong>一定要以/结尾</strong>）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319120050093.png" alt="image-20210319120050093"></p><h3 id="1-5-4、验证是否配置成功"><a href="#1-5-4、验证是否配置成功" class="headerlink" title="1.5.4、验证是否配置成功"></a>1.5.4、验证是否配置成功</h3><p>点下那个<strong>验证图片上传选项</strong>按钮，检验下是否配置成功</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319115812748.png" alt="image-20210319115812748"></p><h2 id="1-6、使用hexo-git-backup插件备份源文件"><a href="#1-6、使用hexo-git-backup插件备份源文件" class="headerlink" title="1.6、使用hexo-git-backup插件备份源文件"></a>1.6、使用hexo-git-backup插件备份源文件</h2><h3 id="1-6-1、安装"><a href="#1-6-1、安装" class="headerlink" title="1.6.1、安装"></a>1.6.1、安装</h3><p>如果你的hexo版本是2.x.x，执行下面命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-git-backup@0.0.91 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你的hexo版本是3.x.x及以上，执行下面命令：</p><pre class="line-numbers language-shell"><code class="language-shell">npm install hexo-git-backup --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-2、更新"><a href="#1-6-2、更新" class="headerlink" title="1.6.2、更新"></a>1.6.2、更新</h3><pre class="line-numbers language-shell"><code class="language-shell">npm remove hexo-git-backupnpm install hexo-git-backup --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-6-3、配置"><a href="#1-6-3、配置" class="headerlink" title="1.6.3、配置"></a>1.6.3、配置</h3><p>修改博客根目录（<code>myBlog</code>）下的<code>_config.yml</code>文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">backup</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repository</span><span class="token punctuation">:</span>       <span class="token key atrule">github</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/zhangqu999/zhangqu999.github.io<span class="token punctuation">,</span>backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面<code>GitHub</code>地址后面用英文逗号隔开，然后加上你的备份分支名（提前在你的<code>xxx.github.io</code>仓库创建好<code>backup</code>分支）</p><h3 id="1-6-4、使用"><a href="#1-6-4、使用" class="headerlink" title="1.6.4、使用"></a>1.6.4、使用</h3><pre class="line-numbers language-shell"><code class="language-shell">hexo b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2、绑定个人域名"><a href="#2、绑定个人域名" class="headerlink" title="2、绑定个人域名"></a>2、绑定个人域名</h1><h2 id="2-1、购买个人域名"><a href="#2-1、购买个人域名" class="headerlink" title="2.1、购买个人域名"></a>2.1、购买个人域名</h2><p>这个看个人喜好了，国内xx云都可以，我个人是在 <a href="https://sg.godaddy.com/zh">https://sg.godaddy.com/zh</a> 上购买的，个人觉得性价比还不错</p><h2 id="2-2、DNS解析配置"><a href="#2-2、DNS解析配置" class="headerlink" title="2.2、DNS解析配置"></a>2.2、DNS解析配置</h2><p>我使用的是腾讯云的<code>DNSPod</code>来进行域名解析，如下添加三条记录</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319112108292.png" alt="image-20210319112108292"></p><p>上面的两个IP地址是<code>GitHub custom domains</code>的新IP地址，不能用之前的老IP，否则会报404</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319112509609.png" alt="image-20210319112509609"></p><p>然后在你的<code>xxx.github.io</code>仓库设置里，配置你的<code>custom domain</code>，并开启<code>HTTPS</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319112938484.png" alt="image-20210319112938484"></p><p>在你博客根目录下<code>source</code>目录新建一个名为<code>CNAME</code>的文件（<strong>不含后缀名</strong>）</p><p>在里面添加你的域名（前面的1是VSCode里的行号）</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319114333350.png" alt="image-20210319114333350"></p><p>然后运行 <code>hexo g</code>和<code>hexo d</code>更新到<code>GitHub</code>远端</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319114702478.png" alt="image-20210319114702478"></p><h2 id="2-3、使用自定义域名服务器"><a href="#2-3、使用自定义域名服务器" class="headerlink" title="2.3、使用自定义域名服务器"></a>2.3、使用自定义域名服务器</h2><p>在<code>GoDaddy</code>个人账号-&gt;我的产品-&gt;所有产品与服务-&gt;DNS-&gt;使用自定义域名服务器</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210319113248329.png" alt="image-20210319113248329"></p><p>我这里使用的是腾讯云<code>DNSPod</code>的域名服务器，你如果使用了其他域名服务器，更改为你对应的地址就可以了</p><h2 id="2-4、验证是否绑定成功"><a href="#2-4、验证是否绑定成功" class="headerlink" title="2.4、验证是否绑定成功"></a>2.4、验证是否绑定成功</h2><p>访问    <a href="https://javaguycoffee.com/">https://javaguycoffee.com/</a>    ，看到个人博客主页就成功啦~</p><h1 id="3、debug记录"><a href="#3、debug记录" class="headerlink" title="3、debug记录"></a>3、debug记录</h1><h2 id="3-1、大括号不显示"><a href="#3-1、大括号不显示" class="headerlink" title="3.1、大括号不显示"></a>3.1、大括号不显示</h2><p>在<code>myBlog\node_modules\hexo-prism-plugin\src\index.js</code>文件里添加红框所示内容</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323004119007.png" alt="image-20210323004119007"></p><p>再更新一下就显示正常了。</p><h2 id="3-2、对c-代码高亮支持不太友好"><a href="#3-2、对c-代码高亮支持不太友好" class="headerlink" title="3.2、对c++代码高亮支持不太友好"></a>3.2、对c++代码高亮支持不太友好</h2><p>尝试使用<code>cpp</code>，我换成<code>cpp</code>之后就正常支持代码高亮了</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210323004706205.png" alt="image-20210323004706205"></p><h1 id="4、换电脑写博客并同步"><a href="#4、换电脑写博客并同步" class="headerlink" title="4、换电脑写博客并同步"></a>4、换电脑写博客并同步</h1><h2 id="4-1、源文件推到GitHub"><a href="#4-1、源文件推到GitHub" class="headerlink" title="4.1、源文件推到GitHub"></a>4.1、源文件推到GitHub</h2><p>在<code>GitHub</code>新建一个仓库（<code>public</code>和<code>private</code>均可，<code>xxx.github.io</code>必须<code>public</code>），并把本地源文件推到该仓库里。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210328121340384.png" alt="image-20210328121340384"></p><h2 id="4-2、新电脑所需软件"><a href="#4-2、新电脑所需软件" class="headerlink" title="4.2、新电脑所需软件"></a>4.2、新电脑所需软件</h2><ul><li><code>Git</code></li><li><code>Nodejs</code></li></ul><p>自行安装配置好。</p><h2 id="4-3、安装hexo"><a href="#4-3、安装hexo" class="headerlink" title="4.3、安装hexo"></a>4.3、安装hexo</h2><pre class="line-numbers language-shell"><code class="language-shell">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-4、将GitHub源文件clone到新电脑"><a href="#4-4、将GitHub源文件clone到新电脑" class="headerlink" title="4.4、将GitHub源文件clone到新电脑"></a>4.4、将GitHub源文件clone到新电脑</h2><p>新建<code>myBlog</code>目录，在该目录下执行：</p><pre class="line-numbers language-shell"><code class="language-shell">git clone https://github.com/zhangqu999/hexo-matery-source.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210328122413247.png" alt="image-20210328122413247"></p><h2 id="4-5、安装node-modules依赖"><a href="#4-5、安装node-modules依赖" class="headerlink" title="4.5、安装node_modules依赖"></a>4.5、安装node_modules依赖</h2><ul><li>将<code>npm</code>改为淘宝源</li><li>下载<code>package.json</code>里的npm依赖包</li></ul><pre class="line-numbers language-shell"><code class="language-shell">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-6、配置下git-config"><a href="#4-6、配置下git-config" class="headerlink" title="4.6、配置下git config"></a>4.6、配置下git config</h2><p>配置<code>git</code>全局邮箱，用户名和<code>SSR</code>代理</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global user.email "zhang1842279380@gmail.com"git config --global user.name "zhangqu999"git config --global https.proxy http://127.0.0.1:1080git config --global http.proxy http://127.0.0.1:1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210328123350184.png" alt="image-20210328123350184"></p><h2 id="4-7、测试"><a href="#4-7、测试" class="headerlink" title="4.7、测试"></a>4.7、测试</h2><p>生成静态文件并部署到<code>GitHub</code>远端（<code>xxx.github.io</code>）</p><pre class="line-numbers language-shell"><code class="language-shell">hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210328123528386.png" alt="image-20210328123528386"></p><h2 id="4-8、备份源文件"><a href="#4-8、备份源文件" class="headerlink" title="4.8、备份源文件"></a>4.8、备份源文件</h2><p>新建一个<code>push.sh</code>脚本，用来快速将本地源文件更新<code>push</code>到源文件仓库。</p><pre class="line-numbers language-shell"><code class="language-shell">if [ ! -n "$1" ]; then    msg="small update"else    msg="$1"fi git add .  git commit -m "$msg"  git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>./push.sh</code>执行脚本，即可快速<code>push</code>到远端。</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210328124006961.png" alt="image-20210328124006961"></p><h1 id="5、参考资料"><a href="#5、参考资料" class="headerlink" title="5、参考资料"></a>5、参考资料</h1><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">https://picgo.github.io/PicGo-Doc/zh/guide/</a></p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?fro=search&amp;seid=5495732431287618221">https://www.bilibili.com/video/BV1Yb411a7ty?fro=search&amp;seid=5495732431287618221</a></p><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/">https://godweiyang.com/2018/04/13/hexo-blog/</a></p><p><a href="https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site</a></p><p><a href="https://github.community/t/how-to-enable-https-support-on-custom-domains/10351">https://github.community/t/how-to-enable-https-support-on-custom-domains/10351</a></p><p><a href="https://cloud.tencent.com/developer/article/1367881">https://cloud.tencent.com/developer/article/1367881</a></p><p><a href="https://github.com/coneycode/hexo-git-backup">https://github.com/coneycode/hexo-git-backup</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/issues/627">https://github.com/blinkfox/hexo-theme-matery/issues/627</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSS </tag>
            
            <tag> nodejs </tag>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> typora </tag>
            
            <tag> PicGo </tag>
            
            <tag> DNSPod </tag>
            
            <tag> GoDaddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL MVCC相关源码阅读笔记</title>
      <link href="2021/03/18/mysql-mvcc-xiang-guan-yuan-ma-yue-du-bi-ji/"/>
      <url>2021/03/18/mysql-mvcc-xiang-guan-yuan-ma-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="9、MVCC"><a href="#9、MVCC" class="headerlink" title="9、MVCC"></a>9、MVCC</h2><p><code>MVCC</code>在<code>MySQL InnoDB</code>中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读</p><h3 id="9-1、当前读和快照读"><a href="#9-1、当前读和快照读" class="headerlink" title="9.1、当前读和快照读"></a>9.1、当前读和快照读</h3><ul><li><p><strong>当前读</strong>：像<code>select lock in share mode</code>(共享锁)， <code>select for update</code> ， <code>update</code>， <code>insert</code>，<code>delete</code>(排他锁)这些操作都是一种当前读，因为它们读取的是记录的<strong>最新版本</strong>，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</p></li><li><p><strong>快照读</strong>：像不加锁的<code>select</code>操作就是快照读，即不加锁的非阻塞读；快照读的实现是基于<code>MVCC</code>，可以认为<code>MVCC</code>是行锁的一个变种，但它在很多情况下，<strong>避免了加锁操作</strong>，降低了开销；既然是基于多版本，即快照读可能读到的并<strong>不一定是数据的最新版本</strong>，而有可能是之前的历史版本</p></li></ul><h3 id="9-2、实现原理"><a href="#9-2、实现原理" class="headerlink" title="9.2、实现原理"></a>9.2、实现原理</h3><p><code>MVCC</code>的目的就是多版本并发控制，在数据库中的实现，就是为了解决读写冲突，它的实现原理主要是依赖记录中的 <strong>3个隐式字段</strong>，<strong>undo日志</strong> ，<strong>Read View</strong> 来实现的。</p><h4 id="9-2-1、3个隐式字段"><a href="#9-2-1、3个隐式字段" class="headerlink" title="9.2.1、3个隐式字段"></a>9.2.1、3个隐式字段</h4><p>每行记录除了我们自定义的字段外，还有数据库隐式定义的<code>DB_TRX_ID，DB_ROLL_PTR，DB_ROW_ID</code>字段</p><ul><li><code>DB_TRX_ID</code><br>6byte，最近修改(修改/插入)事务ID：记录创建这条记录/最后一次修改该记录的事务ID</li><li><code>DB_ROLL_PTR</code><br>7byte，回滚指针，指向这条记录的上一个版本（存储于<code>rollback segment</code>里）</li><li><code>DB_ROW_ID</code><br>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，<code>InnoDB</code>会自动以<code>DB_ROW_ID</code>产生一个聚簇索引</li><li>实际还有一个<strong>删除flag</strong>隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了</li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302114448299.png" alt="image-20210302114448299"></p><p>如上图，<code>DB_ROW_ID</code>是数据库默认为该行记录生成的唯一隐式主键，<code>DB_TRX_ID</code>是当前操作该记录的事务ID,而<code>DB_ROLL_PTR</code>是一个回滚指针，用于配合<code>undo</code>日志，指向上一个旧版本</p><p><strong>源码分析</strong></p><p>在源码中，添加这3个字段的方法在：<code>/storage/innobase/dict/dict0dict.cc</code> 的 <code>dict_table_add_system_columns</code> 方法中，核心部分如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**********************************************************************/</span><span class="token comment" spellcheck="true">/**Adds system columns to a table object.添加系统列到指定表*/</span><span class="token keyword">void</span> <span class="token function">dict_table_add_system_columns</span><span class="token punctuation">(</span>    dict_table_t<span class="token operator">*</span>    table<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in/out: table */</span>    mem_heap_t<span class="token operator">*</span>    heap<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*!&lt; in: temporary heap */</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加行id</span>    <span class="token function">dict_mem_table_add_col</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> <span class="token string">"DB_ROW_ID"</span><span class="token punctuation">,</span> DATA_SYS<span class="token punctuation">,</span> DATA_ROW_ID <span class="token operator">|</span> DATA_NOT_NULL<span class="token punctuation">,</span> DATA_ROW_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加事务id</span>    <span class="token function">dict_mem_table_add_col</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> <span class="token string">"DB_TRX_ID"</span><span class="token punctuation">,</span> DATA_SYS<span class="token punctuation">,</span> DATA_TRX_ID <span class="token operator">|</span> DATA_NOT_NULL<span class="token punctuation">,</span> DATA_TRX_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否是内部表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dict_table_is_intrinsic</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//添加回滚指针</span>        <span class="token function">dict_mem_table_add_col</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> <span class="token string">"DB_ROLL_PTR"</span><span class="token punctuation">,</span> DATA_SYS<span class="token punctuation">,</span> DATA_ROLL_PTR <span class="token operator">|</span> DATA_NOT_NULL<span class="token punctuation">,</span> DATA_ROLL_PTR_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2、undo日志"><a href="#9-2-2、undo日志" class="headerlink" title="9.2.2、undo日志"></a>9.2.2、undo日志</h4><p><code>undo log</code>主要分为两种：</p><ul><li><code>insert undo log</code><br>代表事务在<code>insert</code>新记录时产生的<code>undo log</code>, 只在事务回滚时需要，并且在事务提交后可以被立即丢弃</li><li><code>update undo log</code><br>事务在进行<code>update</code>或<code>delete</code>时产生的<code>undo log</code>，不仅在事务回滚时需要，在快照读时也需要，所以不能随便删除。只有在快速读或事务回滚不涉及该日志时，对应的日志才会被<code>purge</code>线程统一清除</li></ul><blockquote><p>purge</p><ul><li>从前面的分析可以看出，为了实现<strong>InnoDB</strong>的<strong>MVCC</strong>机制，更新或者删除操作都只是设置一下老记录的<strong>deleted_bit</strong>，并不真正将过时的记录删除。</li><li>为了节省磁盘空间，<strong>InnoDB</strong>有专门的<strong>purge线程</strong>来清理deleted_bit为true的记录。为了不影响MVCC的正常工作，<strong>purge线程</strong>自己也维护了一个<strong>read view</strong>（这个read view相当于系统中最老活跃事务的read view）;<strong>如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。</strong></li></ul></blockquote><p><code>undo log</code>本质上是一个<code>rollback segment</code>中的一个旧记录链，我们可以来看看它的执行流程</p><p>1）有个事务往person表插入了一条新记录，记录如下，name为Jerry, age为24岁，隐式主键是1，事务ID和回滚指针，我们假设为<code>NULL</code></p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302141123807.png" alt="image-20210302141123807"></p><p>2）现在来了一个事务1对该记录的name做出了修改，改为Tom</p><ul><li><p>在事务1修改该行(记录)数据时，数据库会先<strong>对该行加排他锁</strong></p></li><li><p>然后<strong>把该行数据拷贝到undo log中</strong>，作为旧记录，既在<code>undo log</code>中有当前行的拷贝副本</p></li><li><p>拷贝完毕后，修改该行name为Tom，并且修改隐藏字段的事务ID为当前事务1的ID，<strong>回滚指针指向拷贝到undo log的副本记录</strong>，既表示我的上一个版本就是它</p></li><li><p><strong>事务提交后，释放锁</strong></p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302141333532.png" alt="image-20210302141333532"></p><p>3）又来了个事务2修改person表的同一个记录，将age修改为30岁</p><ul><li><p>在事务2修改该行数据时，数据库也先为该行加锁</p></li><li><p>然后把该行数据拷贝到<code>undo log</code>中，作为旧记录，发现该行记录已经有<code>undo log</code>了，<strong>那么最新的旧数据作为链表的表头（头插法）</strong>，插在该行记录的undo log最前面</p></li><li><p>修改该行age为30岁，并且修改隐藏字段的事务ID为当前事务2的ID, 那就是2，回滚指针指向刚刚拷贝到<code>undo log</code>的副本记录</p></li><li><p>事务提交，释放锁</p></li></ul><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302141450800.png" alt="image-20210302141450800"></p><p>从上面，我们就可以看出，不同事务或者相同事务的对同一记录的修改，会导致该记录的<code>undo log</code>成为一条<strong>记录版本链表</strong>，<code>undo log</code>的<strong>链首就是最新的旧记录，链尾就是最早的旧记录</strong></p><h4 id="9-2-3、ReadView"><a href="#9-2-3、ReadView" class="headerlink" title="9.2.3、ReadView"></a>9.2.3、ReadView</h4><p><code>Read View</code>就是事务进行快照读操作的时候产生的读视图，在该事务执行的快照读的那一刻，会生成数据库系统<strong>当前的一个快照，记录并维护系统当前活跃事务的ID</strong>。它主要用来做<strong>可见性判断</strong>， 即当我们某个事务执行快照读的时候，<strong>对该记录创建一个Read View读视图</strong>，把它比作条件用来判断当前事务能够看到哪个版本的数据，<strong>既可能是当前最新的数据，也有可能是该行记录的undo log里面的某个版本的数据</strong>。</p><p><code>MVCC</code> 模式下的普通查询主方法入口在：<code>/storage/innobase/row/row0sel.cc</code> 的 <code>row_search_mvcc</code> 方法中。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Searches for rows in the database using cursor.Function is mainly used for tables that are shared accorss connection andso it employs technique that can help re-construct the rows thattransaction is suppose to see.It also has optimization such as pre-caching the rows, using AHI, etc.@param[out]    buf        buffer for the fetched row in MySQL format@param[in]    mode        search mode PAGE_CUR_L@param[in,out]    prebuilt    prebuilt struct for the table handler;                this contains the info to search_tuple,                index; if search tuple contains 0 field then                we position the cursor at start or the end of                index, depending on 'mode'@param[in]    match_mode    0 or ROW_SEL_EXACT or ROW_SEL_EXACT_PREFIX@param[in]    direction    0 or ROW_SEL_NEXT or ROW_SEL_PREV;                Note: if this is != 0, then prebuilt must has a                pcur with stored position! In opening of a                cursor 'direction' should be 0.@return DB_SUCCESS or error code */</span>dberr_t<span class="token function">row_search_mvcc</span><span class="token punctuation">(</span>    byte<span class="token operator">*</span>        buf<span class="token punctuation">,</span>    page_cur_mode_t    mode<span class="token punctuation">,</span>    row_prebuilt_t<span class="token operator">*</span>    prebuilt<span class="token punctuation">,</span>    ulint        match_mode<span class="token punctuation">,</span>    ulint        direction<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体创建视图的方法在 <code>ReadView::prepare</code>，调用链如下：</p><blockquote><p>row_search_mvcc -&gt; trx_assign_read_view -&gt; MVCC::view_open -&gt; ReadView::prepare</p></blockquote><p><code>ReadView::prepare</code>源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**Opens a read view where exactly the transactions serialized before thispoint in time are seen in the view.@param id        Creator transaction id */</span><span class="token keyword">void</span> ReadView<span class="token operator">::</span><span class="token function">prepare</span><span class="token punctuation">(</span>trx_id_t id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token function">mutex_own</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trx_sys<span class="token operator">-</span><span class="token operator">></span>mutex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前ReadView创建版本号赋值为事务id</span>    m_creator_trx_id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//高水位赋值为全局系统事务的版本号，即分配给下一个事务的id</span>    m_low_limit_no <span class="token operator">=</span> m_low_limit_id <span class="token operator">=</span> trx_sys<span class="token operator">-</span><span class="token operator">></span>max_trx_id<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>trx_sys<span class="token operator">-</span><span class="token operator">></span>rw_trx_ids<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//如果系统事务的活跃事务列表不为空，则将其拷贝至m_ids</span>        <span class="token function">copy_trx_ids</span><span class="token punctuation">(</span>trx_sys<span class="token operator">-</span><span class="token operator">></span>rw_trx_ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//否则清空ReadView中的活跃事务列表</span>        m_ids<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">UT_LIST_GET_LEN</span><span class="token punctuation">(</span>trx_sys<span class="token operator">-</span><span class="token operator">></span>serialisation_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> trx_t<span class="token operator">*</span>    trx<span class="token punctuation">;</span>        trx <span class="token operator">=</span> <span class="token function">UT_LIST_GET_FIRST</span><span class="token punctuation">(</span>trx_sys<span class="token operator">-</span><span class="token operator">></span>serialisation_list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trx<span class="token operator">-</span><span class="token operator">></span>no <span class="token operator">&lt;</span> m_low_limit_no<span class="token punctuation">)</span> <span class="token punctuation">{</span>            m_low_limit_no <span class="token operator">=</span> trx<span class="token operator">-</span><span class="token operator">></span>no<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，会将这个创建的 <code>ReadView</code> 添加到 <code>MVCC</code> 的 <code>m_views</code> 中。</p><p>此外，<code>ReadView</code>类核心属性有：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/** Set of RW transactions that was active when this snapshot    was taken     创建视图时的活跃事务id列表，可以理解为生成 ReadView 那一刻还未执行提交的事务，并且该列表是个升序列表。*/</span>    ids_t        m_ids<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** The read should not see any transaction with trx id >= this    value. In other words, this is the "high water mark".     高水位，生成 ReadView 时系统将要分配给下一个事务的 Id 值。大于等于此事务号的id，对ReadView不可见*/</span>    trx_id_t    m_low_limit_id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** The read should see all trx ids which are strictly    smaller (&lt;) than this value.  In other words, this is the    low water mark".     低水位，即m_ids 列表的第一个节点，严格小于(&lt;)此事务号的id，对ReadView一定可见*/</span>    trx_id_t    m_up_limit_id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** trx id of creating transaction, set to TRX_ID_MAX for free    views.    创建此ReadView的事务ID*/</span>    trx_id_t    m_creator_trx_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 配合purge，标识该视图不需要小于m_low_limit_no的UNDO LOG，   * 如果其他视图也不需要，则可以删除小于m_low_limit_no的UNDO LOG*/</span>      trx_id_t m_low_limit_no<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>ReadView</code>可见性判断，要分SQL查询<strong>走聚集索引</strong>和<strong>辅助索引</strong>两种情况</p><ul><li>SQL查询走聚集索引</li></ul><p>核心流程在<code>row_search_mvcc</code>方法中</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> clust_index<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//走聚集索引</span>            <span class="token comment" spellcheck="true">/* Fetch a previous version of the row if the current            one is not visible in the snapshot; if we have a very            high force recovery level set, we try to avoid crashes            by skipping this lookup */</span>            <span class="token comment" spellcheck="true">//判断rec是否在ReadView可见</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>srv_force_recovery <span class="token operator">&lt;</span> <span class="token number">5</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">lock_clust_rec_cons_read_sees</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span> index<span class="token punctuation">,</span> offsets<span class="token punctuation">,</span> <span class="token function">trx_get_read_view</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                rec_t<span class="token operator">*</span>    old_vers<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 获取rec的上一个版本，赋值给old_vers*/</span>                err <span class="token operator">=</span> <span class="token function">row_sel_build_prev_vers_for_mysql</span><span class="token punctuation">(</span>                    trx<span class="token operator">-</span><span class="token operator">></span>read_view<span class="token punctuation">,</span> clust_index<span class="token punctuation">,</span>                    prebuilt<span class="token punctuation">,</span> rec<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offsets<span class="token punctuation">,</span> <span class="token operator">&amp;</span>heap<span class="token punctuation">,</span>                    <span class="token operator">&amp;</span>old_vers<span class="token punctuation">,</span> need_vrow <span class="token operator">?</span> <span class="token operator">&amp;</span>vrow <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                    <span class="token operator">&amp;</span>mtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> DB_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">goto</span> lock_wait_or_error<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>old_vers <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* The row did not exist yet in                    the read view */</span>                    <span class="token keyword">goto</span> next_rec<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//用于下一次判断</span>                rec <span class="token operator">=</span> old_vers<span class="token punctuation">;</span>                prev_rec <span class="token operator">=</span> rec<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视图可见性判断在函数：<code>changes_visible</code>，调用链如下：</p><blockquote><p>row_search_mvcc -&gt; lock_clust_rec_cons_read_sees -&gt; changes_visible</p></blockquote><p><code>changes_visible</code>源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Check whether the changes by id are visible.    检查传入事务id所做的修改对ReadView是否可见    @param[in]    id    transaction id to check against the view    @param[in]    name    table name    @return whether the view sees the modifications of id. */</span>    <span class="token keyword">bool</span> <span class="token function">changes_visible</span><span class="token punctuation">(</span>        trx_id_t        id<span class="token punctuation">,</span>        <span class="token keyword">const</span> table_name_t<span class="token operator">&amp;</span>    name<span class="token punctuation">)</span> <span class="token keyword">const</span>        <span class="token function">MY_ATTRIBUTE</span><span class="token punctuation">(</span><span class="token punctuation">(</span>warn_unused_result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ut_ad</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        1、如果被访问版本的 trx_id 小于 ReadView 中的 m_up_limit_id（低水位），表明被访问版本的事务在当前事务生成 ReadView 前已经提交，所以该版本可以        被当前事务访问。        2、如果被访问版本的 trx_id 与 ReadView 中的 m_creator_trx_id 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> m_up_limit_id <span class="token operator">||</span> id <span class="token operator">==</span> m_creator_trx_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//检查该id是否有效</span>        <span class="token function">check_trx_id_sanity</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        如果被访问版本的 trx_id 大于等于 ReadView 中的 m_low_limit_id（高水位），表明被访问版本的事务在当前事务生成 ReadView 后才开启，所以该版本不可        以被当前事务访问        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">>=</span> m_low_limit_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m_ids<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">/* 否则查看m_ids活动列表是否为空，如果为空说明此事务虽然在系统可见最小事务号之后发生，但创建 ReadView 时生成该版本的事务已经被提交，该版本可            以被访问*/</span>            <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> ids_t<span class="token operator">::</span>value_type<span class="token operator">*</span>    p <span class="token operator">=</span> m_ids<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*      被访问版本的 trx_id 属性值在 ReadView 的 m_up_limit_id 和 m_low_limit_id 之间，那就需要判断 trx_id 属性值是不是在 m_ids 列表中，这边会通过二分法查找。如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。      */</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token operator">!</span>std<span class="token operator">::</span><span class="token function">binary_search</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p <span class="token operator">+</span> m_ids<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断流程如下：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302143356258.png" alt="image-20210302143356258"></p><p>构建记录的上一个版本，主要是通过 <code>DB_ROLL_PTR</code> 来实现，函数调用链如下：</p><blockquote><p>row_search_mvcc -&gt; row_sel_build_prev_vers_for_mysql -&gt; row_vers_build_for_consistent_read -&gt; trx_undo_prev_version_build</p></blockquote><p><code>trx_undo_prev_version_build</code>源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">trx_undo_prev_version_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、获取record的回滚指针roll_ptr</span>    roll_ptr <span class="token operator">=</span> <span class="token function">row_get_rec_roll_ptr</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span> index<span class="token punctuation">,</span> offsets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、获取record的事务id</span>    rec_trx_id <span class="token operator">=</span> <span class="token function">row_get_rec_trx_id</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span> index<span class="token punctuation">,</span> offsets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、根据roll_ptr获取undo log，并拷贝给heap，填充到undo_rec中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trx_undo_get_undo_rec</span><span class="token punctuation">(</span>        roll_ptr<span class="token punctuation">,</span> rec_trx_id<span class="token punctuation">,</span> heap<span class="token punctuation">,</span> is_redo_rseg<span class="token punctuation">,</span>        index<span class="token operator">-</span><span class="token operator">></span>table<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>undo_rec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//4、以下开始解析undo log，填充相应参数</span>    <span class="token comment" spellcheck="true">//4.1、根据undo_rec读取type，cmpl_info，undo_no，table_id值并填充到对应参数中，读完后将undo_rec剩余部分返回给ptr</span>    ptr <span class="token operator">=</span> <span class="token function">trx_undo_rec_get_pars</span><span class="token punctuation">(</span>undo_rec<span class="token punctuation">,</span> <span class="token operator">&amp;</span>type<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmpl_info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dummy_extern<span class="token punctuation">,</span> <span class="token operator">&amp;</span>undo_no<span class="token punctuation">,</span> <span class="token operator">&amp;</span>table_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.2、从ptr中读取事务id，回滚指针，info_bits到对应变量中，读完后将剩余部分返回给ptr</span>    ptr <span class="token operator">=</span> <span class="token function">trx_undo_update_rec_get_sys_cols</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>trx_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>roll_ptr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>info_bits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.3、跳过行引用</span>    ptr <span class="token operator">=</span> <span class="token function">trx_undo_rec_skip_row_ref</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.4、通过undo log剩余部分和前面读取的参数构造update</span>    ptr <span class="token operator">=</span> <span class="token function">trx_undo_update_rec_get_update</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> type<span class="token punctuation">,</span> trx_id<span class="token punctuation">,</span> roll_ptr<span class="token punctuation">,</span> info_bits<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> heap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">row_upd_changes_field_size_or_external</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> offsets<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//5、构建old_vers：先用rec填充，再用update覆盖</span>        <span class="token comment" spellcheck="true">//5.1、先将rec拷贝到buf，并返回指向buf的指针给old_vers</span>        <span class="token operator">*</span>old_vers <span class="token operator">=</span> <span class="token function">rec_copy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> rec<span class="token punctuation">,</span> offsets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rec_offs_make_valid</span><span class="token punctuation">(</span><span class="token operator">*</span>old_vers<span class="token punctuation">,</span> index<span class="token punctuation">,</span> offsets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.2、使用update覆盖old_vers</span>        <span class="token function">row_upd_rec_in_place</span><span class="token punctuation">(</span><span class="token operator">*</span>old_vers<span class="token punctuation">,</span> index<span class="token punctuation">,</span> offsets<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SQL查询走辅助索引</li></ul><p>判断逻辑大致如下：</p><p>​    1）判断被访问索引记录所在页的<strong>最大事务 Id</strong> 是否小于 <code>ReadView</code> 中的 <code>m_up_limit_id</code>（低水位），如果是则代表该页的最后一次修改事务 Id 在 <code>ReadView</code> 创建前已经提交，则必然可以访问；如果不是，并不代表一定不可以访问，事务 Id 大的也可能提交比较早，所以需要做进一步判断，见步骤2。</p><p>​    2）使用 <strong>ICP（Index Condition Pushdown）</strong>根据索引信息来判断搜索条件是否满足，这边主要是在使用聚集索引判断前先进行过滤，这边有三种情况：</p><p>​        a）ICP 判断不满足条件但没有超出扫描范围，则获取下一条记录继续查找；</p><p>​        b）如果不满足条件并且超出扫描返回，则返回 <code>DB_RECORD_NOT_FOUND</code>；</p><p>​        c）如果 ICP 判断符合条件，则会获取对应的聚集索引来进行可见性判断</p><p>辅助索引的视图可见性判断在方法：<code>lock_sec_rec_cons_read_sees</code>，调用链如下：</p><blockquote><p>row_search_mvcc -&gt; lock_sec_rec_cons_read_sees</p></blockquote><p><code>lock_sec_rec_cons_read_sees</code>源码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Checks that a non-clustered index record is seen in a consistent read.</span><span class="token keyword">bool</span> <span class="token function">lock_sec_rec_cons_read_sees</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*========================*/</span>    <span class="token keyword">const</span> rec_t<span class="token operator">*</span>        rec<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: user record which                    should be read or passed over                    by a read cursor */</span>    <span class="token keyword">const</span> dict_index_t<span class="token operator">*</span>    index<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; in: index */</span>    <span class="token keyword">const</span> ReadView<span class="token operator">*</span>    view<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*!&lt; in: consistent read view */</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">recv_recovery_is_on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dict_table_is_temporary</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token operator">></span>table<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Temp-tables are not shared across connections and multiple        transactions from different connections cannot simultaneously        operate on same temp-table and so read of temp-table is        always consistent read. */</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1、取索引页上的最大事务id：max_trx_id</span>    trx_id_t max_trx_id <span class="token operator">=</span> <span class="token function">page_get_max_trx_id</span><span class="token punctuation">(</span><span class="token function">page_align</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ut_ad</span><span class="token punctuation">(</span>max_trx_id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、判断max_trx_id是否小于m_up_limit_id</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>view<span class="token operator">-</span><span class="token operator">></span><span class="token function">sees</span><span class="token punctuation">(</span>max_trx_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">    /**    @param id        transaction to check    @return true if view sees transaction id */    bool sees(trx_id_t id) const    {        return(id < m_up_limit_id);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3、MVCC类定义"><a href="#9-3、MVCC类定义" class="headerlink" title="9.3、MVCC类定义"></a>9.3、MVCC类定义</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** The MVCC read view manager */</span><span class="token keyword">class</span> <span class="token class-name">MVCC</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**    Allocate and create a view.    创建一个视图    @param view        view owned by this class created for the                caller. Must be freed by calling close()    @param trx        transaction creating the view   */</span>    <span class="token keyword">void</span> <span class="token function">view_open</span><span class="token punctuation">(</span>ReadView<span class="token operator">*</span><span class="token operator">&amp;</span> view<span class="token punctuation">,</span> trx_t<span class="token operator">*</span> trx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token operator">!</span>srv_read_only_mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** If no new RW transaction has been started since the last view        was created then reuse the the existing view. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            uintptr_t    p <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>uintptr_t<span class="token operator">></span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            view <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>ReadView<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ut_ad</span><span class="token punctuation">(</span>view<span class="token operator">-</span><span class="token operator">></span>m_closed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* NOTE: This can be optimised further, for now we only            resuse the view iff there are no active RW transactions.            There is an inherent race here between purge and this            thread. Purge will skip views that are marked as closed.            Therefore we must set the low limit id after we reset the            closed status after the check. */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trx_is_autocommit_non_locking</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> view<span class="token operator">-</span><span class="token operator">></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                view<span class="token operator">-</span><span class="token operator">></span>m_closed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>view<span class="token operator">-</span><span class="token operator">></span>m_low_limit_id <span class="token operator">==</span> <span class="token function">trx_sys_get_max_trx_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    view<span class="token operator">-</span><span class="token operator">></span>m_closed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">mutex_enter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trx_sys<span class="token operator">-</span><span class="token operator">></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">UT_LIST_REMOVE</span><span class="token punctuation">(</span>m_views<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">mutex_enter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trx_sys<span class="token operator">-</span><span class="token operator">></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>            view <span class="token operator">=</span> <span class="token function">get_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span>trx<span class="token operator">-</span><span class="token operator">></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            view<span class="token operator">-</span><span class="token operator">></span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">UT_LIST_ADD_FIRST</span><span class="token punctuation">(</span>m_views<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_closed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ut_ad</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">trx_sys_mutex_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    Close a view created by the above function.    关闭一个视图    @para view        view allocated by trx_open.    @param own_mutex    true if caller owns trx_sys_t::mutex */</span>    <span class="token keyword">void</span> <span class="token function">view_close</span><span class="token punctuation">(</span>ReadView<span class="token operator">*</span><span class="token operator">&amp;</span> view<span class="token punctuation">,</span> <span class="token keyword">bool</span> own_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    Release a view that is inactive but not closed. Caller must own    the trx_sys_t::mutex.    释放一个视图    @param view        View to release */</span>    <span class="token keyword">void</span> <span class="token function">view_release</span><span class="token punctuation">(</span>ReadView<span class="token operator">*</span><span class="token operator">&amp;</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    判断一个视图是否处于活动和有效状态    @return true if the view is active and valid */</span>    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">is_view_active</span><span class="token punctuation">(</span>ReadView<span class="token operator">*</span> view<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ut_a</span><span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>ReadView<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">intptr_t</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**    Find a free view from the active list, if none found then allocate    a new view. This function will also attempt to move delete marked    views from the active list to the freed list.    获取一个活动的空闲视图    @return a view to use */</span>    <span class="token keyword">inline</span> ReadView<span class="token operator">*</span> <span class="token function">get_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token function">UT_LIST_BASE_NODE_T</span><span class="token punctuation">(</span>ReadView<span class="token punctuation">)</span> view_list_t<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Free views ready for reuse.     空闲可以被重用的视图列表*/</span>    view_list_t        m_free<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Active and closed views, the closed views will have the    creator trx id set to TRX_ID_MAX     活跃或者已经关闭的 Read View 的链表*/</span>    view_list_t        m_views<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4、RR在RC基础上解决不可重复读的问题"><a href="#9-4、RR在RC基础上解决不可重复读的问题" class="headerlink" title="9.4、RR在RC基础上解决不可重复读的问题"></a>9.4、RR在RC基础上解决不可重复读的问题</h3><p>图一：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302145710523.png" alt="image-20210302145710523"></p><p>图二：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302145621157.png" alt="image-20210302145621157"></p><ul><li>这里与上图的唯一区别仅仅是图1的事务B在事务A修改金额前快照读过一次金额数据，而图2的事务B在事务A修改金额前没有进行过快照读。</li></ul><p>正是<code>Read View</code>生成时机的不同，从而造成<code>RC,RR</code>级别下快照读的结果的不同</p><ul><li><p>在<code>RR</code>级别下的某个事务的对某条记录的第一次快照读会创建一个快照及<code>Read View</code>, 将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是<strong>同一个Read View</strong>，所以只要当前事务在其他事务提交更新之前使用过快照读，那么之后的快照读使用的都是同一个<code>Read View</code>，所以对之后的修改不可见；</p></li><li><p>即<code>RR</code>级别下，快照读生成<code>Read View</code>时，<code>Read View</code>会记录此时所有其他活动事务的快照，这些事务的修改对于当前事务都是不可见的。而早于<code>Read View</code>创建的事务所做的修改均是可见</p></li><li><p>而在<code>RC</code>级别下的事务中，每次快照读都会<strong>新生成一个快照和Read View</strong>, 这就是我们在RC级别下的事务中可以看到别的事务提交的更新的原因</p></li></ul><p><strong>测试结果</strong></p><p>1）在<code>MySQL</code>默认隔离级别<code>RR</code>条件下</p><p>图一测试结果：</p><p>事务1：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302152613559.png" alt="image-20210302152613559"></p><p>事务2：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302152657364.png" alt="image-20210302152657364"></p><p>图二测试结果：</p><p>事务1：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302153212820.png" alt="image-20210302153212820"></p><p>事务2：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302153242211.png" alt="image-20210302153242211"></p><p>2）隔离级别<code>RC</code>条件下</p><p>图一测试结果：</p><p>事务1：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302154022212.png" alt="image-20210302154022212"></p><p>事务2：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302154054642.png" alt="image-20210302154054642"></p><p>图二测试结果：</p><p>事务1：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302154312495.png" alt="image-20210302154312495"></p><p>事务2：</p><p><img src="https://zhangqu-oss.oss-cn-zhangjiakou.aliyuncs.com/img/image-20210302154350416.png" alt="image-20210302154350416"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> MVCC </tag>
            
            <tag> ReadView </tag>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/18/hello-world/"/>
      <url>2021/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
